name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.13'
  PACKAGE_NAME: 'ansys-geometry-core'
  DOCUMENTATION_CNAME: 'geometry.docs.pyansys.com'
  ANSRV_GEO_IMAGE: 'ghcr.io/ansys/geometry'
  ANSRV_GEO_IMAGE_DOCS_TAG: ghcr.io/ansys/geometry:core-linux-latest
  ANSRV_GEO_PORT: 700
  ANSRV_GEO_LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
  GEO_CONT_NAME: ans_geo
  RESET_IMAGE_CACHE: 5
  IS_WORKFLOW_RUNNING: True
  ARTIFACTORY_VERSION: v252

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  testing-windows:
    name: Testing and coverage (Windows)
    runs-on: [self-hosted, Windows, pygeometry-osmesa]
    continue-on-error: ${{ matrix.experimental }}
    env:
      SKIP_UNSTABLE: false
      PYVISTA_OFF_SCREEN: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - docker-image: "core-windows-latest"
            experimental: false

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        if: env.SKIP_UNSTABLE == 'false'

      - name: Set up Python
        if: env.SKIP_UNSTABLE == 'false'
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Set up headless display
        if: env.SKIP_UNSTABLE == 'false'
        uses: /RobPasMue/setup-headless-display-action@offscreen-mesa3d
        with:
          pyvista: false
          # install-mesa-offscreen: true

      - name: Create Python venv
        if: env.SKIP_UNSTABLE == 'false'
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1

      - name: Install packages for testing
        if: env.SKIP_UNSTABLE == 'false'
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install --upgrade build wheel
          pip install .[tests]

      - name: Login to GitHub Container Registry
        if: env.SKIP_UNSTABLE == 'false'
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Geometry service container (if needed)
        if: env.SKIP_UNSTABLE == 'false'
        run: docker pull ${{ env.ANSRV_GEO_IMAGE }}:${{ matrix.docker-image }}

      - name: Check location of self-hosted runner and define license server accordingly
        if: env.SKIP_UNSTABLE == 'false' && runner.name == 'pygeometry-ci-2'
        run:
          echo "ANSRV_GEO_LICENSE_SERVER=${{ secrets.INTERNAL_LICENSE_SERVER }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Stop any running containers
        run: |
          $dockerContainers = docker ps -a -q
          if (-not [string]::IsNullOrEmpty($dockerContainers)) {
              docker stop $dockerContainers
              docker rm $dockerContainers
          }

      - name: Start Geometry service and verify start
        if: env.SKIP_UNSTABLE == 'false'
        run: |
          .\.venv\Scripts\Activate.ps1
          docker run --detach --name ${{ env.GEO_CONT_NAME }} -e LICENSE_SERVER=${{ env.ANSRV_GEO_LICENSE_SERVER }} -p ${{ env.ANSRV_GEO_PORT }}:50051 ${{ env.ANSRV_GEO_IMAGE }}:${{ matrix.docker-image }}
          python -c "from ansys.geometry.core.connection.validate import validate; validate()"

      - name: Restore images cache
        if: env.SKIP_UNSTABLE == 'false'
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: .\tests\integration\image_cache
          key: pyvista-image-cache-${{ runner.name }}-v-${{ env.RESET_IMAGE_CACHE }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: pyvista-image-cache-${{ runner.name }}-v-${{ env.RESET_IMAGE_CACHE }}

      - name: Testing
        if: env.SKIP_UNSTABLE == 'false'
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest -v

      - name: Upload integration test logs
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: integration-test-logs-${{ matrix.docker-image }}
          path: tests/integration/logs
          retention-days: 7

      - name: Upload PyVista generated images (cache and results)
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: pytest-pyvista-images-${{ matrix.docker-image }}
          path: tests/integration/image_cache
          retention-days: 7

      - name: Upload Coverage Results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          include-hidden-files: true
          name: coverage-html-${{ matrix.docker-image }}
          path: .cov/html
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@ad3126e916f78f00edff4ed0317cf185271ccc2d # v5.4.2
        if: matrix.docker-image == 'core-windows-latest'
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: .cov/xml

      - name: Stop the Geometry service
        if: always()
        run: |
          if ( "${{ env.SKIP_UNSTABLE }}" -match 'false')
          {
            docker stop ${{ env.GEO_CONT_NAME }}
            docker logs ${{ env.GEO_CONT_NAME }}
            docker rm ${{ env.GEO_CONT_NAME }}
          }

      - name: Stop any remaining containers
        if: always()
        run: |
          $dockerContainers = docker ps -a -q
          if (-not [string]::IsNullOrEmpty($dockerContainers)) {
              docker stop $dockerContainers
              docker rm $dockerContainers
          }
