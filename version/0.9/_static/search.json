[
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface.html#trimmedsurface",
        "title": "TrimmedSurface",
        "section": "TrimmedSurface",
        "text": "Represents a trimmed surface.\nA trimmed surface is a surface that has a boundary. This boundary comes in the form of a\nbounding BoxUV.\nFace that the trimmed surface belongs to.\nUnderlying mathematical representation of the surface.\nTrimmedSurface\nTrimmedSurface\nFace\nSurface"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface.html#ansys.geometry.core.shapes.surfaces.trimmed_surface.TrimmedSurface",
        "title": "TrimmedSurface > TrimmedSurface > TrimmedSurface",
        "section": "TrimmedSurface > TrimmedSurface",
        "text": "class ansys.geometry.core.shapes.surfaces.trimmed_surface.TrimmedSurface(geometry: ansys.geometry.core.shapes.surfaces.surface.Surface, box_uv: ansys.geometry.core.shapes.box_uv.BoxUV)\n\nRepresents a trimmed surface.\n\nA trimmed surface is a surface that has a boundary. This boundary comes in the form of a\nbounding BoxUV.\n\nParameters\n\nface\n\nFace\n\nFace that the trimmed surface belongs to.\n\ngeometry\n\nSurface\n\nUnderlying mathematical representation of the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface.html#overview",
        "title": "TrimmedSurface > Overview",
        "section": "Overview",
        "text": "get_proportional_parameters\nConvert non-proportional parameters into proportional parameters.\nnormal\nProvide the normal to the surface.\nproject_point\nProject a point onto the surface and evaluate it at that location.\nevaluate_proportion\nEvaluate the surface at proportional u and v parameters.\ngeometry\nUnderlying mathematical surface.\nbox_uv\nBounding BoxUV of the surface.\nOverview\nget_proportional_parameters\nnormal\nproject_point\nevaluate_proportion\ngeometry\nbox_uv"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface.html#import-detail",
        "title": "TrimmedSurface > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface.html#property-detail",
        "title": "TrimmedSurface > Property detail",
        "section": "Property detail",
        "text": "Underlying mathematical surface.\nBounding BoxUV of the surface.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface.html#TrimmedSurface.geometry",
        "title": "TrimmedSurface > Property detail > geometry",
        "section": "Property detail > geometry",
        "text": "property TrimmedSurface.geometry: ansys.geometry.core.shapes.surfaces.surface.Surface\n\nUnderlying mathematical surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface.html#TrimmedSurface.box_uv",
        "title": "TrimmedSurface > Property detail > box_uv",
        "section": "Property detail > box_uv",
        "text": "property TrimmedSurface.box_uv: ansys.geometry.core.shapes.box_uv.BoxUV\n\nBounding BoxUV of the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface.html#method-detail",
        "title": "TrimmedSurface > Method detail",
        "section": "Method detail",
        "text": "Convert non-proportional parameters into proportional parameters.\nNon-proportional UV parameters.\nProportional (from 0-1) UV parameters.\nProvide the normal to the surface.\nFirst coordinate of the 2D representation of a surface in UV space.\nSecond coordinate of the 2D representation of a surface in UV space.\nUnit vector is normal to the surface at the given UV coordinates.\nProject a point onto the surface and evaluate it at that location.\nPoint to project onto the surface.\nResulting evaluation.\nEvaluate the surface at proportional u and v parameters.\nU parameter in the proportional range [0,1].\nV parameter in the proportional range [0,1].\nResulting surface evaluation.\nMethod detail\nParamUV\nParamUV\nReal\nReal\nUnitVector3D\nPoint3D\nSurfaceEvaluation\nReal\nReal\nSurfaceEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface.html#TrimmedSurface.get_proportional_parameters",
        "title": "TrimmedSurface > Method detail > get_proportional_parameters",
        "section": "Method detail > get_proportional_parameters",
        "text": "TrimmedSurface.get_proportional_parameters(param_uv: ansys.geometry.core.shapes.parameterization.ParamUV) -> ansys.geometry.core.shapes.parameterization.ParamUV\n\nConvert non-proportional parameters into proportional parameters.\n\nParameters\n\nparam_uv\n\nParamUV\n\nNon-proportional UV parameters.\n\nReturns\n\nParamUV\n\nProportional (from 0-1) UV parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface.html#TrimmedSurface.normal",
        "title": "TrimmedSurface > Method detail > normal",
        "section": "Method detail > normal",
        "text": "TrimmedSurface.normal(u: ansys.geometry.core.typing.Real, v: ansys.geometry.core.typing.Real) -> ansys.geometry.core.math.vector.UnitVector3D\n\nProvide the normal to the surface.\n\nParameters\n\nu\n\nReal\n\nFirst coordinate of the 2D representation of a surface in UV space.\n\nv\n\nReal\n\nSecond coordinate of the 2D representation of a surface in UV space.\n\nReturns\n\nUnitVector3D\n\nUnit vector is normal to the surface at the given UV coordinates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface.html#TrimmedSurface.project_point",
        "title": "TrimmedSurface > Method detail > project_point",
        "section": "Method detail > project_point",
        "text": "TrimmedSurface.project_point(point: ansys.geometry.core.math.point.Point3D) -> ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\n\nProject a point onto the surface and evaluate it at that location.\n\nParameters\n\npoint\n\nPoint3D\n\nPoint to project onto the surface.\n\nReturns\n\nSurfaceEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/TrimmedSurface.html#TrimmedSurface.evaluate_proportion",
        "title": "TrimmedSurface > Method detail > evaluate_proportion",
        "section": "Method detail > evaluate_proportion",
        "text": "TrimmedSurface.evaluate_proportion(u: ansys.geometry.core.typing.Real, v: ansys.geometry.core.typing.Real) -> ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\n\nEvaluate the surface at proportional u and v parameters.\n\nParameters\n\nu\n\nReal\n\nU parameter in the proportional range [0,1].\n\nv\n\nReal\n\nV parameter in the proportional range [0,1].\n\nReturns\n\nSurfaceEvaluation\n\nResulting surface evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/03_modeling/add_design_material",
        "href": "examples/03_modeling/add_design_material.html#modeling-single-body-with-material-assignment",
        "title": "Examples > Modeling: Single body with material assignment",
        "section": "Modeling: Single body with material assignment",
        "text": "In PyAnsys Geometry, a body represents solids or surfaces organized within the Design assembly. The current state of sketch, which is a client-side execution, can be used for the operations of the geometric design assembly.\nThe Geometry service provides data structures to create individual materials and their properties. These data structures are exposed through PyAnsys Geometry.\nThis example shows how to create a single body from a sketch by requesting its extrusion. It then shows how to assign a material to this body.\nModeling: Single body with material assignment\nDesign"
    },
    {
        "objectID": "examples/03_modeling/add_design_material",
        "href": "examples/03_modeling/add_design_material.html#perform-required-imports",
        "title": "Examples > Modeling: Single body with material assignment > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/03_modeling/add_design_material",
        "href": "examples/03_modeling/add_design_material.html#create-sketch",
        "title": "Examples > Modeling: Single body with material assignment > Create sketch",
        "section": "Create sketch",
        "text": "Create a Sketch instance and insert a circle with a radius of 10 millimeters in the default plane.\nCreate sketch\nSketch"
    },
    {
        "objectID": "examples/03_modeling/add_design_material",
        "href": "examples/03_modeling/add_design_material.html#initiate-design-on-server",
        "title": "Examples > Modeling: Single body with material assignment > Initiate design on server",
        "section": "Initiate design on server",
        "text": "Launch a modeling service session and initiate a design on the server.\nInitiate design on server"
    },
    {
        "objectID": "examples/03_modeling/add_design_material",
        "href": "examples/03_modeling/add_design_material.html#add-materials-to-design",
        "title": "Examples > Modeling: Single body with material assignment > Add materials to design",
        "section": "Add materials to design",
        "text": "Add materials and their properties to the design. Material properties can be added when creating the Material object or after its creation. This code adds material properties after creating the Material object.\nAdd materials to design\nMaterial\nMaterial"
    },
    {
        "objectID": "examples/03_modeling/add_design_material",
        "href": "examples/03_modeling/add_design_material.html#extrude-sketch-to-create-body",
        "title": "Examples > Modeling: Single body with material assignment > Extrude sketch to create body",
        "section": "Extrude sketch to create body",
        "text": "Extrude the sketch to create the body and then assign a material to it.\nExtrude sketch to create body"
    },
    {
        "objectID": "examples/03_modeling/add_design_material",
        "href": "examples/03_modeling/add_design_material.html#close-session",
        "title": "Examples > Modeling: Single body with material assignment > Close session",
        "section": "Close session",
        "text": "When you finish interacting with your modeling service, you should close the active server session. This frees resources wherever the service is running.\nClose the server session.\nClose session"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/MasterComponent",
        "href": "api/ansys/geometry/core/designer/part/MasterComponent.html#mastercomponent",
        "title": "MasterComponent",
        "section": "MasterComponent",
        "text": "Represents a part occurrence.\nUnique identifier for the transformed part.\nName of the transformed part.\nReference to the transformed part’s master part.\n4x4 transformation matrix from the master part.\nThis class should not be accessed by users. It holds the fundamental data of\nan assembly. Master components wrap parts by adding a transform matrix.\nMasterComponent\nMasterComponent\npython:str\npython:str\nPart\nMatrix44"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/MasterComponent",
        "href": "api/ansys/geometry/core/designer/part/MasterComponent.html#ansys.geometry.core.designer.part.MasterComponent",
        "title": "MasterComponent > MasterComponent > MasterComponent",
        "section": "MasterComponent > MasterComponent",
        "text": "class ansys.geometry.core.designer.part.MasterComponent(id: str, name: str, part: Part, transform: ansys.geometry.core.math.matrix.Matrix44 = IDENTITY_MATRIX44)\n\nRepresents a part occurrence.\n\nParameters\n\nid\n\npython:str\n\nUnique identifier for the transformed part.\n\nname\n\npython:str\n\nName of the transformed part.\n\npart\n\nPart\n\nReference to the transformed part’s master part.\n\ntransform\n\nMatrix44\n\n4x4 transformation matrix from the master part.\n\nNotes\n\nThis class should not be accessed by users. It holds the fundamental data of\nan assembly. Master components wrap parts by adding a transform matrix.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/MasterComponent",
        "href": "api/ansys/geometry/core/designer/part/MasterComponent.html#overview",
        "title": "MasterComponent > Overview",
        "section": "Overview",
        "text": "id\nID of the transformed part.\nname\nName of the transformed part.\noccurrences\nList of all occurrences of the component.\npart\nMaster part of the transformed part.\ntransform\n4x4 transformation matrix from the master part.\n__repr__\nRepresent the master component as a string.\nOverview\nid\nname\noccurrences\npart\ntransform\n__repr__"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/MasterComponent",
        "href": "api/ansys/geometry/core/designer/part/MasterComponent.html#import-detail",
        "title": "MasterComponent > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/MasterComponent",
        "href": "api/ansys/geometry/core/designer/part/MasterComponent.html#property-detail",
        "title": "MasterComponent > Property detail",
        "section": "Property detail",
        "text": "ID of the transformed part.\nName of the transformed part.\nList of all occurrences of the component.\nMaster part of the transformed part.\n4x4 transformation matrix from the master part.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/MasterComponent",
        "href": "api/ansys/geometry/core/designer/part/MasterComponent.html#MasterComponent.id",
        "title": "MasterComponent > Property detail > id",
        "section": "Property detail > id",
        "text": "property MasterComponent.id: str\n\nID of the transformed part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/MasterComponent",
        "href": "api/ansys/geometry/core/designer/part/MasterComponent.html#MasterComponent.name",
        "title": "MasterComponent > Property detail > name",
        "section": "Property detail > name",
        "text": "property MasterComponent.name: str\n\nName of the transformed part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/MasterComponent",
        "href": "api/ansys/geometry/core/designer/part/MasterComponent.html#MasterComponent.occurrences",
        "title": "MasterComponent > Property detail > occurrences",
        "section": "Property detail > occurrences",
        "text": "property MasterComponent.occurrences: list[ansys.geometry.core.designer.component.Component]\n\nList of all occurrences of the component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/MasterComponent",
        "href": "api/ansys/geometry/core/designer/part/MasterComponent.html#MasterComponent.part",
        "title": "MasterComponent > Property detail > part",
        "section": "Property detail > part",
        "text": "property MasterComponent.part: Part\n\nMaster part of the transformed part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/MasterComponent",
        "href": "api/ansys/geometry/core/designer/part/MasterComponent.html#MasterComponent.transform",
        "title": "MasterComponent > Property detail > transform",
        "section": "Property detail > transform",
        "text": "property MasterComponent.transform: ansys.geometry.core.math.matrix.Matrix44\n\n4x4 transformation matrix from the master part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/MasterComponent",
        "href": "api/ansys/geometry/core/designer/part/MasterComponent.html#method-detail",
        "title": "MasterComponent > Method detail",
        "section": "Method detail",
        "text": "Represent the master component as a string.\nMethod detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/MasterComponent",
        "href": "api/ansys/geometry/core/designer/part/MasterComponent.html#MasterComponent.__repr__",
        "title": "MasterComponent > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "MasterComponent.__repr__() -> str\n\nRepresent the master component as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/index",
        "href": "api/ansys/geometry/core/designer/edge/index.html#the-edgepy-module",
        "title": "The edge.py module",
        "section": "The edge.py module",
        "text": "The edge.py module\nedge.py"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/index",
        "href": "api/ansys/geometry/core/designer/edge/index.html#summary",
        "title": "The edge.py module > Summary",
        "section": "Summary",
        "text": "Edge\nRepresents a single edge of a body within the design assembly.\nCurveType\nProvides values for the curve types supported.\nSummary\nEdge\nCurveType"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/index",
        "href": "api/ansys/geometry/core/designer/edge/index.html#description",
        "title": "The edge.py module > Description",
        "section": "Description",
        "text": "Module for managing an edge.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/index",
        "href": "api/ansys/geometry/core/misc/options/index.html#the-optionspy-module",
        "title": "The options.py module",
        "section": "The options.py module",
        "text": "The options.py module\noptions.py"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/index",
        "href": "api/ansys/geometry/core/misc/options/index.html#summary",
        "title": "The options.py module > Summary",
        "section": "Summary",
        "text": "ImportOptions\nImport options when opening a file.\nSummary\nImportOptions"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/index",
        "href": "api/ansys/geometry/core/misc/options/index.html#description",
        "title": "The options.py module > Description",
        "section": "Description",
        "text": "Provides various option classes.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#point3d",
        "title": "Point3D",
        "section": "Point3D",
        "text": "Bases: numpy.ndarray, ansys.geometry.core.misc.units.PhysicalQuantity\nProvides geometry primitive representation for a 3D point.\nDirection arguments, either as a numpy.ndarray class\nor as a RealSequence.\nUnits for defining 3D point values. If not specified, the default unit is\nDEFAULT_UNITS.LENGTH.\nPoint3D\nPoint3D\nnumpy.ndarray\nansys.geometry.core.misc.units.PhysicalQuantity\nndarray\nRealSequence\nDEFAULT_POINT3D_VALUES\nnumpy.ndarray\nRealSequence\nUnit\npython:None\nDEFAULT_UNITS.LENGTH\nDEFAULT_UNITS.LENGTH"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#ansys.geometry.core.math.point.Point3D",
        "title": "Point3D > Point3D > Point3D",
        "section": "Point3D > Point3D",
        "text": "class ansys.geometry.core.math.point.Point3D(input: numpy.ndarray | ansys.geometry.core.typing.RealSequence = DEFAULT_POINT3D_VALUES, unit: pint.Unit | None = None)\n\nBases: numpy.ndarray, ansys.geometry.core.misc.units.PhysicalQuantity\n\nProvides geometry primitive representation for a 3D point.\n\nParameters\n\ninput\n\nndarray | RealSequence, default: DEFAULT_POINT3D_VALUES\n\nDirection arguments, either as a numpy.ndarray class\nor as a RealSequence.\n\nunit\n\nUnit | python:None, default: DEFAULT_UNITS.LENGTH\n\nUnits for defining 3D point values. If not specified, the default unit is\nDEFAULT_UNITS.LENGTH.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#overview",
        "title": "Point3D > Overview",
        "section": "Overview",
        "text": "unit\nGet the unit of the object.\nbase_unit\nGet the base unit of the object.\ntransform\nTransform the 3D point with a transformation matrix.\nx\nX plane component value.\ny\nY plane component value.\nz\nZ plane component value.\nflat\n__eq__\nEquals operator for the Point3D class.\n__ne__\nNot equals operator for the Point3D class.\n__add__\nAdd operation for the Point3D class.\n__sub__\nSubtraction operation for the Point3D class.\nOverview\nunit\nbase_unit\ntransform\nx\ny\nz\nflat\n__eq__\nPoint3D\n__ne__\nPoint3D\n__add__\nPoint3D\n__sub__\nPoint3D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#import-detail",
        "title": "Point3D > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#property-detail",
        "title": "Point3D > Property detail",
        "section": "Property detail",
        "text": "X plane component value.\nY plane component value.\nZ plane component value.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#Point3D.x",
        "title": "Point3D > Property detail > x",
        "section": "Property detail > x",
        "text": "property Point3D.x: pint.Quantity\n\nX plane component value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#Point3D.y",
        "title": "Point3D > Property detail > y",
        "section": "Property detail > y",
        "text": "property Point3D.y: pint.Quantity\n\nY plane component value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#Point3D.z",
        "title": "Point3D > Property detail > z",
        "section": "Property detail > z",
        "text": "property Point3D.z: pint.Quantity\n\nZ plane component value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#attribute-detail",
        "title": "Point3D > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#Point3D.flat",
        "title": "Point3D > Attribute detail > flat",
        "section": "Attribute detail > flat",
        "text": "Point3D.flat\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#method-detail",
        "title": "Point3D > Method detail",
        "section": "Method detail",
        "text": "Equals operator for the Point3D class.\nNot equals operator for the Point3D class.\nAdd operation for the Point3D class.\nSubtraction operation for the Point3D class.\nGet the unit of the object.\nGet the base unit of the object.\nTransform the 3D point with a transformation matrix.\n4x4 transformation matrix to apply to the point.\nNew 3D point that is the transformed copy of the original 3D point after applying\nthe transformation matrix.\nTransform the Point3D object by applying the specified 4x4\ntransformation matrix and return a new Point3D object representing the\ntransformed point.\nMethod detail\nPoint3D\nPoint3D\nPoint3D\nPoint3D\nMatrix44\nPoint3D\nPoint3D\nPoint3D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#Point3D.__eq__",
        "title": "Point3D > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Point3D.__eq__(other: Point3D) -> bool\n\nEquals operator for the Point3D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#Point3D.__ne__",
        "title": "Point3D > Method detail > __ne__",
        "section": "Method detail > __ne__",
        "text": "Point3D.__ne__(other: Point3D) -> bool\n\nNot equals operator for the Point3D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#Point3D.__add__",
        "title": "Point3D > Method detail > __add__",
        "section": "Method detail > __add__",
        "text": "Point3D.__add__(other: Point3D | ansys.geometry.core.math.vector.Vector3D) -> Point3D\n\nAdd operation for the Point3D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#Point3D.__sub__",
        "title": "Point3D > Method detail > __sub__",
        "section": "Method detail > __sub__",
        "text": "Point3D.__sub__(other: Point3D | ansys.geometry.core.math.vector.Vector3D) -> Point3D\n\nSubtraction operation for the Point3D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#Point3D.unit",
        "title": "Point3D > Method detail > unit",
        "section": "Method detail > unit",
        "text": "Point3D.unit() -> pint.Unit\n\nGet the unit of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#Point3D.base_unit",
        "title": "Point3D > Method detail > base_unit",
        "section": "Method detail > base_unit",
        "text": "Point3D.base_unit() -> pint.Unit\n\nGet the base unit of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point3D",
        "href": "api/ansys/geometry/core/math/point/Point3D.html#Point3D.transform",
        "title": "Point3D > Method detail > transform",
        "section": "Method detail > transform",
        "text": "Point3D.transform(matrix: ansys.geometry.core.math.matrix.Matrix44) -> Point3D\n\nTransform the 3D point with a transformation matrix.\n\nParameters\n\nmatrix\n\nMatrix44\n\n4x4 transformation matrix to apply to the point.\n\nReturns\n\nPoint3D\n\nNew 3D point that is the transformed copy of the original 3D point after applying\nthe transformation matrix.\n\nNotes\n\nTransform the Point3D object by applying the specified 4x4\ntransformation matrix and return a new Point3D object representing the\ntransformed point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#cone",
        "title": "Cone",
        "section": "Cone",
        "text": "Bases: ansys.geometry.core.shapes.surfaces.surface.Surface\nProvides 3D cone representation.\nOrigin of the cone.\nRadius of the cone.\nHalf angle of the apex, determining the upward angle.\nX-axis direction.\nZ-axis direction.\nCone\nCone\nansys.geometry.core.shapes.surfaces.surface.Surface\nndarray\nRealSequence\nPoint3D\nQuantity\nDistance\nReal\nQuantity\nAngle\nReal\nndarray\nRealSequence\nUnitVector3D\nVector3D\nndarray\nRealSequence\nUnitVector3D\nVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#ansys.geometry.core.shapes.surfaces.cone.Cone",
        "title": "Cone > Cone > Cone",
        "section": "Cone > Cone",
        "text": "class ansys.geometry.core.shapes.surfaces.cone.Cone(origin: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D, radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, half_angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real, reference: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_X, axis: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_Z)\n\nBases: ansys.geometry.core.shapes.surfaces.surface.Surface\n\nProvides 3D cone representation.\n\nParameters\n\norigin\n\nndarray | RealSequence | Point3D\n\nOrigin of the cone.\n\nradius\n\nQuantity | Distance | Real\n\nRadius of the cone.\n\nhalf_angle\n\nQuantity | Angle | Real\n\nHalf angle of the apex, determining the upward angle.\n\nreference\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nX-axis direction.\n\naxis\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nZ-axis direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#overview",
        "title": "Cone > Overview",
        "section": "Overview",
        "text": "contains_param\nCheck a parameter is within the parametric range of the surface.\ncontains_point\nCheck a point is contained by the surface.\ntransformed_copy\nCreate a transformed copy of the cone from a transformation matrix.\nmirrored_copy\nCreate a mirrored copy of the cone along the y-axis.\nevaluate\nEvaluate the cone at given parameters.\nproject_point\nProject a point onto the cone and evaluate the cone.\nparameterization\nParameterize the cone surface as a tuple (U and V respectively).\norigin\nOrigin of the cone.\nradius\nRadius of the cone.\nhalf_angle\nHalf angle of the apex.\ndir_x\nX-direction of the cone.\ndir_y\nY-direction of the cone.\ndir_z\nZ-direction of the cone.\nheight\nHeight of the cone.\nsurface_area\nSurface area of the cone.\nvolume\nVolume of the cone.\napex\nApex point of the cone.\napex_param\nApex parameter of the cone.\n__eq__\nEquals operator for the Cone class.\nOverview\ncontains_param\ncontains_point\ntransformed_copy\nmirrored_copy\nevaluate\nproject_point\nparameterization\norigin\nradius\nhalf_angle\ndir_x\ndir_y\ndir_z\nheight\nsurface_area\nvolume\napex\napex_param\n__eq__\nCone"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#import-detail",
        "title": "Cone > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#property-detail",
        "title": "Cone > Property detail",
        "section": "Property detail",
        "text": "Origin of the cone.\nRadius of the cone.\nHalf angle of the apex.\nX-direction of the cone.\nY-direction of the cone.\nZ-direction of the cone.\nHeight of the cone.\nSurface area of the cone.\nVolume of the cone.\nApex point of the cone.\nApex parameter of the cone.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.origin",
        "title": "Cone > Property detail > origin",
        "section": "Property detail > origin",
        "text": "property Cone.origin: ansys.geometry.core.math.point.Point3D\n\nOrigin of the cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.radius",
        "title": "Cone > Property detail > radius",
        "section": "Property detail > radius",
        "text": "property Cone.radius: pint.Quantity\n\nRadius of the cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.half_angle",
        "title": "Cone > Property detail > half_angle",
        "section": "Property detail > half_angle",
        "text": "property Cone.half_angle: pint.Quantity\n\nHalf angle of the apex.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.dir_x",
        "title": "Cone > Property detail > dir_x",
        "section": "Property detail > dir_x",
        "text": "property Cone.dir_x: ansys.geometry.core.math.vector.UnitVector3D\n\nX-direction of the cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.dir_y",
        "title": "Cone > Property detail > dir_y",
        "section": "Property detail > dir_y",
        "text": "property Cone.dir_y: ansys.geometry.core.math.vector.UnitVector3D\n\nY-direction of the cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.dir_z",
        "title": "Cone > Property detail > dir_z",
        "section": "Property detail > dir_z",
        "text": "property Cone.dir_z: ansys.geometry.core.math.vector.UnitVector3D\n\nZ-direction of the cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.height",
        "title": "Cone > Property detail > height",
        "section": "Property detail > height",
        "text": "property Cone.height: pint.Quantity\n\nHeight of the cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.surface_area",
        "title": "Cone > Property detail > surface_area",
        "section": "Property detail > surface_area",
        "text": "property Cone.surface_area: pint.Quantity\n\nSurface area of the cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.volume",
        "title": "Cone > Property detail > volume",
        "section": "Property detail > volume",
        "text": "property Cone.volume: pint.Quantity\n\nVolume of the cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.apex",
        "title": "Cone > Property detail > apex",
        "section": "Property detail > apex",
        "text": "property Cone.apex: ansys.geometry.core.math.point.Point3D\n\nApex point of the cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.apex_param",
        "title": "Cone > Property detail > apex_param",
        "section": "Property detail > apex_param",
        "text": "property Cone.apex_param: ansys.geometry.core.typing.Real\n\nApex parameter of the cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#method-detail",
        "title": "Cone > Method detail",
        "section": "Method detail",
        "text": "Create a transformed copy of the cone from a transformation matrix.\n4x4 transformation matrix to apply to the cone.\nNew cone that is the transformed copy of the original cone.\nCreate a mirrored copy of the cone along the y-axis.\nNew cone that is a mirrored copy of the original cone.\nEquals operator for the Cone class.\nEvaluate the cone at given parameters.\nParameters (u,v) to evaluate the cone at.\nResulting evaluation.\nProject a point onto the cone and evaluate the cone.\nPoint to project onto the cone.\nResulting evaluation.\nParameterize the cone surface as a tuple (U and V respectively).\nThe U parameter specifies the clockwise angle around the axis (right-hand\ncorkscrew law), with a zero parameter at dir_x and a period of 2*pi.\nThe V parameter specifies the distance along the axis, with a zero parameter at\nthe XY plane of the cone.\nInformation about how a cone’s u and v parameters are parameterized, respectively.\nCheck a parameter is within the parametric range of the surface.\nCheck a point is contained by the surface.\nThe point can either lie within the surface or on its boundary.\nMethod detail\nMatrix44\nCone\nCone\nCone\nParamUV\nConeEvaluation\nPoint3D\nConeEvaluation\ndir_x\npython:tuple\nParameterization\nParameterization"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.transformed_copy",
        "title": "Cone > Method detail > transformed_copy",
        "section": "Method detail > transformed_copy",
        "text": "Cone.transformed_copy(matrix: ansys.geometry.core.math.matrix.Matrix44) -> Cone\n\nCreate a transformed copy of the cone from a transformation matrix.\n\nParameters\n\nmatrix\n\nMatrix44\n\n4x4 transformation matrix to apply to the cone.\n\nReturns\n\nCone\n\nNew cone that is the transformed copy of the original cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.mirrored_copy",
        "title": "Cone > Method detail > mirrored_copy",
        "section": "Method detail > mirrored_copy",
        "text": "Cone.mirrored_copy() -> Cone\n\nCreate a mirrored copy of the cone along the y-axis.\n\nReturns\n\nCone\n\nNew cone that is a mirrored copy of the original cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.__eq__",
        "title": "Cone > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Cone.__eq__(other: Cone) -> bool\n\nEquals operator for the Cone class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.evaluate",
        "title": "Cone > Method detail > evaluate",
        "section": "Method detail > evaluate",
        "text": "Cone.evaluate(parameter: ansys.geometry.core.shapes.parameterization.ParamUV) -> ConeEvaluation\n\nEvaluate the cone at given parameters.\n\nParameters\n\nparameter\n\nParamUV\n\nParameters (u,v) to evaluate the cone at.\n\nReturns\n\nConeEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.project_point",
        "title": "Cone > Method detail > project_point",
        "section": "Method detail > project_point",
        "text": "Cone.project_point(point: ansys.geometry.core.math.point.Point3D) -> ConeEvaluation\n\nProject a point onto the cone and evaluate the cone.\n\nParameters\n\npoint\n\nPoint3D\n\nPoint to project onto the cone.\n\nReturns\n\nConeEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.parameterization",
        "title": "Cone > Method detail > parameterization",
        "section": "Method detail > parameterization",
        "text": "Cone.parameterization() -> tuple[ansys.geometry.core.shapes.parameterization.Parameterization, ansys.geometry.core.shapes.parameterization.Parameterization]\n\nParameterize the cone surface as a tuple (U and V respectively).\n\nThe U parameter specifies the clockwise angle around the axis (right-hand\ncorkscrew law), with a zero parameter at dir_x and a period of 2*pi.\n\nThe V parameter specifies the distance along the axis, with a zero parameter at\nthe XY plane of the cone.\n\nReturns\n\npython:tuple[Parameterization, Parameterization]\n\nInformation about how a cone’s u and v parameters are parameterized, respectively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.contains_param",
        "title": "Cone > Method detail > contains_param",
        "section": "Method detail > contains_param",
        "text": "abstractmethod Cone.contains_param(param_uv: ansys.geometry.core.shapes.parameterization.ParamUV) -> bool\n\nCheck a parameter is within the parametric range of the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/Cone",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/Cone.html#Cone.contains_point",
        "title": "Cone > Method detail > contains_point",
        "section": "Method detail > contains_point",
        "text": "abstractmethod Cone.contains_point(point: ansys.geometry.core.math.point.Point3D) -> bool\n\nCheck a point is contained by the surface.\n\nThe point can either lie within the surface or on its boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/index",
        "href": "api/ansys/geometry/core/sketch/polygon/index.html#the-polygonpy-module",
        "title": "The polygon.py module",
        "section": "The polygon.py module",
        "text": "The polygon.py module\npolygon.py"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/index",
        "href": "api/ansys/geometry/core/sketch/polygon/index.html#summary",
        "title": "The polygon.py module > Summary",
        "section": "Summary",
        "text": "Polygon\nProvides for modeling regular polygons.\nSummary\nPolygon"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/index",
        "href": "api/ansys/geometry/core/sketch/polygon/index.html#description",
        "title": "The polygon.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a polygon.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas.html#smallfaceproblemareas",
        "title": "SmallFaceProblemAreas",
        "section": "SmallFaceProblemAreas",
        "text": "Bases: ProblemArea\nRepresents a small face problem area with a unique identifier and associated faces.\nServer-defined ID for the problem area.\nActive supporting geometry service instance for design modeling.\nList of edges associated with the design.\nSmallFaceProblemAreas\nSmallFaceProblemAreas\nProblemArea\npython:str\nGrpcClient\npython:list\nFace"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas.html#ansys.geometry.core.tools.problem_areas.SmallFaceProblemAreas",
        "title": "SmallFaceProblemAreas > SmallFaceProblemAreas > SmallFaceProblemAreas",
        "section": "SmallFaceProblemAreas > SmallFaceProblemAreas",
        "text": "class ansys.geometry.core.tools.problem_areas.SmallFaceProblemAreas(id: str, grpc_client: ansys.geometry.core.connection.GrpcClient, faces: list[ansys.geometry.core.designer.face.Face])\n\nBases: ProblemArea\n\nRepresents a small face problem area with a unique identifier and associated faces.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the problem area.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting geometry service instance for design modeling.\n\nfaces\n\npython:list[Face]\n\nList of edges associated with the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas.html#overview",
        "title": "SmallFaceProblemAreas > Overview",
        "section": "Overview",
        "text": "fix\nFix the problem area.\nfaces\nThe list of faces connected to this problem area.\nOverview\nfix\nfaces"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas.html#import-detail",
        "title": "SmallFaceProblemAreas > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas.html#property-detail",
        "title": "SmallFaceProblemAreas > Property detail",
        "section": "Property detail",
        "text": "The list of faces connected to this problem area.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas.html#SmallFaceProblemAreas.faces",
        "title": "SmallFaceProblemAreas > Property detail > faces",
        "section": "Property detail > faces",
        "text": "property SmallFaceProblemAreas.faces: list[ansys.geometry.core.designer.face.Face]\n\nThe list of faces connected to this problem area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas.html#method-detail",
        "title": "SmallFaceProblemAreas > Method detail",
        "section": "Method detail",
        "text": "Fix the problem area.\nMessage containing created and/or modified bodies.\nMethod detail\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SmallFaceProblemAreas.html#SmallFaceProblemAreas.fix",
        "title": "SmallFaceProblemAreas > Method detail > fix",
        "section": "Method detail > fix",
        "text": "SmallFaceProblemAreas.fix() -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFix the problem area.\n\nReturns\n\nmessage: RepairToolMessage\n\nMessage containing created and/or modified bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/defaults/index",
        "href": "api/ansys/geometry/core/connection/defaults/index.html#the-defaultspy-module",
        "title": "The defaults.py module",
        "section": "The defaults.py module",
        "text": "The defaults.py module\ndefaults.py"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/defaults/index",
        "href": "api/ansys/geometry/core/connection/defaults/index.html#summary",
        "title": "The defaults.py module > Summary",
        "section": "Summary",
        "text": "DEFAULT_HOST\nDefault for the HOST name.\nDEFAULT_PORT\nDefault for the HOST port.\nMAX_MESSAGE_LENGTH\nDefault for the gRPC maximum message length.\nGEOMETRY_SERVICE_DOCKER_IMAGE\nDefault for the Geometry service Docker image location.\nDEFAULT_PIM_CONFIG\nDefault for the PIM configuration when running PIM Light.\nSummary\nDEFAULT_HOST\nDEFAULT_PORT\nMAX_MESSAGE_LENGTH\nGEOMETRY_SERVICE_DOCKER_IMAGE\nDEFAULT_PIM_CONFIG"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/defaults/index",
        "href": "api/ansys/geometry/core/connection/defaults/index.html#description",
        "title": "The defaults.py module > Description",
        "section": "Description",
        "text": "Module providing default connection parameters.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/defaults/index",
        "href": "api/ansys/geometry/core/connection/defaults/index.html#module-detail",
        "title": "The defaults.py module > Module detail",
        "section": "Module detail",
        "text": "Default for the HOST name.\nBy default, PyAnsys Geometry searches for the environment variable ANSRV_GEO_HOST,\nand if this variable does not exist, PyAnsys Geometry uses 127.0.0.1 as the host.\nDefault for the HOST port.\nBy default, PyAnsys Geometry searches for the environment variable ANSRV_GEO_PORT,\nand if this variable does not exist, PyAnsys Geometry uses 50051 as the port.\nDefault for the gRPC maximum message length.\nBy default, PyAnsys Geometry searches for the environment variable\nPYGEOMETRY_MAX_MESSAGE_LENGTH, and if this variable does not exist,\nit uses 256Mb as the maximum message length.\nDefault for the Geometry service Docker image location.\nTag is dependent on what OS service is requested.\nDefault for the PIM configuration when running PIM Light.\nThis parameter is only to be used when PIM Light is being run.\nModule detail\nANSRV_GEO_HOST\n127.0.0.1\nANSRV_GEO_PORT\n50051\nPYGEOMETRY_MAX_MESSAGE_LENGTH\n256Mb"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/defaults/index",
        "href": "api/ansys/geometry/core/connection/defaults/index.html#defaults.DEFAULT_HOST",
        "title": "The defaults.py module > Module detail > DEFAULT_HOST",
        "section": "Module detail > DEFAULT_HOST",
        "text": "defaults.DEFAULT_HOST\n\nDefault for the HOST name.\n\nBy default, PyAnsys Geometry searches for the environment variable ANSRV_GEO_HOST,\nand if this variable does not exist, PyAnsys Geometry uses 127.0.0.1 as the host.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/defaults/index",
        "href": "api/ansys/geometry/core/connection/defaults/index.html#defaults.DEFAULT_PORT",
        "title": "The defaults.py module > Module detail > DEFAULT_PORT",
        "section": "Module detail > DEFAULT_PORT",
        "text": "defaults.DEFAULT_PORT: int\n\nDefault for the HOST port.\n\nBy default, PyAnsys Geometry searches for the environment variable ANSRV_GEO_PORT,\nand if this variable does not exist, PyAnsys Geometry uses 50051 as the port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/defaults/index",
        "href": "api/ansys/geometry/core/connection/defaults/index.html#defaults.MAX_MESSAGE_LENGTH",
        "title": "The defaults.py module > Module detail > MAX_MESSAGE_LENGTH",
        "section": "Module detail > MAX_MESSAGE_LENGTH",
        "text": "defaults.MAX_MESSAGE_LENGTH\n\nDefault for the gRPC maximum message length.\n\nBy default, PyAnsys Geometry searches for the environment variable\nPYGEOMETRY_MAX_MESSAGE_LENGTH, and if this variable does not exist,\nit uses 256Mb as the maximum message length.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/defaults/index",
        "href": "api/ansys/geometry/core/connection/defaults/index.html#defaults.GEOMETRY_SERVICE_DOCKER_IMAGE",
        "title": "The defaults.py module > Module detail > GEOMETRY_SERVICE_DOCKER_IMAGE",
        "section": "Module detail > GEOMETRY_SERVICE_DOCKER_IMAGE",
        "text": "defaults.GEOMETRY_SERVICE_DOCKER_IMAGE = 'ghcr.io/ansys/geometry'\n\nDefault for the Geometry service Docker image location.\n\nTag is dependent on what OS service is requested.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/defaults/index",
        "href": "api/ansys/geometry/core/connection/defaults/index.html#defaults.DEFAULT_PIM_CONFIG",
        "title": "The defaults.py module > Module detail > DEFAULT_PIM_CONFIG",
        "section": "Module detail > DEFAULT_PIM_CONFIG",
        "text": "defaults.DEFAULT_PIM_CONFIG\n\nDefault for the PIM configuration when running PIM Light.\n\nThis parameter is only to be used when PIM Light is being run.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/faq",
        "href": "getting_started/faq.html#frequently-asked-questions",
        "title": "Frequently asked questions",
        "section": "Frequently asked questions",
        "text": "Frequently asked questions"
    },
    {
        "objectID": "getting_started/faq",
        "href": "getting_started/faq.html#what-is-pyansys",
        "title": "Frequently asked questions > What is PyAnsys?",
        "section": "What is PyAnsys?",
        "text": "PyAnsys is a set of open source Python libraries that allow you to interface\nwith Ansys Electronics Desktop (AEDT), Ansys Mechanical, Ansys Parametric\nDesign Language (APDL), Ansys Fluent, and other Ansys products.\nYou can use PyAnsys libraries within a Python environment of your choice\nin conjunction with external Python libraries.\nWhat is PyAnsys?"
    },
    {
        "objectID": "getting_started/faq",
        "href": "getting_started/faq.html#how-is-the-ansys-geometry-service-installed",
        "title": "Frequently asked questions > How is the Ansys Geometry Service installed?",
        "section": "How is the Ansys Geometry Service installed?",
        "text": "This question is answered in https://github.com/ansys/pyansys-geometry/issues/1022 and\nhttps://github.com/ansys/pyansys-geometry/discussions/883\nThe Ansys Geometry service is available as a standalone service and it is installed\nthrough the Ansys unified installer or the automated installer. Both are available\nfor download from the Ansys Customer Portal.\nWhen using the unified or automated installer, it is necessary to pass in the\n-geometryservice flag to install it.\nOverall, the command to install the Ansys Geometry service with the unified installer is:\nYou can verify that the installation was successful by checking whether the\nproduct has been installed on your file directory. If you are using the default\ninstallation directory, the product is installed in the following directory:\nWhere vXXX is the Ansys version that you have installed.\nHow is the Ansys Geometry Service installed?\n-geometryservice\nvXXX"
    },
    {
        "objectID": "getting_started/faq",
        "href": "getting_started/faq.html#what-ansys-license-is-needed-to-run-the-geometry-service",
        "title": "Frequently asked questions > What Ansys license is needed to run the Geometry service?",
        "section": "What Ansys license is needed to run the Geometry service?",
        "text": "This question is answered in https://github.com/ansys/pyansys-geometry/discussions/754.\nThe Ansys Geometry service is a headless service developed on top of the\nmodeling libraries for Discovery and SpaceClaim.\nBoth in its standalone and Docker versions, the Ansys Geometry service\nrequires a Discovery Modeling license to run.\nTo run PyAnsys Geometry against other backends, such as Discovery\nor SpaceClaim, users must have an Ansys license that allows them to run these\nAnsys products.\nThe Discovery Modeling license is one of these licenses, but there are others,\nsuch as the Ansys Mechanical Enterprise license, that also allow users to run\nthese Ansys products. However, the Geometry service is only compatible with\nthe Discovery Modeling license.\nWhat Ansys license is needed to run the Geometry service?"
    },
    {
        "objectID": "getting_started/faq",
        "href": "getting_started/faq.html#how-to-build-the-docker-image-for-the-ansys-geometry-service",
        "title": "Frequently asked questions > How to build the Docker image for the Ansys Geometry service?",
        "section": "How to build the Docker image for the Ansys Geometry service?",
        "text": "This question is answered in https://github.com/ansys/pyansys-geometry/discussions/883\nTo build your own Docker image for the Ansys Geometry service, users should follow\nthe instructions provided in ref_build_windows_docker_image_from_ansys_installation. The\nresulting image is a Windows-based Docker image that contains the Ansys Geometry\nservice.\nGo to Getting started\nHow to build the Docker image for the Ansys Geometry service?"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints",
        "href": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints.html#showdesignpoints",
        "title": "ShowDesignPoints",
        "section": "ShowDesignPoints",
        "text": "Bases: ansys.tools.visualization_interface.backends.pyvista.widgets.PlotterWidget\nProvides the a button to hide/show DesignPoint objects in the plotter.\nProvides the plotter to add the button to.\nShowDesignPoints\nShowDesignPoints\nansys.tools.visualization_interface.backends.pyvista.widgets.PlotterWidget\nGeometryPlotter"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints",
        "href": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints.html#ansys.geometry.core.plotting.widgets.show_design_point.ShowDesignPoints",
        "title": "ShowDesignPoints > ShowDesignPoints > ShowDesignPoints",
        "section": "ShowDesignPoints > ShowDesignPoints",
        "text": "class ansys.geometry.core.plotting.widgets.show_design_point.ShowDesignPoints(plotter_helper: ansys.tools.visualization_interface.backends.pyvista.PyVistaBackend)\n\nBases: ansys.tools.visualization_interface.backends.pyvista.widgets.PlotterWidget\n\nProvides the a button to hide/show DesignPoint objects in the plotter.\n\nParameters\n\nplotter_helper\n\nGeometryPlotter\n\nProvides the plotter to add the button to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints",
        "href": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints.html#overview",
        "title": "ShowDesignPoints > Overview",
        "section": "Overview",
        "text": "callback\nRemove or add the DesignPoint actors upon click.\nupdate\nDefine the configuration and representation of the button widget.\nplotter_helper\nOverview\ncallback\nupdate\nplotter_helper"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints",
        "href": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints.html#import-detail",
        "title": "ShowDesignPoints > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints",
        "href": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints.html#attribute-detail",
        "title": "ShowDesignPoints > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints",
        "href": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints.html#ShowDesignPoints.plotter_helper",
        "title": "ShowDesignPoints > Attribute detail > plotter_helper",
        "section": "Attribute detail > plotter_helper",
        "text": "ShowDesignPoints.plotter_helper\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints",
        "href": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints.html#method-detail",
        "title": "ShowDesignPoints > Method detail",
        "section": "Method detail",
        "text": "Remove or add the DesignPoint actors upon click.\nState of the button, which is inherited from PyVista. The value is True\nif the button is active.\nDefine the configuration and representation of the button widget.\nMethod detail\nTrue"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints",
        "href": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints.html#ShowDesignPoints.callback",
        "title": "ShowDesignPoints > Method detail > callback",
        "section": "Method detail > callback",
        "text": "ShowDesignPoints.callback(state: bool) -> None\n\nRemove or add the DesignPoint actors upon click.\n\nParameters\n\nstate\n\nbool\n\nState of the button, which is inherited from PyVista. The value is True\nif the button is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints",
        "href": "api/ansys/geometry/core/plotting/widgets/show_design_point/ShowDesignPoints.html#ShowDesignPoints.update",
        "title": "ShowDesignPoints > Method detail > update",
        "section": "Method detail > update",
        "text": "ShowDesignPoints.update() -> None\n\nDefine the configuration and representation of the button widget.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#torusevaluation",
        "title": "TorusEvaluation",
        "section": "TorusEvaluation",
        "text": "Bases: ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\nEvaluate the torus`` at given parameters.\nTorust to evaluate.\nParameters (u, v) to evaluate the torus at.\nTorusEvaluation\nTorusEvaluation\nansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#ansys.geometry.core.shapes.surfaces.torus.TorusEvaluation",
        "title": "TorusEvaluation > TorusEvaluation > TorusEvaluation",
        "section": "TorusEvaluation > TorusEvaluation",
        "text": "class ansys.geometry.core.shapes.surfaces.torus.TorusEvaluation(torus: Torus, parameter: ansys.geometry.core.shapes.parameterization.ParamUV)\n\nBases: ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\n\nEvaluate the torus`` at given parameters.\n\nParameters\n\nTorus: ~ansys.geometry.core.shapes.surfaces.torus.Torus\n\nTorust to evaluate.\n\nparameter: ParamUV\n\nParameters (u, v) to evaluate the torus at.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#overview",
        "title": "TorusEvaluation > Overview",
        "section": "Overview",
        "text": "torus\nTorus being evaluated.\nparameter\nParameter that the evaluation is based upon.\nposition\nPosition of the evaluation.\nnormal\nNormal to the surface.\nu_derivative\nFirst derivative with respect to the U parameter.\nv_derivative\nFirst derivative with respect to the V parameter.\nuu_derivative\nSecond derivative with respect to the U parameter.\nuv_derivative\nSecond derivative with respect to the U and V parameters.\nvv_derivative\nSecond derivative with respect to the V parameter.\ncurvature\nCurvature of the torus.\nmin_curvature\nMinimum curvature of the torus.\nmin_curvature_direction\nMinimum curvature direction.\nmax_curvature\nMaximum curvature of the torus.\nmax_curvature_direction\nMaximum curvature direction.\ncache\nOverview\ntorus\nparameter\nposition\nnormal\nu_derivative\nv_derivative\nuu_derivative\nuv_derivative\nvv_derivative\ncurvature\nmin_curvature\nmin_curvature_direction\nmax_curvature\nmax_curvature_direction\ncache"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#import-detail",
        "title": "TorusEvaluation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#property-detail",
        "title": "TorusEvaluation > Property detail",
        "section": "Property detail",
        "text": "Torus being evaluated.\nParameter that the evaluation is based upon.\nPosition of the evaluation.\nPoint that lies on the torus at this evaluation.\nNormal to the surface.\nNormal unit vector to the torus at this evaluation.\nFirst derivative with respect to the U parameter.\nFirst derivative with respect to the U parameter.\nFirst derivative with respect to the V parameter.\nFirst derivative with respect to the V parameter.\nSecond derivative with respect to the U parameter.\nSecond derivative with respect to the U parameter.\nSecond derivative with respect to the U and V parameters.\nSecond derivative with respect to the U and V parameters.\nSecond derivative with respect to the V parameter.\nSecond derivative with respect to the V parameter.\nCurvature of the torus.\nMinimum and maximum curvature value and direction, respectively.\nMinimum curvature of the torus.\nMinimum curvature of the torus.\nMinimum curvature direction.\nMinimum curvature direction.\nMaximum curvature of the torus.\nMaximum curvature of the torus.\nMaximum curvature direction.\nMaximum curvature direction.\nProperty detail\nPoint3D\nUnitVector3D\nVector3D\nVector3D\nVector3D\nVector3D\nVector3D\npython:tuple\nReal\nVector3D\nReal\nVector3D\nReal\nUnitVector3D\nReal\nUnitVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.torus",
        "title": "TorusEvaluation > Property detail > torus",
        "section": "Property detail > torus",
        "text": "property TorusEvaluation.torus: Torus\n\nTorus being evaluated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.parameter",
        "title": "TorusEvaluation > Property detail > parameter",
        "section": "Property detail > parameter",
        "text": "property TorusEvaluation.parameter: ansys.geometry.core.shapes.parameterization.ParamUV\n\nParameter that the evaluation is based upon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.position",
        "title": "TorusEvaluation > Property detail > position",
        "section": "Property detail > position",
        "text": "property TorusEvaluation.position: ansys.geometry.core.math.point.Point3D\n\nPosition of the evaluation.\n\nReturns\n\nPoint3D\n\nPoint that lies on the torus at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.normal",
        "title": "TorusEvaluation > Property detail > normal",
        "section": "Property detail > normal",
        "text": "property TorusEvaluation.normal: ansys.geometry.core.math.vector.UnitVector3D\n\nNormal to the surface.\n\nReturns\n\nUnitVector3D\n\nNormal unit vector to the torus at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.u_derivative",
        "title": "TorusEvaluation > Property detail > u_derivative",
        "section": "Property detail > u_derivative",
        "text": "property TorusEvaluation.u_derivative: ansys.geometry.core.math.vector.Vector3D\n\nFirst derivative with respect to the U parameter.\n\nReturns\n\nVector3D\n\nFirst derivative with respect to the U parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.v_derivative",
        "title": "TorusEvaluation > Property detail > v_derivative",
        "section": "Property detail > v_derivative",
        "text": "property TorusEvaluation.v_derivative: ansys.geometry.core.math.vector.Vector3D\n\nFirst derivative with respect to the V parameter.\n\nReturns\n\nVector3D\n\nFirst derivative with respect to the V parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.uu_derivative",
        "title": "TorusEvaluation > Property detail > uu_derivative",
        "section": "Property detail > uu_derivative",
        "text": "property TorusEvaluation.uu_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to the U parameter.\n\nReturns\n\nVector3D\n\nSecond derivative with respect to the U parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.uv_derivative",
        "title": "TorusEvaluation > Property detail > uv_derivative",
        "section": "Property detail > uv_derivative",
        "text": "property TorusEvaluation.uv_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to the U and V parameters.\n\nReturns\n\nVector3D\n\nSecond derivative with respect to the U and V parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.vv_derivative",
        "title": "TorusEvaluation > Property detail > vv_derivative",
        "section": "Property detail > vv_derivative",
        "text": "property TorusEvaluation.vv_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to the V parameter.\n\nReturns\n\nVector3D\n\nSecond derivative with respect to the V parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.curvature",
        "title": "TorusEvaluation > Property detail > curvature",
        "section": "Property detail > curvature",
        "text": "property TorusEvaluation.curvature: tuple[ansys.geometry.core.typing.Real, ansys.geometry.core.math.vector.Vector3D, ansys.geometry.core.typing.Real, ansys.geometry.core.math.vector.Vector3D]\n\nCurvature of the torus.\n\nReturns\n\npython:tuple[Real, Vector3D, Real, Vector3D]\n\nMinimum and maximum curvature value and direction, respectively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.min_curvature",
        "title": "TorusEvaluation > Property detail > min_curvature",
        "section": "Property detail > min_curvature",
        "text": "property TorusEvaluation.min_curvature: ansys.geometry.core.typing.Real\n\nMinimum curvature of the torus.\n\nReturns\n\nReal\n\nMinimum curvature of the torus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.min_curvature_direction",
        "title": "TorusEvaluation > Property detail > min_curvature_direction",
        "section": "Property detail > min_curvature_direction",
        "text": "property TorusEvaluation.min_curvature_direction: ansys.geometry.core.math.vector.UnitVector3D\n\nMinimum curvature direction.\n\nReturns\n\nUnitVector3D\n\nMinimum curvature direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.max_curvature",
        "title": "TorusEvaluation > Property detail > max_curvature",
        "section": "Property detail > max_curvature",
        "text": "property TorusEvaluation.max_curvature: ansys.geometry.core.typing.Real\n\nMaximum curvature of the torus.\n\nReturns\n\nReal\n\nMaximum curvature of the torus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.max_curvature_direction",
        "title": "TorusEvaluation > Property detail > max_curvature_direction",
        "section": "Property detail > max_curvature_direction",
        "text": "property TorusEvaluation.max_curvature_direction: ansys.geometry.core.math.vector.UnitVector3D\n\nMaximum curvature direction.\n\nReturns\n\nUnitVector3D\n\nMaximum curvature direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#attribute-detail",
        "title": "TorusEvaluation > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/TorusEvaluation.html#TorusEvaluation.cache",
        "title": "TorusEvaluation > Attribute detail > cache",
        "section": "Attribute detail > cache",
        "text": "TorusEvaluation.cache\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamProfile.html#beamprofile",
        "title": "BeamProfile",
        "section": "BeamProfile",
        "text": "Represents a single beam profile organized within the design assembly.\nThis profile synchronizes to a design within a supporting Geometry service instance.\nServer-defined ID for the beam profile.\nUser-defined label for the beam profile.\nBeamProfile objects are expected to be created from the Design object.\nThis means that you are not expected to instantiate your own BeamProfile\nobject. You should call the specific Design API for the BeamProfile desired.\nBeamProfile\nBeamProfile\npython:str\npython:str\nBeamProfile\nDesign\nBeamProfile\nDesign\nBeamProfile"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamProfile.html#ansys.geometry.core.designer.beam.BeamProfile",
        "title": "BeamProfile > BeamProfile > BeamProfile",
        "section": "BeamProfile > BeamProfile",
        "text": "class ansys.geometry.core.designer.beam.BeamProfile(id: str, name: str)\n\nRepresents a single beam profile organized within the design assembly.\n\nThis profile synchronizes to a design within a supporting Geometry service instance.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the beam profile.\n\nname\n\npython:str\n\nUser-defined label for the beam profile.\n\nNotes\n\nBeamProfile objects are expected to be created from the Design object.\nThis means that you are not expected to instantiate your own BeamProfile\nobject. You should call the specific Design API for the BeamProfile desired.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamProfile.html#overview",
        "title": "BeamProfile > Overview",
        "section": "Overview",
        "text": "id\nID of the beam profile.\nname\nName of the beam profile.\nOverview\nid\nname"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamProfile.html#import-detail",
        "title": "BeamProfile > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamProfile.html#property-detail",
        "title": "BeamProfile > Property detail",
        "section": "Property detail",
        "text": "ID of the beam profile.\nName of the beam profile.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamProfile.html#BeamProfile.id",
        "title": "BeamProfile > Property detail > id",
        "section": "Property detail > id",
        "text": "property BeamProfile.id: str\n\nID of the beam profile.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamProfile.html#BeamProfile.name",
        "title": "BeamProfile > Property detail > name",
        "section": "Property detail > name",
        "text": "property BeamProfile.name: str\n\nName of the beam profile.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Parameterization",
        "href": "api/ansys/geometry/core/shapes/parameterization/Parameterization.html#parameterization",
        "title": "Parameterization",
        "section": "Parameterization",
        "text": "Parameterization class describes the parameters of a specific geometry.\nForm of the parameterization.\nType of the parameterization.\nInterval of the parameterization.\nParameterization\nParameterization\nParamForm\nParamType\nInterval"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Parameterization",
        "href": "api/ansys/geometry/core/shapes/parameterization/Parameterization.html#ansys.geometry.core.shapes.parameterization.Parameterization",
        "title": "Parameterization > Parameterization > Parameterization",
        "section": "Parameterization > Parameterization",
        "text": "class ansys.geometry.core.shapes.parameterization.Parameterization(form: ParamForm, type: ParamType, interval: Interval)\n\nParameterization class describes the parameters of a specific geometry.\n\nParameters\n\nform\n\nParamForm\n\nForm of the parameterization.\n\ntype\n\nParamType\n\nType of the parameterization.\n\ninterval\n\nInterval\n\nInterval of the parameterization.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Parameterization",
        "href": "api/ansys/geometry/core/shapes/parameterization/Parameterization.html#overview",
        "title": "Parameterization > Overview",
        "section": "Overview",
        "text": "form\nThe form of the parameterization.\ntype\nThe type of the parameterization.\ninterval\nThe interval of the parameterization.\n__repr__\nRepresent the Parameterization as a string.\nOverview\nform\ntype\ninterval\n__repr__\nParameterization"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Parameterization",
        "href": "api/ansys/geometry/core/shapes/parameterization/Parameterization.html#import-detail",
        "title": "Parameterization > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Parameterization",
        "href": "api/ansys/geometry/core/shapes/parameterization/Parameterization.html#property-detail",
        "title": "Parameterization > Property detail",
        "section": "Property detail",
        "text": "The form of the parameterization.\nThe type of the parameterization.\nThe interval of the parameterization.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Parameterization",
        "href": "api/ansys/geometry/core/shapes/parameterization/Parameterization.html#Parameterization.form",
        "title": "Parameterization > Property detail > form",
        "section": "Property detail > form",
        "text": "property Parameterization.form: ParamForm\n\nThe form of the parameterization.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Parameterization",
        "href": "api/ansys/geometry/core/shapes/parameterization/Parameterization.html#Parameterization.type",
        "title": "Parameterization > Property detail > type",
        "section": "Property detail > type",
        "text": "property Parameterization.type: ParamType\n\nThe type of the parameterization.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Parameterization",
        "href": "api/ansys/geometry/core/shapes/parameterization/Parameterization.html#Parameterization.interval",
        "title": "Parameterization > Property detail > interval",
        "section": "Property detail > interval",
        "text": "property Parameterization.interval: Interval\n\nThe interval of the parameterization.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Parameterization",
        "href": "api/ansys/geometry/core/shapes/parameterization/Parameterization.html#method-detail",
        "title": "Parameterization > Method detail",
        "section": "Method detail",
        "text": "Represent the Parameterization as a string.\nMethod detail\nParameterization"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Parameterization",
        "href": "api/ansys/geometry/core/shapes/parameterization/Parameterization.html#Parameterization.__repr__",
        "title": "Parameterization > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Parameterization.__repr__() -> str\n\nRepresent the Parameterization as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/index",
        "href": "api/ansys/geometry/core/shapes/index.html#the-shapes-package",
        "title": "The shapes package",
        "section": "The shapes package",
        "text": "The shapes package\nshapes"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/index",
        "href": "api/ansys/geometry/core/shapes/index.html#summary",
        "title": "The shapes package > Summary",
        "section": "Summary",
        "text": "curves\nProvides the PyAnsys Geometry curves subpackage.\nsurfaces\nProvides the PyAnsys Geometry surface subpackage.\nbox_uv\nProvides the BoxUV class.\nparameterization\nProvides the parametrization-related classes.\nSummary\ncurves\ncurves\nsurfaces\nsurface\nbox_uv\nBoxUV\nparameterization"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/index",
        "href": "api/ansys/geometry/core/shapes/index.html#description",
        "title": "The shapes package > Description",
        "section": "Description",
        "text": "Provides the PyAnsys Geometry geometry subpackage.\nDescription\ngeometry"
    },
    {
        "objectID": "getting_started/docker/windows_container",
        "href": "getting_started/docker/windows_container.html#windows-docker-container",
        "title": "Windows Docker container",
        "section": "Windows Docker container",
        "text": "Windows Docker container\nDocker for Windows containers\nBuild or install the Geometry service image\nGitHub Container Registry\nBuild the Geometry service Windows container\nPrerequisites\nBuild from available Ansys installation\nBuild the Docker image from available binaries\nLaunch the Geometry service\nEnvironment variables\nGeometry service launcher\nConnect to the Geometry service\nWindows Docker container\nContents"
    },
    {
        "objectID": "getting_started/docker/windows_container",
        "href": "getting_started/docker/windows_container.html#docker-for-windows-containers",
        "title": "Windows Docker container > Docker for Windows containers",
        "section": "Docker for Windows containers",
        "text": "To run the Windows Docker container for the Geometry service, ensure that you follow\nthese steps when installing Docker:\nInstall Docker Desktop.\nWhen prompted for Use WSL2 instead of Hyper-V (recommended), clear this checkbox.\nHyper-V must be enabled to run Windows Docker containers.\nOnce the installation finishes, restart your machine and start Docker Desktop.\nOn the Windows taskbar, go to the Show hidden icons section, right-click in the Docker\nDesktop app, and select Switch to Windows containers.\nNow that your Docker engine supports running Windows Docker containers, you can build or install\nthe PyAnsys Geometry image.\nDocker for Windows containers"
    },
    {
        "objectID": "getting_started/docker/windows_container",
        "href": "getting_started/docker/windows_container.html#build-or-install-the-geometry-service-image",
        "title": "Windows Docker container > Build or install the Geometry service image",
        "section": "Build or install the Geometry service image",
        "text": "There are two options for installing the PyAnsys Geometry image:\nDownload it from the GitHub Container Registry.\nBuild the Geometry service Windows container.\nBuild or install the Geometry service image"
    },
    {
        "objectID": "getting_started/docker/windows_container",
        "href": "getting_started/docker/windows_container.html#github-container-registry",
        "title": "Windows Docker container > GitHub Container Registry",
        "section": "GitHub Container Registry",
        "text": "This option is only available for users with write access to the repository or\nwho are members of the Ansys organization.\nOnce Docker is installed on your machine, follow these steps to download the Windows Docker\ncontainer for the Geometry service and install this image.\nUsing your GitHub credentials, download the Docker image from the PyAnsys Geometry repository\non GitHub.\nUse a GitHub personal access token with permission for reading packages to authorize Docker\nto access this repository. For more information, see Managing your personal access tokens\nin the GitHub documentation.\nSave the token to a file with this command:\nAuthorize Docker to access the repository and run the commands for your OS. To see these commands, click the tab for your OS.\nPull the Geometry service locally using Docker with a command like this:\nGitHub Container Registry"
    },
    {
        "objectID": "getting_started/docker/windows_container",
        "href": "getting_started/docker/windows_container.html#build-the-geometry-service-windows-container",
        "title": "Windows Docker container > Build the Geometry service Windows container",
        "section": "Build the Geometry service Windows container",
        "text": "The Geometry service Docker containers can be easily built by following\nthese steps.\nInside the repository’s docker folder, there are two Dockerfile files:\nlinux/Dockerfile: Builds the Linux-based Docker image.\nwindows/Dockerfile: Builds the Windows-based Docker image.\nDepending on the characteristics of the Docker engine installed on your\nmachine, either one or the other has to be built.\nThis guide focuses on building the windows/Dockerfile image.\nThere are two build modes:\nBuild from available Ansys installation: This mode builds the Docker image\nusing the Ansys installation available in the machine where the Docker image\nis being built.\nBuild from available binaries: This mode builds the Docker image using\nthe binaries available in the ansys/pyansys-geometry-binaries repository.\nIf you do not have access to this repository, you can only use the first mode.\nBuild the Geometry service Windows container\ndocker\nDockerfile\nlinux/Dockerfile\nwindows/Dockerfile\nwindows/Dockerfile"
    },
    {
        "objectID": "getting_started/docker/windows_container",
        "href": "getting_started/docker/windows_container.html#prerequisites",
        "title": "Windows Docker container > Prerequisites",
        "section": "Prerequisites",
        "text": "Ensure that Docker is installed in your machine.\nIf you do not have Docker available, see\nDocker for Windows containers.\nPrerequisites"
    },
    {
        "objectID": "getting_started/docker/windows_container",
        "href": "getting_started/docker/windows_container.html#build-from-available-ansys-installation",
        "title": "Windows Docker container > Build from available Ansys installation",
        "section": "Build from available Ansys installation",
        "text": "To build your own image based on your own Ansys installation, follow these instructions:\nDownload the Python Docker build script.\nExecute the script with the following command (no specific location needed):\nCheck that the image has been created successfully. You should see output similar\nto this:\nBuild from available Ansys installation"
    },
    {
        "objectID": "getting_started/docker/windows_container",
        "href": "getting_started/docker/windows_container.html#build-the-docker-image-from-available-binaries",
        "title": "Windows Docker container > Build the Docker image from available binaries",
        "section": "Build the Docker image from available binaries",
        "text": "Prior to building your image, follow these steps:\nDownload the latest Windows Dockerfile.\nDownload the latest release artifacts for the Windows\nDocker container (ZIP file) for your version.\nOnly users with access to https://github.com/ansys/pyansys-geometry-binaries can download these binaries.\nMove this ZIP file to the location of the Windows Dockerfile previously downloaded.\nTo build your image, follow these instructions:\nNavigate to the folder where the ZIP file and Dockerfile are located.\nRun this Docker command:\nCheck that the image has been created successfully. You should see output similar\nto this:\nBuild the Docker image from available binaries"
    },
    {
        "objectID": "getting_started/docker/windows_container",
        "href": "getting_started/docker/windows_container.html#launch-the-geometry-service",
        "title": "Windows Docker container > Launch the Geometry service",
        "section": "Launch the Geometry service",
        "text": "There are methods for launching the Geometry service:\nYou can use the PyAnsys Geometry launcher.\nYou can manually launch the Geometry service.\nLaunch the Geometry service"
    },
    {
        "objectID": "getting_started/docker/windows_container",
        "href": "getting_started/docker/windows_container.html#environment-variables",
        "title": "Windows Docker container > Environment variables",
        "section": "Environment variables",
        "text": "The Geometry service requires this mandatory environment variable for its use:\nLICENSE_SERVER: License server (IP address or DNS) that the Geometry service is to\nconnect to. For example, 127.0.0.1.\nYou can also specify other optional environment variables:\nENABLE_TRACE: Whether to set up the trace level for debugging purposes. The default\nis 0, in which case the trace level is not set up. Options are 1 and 0.\nLOG_LEVEL: Sets the Geometry service logging level. The default is 2, in which case\nthe logging level is INFO.\nHere are some terms to keep in mind:\nhost: Machine that hosts the Geometry service. It is typically on localhost, but if\nyou are deploying the service on a remote machine, you must pass in this host machine’s\nIP address when connecting. By default, PyAnsys Geometry assumes it is on localhost.\nport: Port that exposes the Geometry service on the host machine. Its\nvalue is assumed to be 50051, but users can deploy the service on preferred ports.\nPrior to using the PyAnsys Geometry launcher to launch the Geometry service, you must define\ngeneral environment variables required for your OS. You do not need to define these\nenvironment variables prior to manually launching the Geometry service.\nDefine the following general environment variables prior to using the PyAnsys Geometry\nlauncher. Click the tab for your OS to see the appropriate commands.\nWhen running a Windows Docker container, certain high-value ports might be restricted\nfrom its use. This means that the port exposed by the container has to be set\nto lower values. You should change the value of ANSRV_GEO_PORT\nto use a port such as 700, instead of 50051.\nYou do not need to define general environment variables prior to manually launching\nthe Geometry service. They are directly passed to the Docker container itself.\nEnvironment variables\nLICENSE_SERVER\n127.0.0.1\nENABLE_TRACE\n0\n1\n0\nLOG_LEVEL\n2\nINFO\nlocalhost\nlocalhost\n50051\nANSRV_GEO_PORT\n700\n50051"
    },
    {
        "objectID": "getting_started/docker/windows_container",
        "href": "getting_started/docker/windows_container.html#geometry-service-launcher",
        "title": "Windows Docker container > Geometry service launcher",
        "section": "Geometry service launcher",
        "text": "As mentioned earlier, you can launch the Geometry service locally in two different ways.\nTo see the commands for each method, click the following tabs.\nThis method directly launches the Geometry service and\nprovides a Modeler object.\nThe launch_modeler() method launches the Geometry service under the default\nconditions. For more configurability, use the launch_docker_modeler() method.\nThis method requires that you manually launch the Geometry service. Remember to pass\nin the different environment variables that are needed. Afterwards, see the next section\nto understand how to connect to this service instance from PyAnsys Geometry.\nWhen running a Windows Docker container, certain high-value ports might be restricted\nfrom its use. This means that the port exposed by the container has to be set\nto lower values. You should change the value of -p 50051:50051\nto use a port such as -p 700:50051.\nGeometry service launcher\nModeler\nlaunch_modeler()\nlaunch_docker_modeler()\n-p 50051:50051\n-p 700:50051"
    },
    {
        "objectID": "getting_started/docker/windows_container",
        "href": "getting_started/docker/windows_container.html#connect-to-the-geometry-service",
        "title": "Windows Docker container > Connect to the Geometry service",
        "section": "Connect to the Geometry service",
        "text": "After the Geometry service is launched, connect to it with these commands:\nBy default, the Modeler instance connects to 127.0.0.1 (\"localhost\") on\nport 50051. You can change this by modifying the host and port\nparameters of the Modeler object, but note that you must also modify\nyour docker run command by changing the <HOST-PORT>-50051 argument.\nThe following tabs show the commands that set the environment variables and Modeler\nfunction.\nWhen running a Windows Docker container, certain high-value ports might be restricted\nfrom its use. This means that the port exposed by the container has to be set\nto lower values. You should change the value of ANSRV_GEO_PORT\nto use a port such as 700, instead of 50051.\nGo to Docker containers\nGo to Getting started\nConnect to the Geometry service\nModeler\n127.0.0.1\n\"localhost\"\n50051\nhost\nport\nModeler\ndocker run\n<HOST-PORT>-50051\nModeler\nANSRV_GEO_PORT\n700\n50051"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#locationuv",
        "title": "LocationUV",
        "section": "LocationUV",
        "text": "Bases: enum.Enum\nProvides the enumeration for indicating locations for BoxUV.\nLocationUV\nLocationUV\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#ansys.geometry.core.shapes.box_uv.LocationUV",
        "title": "LocationUV > LocationUV > LocationUV",
        "section": "LocationUV > LocationUV",
        "text": "class ansys.geometry.core.shapes.box_uv.LocationUV(*args, **kwds)\n\nBases: enum.Enum\n\nProvides the enumeration for indicating locations for BoxUV.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#overview",
        "title": "LocationUV > Overview",
        "section": "Overview",
        "text": "TopLeft\nTopCenter\nTopRight\nBottomLeft\nBottomCenter\nBottomRight\nLeftCenter\nRightCenter\nCenter\nOverview\nTopLeft\nTopCenter\nTopRight\nBottomLeft\nBottomCenter\nBottomRight\nLeftCenter\nRightCenter\nCenter"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#import-detail",
        "title": "LocationUV > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#attribute-detail",
        "title": "LocationUV > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#LocationUV.TopLeft",
        "title": "LocationUV > Attribute detail > TopLeft",
        "section": "Attribute detail > TopLeft",
        "text": "LocationUV.TopLeft = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#LocationUV.TopCenter",
        "title": "LocationUV > Attribute detail > TopCenter",
        "section": "Attribute detail > TopCenter",
        "text": "LocationUV.TopCenter = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#LocationUV.TopRight",
        "title": "LocationUV > Attribute detail > TopRight",
        "section": "Attribute detail > TopRight",
        "text": "LocationUV.TopRight = 3\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#LocationUV.BottomLeft",
        "title": "LocationUV > Attribute detail > BottomLeft",
        "section": "Attribute detail > BottomLeft",
        "text": "LocationUV.BottomLeft = 4\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#LocationUV.BottomCenter",
        "title": "LocationUV > Attribute detail > BottomCenter",
        "section": "Attribute detail > BottomCenter",
        "text": "LocationUV.BottomCenter = 5\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#LocationUV.BottomRight",
        "title": "LocationUV > Attribute detail > BottomRight",
        "section": "Attribute detail > BottomRight",
        "text": "LocationUV.BottomRight = 6\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#LocationUV.LeftCenter",
        "title": "LocationUV > Attribute detail > LeftCenter",
        "section": "Attribute detail > LeftCenter",
        "text": "LocationUV.LeftCenter = 7\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#LocationUV.RightCenter",
        "title": "LocationUV > Attribute detail > RightCenter",
        "section": "Attribute detail > RightCenter",
        "text": "LocationUV.RightCenter = 8\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/LocationUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/LocationUV.html#LocationUV.Center",
        "title": "LocationUV > Attribute detail > Center",
        "section": "Attribute detail > Center",
        "text": "LocationUV.Center = 9\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#sphereevaluation",
        "title": "SphereEvaluation",
        "section": "SphereEvaluation",
        "text": "Bases: ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\nEvaluate a sphere at given parameters.\nSphere to evaluate.\nParameters (u, v) to evaluate the sphere at.\nSphereEvaluation\nSphereEvaluation\nansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#ansys.geometry.core.shapes.surfaces.sphere.SphereEvaluation",
        "title": "SphereEvaluation > SphereEvaluation > SphereEvaluation",
        "section": "SphereEvaluation > SphereEvaluation",
        "text": "class ansys.geometry.core.shapes.surfaces.sphere.SphereEvaluation(sphere: Sphere, parameter: ansys.geometry.core.shapes.parameterization.ParamUV)\n\nBases: ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\n\nEvaluate a sphere at given parameters.\n\nParameters\n\nsphere: ~ansys.geometry.core.shapes.surfaces.sphere.Sphere\n\nSphere to evaluate.\n\nparameter: ParamUV\n\nParameters (u, v) to evaluate the sphere at.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#overview",
        "title": "SphereEvaluation > Overview",
        "section": "Overview",
        "text": "sphere\nSphere being evaluated.\nparameter\nParameter that the evaluation is based upon.\nposition\nPosition of the evaluation.\nnormal\nThe normal to the surface.\nu_derivative\nFirst derivative with respect to the U parameter.\nv_derivative\nFirst derivative with respect to the V parameter.\nuu_derivative\nSecond derivative with respect to the U parameter.\nuv_derivative\nSecond derivative with respect to the U and V parameters.\nvv_derivative\nSecond derivative with respect to the V parameter.\nmin_curvature\nMinimum curvature of the sphere.\nmin_curvature_direction\nMinimum curvature direction.\nmax_curvature\nMaximum curvature of the sphere.\nmax_curvature_direction\nMaximum curvature direction.\nOverview\nsphere\nparameter\nposition\nnormal\nu_derivative\nv_derivative\nuu_derivative\nuv_derivative\nvv_derivative\nmin_curvature\nmin_curvature_direction\nmax_curvature\nmax_curvature_direction"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#import-detail",
        "title": "SphereEvaluation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#property-detail",
        "title": "SphereEvaluation > Property detail",
        "section": "Property detail",
        "text": "Sphere being evaluated.\nParameter that the evaluation is based upon.\nPosition of the evaluation.\nPoint that lies on the sphere at this evaluation.\nThe normal to the surface.\nNormal unit vector to the sphere at this evaluation.\nFirst derivative with respect to the U parameter.\nFirst derivative with respect to the U parameter.\nFirst derivative with respect to the V parameter.\nFirst derivative with respect to the V parameter.\nSecond derivative with respect to the U parameter.\nSecond derivative with respect to the U parameter.\nSecond derivative with respect to the U and V parameters.\nThe second derivative with respect to the U and V parameters.\nSecond derivative with respect to the V parameter.\nThe second derivative with respect to the V parameter.\nMinimum curvature of the sphere.\nMinimum curvature of the sphere.\nMinimum curvature direction.\nMinimum curvature direction.\nMaximum curvature of the sphere.\nMaximum curvature of the sphere.\nMaximum curvature direction.\nMaximum curvature direction.\nProperty detail\nPoint3D\nUnitVector3D\nVector3D\nVector3D\nVector3D\nVector3D\nVector3D\nReal\nUnitVector3D\nReal\nUnitVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#SphereEvaluation.sphere",
        "title": "SphereEvaluation > Property detail > sphere",
        "section": "Property detail > sphere",
        "text": "property SphereEvaluation.sphere: Sphere\n\nSphere being evaluated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#SphereEvaluation.parameter",
        "title": "SphereEvaluation > Property detail > parameter",
        "section": "Property detail > parameter",
        "text": "property SphereEvaluation.parameter: ansys.geometry.core.shapes.parameterization.ParamUV\n\nParameter that the evaluation is based upon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#SphereEvaluation.position",
        "title": "SphereEvaluation > Property detail > position",
        "section": "Property detail > position",
        "text": "property SphereEvaluation.position: ansys.geometry.core.math.point.Point3D\n\nPosition of the evaluation.\n\nReturns\n\nPoint3D\n\nPoint that lies on the sphere at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#SphereEvaluation.normal",
        "title": "SphereEvaluation > Property detail > normal",
        "section": "Property detail > normal",
        "text": "property SphereEvaluation.normal: ansys.geometry.core.math.vector.UnitVector3D\n\nThe normal to the surface.\n\nReturns\n\nUnitVector3D\n\nNormal unit vector to the sphere at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#SphereEvaluation.u_derivative",
        "title": "SphereEvaluation > Property detail > u_derivative",
        "section": "Property detail > u_derivative",
        "text": "property SphereEvaluation.u_derivative: ansys.geometry.core.math.vector.Vector3D\n\nFirst derivative with respect to the U parameter.\n\nReturns\n\nVector3D\n\nFirst derivative with respect to the U parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#SphereEvaluation.v_derivative",
        "title": "SphereEvaluation > Property detail > v_derivative",
        "section": "Property detail > v_derivative",
        "text": "property SphereEvaluation.v_derivative: ansys.geometry.core.math.vector.Vector3D\n\nFirst derivative with respect to the V parameter.\n\nReturns\n\nVector3D\n\nFirst derivative with respect to the V parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#SphereEvaluation.uu_derivative",
        "title": "SphereEvaluation > Property detail > uu_derivative",
        "section": "Property detail > uu_derivative",
        "text": "property SphereEvaluation.uu_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to the U parameter.\n\nReturns\n\nVector3D\n\nSecond derivative with respect to the U parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#SphereEvaluation.uv_derivative",
        "title": "SphereEvaluation > Property detail > uv_derivative",
        "section": "Property detail > uv_derivative",
        "text": "property SphereEvaluation.uv_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to the U and V parameters.\n\nReturns\n\nVector3D\n\nThe second derivative with respect to the U and V parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#SphereEvaluation.vv_derivative",
        "title": "SphereEvaluation > Property detail > vv_derivative",
        "section": "Property detail > vv_derivative",
        "text": "property SphereEvaluation.vv_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to the V parameter.\n\nReturns\n\nVector3D\n\nThe second derivative with respect to the V parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#SphereEvaluation.min_curvature",
        "title": "SphereEvaluation > Property detail > min_curvature",
        "section": "Property detail > min_curvature",
        "text": "property SphereEvaluation.min_curvature: ansys.geometry.core.typing.Real\n\nMinimum curvature of the sphere.\n\nReturns\n\nReal\n\nMinimum curvature of the sphere.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#SphereEvaluation.min_curvature_direction",
        "title": "SphereEvaluation > Property detail > min_curvature_direction",
        "section": "Property detail > min_curvature_direction",
        "text": "property SphereEvaluation.min_curvature_direction: ansys.geometry.core.math.vector.UnitVector3D\n\nMinimum curvature direction.\n\nReturns\n\nUnitVector3D\n\nMinimum curvature direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#SphereEvaluation.max_curvature",
        "title": "SphereEvaluation > Property detail > max_curvature",
        "section": "Property detail > max_curvature",
        "text": "property SphereEvaluation.max_curvature: ansys.geometry.core.typing.Real\n\nMaximum curvature of the sphere.\n\nReturns\n\nReal\n\nMaximum curvature of the sphere.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/SphereEvaluation.html#SphereEvaluation.max_curvature_direction",
        "title": "SphereEvaluation > Property detail > max_curvature_direction",
        "section": "Property detail > max_curvature_direction",
        "text": "property SphereEvaluation.max_curvature_direction: ansys.geometry.core.math.vector.UnitVector3D\n\nMaximum curvature direction.\n\nReturns\n\nUnitVector3D\n\nMaximum curvature direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/index.html#the-cylinderpy-module",
        "title": "The cylinder.py module",
        "section": "The cylinder.py module",
        "text": "The cylinder.py module\ncylinder.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/index.html#summary",
        "title": "The cylinder.py module > Summary",
        "section": "Summary",
        "text": "Cylinder\nProvides 3D cylinder representation.\nCylinderEvaluation\nProvides evaluation of a cylinder at given parameters.\nSummary\nCylinder\nCylinderEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/index.html#description",
        "title": "The cylinder.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a cylinder.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/Gap",
        "href": "api/ansys/geometry/core/tools/measurement_tools/Gap.html#gap",
        "title": "Gap",
        "section": "Gap",
        "text": "Represents a gap between two bodies.\nDistance between two sides of the gap.\nGap\nGap\nDistance"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/Gap",
        "href": "api/ansys/geometry/core/tools/measurement_tools/Gap.html#ansys.geometry.core.tools.measurement_tools.Gap",
        "title": "Gap > Gap > Gap",
        "section": "Gap > Gap",
        "text": "class ansys.geometry.core.tools.measurement_tools.Gap(distance: ansys.geometry.core.misc.measurements.Distance)\n\nRepresents a gap between two bodies.\n\nParameters\n\ndistance\n\nDistance\n\nDistance between two sides of the gap.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/Gap",
        "href": "api/ansys/geometry/core/tools/measurement_tools/Gap.html#overview",
        "title": "Gap > Overview",
        "section": "Overview",
        "text": "distance\nReturns the closest distance between two bodies.\nOverview\ndistance"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/Gap",
        "href": "api/ansys/geometry/core/tools/measurement_tools/Gap.html#import-detail",
        "title": "Gap > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/Gap",
        "href": "api/ansys/geometry/core/tools/measurement_tools/Gap.html#property-detail",
        "title": "Gap > Property detail",
        "section": "Property detail",
        "text": "Returns the closest distance between two bodies.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/Gap",
        "href": "api/ansys/geometry/core/tools/measurement_tools/Gap.html#Gap.distance",
        "title": "Gap > Property detail > distance",
        "section": "Property detail > distance",
        "text": "property Gap.distance: ansys.geometry.core.misc.measurements.Distance\n\nReturns the closest distance between two bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/index",
        "href": "api/ansys/geometry/core/shapes/curves/line/index.html#the-linepy-module",
        "title": "The line.py module",
        "section": "The line.py module",
        "text": "The line.py module\nline.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/index",
        "href": "api/ansys/geometry/core/shapes/curves/line/index.html#summary",
        "title": "The line.py module > Summary",
        "section": "Summary",
        "text": "Line\nProvides 3D line representation.\nLineEvaluation\nProvides for evaluating a line.\nSummary\nLine\nLineEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/index",
        "href": "api/ansys/geometry/core/shapes/curves/line/index.html#description",
        "title": "The line.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a line.\nDescription"
    },
    {
        "objectID": "user_guide/shapes",
        "href": "user_guide/shapes.html#sketch",
        "title": "Sketch",
        "section": "Sketch",
        "text": "The PyAnsys Geometry sketch subpackage is used to build\n2D basic shapes. Shapes consist of two fundamental constructs:\nEdge: A connection between two or more 2D points along a particular path. An edge represents an open shape\nsuch as an arc or line.\nFace: A set of edges that enclose a surface. A face represents a closed shape such as a circle or triangle.\nTo initialize a sketch, you first specify the Plane() class, which\nrepresents the plane in space from which other PyAnsys Geometry objects can be located.\nThis code shows how to initialize a sketch:\nYou then construct a sketch, which can be done using different approaches.\nSketch\nsketch\nPlane()"
    },
    {
        "objectID": "user_guide/shapes",
        "href": "user_guide/shapes.html#functional-style-api",
        "title": "Sketch > Functional-style API",
        "section": "Functional-style API",
        "text": "A functional-style API is sometimes called a fluent functional-style api or fluent API in the developer community.\nHowever, to avoid confusion with the Ansys Fluent product, the PyAnsys Geometry documentation refrains from using the latter terms.\nOne of the key features of a functional-style API is that it keeps an active context based on the previously created\nedges to use as a reference starting point for additional objects.\nThe following code creates a sketch with its origin as a starting point. Subsequent calls create segments,\nwhich take as a starting point the last point of the previous edge.\nA functional-style API is also able to get a desired shape of the sketch object by taking advantage\nof user-defined labels:\nFunctional-style API"
    },
    {
        "objectID": "user_guide/shapes",
        "href": "user_guide/shapes.html#direct-api",
        "title": "Sketch > Direct API",
        "section": "Direct API",
        "text": "A direct API is sometimes called an element-based approach in the developer community.\nThis code shows how you can use a direct API to create multiple elements independently\nand combine them all together in a single plane:\nFor more information on sketch shapes, see the Sketch()\nsubpackage.\nDirect API\nSketch()"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/index",
        "href": "api/ansys/geometry/core/designer/beam/index.html#the-beampy-module",
        "title": "The beam.py module",
        "section": "The beam.py module",
        "text": "The beam.py module\nbeam.py"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/index",
        "href": "api/ansys/geometry/core/designer/beam/index.html#summary",
        "title": "The beam.py module > Summary",
        "section": "Summary",
        "text": "BeamProfile\nRepresents a single beam profile organized within the design assembly.\nBeamCircularProfile\nRepresents a single circular beam profile.\nBeam\nRepresents a simplified solid body with an assigned 2D cross-section.\nSummary\nBeamProfile\nBeamCircularProfile\nBeam"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/index",
        "href": "api/ansys/geometry/core/designer/beam/index.html#description",
        "title": "The beam.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a beam.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/index.html#the-spherepy-module",
        "title": "The sphere.py module",
        "section": "The sphere.py module",
        "text": "The sphere.py module\nsphere.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/index.html#summary",
        "title": "The sphere.py module > Summary",
        "section": "Summary",
        "text": "Sphere\nProvides 3D sphere representation.\nSphereEvaluation\nEvaluate a sphere at given parameters.\nSummary\nSphere\nSphereEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/index.html#description",
        "title": "The sphere.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a sphere.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/index.html#the-surface_evaluationpy-module",
        "title": "The surface_evaluation.py module",
        "section": "The surface_evaluation.py module",
        "text": "The surface_evaluation.py module\nsurface_evaluation.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/index.html#summary",
        "title": "The surface_evaluation.py module > Summary",
        "section": "Summary",
        "text": "SurfaceEvaluation\nProvides for evaluating a surface.\nSummary\nSurfaceEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/index.html#description",
        "title": "The surface_evaluation.py module > Description",
        "section": "Description",
        "text": "Provides for evaluating a surface.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/index",
        "href": "api/ansys/geometry/core/tools/unsupported/index.html#the-unsupportedpy-module",
        "title": "The unsupported.py module",
        "section": "The unsupported.py module",
        "text": "The unsupported.py module\nunsupported.py"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/index",
        "href": "api/ansys/geometry/core/tools/unsupported/index.html#summary",
        "title": "The unsupported.py module > Summary",
        "section": "Summary",
        "text": "UnsupportedCommands\nProvides unsupported commands for PyAnsys Geometry.\nPersistentIdType\nType of persistent id.\nSummary\nUnsupportedCommands\nPersistentIdType"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/index",
        "href": "api/ansys/geometry/core/tools/unsupported/index.html#description",
        "title": "The unsupported.py module > Description",
        "section": "Description",
        "text": "Unsupported functions for the PyAnsys Geometry library.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/index",
        "href": "api/ansys/geometry/core/sketch/edge/index.html#the-edgepy-module",
        "title": "The edge.py module",
        "section": "The edge.py module",
        "text": "The edge.py module\nedge.py"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/index",
        "href": "api/ansys/geometry/core/sketch/edge/index.html#summary",
        "title": "The edge.py module > Summary",
        "section": "Summary",
        "text": "SketchEdge\nProvides for modeling edges forming sketched shapes.\nSummary\nSketchEdge"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/index",
        "href": "api/ansys/geometry/core/sketch/edge/index.html#description",
        "title": "The edge.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing an edge.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#planeevaluation",
        "title": "PlaneEvaluation",
        "section": "PlaneEvaluation",
        "text": "Bases: ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\nProvides evaluation of a plane at given parameters.\nPlane to evaluate.\nParameters (u, v) to evaluate the plane at.\nPlaneEvaluation\nPlaneEvaluation\nansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#ansys.geometry.core.shapes.surfaces.plane.PlaneEvaluation",
        "title": "PlaneEvaluation > PlaneEvaluation > PlaneEvaluation",
        "section": "PlaneEvaluation > PlaneEvaluation",
        "text": "class ansys.geometry.core.shapes.surfaces.plane.PlaneEvaluation(plane: PlaneSurface, parameter: ansys.geometry.core.shapes.parameterization.ParamUV)\n\nBases: ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\n\nProvides evaluation of a plane at given parameters.\n\nParameters\n\nplane: ~ansys.geometry.core.shapes.surfaces.plane.PlaneSurface\n\nPlane to evaluate.\n\nparameter: ParamUV\n\nParameters (u, v) to evaluate the plane at.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#overview",
        "title": "PlaneEvaluation > Overview",
        "section": "Overview",
        "text": "plane\nPlane being evaluated.\nparameter\nParameter that the evaluation is based upon.\nposition\nPoint on the surface, based on the evaluation.\nnormal\nNormal to the surface.\nu_derivative\nFirst derivative with respect to u.\nv_derivative\nFirst derivative with respect to v.\nuu_derivative\nSecond derivative with respect to u.\nuv_derivative\nSecond derivative with respect to u and v.\nvv_derivative\nSecond derivative with respect to v.\nmin_curvature\nMinimum curvature.\nmin_curvature_direction\nMinimum curvature direction.\nmax_curvature\nMaximum curvature.\nmax_curvature_direction\nMaximum curvature direction.\nOverview\nplane\nparameter\nposition\nnormal\nu_derivative\nv_derivative\nuu_derivative\nuv_derivative\nvv_derivative\nmin_curvature\nmin_curvature_direction\nmax_curvature\nmax_curvature_direction"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#import-detail",
        "title": "PlaneEvaluation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#property-detail",
        "title": "PlaneEvaluation > Property detail",
        "section": "Property detail",
        "text": "Plane being evaluated.\nParameter that the evaluation is based upon.\nPoint on the surface, based on the evaluation.\nNormal to the surface.\nFirst derivative with respect to u.\nFirst derivative with respect to v.\nSecond derivative with respect to u.\nSecond derivative with respect to u and v.\nSecond derivative with respect to v.\nMinimum curvature.\nMinimum curvature direction.\nMaximum curvature.\nMaximum curvature direction.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#PlaneEvaluation.plane",
        "title": "PlaneEvaluation > Property detail > plane",
        "section": "Property detail > plane",
        "text": "property PlaneEvaluation.plane: PlaneSurface\n\nPlane being evaluated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#PlaneEvaluation.parameter",
        "title": "PlaneEvaluation > Property detail > parameter",
        "section": "Property detail > parameter",
        "text": "property PlaneEvaluation.parameter: ansys.geometry.core.shapes.parameterization.ParamUV\n\nParameter that the evaluation is based upon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#PlaneEvaluation.position",
        "title": "PlaneEvaluation > Property detail > position",
        "section": "Property detail > position",
        "text": "property PlaneEvaluation.position: ansys.geometry.core.math.point.Point3D\n\nPoint on the surface, based on the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#PlaneEvaluation.normal",
        "title": "PlaneEvaluation > Property detail > normal",
        "section": "Property detail > normal",
        "text": "property PlaneEvaluation.normal: ansys.geometry.core.math.vector.UnitVector3D\n\nNormal to the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#PlaneEvaluation.u_derivative",
        "title": "PlaneEvaluation > Property detail > u_derivative",
        "section": "Property detail > u_derivative",
        "text": "property PlaneEvaluation.u_derivative: ansys.geometry.core.math.vector.Vector3D\n\nFirst derivative with respect to u.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#PlaneEvaluation.v_derivative",
        "title": "PlaneEvaluation > Property detail > v_derivative",
        "section": "Property detail > v_derivative",
        "text": "property PlaneEvaluation.v_derivative: ansys.geometry.core.math.vector.Vector3D\n\nFirst derivative with respect to v.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#PlaneEvaluation.uu_derivative",
        "title": "PlaneEvaluation > Property detail > uu_derivative",
        "section": "Property detail > uu_derivative",
        "text": "property PlaneEvaluation.uu_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to u.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#PlaneEvaluation.uv_derivative",
        "title": "PlaneEvaluation > Property detail > uv_derivative",
        "section": "Property detail > uv_derivative",
        "text": "property PlaneEvaluation.uv_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to u and v.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#PlaneEvaluation.vv_derivative",
        "title": "PlaneEvaluation > Property detail > vv_derivative",
        "section": "Property detail > vv_derivative",
        "text": "property PlaneEvaluation.vv_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to v.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#PlaneEvaluation.min_curvature",
        "title": "PlaneEvaluation > Property detail > min_curvature",
        "section": "Property detail > min_curvature",
        "text": "property PlaneEvaluation.min_curvature: ansys.geometry.core.typing.Real\n\nMinimum curvature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#PlaneEvaluation.min_curvature_direction",
        "title": "PlaneEvaluation > Property detail > min_curvature_direction",
        "section": "Property detail > min_curvature_direction",
        "text": "property PlaneEvaluation.min_curvature_direction: ansys.geometry.core.math.vector.UnitVector3D\n\nMinimum curvature direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#PlaneEvaluation.max_curvature",
        "title": "PlaneEvaluation > Property detail > max_curvature",
        "section": "Property detail > max_curvature",
        "text": "property PlaneEvaluation.max_curvature: ansys.geometry.core.typing.Real\n\nMaximum curvature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneEvaluation.html#PlaneEvaluation.max_curvature_direction",
        "title": "PlaneEvaluation > Property detail > max_curvature_direction",
        "section": "Property detail > max_curvature_direction",
        "text": "property PlaneEvaluation.max_curvature_direction: ansys.geometry.core.math.vector.UnitVector3D\n\nMaximum curvature direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#torus",
        "title": "Torus",
        "section": "Torus",
        "text": "Bases: ansys.geometry.core.shapes.surfaces.surface.Surface\nProvides 3D torus representation.\nCentered origin of the torus.\nMajor radius of the torus.\nMinor radius of the torus.\nX-axis direction.\nZ-axis direction.\nTorus\nTorus\nansys.geometry.core.shapes.surfaces.surface.Surface\nndarray\nRealSequence\nPoint3D\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\nndarray\nRealSequence\nUnitVector3D\nVector3D\nndarray\nRealSequence\nUnitVector3D\nVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#ansys.geometry.core.shapes.surfaces.torus.Torus",
        "title": "Torus > Torus > Torus",
        "section": "Torus > Torus",
        "text": "class ansys.geometry.core.shapes.surfaces.torus.Torus(origin: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D, major_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, minor_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, reference: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_X, axis: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_Z)\n\nBases: ansys.geometry.core.shapes.surfaces.surface.Surface\n\nProvides 3D torus representation.\n\nParameters\n\norigin\n\nndarray | RealSequence | Point3D\n\nCentered origin of the torus.\n\nmajor_radius\n\nQuantity | Distance | Real\n\nMajor radius of the torus.\n\nminor_radius\n\nQuantity | Distance | Real\n\nMinor radius of the torus.\n\nreference\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nX-axis direction.\n\naxis\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nZ-axis direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#overview",
        "title": "Torus > Overview",
        "section": "Overview",
        "text": "contains_param\nCheck a parameter is within the parametric range of the surface.\ncontains_point\nCheck a point is contained by the surface.\ntransformed_copy\nCreate a transformed copy of the torus from a transformation matrix.\nmirrored_copy\nCreate a mirrored copy of the torus along the y-axis.\nevaluate\nEvaluate the torus at the given parameters.\nparameterization\nParameterize the torus surface as a tuple (U and V respectively).\nproject_point\nProject a point onto the torus and evaluate the torus.\norigin\nOrigin of the torus.\nmajor_radius\nSemi-major radius of the torus.\nminor_radius\nSemi-minor radius of the torus.\ndir_x\nX-direction of the torus.\ndir_y\nY-direction of the torus.\ndir_z\nZ-direction of the torus.\nvolume\nVolume of the torus.\nsurface_area\nSurface_area of the torus.\n__eq__\nEquals operator for the Torus class.\nOverview\ncontains_param\ncontains_point\ntransformed_copy\nmirrored_copy\nevaluate\nparameterization\nproject_point\norigin\nmajor_radius\nminor_radius\ndir_x\ndir_y\ndir_z\nvolume\nsurface_area\n__eq__\nTorus"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#import-detail",
        "title": "Torus > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#property-detail",
        "title": "Torus > Property detail",
        "section": "Property detail",
        "text": "Origin of the torus.\nSemi-major radius of the torus.\nSemi-minor radius of the torus.\nX-direction of the torus.\nY-direction of the torus.\nZ-direction of the torus.\nVolume of the torus.\nSurface_area of the torus.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.origin",
        "title": "Torus > Property detail > origin",
        "section": "Property detail > origin",
        "text": "property Torus.origin: ansys.geometry.core.math.point.Point3D\n\nOrigin of the torus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.major_radius",
        "title": "Torus > Property detail > major_radius",
        "section": "Property detail > major_radius",
        "text": "property Torus.major_radius: pint.Quantity\n\nSemi-major radius of the torus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.minor_radius",
        "title": "Torus > Property detail > minor_radius",
        "section": "Property detail > minor_radius",
        "text": "property Torus.minor_radius: pint.Quantity\n\nSemi-minor radius of the torus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.dir_x",
        "title": "Torus > Property detail > dir_x",
        "section": "Property detail > dir_x",
        "text": "property Torus.dir_x: ansys.geometry.core.math.vector.UnitVector3D\n\nX-direction of the torus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.dir_y",
        "title": "Torus > Property detail > dir_y",
        "section": "Property detail > dir_y",
        "text": "property Torus.dir_y: ansys.geometry.core.math.vector.UnitVector3D\n\nY-direction of the torus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.dir_z",
        "title": "Torus > Property detail > dir_z",
        "section": "Property detail > dir_z",
        "text": "property Torus.dir_z: ansys.geometry.core.math.vector.UnitVector3D\n\nZ-direction of the torus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.volume",
        "title": "Torus > Property detail > volume",
        "section": "Property detail > volume",
        "text": "property Torus.volume: pint.Quantity\n\nVolume of the torus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.surface_area",
        "title": "Torus > Property detail > surface_area",
        "section": "Property detail > surface_area",
        "text": "property Torus.surface_area: pint.Quantity\n\nSurface_area of the torus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#method-detail",
        "title": "Torus > Method detail",
        "section": "Method detail",
        "text": "Equals operator for the Torus class.\nCreate a transformed copy of the torus from a transformation matrix.\n4x4 transformation matrix to apply to the torus.\nNew torus that is the transformed copy of the original torus.\nCreate a mirrored copy of the torus along the y-axis.\nNew torus that is a mirrored copy of the original torus.\nEvaluate the torus at the given parameters.\nParameters (u,v) to evaluate the torus at.\nResulting evaluation.\nParameterize the torus surface as a tuple (U and V respectively).\nThe U parameter specifies the longitude angle, increasing clockwise (east) about\nthe axis (right-hand corkscrew law). It has a zero parameter at\nGeometry.Frame.DirX and a period of 2*pi.\nThe V parameter specifies the latitude, increasing north, with a zero parameter\nat the equator. For the donut, where the major radius is greater\nthan the minor radius, the range is [-pi, pi] and the\nparameterization is periodic. For a degenerate torus, the range is restricted\naccordingly and the parameterization is non-periodic.\nInformation about how a torus’s u and v parameters are parameterized, respectively.\nProject a point onto the torus and evaluate the torus.\nPoint to project onto the torus.\nResulting evaluation.\nCheck a parameter is within the parametric range of the surface.\nCheck a point is contained by the surface.\nThe point can either lie within the surface or on its boundary.\nMethod detail\nTorus\nMatrix44\nTorus\nTorus\nParamUV\nTorusEvaluation\nGeometry.Frame.DirX\n2*pi\npython:tuple\nParameterization\nParameterization\nPoint3D\nTorusEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.__eq__",
        "title": "Torus > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Torus.__eq__(other: Torus) -> bool\n\nEquals operator for the Torus class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.transformed_copy",
        "title": "Torus > Method detail > transformed_copy",
        "section": "Method detail > transformed_copy",
        "text": "Torus.transformed_copy(matrix: ansys.geometry.core.math.matrix.Matrix44) -> Torus\n\nCreate a transformed copy of the torus from a transformation matrix.\n\nParameters\n\nmatrix\n\nMatrix44\n\n4x4 transformation matrix to apply to the torus.\n\nReturns\n\nTorus\n\nNew torus that is the transformed copy of the original torus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.mirrored_copy",
        "title": "Torus > Method detail > mirrored_copy",
        "section": "Method detail > mirrored_copy",
        "text": "Torus.mirrored_copy() -> Torus\n\nCreate a mirrored copy of the torus along the y-axis.\n\nReturns\n\nTorus\n\nNew torus that is a mirrored copy of the original torus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.evaluate",
        "title": "Torus > Method detail > evaluate",
        "section": "Method detail > evaluate",
        "text": "Torus.evaluate(parameter: ansys.geometry.core.shapes.parameterization.ParamUV) -> TorusEvaluation\n\nEvaluate the torus at the given parameters.\n\nParameters\n\nparameter\n\nParamUV\n\nParameters (u,v) to evaluate the torus at.\n\nReturns\n\nTorusEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.parameterization",
        "title": "Torus > Method detail > parameterization",
        "section": "Method detail > parameterization",
        "text": "Torus.parameterization() -> tuple[ansys.geometry.core.shapes.parameterization.Parameterization, ansys.geometry.core.shapes.parameterization.Parameterization]\n\nParameterize the torus surface as a tuple (U and V respectively).\n\nThe U parameter specifies the longitude angle, increasing clockwise (east) about\nthe axis (right-hand corkscrew law). It has a zero parameter at\nGeometry.Frame.DirX and a period of 2*pi.\n\nThe V parameter specifies the latitude, increasing north, with a zero parameter\nat the equator. For the donut, where the major radius is greater\nthan the minor radius, the range is [-pi, pi] and the\nparameterization is periodic. For a degenerate torus, the range is restricted\naccordingly and the parameterization is non-periodic.\n\nReturns\n\npython:tuple[Parameterization, Parameterization]\n\nInformation about how a torus’s u and v parameters are parameterized, respectively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.project_point",
        "title": "Torus > Method detail > project_point",
        "section": "Method detail > project_point",
        "text": "Torus.project_point(point: ansys.geometry.core.math.point.Point3D) -> TorusEvaluation\n\nProject a point onto the torus and evaluate the torus.\n\nParameters\n\npoint\n\nPoint3D\n\nPoint to project onto the torus.\n\nReturns\n\nTorusEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.contains_param",
        "title": "Torus > Method detail > contains_param",
        "section": "Method detail > contains_param",
        "text": "abstractmethod Torus.contains_param(param_uv: ansys.geometry.core.shapes.parameterization.ParamUV) -> bool\n\nCheck a parameter is within the parametric range of the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/Torus",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/Torus.html#Torus.contains_point",
        "title": "Torus > Method detail > contains_point",
        "section": "Method detail > contains_point",
        "text": "abstractmethod Torus.contains_point(point: ansys.geometry.core.math.point.Point3D) -> bool\n\nCheck a point is contained by the surface.\n\nThe point can either lie within the surface or on its boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/index",
        "href": "api/ansys/geometry/core/parameters/parameter/index.html#the-parameterpy-module",
        "title": "The parameter.py module",
        "section": "The parameter.py module",
        "text": "The parameter.py module\nparameter.py"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/index",
        "href": "api/ansys/geometry/core/parameters/parameter/index.html#summary",
        "title": "The parameter.py module > Summary",
        "section": "Summary",
        "text": "Parameter\nRepresents a parameter.\nParameterType\nProvides values for the parameter types supported.\nParameterUpdateStatus\nProvides values for the status messages associated with parameter updates.\nSummary\nParameter\nParameterType\nParameterUpdateStatus"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/index",
        "href": "api/ansys/geometry/core/parameters/parameter/index.html#description",
        "title": "The parameter.py module > Description",
        "section": "Description",
        "text": "Provides get and set methods for parameters.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/validate/index",
        "href": "api/ansys/geometry/core/connection/validate/index.html#the-validatepy-module",
        "title": "The validate.py module",
        "section": "The validate.py module",
        "text": "The validate.py module\nvalidate.py"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/validate/index",
        "href": "api/ansys/geometry/core/connection/validate/index.html#summary",
        "title": "The validate.py module > Summary",
        "section": "Summary",
        "text": "validate\nCreate a client using the default settings and validate it.\nSummary\nvalidate"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/validate/index",
        "href": "api/ansys/geometry/core/connection/validate/index.html#description",
        "title": "The validate.py module > Description",
        "section": "Description",
        "text": "Module to perform a connection validation check.\nThe method in this module is only used for testing the default Docker service on\nGitHub and can safely be skipped within testing.\nThis command shows how this method is typically used:\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/validate/index",
        "href": "api/ansys/geometry/core/connection/validate/index.html#module-detail",
        "title": "The validate.py module > Module detail",
        "section": "Module detail",
        "text": "Create a client using the default settings and validate it.\nModule detail"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/validate/index",
        "href": "api/ansys/geometry/core/connection/validate/index.html#validate.validate",
        "title": "The validate.py module > Module detail > validate",
        "section": "Module detail > validate",
        "text": "validate.validate(*args, **kwargs)\n\nCreate a client using the default settings and validate it.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/Gear",
        "href": "api/ansys/geometry/core/sketch/gears/Gear.html#gear",
        "title": "Gear",
        "section": "Gear",
        "text": "Bases: ansys.geometry.core.sketch.face.SketchFace\nProvides the base class for sketching gears.\nGear\nGear\nansys.geometry.core.sketch.face.SketchFace"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/Gear",
        "href": "api/ansys/geometry/core/sketch/gears/Gear.html#ansys.geometry.core.sketch.gears.Gear",
        "title": "Gear > Gear > Gear",
        "section": "Gear > Gear",
        "text": "class ansys.geometry.core.sketch.gears.Gear\n\nBases: ansys.geometry.core.sketch.face.SketchFace\n\nProvides the base class for sketching gears.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/Gear",
        "href": "api/ansys/geometry/core/sketch/gears/Gear.html#overview",
        "title": "Gear > Overview",
        "section": "Overview",
        "text": "visualization_polydata\nVTK polydata representation for PyVista visualization.\nOverview\nvisualization_polydata"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/Gear",
        "href": "api/ansys/geometry/core/sketch/gears/Gear.html#import-detail",
        "title": "Gear > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/Gear",
        "href": "api/ansys/geometry/core/sketch/gears/Gear.html#property-detail",
        "title": "Gear > Property detail",
        "section": "Property detail",
        "text": "VTK polydata representation for PyVista visualization.\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\nVTK pyvista.Polydata configuration.\nProperty detail\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/Gear",
        "href": "api/ansys/geometry/core/sketch/gears/Gear.html#Gear.visualization_polydata",
        "title": "Gear > Property detail > visualization_polydata",
        "section": "Property detail > visualization_polydata",
        "text": "property Gear.visualization_polydata: pyvista.PolyData\n\nVTK polydata representation for PyVista visualization.\n\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\n\nReturns\n\npyvista.PolyData\n\nVTK pyvista.Polydata configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/compatibility",
        "href": "getting_started/compatibility.html#ansys-version-compatibility",
        "title": "Ansys version compatibility",
        "section": "Ansys version compatibility",
        "text": "The following table summarizes the compatibility matrix between the PyAnsys Geometry service\nand the Ansys product versions.\nPyAnsys Geometry versions\nAnsys Product versions\nGeometry Service (dockerized)\nGeometry Service (standalone)\nDiscovery\nSpaceClaim\n0.2.X\n23R2\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-x-circle\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M2.344 2.343h-.001a8 8 0 0 1 11.314 11.314A8.002 8.002 0 0 1 .234 10.089a8 8 0 0 1 2.11-7.746Zm1.06 10.253a6.5 6.5 0 1 0 9.108-9.275 6.5 6.5 0 0 0-9.108 9.275ZM6.03 4.97 8 6.94l1.97-1.97a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l1.97 1.97a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-1.97 1.97a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L6.94 8 4.97 6.03a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018Z\"></path></svg>\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\n0.3.X\n23R2 (partially)\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-x-circle\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M2.344 2.343h-.001a8 8 0 0 1 11.314 11.314A8.002 8.002 0 0 1 .234 10.089a8 8 0 0 1 2.11-7.746Zm1.06 10.253a6.5 6.5 0 1 0 9.108-9.275 6.5 6.5 0 0 0-9.108 9.275ZM6.03 4.97 8 6.94l1.97-1.97a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l1.97 1.97a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-1.97 1.97a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L6.94 8 4.97 6.03a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018Z\"></path></svg>\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\n0.4.X\n24R1 onward\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\n0.5.X\n24R1 onward\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\n<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-check-circle-fill\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16Zm3.78-9.72a.751.751 0 0 0-.018-1.042.751.751 0 0 0-1.042-.018L6.75 9.19 5.28 7.72a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042l2 2a.75.75 0 0 0 1.06 0Z\"></path></svg>\nForth- and back-compatibility mechanism\nStarting on version 0.5.X and onward, PyAnsys Geometry has implemented a forth- and back-compatibility mechanism to\nensure that the Python library can be used with different versions of the Ansys products.\nMethods are now decorated with the @min_backend_version decorator to indicate the compatibility with the Ansys product versions.\nIf an unsupported method is called, a GeometryRuntimeError is raised when attempting to use the method. Users are informed of the\nminimum Ansys product version required to use the method.\nAccess to the documentation for the preceding versions is found at the Versions page.\nGo to Getting started\nAnsys version compatibility\n0.2.X\n0.3.X\n0.4.X\n0.5.X\n0.5.X\n@min_backend_version\nGeometryRuntimeError"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#install-package-in-development-mode",
        "title": "Install package in development mode",
        "section": "Install package in development mode",
        "text": "This topic assumes that you want to install PyAnsys Geometry in developer mode so that\nyou can modify the source and enhance it. You can install PyAnsys Geometry from PyPI, Conda,\nor from the PyAnsys Geometry repository on GitHub.\nInstall package in development mode\nPackage dependencies\nPyPI\nConda\nGitHub\nInstall in offline mode\nVerify your installation\nInstall package in development mode\nContents"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#package-dependencies",
        "title": "Install package in development mode > Package dependencies",
        "section": "Package dependencies",
        "text": "PyAnsys Geometry is supported on Python version 3.10 and later. As indicated in the\nMoving to require Python 3 statement,\nprevious versions of Python are no longer supported.\nPyAnsys Geometry dependencies are automatically checked when packages are installed.\nThese projects are required dependencies for PyAnsys Geometry:\nansys-api-geometry: Used for supplying\ngRPC code generated from Protobuf (PROTO) files\nNumPy: Used for data array access\nPint: Used for measurement units\nPyVista: Used for interactive 3D plotting\nSciPy: Used for geometric transformations\nPackage dependencies"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#pypi",
        "title": "Install package in development mode > PyPI",
        "section": "PyPI",
        "text": "Before installing PyAnsys Geometry, to ensure that you have the latest version of\npip, run this command:\nThen, to install PyAnsys Geometry, run this command:\nPyPI"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#conda",
        "title": "Install package in development mode > Conda",
        "section": "Conda",
        "text": "You can also install PyAnsys Geometry using conda. First, ensure that you have the latest version:\nThen, to install PyAnsys Geometry, run this command:\nConda"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#github",
        "title": "Install package in development mode > GitHub",
        "section": "GitHub",
        "text": "To install the latest release from the PyAnsys Geometry repository\non GitHub, run these commands:\nTo verify your development installation, run this command:\nGitHub"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#install-in-offline-mode",
        "title": "Install package in development mode > Install in offline mode",
        "section": "Install in offline mode",
        "text": "If you lack an internet connection on your installation machine (or you do not have access to the\nprivate Ansys PyPI packages repository), you should install PyAnsys Geometry by downloading the wheelhouse\narchive for your corresponding machine architecture from the repository’s Releases page.\nEach wheelhouse archive contains all the Python wheels necessary to install PyAnsys Geometry from scratch on Windows,\nLinux, and MacOS from Python 3.10 to 3.13. You can install this on an isolated system with a fresh Python\ninstallation or on a virtual environment.\nFor example, on Linux with Python 3.10, unzip the wheelhouse archive and install it with these commands:\nIf you are on Windows with Python 3.10, unzip the wheelhouse archive to a wheelhouse directory\nand then install using the same pip install command as in the preceding example.\nConsider installing using a virtual environment. For more information, see Creation of virtual\nenvironments in the Python documentation.\nInstall in offline mode\npip install"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#verify-your-installation",
        "title": "Install package in development mode > Verify your installation",
        "section": "Verify your installation",
        "text": "Verify the Modeler() connection with this code:\nIf you see a response from the server, you can start using PyAnsys Geometry as a service.\nFor more information on PyAnsys Geometry usage, see User guide.\nGo to Getting started\nVerify your installation\nModeler()"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/selection/NamedSelection",
        "href": "api/ansys/geometry/core/designer/selection/NamedSelection.html#namedselection",
        "title": "NamedSelection",
        "section": "NamedSelection",
        "text": "Represents a single named selection within the design assembly.\nThis class synchronizes to a design within a supporting Geometry service instance.\nA named selection organizes one or more design entities together for common actions\nagainst the entire group.\nUser-defined name for the named selection.\nActive supporting Geometry service instance for design modeling.\nAll bodies to include in the named selection.\nAll faces to include in the named selection.\nAll edges to include in the named selection.\nAll beams to include in the named selection.\nAll design points to include in the named selection.\nNamedSelection\nNamedSelection\npython:str\nGrpcClient\npython:list\nBody\npython:None\npython:list\nFace\npython:None\npython:list\nEdge\npython:None\npython:list\nBeam\npython:None\npython:list\nDesignPoints\npython:None"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/selection/NamedSelection",
        "href": "api/ansys/geometry/core/designer/selection/NamedSelection.html#ansys.geometry.core.designer.selection.NamedSelection",
        "title": "NamedSelection > NamedSelection > NamedSelection",
        "section": "NamedSelection > NamedSelection",
        "text": "class ansys.geometry.core.designer.selection.NamedSelection(name: str, grpc_client: ansys.geometry.core.connection.client.GrpcClient, bodies: list[ansys.geometry.core.designer.body.Body] | None = None, faces: list[ansys.geometry.core.designer.face.Face] | None = None, edges: list[ansys.geometry.core.designer.edge.Edge] | None = None, beams: list[ansys.geometry.core.designer.beam.Beam] | None = None, design_points: list[ansys.geometry.core.designer.designpoint.DesignPoint] | None = None, preexisting_id: str | None = None)\n\nRepresents a single named selection within the design assembly.\n\nThis class synchronizes to a design within a supporting Geometry service instance.\n\nA named selection organizes one or more design entities together for common actions\nagainst the entire group.\n\nParameters\n\nname\n\npython:str\n\nUser-defined name for the named selection.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting Geometry service instance for design modeling.\n\nbodies\n\npython:list[Body], default: python:None\n\nAll bodies to include in the named selection.\n\nfaces\n\npython:list[Face], default: python:None\n\nAll faces to include in the named selection.\n\nedges\n\npython:list[Edge], default: python:None\n\nAll edges to include in the named selection.\n\nbeams\n\npython:list[Beam], default: python:None\n\nAll beams to include in the named selection.\n\ndesign_points\n\npython:list[DesignPoints], default: python:None\n\nAll design points to include in the named selection.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/selection/NamedSelection",
        "href": "api/ansys/geometry/core/designer/selection/NamedSelection.html#overview",
        "title": "NamedSelection > Overview",
        "section": "Overview",
        "text": "id\nID of the named selection.\nname\nName of the named selection.\nOverview\nid\nname"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/selection/NamedSelection",
        "href": "api/ansys/geometry/core/designer/selection/NamedSelection.html#import-detail",
        "title": "NamedSelection > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/selection/NamedSelection",
        "href": "api/ansys/geometry/core/designer/selection/NamedSelection.html#property-detail",
        "title": "NamedSelection > Property detail",
        "section": "Property detail",
        "text": "ID of the named selection.\nName of the named selection.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/selection/NamedSelection",
        "href": "api/ansys/geometry/core/designer/selection/NamedSelection.html#NamedSelection.id",
        "title": "NamedSelection > Property detail > id",
        "section": "Property detail > id",
        "text": "property NamedSelection.id: str\n\nID of the named selection.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/selection/NamedSelection",
        "href": "api/ansys/geometry/core/designer/selection/NamedSelection.html#NamedSelection.name",
        "title": "NamedSelection > Property detail > name",
        "section": "Property detail > name",
        "text": "property NamedSelection.name: str\n\nName of the named selection.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas.html#stitchfaceproblemareas",
        "title": "StitchFaceProblemAreas",
        "section": "StitchFaceProblemAreas",
        "text": "Bases: ProblemArea\nRepresents a stitch face problem area with unique identifier and associated faces.\nServer-defined ID for the problem area.\nActive supporting geometry service instance for design modeling.\nList of bodies associated with the design.\nStitchFaceProblemAreas\nStitchFaceProblemAreas\nProblemArea\npython:str\nGrpcClient\npython:list\nBody"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas.html#ansys.geometry.core.tools.problem_areas.StitchFaceProblemAreas",
        "title": "StitchFaceProblemAreas > StitchFaceProblemAreas > StitchFaceProblemAreas",
        "section": "StitchFaceProblemAreas > StitchFaceProblemAreas",
        "text": "class ansys.geometry.core.tools.problem_areas.StitchFaceProblemAreas(id: str, grpc_client: ansys.geometry.core.connection.GrpcClient, bodies: list[ansys.geometry.core.designer.body.Body])\n\nBases: ProblemArea\n\nRepresents a stitch face problem area with unique identifier and associated faces.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the problem area.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting geometry service instance for design modeling.\n\nbodies\n\npython:list[Body]\n\nList of bodies associated with the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas.html#overview",
        "title": "StitchFaceProblemAreas > Overview",
        "section": "Overview",
        "text": "fix\nFix the problem area.\nbodies\nThe list of bodies connected to this problem area.\nOverview\nfix\nbodies"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas.html#import-detail",
        "title": "StitchFaceProblemAreas > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas.html#property-detail",
        "title": "StitchFaceProblemAreas > Property detail",
        "section": "Property detail",
        "text": "The list of bodies connected to this problem area.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas.html#StitchFaceProblemAreas.bodies",
        "title": "StitchFaceProblemAreas > Property detail > bodies",
        "section": "Property detail > bodies",
        "text": "property StitchFaceProblemAreas.bodies: list[ansys.geometry.core.designer.body.Body]\n\nThe list of bodies connected to this problem area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas.html#method-detail",
        "title": "StitchFaceProblemAreas > Method detail",
        "section": "Method detail",
        "text": "Fix the problem area.\nMessage containing created and/or modified bodies.\nMethod detail\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/StitchFaceProblemAreas.html#StitchFaceProblemAreas.fix",
        "title": "StitchFaceProblemAreas > Method detail > fix",
        "section": "Method detail > fix",
        "text": "StitchFaceProblemAreas.fix() -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFix the problem area.\n\nReturns\n\nmessage: RepairToolMessage\n\nMessage containing created and/or modified bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryFormatter",
        "href": "api/ansys/geometry/core/logger/PyGeometryFormatter.html#pygeometryformatter",
        "title": "PyGeometryFormatter",
        "section": "PyGeometryFormatter",
        "text": "Bases: logging.Formatter\nProvides a Formatter class for overwriting default format styles.\nPyGeometryFormatter\nPyGeometryFormatter\nlogging.Formatter\nFormatter"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryFormatter",
        "href": "api/ansys/geometry/core/logger/PyGeometryFormatter.html#ansys.geometry.core.logger.PyGeometryFormatter",
        "title": "PyGeometryFormatter > PyGeometryFormatter > PyGeometryFormatter",
        "section": "PyGeometryFormatter > PyGeometryFormatter",
        "text": "class ansys.geometry.core.logger.PyGeometryFormatter(fmt=STDOUT_MSG_FORMAT, datefmt=None, style='%', validate=True, defaults=None)\n\nBases: logging.Formatter\n\nProvides a Formatter class for overwriting default format styles.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryFormatter",
        "href": "api/ansys/geometry/core/logger/PyGeometryFormatter.html#import-detail",
        "title": "PyGeometryFormatter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/index",
        "href": "api/ansys/geometry/core/plotting/plotter/index.html#the-plotterpy-module",
        "title": "The plotter.py module",
        "section": "The plotter.py module",
        "text": "The plotter.py module\nplotter.py"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/index",
        "href": "api/ansys/geometry/core/plotting/plotter/index.html#summary",
        "title": "The plotter.py module > Summary",
        "section": "Summary",
        "text": "GeometryPlotter\nPlotter for PyAnsys Geometry objects.\nPOLYDATA_COLOR_CYCLER\nSummary\nGeometryPlotter\nPOLYDATA_COLOR_CYCLER"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/index",
        "href": "api/ansys/geometry/core/plotting/plotter/index.html#description",
        "title": "The plotter.py module > Description",
        "section": "Description",
        "text": "Provides plotting for various PyAnsys Geometry objects.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/index",
        "href": "api/ansys/geometry/core/plotting/plotter/index.html#module-detail",
        "title": "The plotter.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/index",
        "href": "api/ansys/geometry/core/plotting/plotter/index.html#plotter.POLYDATA_COLOR_CYCLER",
        "title": "The plotter.py module > Module detail > POLYDATA_COLOR_CYCLER",
        "section": "Module detail > POLYDATA_COLOR_CYCLER",
        "text": "plotter.POLYDATA_COLOR_CYCLER\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/units/index",
        "href": "api/ansys/geometry/core/misc/units/index.html#the-unitspy-module",
        "title": "The units.py module",
        "section": "The units.py module",
        "text": "The units.py module\nunits.py"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/units/index",
        "href": "api/ansys/geometry/core/misc/units/index.html#summary",
        "title": "The units.py module > Summary",
        "section": "Summary",
        "text": "PhysicalQuantity\nProvides the base class for handling units throughout PyAnsys Geometry.\nUNITS\nUnits manager.\nSummary\nPhysicalQuantity\nUNITS"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/units/index",
        "href": "api/ansys/geometry/core/misc/units/index.html#description",
        "title": "The units.py module > Description",
        "section": "Description",
        "text": "Provides for handling units homogeneously throughout PyAnsys Geometry.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/units/index",
        "href": "api/ansys/geometry/core/misc/units/index.html#module-detail",
        "title": "The units.py module > Module detail",
        "section": "Module detail",
        "text": "Units manager.\nModule detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/units/index",
        "href": "api/ansys/geometry/core/misc/units/index.html#units.UNITS",
        "title": "The units.py module > Module detail > UNITS",
        "section": "Module detail > UNITS",
        "text": "units.UNITS\n\nUnits manager.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/FillStyle",
        "href": "api/ansys/geometry/core/designer/body/FillStyle.html#fillstyle",
        "title": "FillStyle",
        "section": "FillStyle",
        "text": "Bases: enum.Enum\nProvides values for fill styles supported.\nFillStyle\nFillStyle\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/FillStyle",
        "href": "api/ansys/geometry/core/designer/body/FillStyle.html#ansys.geometry.core.designer.body.FillStyle",
        "title": "FillStyle > FillStyle > FillStyle",
        "section": "FillStyle > FillStyle",
        "text": "class ansys.geometry.core.designer.body.FillStyle(*args, **kwds)\n\nBases: enum.Enum\n\nProvides values for fill styles supported.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/FillStyle",
        "href": "api/ansys/geometry/core/designer/body/FillStyle.html#overview",
        "title": "FillStyle > Overview",
        "section": "Overview",
        "text": "DEFAULT\nOPAQUE\nTRANSPARENT\nOverview\nDEFAULT\nOPAQUE\nTRANSPARENT"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/FillStyle",
        "href": "api/ansys/geometry/core/designer/body/FillStyle.html#import-detail",
        "title": "FillStyle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/FillStyle",
        "href": "api/ansys/geometry/core/designer/body/FillStyle.html#attribute-detail",
        "title": "FillStyle > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/FillStyle",
        "href": "api/ansys/geometry/core/designer/body/FillStyle.html#FillStyle.DEFAULT",
        "title": "FillStyle > Attribute detail > DEFAULT",
        "section": "Attribute detail > DEFAULT",
        "text": "FillStyle.DEFAULT = 0\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/FillStyle",
        "href": "api/ansys/geometry/core/designer/body/FillStyle.html#FillStyle.OPAQUE",
        "title": "FillStyle > Attribute detail > OPAQUE",
        "section": "Attribute detail > OPAQUE",
        "text": "FillStyle.OPAQUE = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/FillStyle",
        "href": "api/ansys/geometry/core/designer/body/FillStyle.html#FillStyle.TRANSPARENT",
        "title": "FillStyle > Attribute detail > TRANSPARENT",
        "section": "Attribute detail > TRANSPARENT",
        "text": "FillStyle.TRANSPARENT = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/typing/index",
        "href": "api/ansys/geometry/core/typing/index.html#the-typingpy-module",
        "title": "The typing.py module",
        "section": "The typing.py module",
        "text": "The typing.py module\ntyping.py"
    },
    {
        "objectID": "api/ansys/geometry/core/typing/index",
        "href": "api/ansys/geometry/core/typing/index.html#summary",
        "title": "The typing.py module > Summary",
        "section": "Summary",
        "text": "Real\nType used to refer to both integers and floats as possible values.\nRealSequence\nType used to refer to Real types as a Sequence type.\nSummary\nReal\nRealSequence\nReal\nSequence"
    },
    {
        "objectID": "api/ansys/geometry/core/typing/index",
        "href": "api/ansys/geometry/core/typing/index.html#description",
        "title": "The typing.py module > Description",
        "section": "Description",
        "text": "Provides typing of values for PyAnsys Geometry.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/typing/index",
        "href": "api/ansys/geometry/core/typing/index.html#module-detail",
        "title": "The typing.py module > Module detail",
        "section": "Module detail",
        "text": "Type used to refer to both integers and floats as possible values.\nType used to refer to Real types as a Sequence type.\nnumpy.ndarrays are also accepted because they are\nthe overlaying data structure behind most PyAnsys Geometry objects.\nModule detail\nReal\nSequence\nnumpy.ndarrays"
    },
    {
        "objectID": "api/ansys/geometry/core/typing/index",
        "href": "api/ansys/geometry/core/typing/index.html#typing.Real",
        "title": "The typing.py module > Module detail > Real",
        "section": "Module detail > Real",
        "text": "typing.Real\n\nType used to refer to both integers and floats as possible values.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/typing/index",
        "href": "api/ansys/geometry/core/typing/index.html#typing.RealSequence",
        "title": "The typing.py module > Module detail > RealSequence",
        "section": "Module detail > RealSequence",
        "text": "typing.RealSequence\n\nType used to refer to Real types as a Sequence type.\n\nNotes\n\nnumpy.ndarrays are also accepted because they are\nthe overlaying data structure behind most PyAnsys Geometry objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation.html#nurbscurveevaluation",
        "title": "NURBSCurveEvaluation",
        "section": "NURBSCurveEvaluation",
        "text": "Bases: ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\nProvides evaluation of a NURBS curve at a given parameter.\nNURBS curve to evaluate.\nParameter to evaluate the NURBS curve at.\nNURBSCurveEvaluation\nNURBSCurveEvaluation\nansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation.html#ansys.geometry.core.shapes.curves.nurbs.NURBSCurveEvaluation",
        "title": "NURBSCurveEvaluation > NURBSCurveEvaluation > NURBSCurveEvaluation",
        "section": "NURBSCurveEvaluation > NURBSCurveEvaluation",
        "text": "class ansys.geometry.core.shapes.curves.nurbs.NURBSCurveEvaluation(nurbs_curve: NURBSCurve, parameter: ansys.geometry.core.typing.Real)\n\nBases: ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\n\nProvides evaluation of a NURBS curve at a given parameter.\n\nParameters\n\nnurbs_curve: ~ansys.geometry.core.shapes.curves.nurbs.NURBSCurve\n\nNURBS curve to evaluate.\n\nparameter: Real\n\nParameter to evaluate the NURBS curve at.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation.html#overview",
        "title": "NURBSCurveEvaluation > Overview",
        "section": "Overview",
        "text": "parameter\nParameter that the evaluation is based upon.\nposition\nPosition of the evaluation.\nfirst_derivative\nFirst derivative of the evaluation.\nsecond_derivative\nSecond derivative of the evaluation.\ncurvature\nCurvature of the evaluation.\nOverview\nparameter\nposition\nfirst_derivative\nsecond_derivative\ncurvature"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation.html#import-detail",
        "title": "NURBSCurveEvaluation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation.html#property-detail",
        "title": "NURBSCurveEvaluation > Property detail",
        "section": "Property detail",
        "text": "Parameter that the evaluation is based upon.\nPosition of the evaluation.\nFirst derivative of the evaluation.\nSecond derivative of the evaluation.\nCurvature of the evaluation.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation.html#NURBSCurveEvaluation.parameter",
        "title": "NURBSCurveEvaluation > Property detail > parameter",
        "section": "Property detail > parameter",
        "text": "property NURBSCurveEvaluation.parameter: ansys.geometry.core.typing.Real\n\nParameter that the evaluation is based upon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation.html#NURBSCurveEvaluation.position",
        "title": "NURBSCurveEvaluation > Property detail > position",
        "section": "Property detail > position",
        "text": "property NURBSCurveEvaluation.position: ansys.geometry.core.math.Point3D\n\nPosition of the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation.html#NURBSCurveEvaluation.first_derivative",
        "title": "NURBSCurveEvaluation > Property detail > first_derivative",
        "section": "Property detail > first_derivative",
        "text": "property NURBSCurveEvaluation.first_derivative: ansys.geometry.core.math.vector.Vector3D\n\nFirst derivative of the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation.html#NURBSCurveEvaluation.second_derivative",
        "title": "NURBSCurveEvaluation > Property detail > second_derivative",
        "section": "Property detail > second_derivative",
        "text": "property NURBSCurveEvaluation.second_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative of the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurveEvaluation.html#NURBSCurveEvaluation.curvature",
        "title": "NURBSCurveEvaluation > Property detail > curvature",
        "section": "Property detail > curvature",
        "text": "property NURBSCurveEvaluation.curvature: ansys.geometry.core.typing.Real\n\nCurvature of the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Measurement",
        "href": "api/ansys/geometry/core/misc/measurements/Measurement.html#measurement",
        "title": "Measurement",
        "section": "Measurement",
        "text": "Bases: ansys.geometry.core.misc.units.PhysicalQuantity\nProvides the PhysicalQuantity subclass for holding a measurement.\nValue of the measurement.\nUnits for the measurement.\nUnits for extracting the dimensions of the measurement.\nIf ~pint.Unit.meter is given, the dimension extracted is [length].\nMeasurement\nMeasurement\nansys.geometry.core.misc.units.PhysicalQuantity\nPhysicalQuantity\nReal\nQuantity\nUnit\nUnit\n~pint.Unit.meter\n[length]"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Measurement",
        "href": "api/ansys/geometry/core/misc/measurements/Measurement.html#ansys.geometry.core.misc.measurements.Measurement",
        "title": "Measurement > Measurement > Measurement",
        "section": "Measurement > Measurement",
        "text": "class ansys.geometry.core.misc.measurements.Measurement(value: ansys.geometry.core.typing.Real | pint.Quantity, unit: pint.Unit, dimensions: pint.Unit)\n\nBases: ansys.geometry.core.misc.units.PhysicalQuantity\n\nProvides the PhysicalQuantity subclass for holding a measurement.\n\nParameters\n\nvalue\n\nReal | Quantity\n\nValue of the measurement.\n\nunit\n\nUnit\n\nUnits for the measurement.\n\ndimensions\n\nUnit\n\nUnits for extracting the dimensions of the measurement.\nIf ~pint.Unit.meter is given, the dimension extracted is [length].\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Measurement",
        "href": "api/ansys/geometry/core/misc/measurements/Measurement.html#overview",
        "title": "Measurement > Overview",
        "section": "Overview",
        "text": "value\nValue of the measurement.\n__repr__\nRepresentation of the Measurement class.\n__eq__\nEquals operator for the Measurement class.\nOverview\nvalue\n__repr__\nMeasurement\n__eq__\nMeasurement"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Measurement",
        "href": "api/ansys/geometry/core/misc/measurements/Measurement.html#import-detail",
        "title": "Measurement > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Measurement",
        "href": "api/ansys/geometry/core/misc/measurements/Measurement.html#property-detail",
        "title": "Measurement > Property detail",
        "section": "Property detail",
        "text": "Value of the measurement.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Measurement",
        "href": "api/ansys/geometry/core/misc/measurements/Measurement.html#Measurement.value",
        "title": "Measurement > Property detail > value",
        "section": "Property detail > value",
        "text": "property Measurement.value: pint.Quantity\n\nValue of the measurement.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Measurement",
        "href": "api/ansys/geometry/core/misc/measurements/Measurement.html#method-detail",
        "title": "Measurement > Method detail",
        "section": "Method detail",
        "text": "Representation of the Measurement class.\nEquals operator for the Measurement class.\nMethod detail\nMeasurement\nMeasurement"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Measurement",
        "href": "api/ansys/geometry/core/misc/measurements/Measurement.html#Measurement.__repr__",
        "title": "Measurement > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Measurement.__repr__()\n\nRepresentation of the Measurement class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Measurement",
        "href": "api/ansys/geometry/core/misc/measurements/Measurement.html#Measurement.__eq__",
        "title": "Measurement > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Measurement.__eq__(other: Measurement) -> bool\n\nEquals operator for the Measurement class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/face/index",
        "href": "api/ansys/geometry/core/sketch/face/index.html#the-facepy-module",
        "title": "The face.py module",
        "section": "The face.py module",
        "text": "The face.py module\nface.py"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/face/index",
        "href": "api/ansys/geometry/core/sketch/face/index.html#summary",
        "title": "The face.py module > Summary",
        "section": "Summary",
        "text": "SketchFace\nProvides for modeling a face.\nSummary\nSketchFace"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/face/index",
        "href": "api/ansys/geometry/core/sketch/face/index.html#description",
        "title": "The face.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a face (closed 2D sketch).\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/index",
        "href": "api/ansys/geometry/core/misc/accuracy/index.html#the-accuracypy-module",
        "title": "The accuracy.py module",
        "section": "The accuracy.py module",
        "text": "The accuracy.py module\naccuracy.py"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/index",
        "href": "api/ansys/geometry/core/misc/accuracy/index.html#summary",
        "title": "The accuracy.py module > Summary",
        "section": "Summary",
        "text": "Accuracy\nDecimal precision evaluations for math operations.\nLENGTH_ACCURACY\nConstant for decimal accuracy in length comparisons.\nANGLE_ACCURACY\nConstant for decimal accuracy in angle comparisons.\nDOUBLE_ACCURACY\nConstant for double accuracy.\nSummary\nAccuracy\nLENGTH_ACCURACY\nANGLE_ACCURACY\nDOUBLE_ACCURACY"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/index",
        "href": "api/ansys/geometry/core/misc/accuracy/index.html#description",
        "title": "The accuracy.py module > Description",
        "section": "Description",
        "text": "Provides for evaluating decimal precision.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/index",
        "href": "api/ansys/geometry/core/misc/accuracy/index.html#module-detail",
        "title": "The accuracy.py module > Module detail",
        "section": "Module detail",
        "text": "Constant for decimal accuracy in length comparisons.\nConstant for decimal accuracy in angle comparisons.\nConstant for double accuracy.\nModule detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/index",
        "href": "api/ansys/geometry/core/misc/accuracy/index.html#accuracy.LENGTH_ACCURACY",
        "title": "The accuracy.py module > Module detail > LENGTH_ACCURACY",
        "section": "Module detail > LENGTH_ACCURACY",
        "text": "accuracy.LENGTH_ACCURACY: ansys.geometry.core.typing.Real = 1e-08\n\nConstant for decimal accuracy in length comparisons.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/index",
        "href": "api/ansys/geometry/core/misc/accuracy/index.html#accuracy.ANGLE_ACCURACY",
        "title": "The accuracy.py module > Module detail > ANGLE_ACCURACY",
        "section": "Module detail > ANGLE_ACCURACY",
        "text": "accuracy.ANGLE_ACCURACY: ansys.geometry.core.typing.Real = 1e-06\n\nConstant for decimal accuracy in angle comparisons.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/index",
        "href": "api/ansys/geometry/core/misc/accuracy/index.html#accuracy.DOUBLE_ACCURACY",
        "title": "The accuracy.py module > Module detail > DOUBLE_ACCURACY",
        "section": "Module detail > DOUBLE_ACCURACY",
        "text": "accuracy.DOUBLE_ACCURACY: ansys.geometry.core.typing.Real = 1e-13\n\nConstant for double accuracy.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/index",
        "href": "api/ansys/geometry/core/designer/part/index.html#the-partpy-module",
        "title": "The part.py module",
        "section": "The part.py module",
        "text": "The part.py module\npart.py"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/index",
        "href": "api/ansys/geometry/core/designer/part/index.html#summary",
        "title": "The part.py module > Summary",
        "section": "Summary",
        "text": "Part\nRepresents a part master.\nMasterComponent\nRepresents a part occurrence.\nSummary\nPart\nMasterComponent"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/index",
        "href": "api/ansys/geometry/core/designer/part/index.html#description",
        "title": "The part.py module > Description",
        "section": "Description",
        "text": "Module providing fundamental data of an assembly.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation.html#curveevaluation",
        "title": "CurveEvaluation",
        "section": "CurveEvaluation",
        "text": "Provides for evaluating a curve.\nCurveEvaluation\nCurveEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation.html#ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation",
        "title": "CurveEvaluation > CurveEvaluation > CurveEvaluation",
        "section": "CurveEvaluation > CurveEvaluation",
        "text": "class ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation(parameter: ansys.geometry.core.typing.Real = None)\n\nProvides for evaluating a curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation.html#overview",
        "title": "CurveEvaluation > Overview",
        "section": "Overview",
        "text": "is_set\nDetermine if the parameter for the evaluation has been set.\nparameter\nParameter that the evaluation is based upon.\nposition\nPosition of the evaluation.\nfirst_derivative\nFirst derivative of the evaluation.\nsecond_derivative\nSecond derivative of the evaluation.\ncurvature\nCurvature of the evaluation.\nOverview\nis_set\nparameter\nposition\nfirst_derivative\nsecond_derivative\ncurvature"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation.html#import-detail",
        "title": "CurveEvaluation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation.html#property-detail",
        "title": "CurveEvaluation > Property detail",
        "section": "Property detail",
        "text": "Parameter that the evaluation is based upon.\nPosition of the evaluation.\nFirst derivative of the evaluation.\nSecond derivative of the evaluation.\nCurvature of the evaluation.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation.html#CurveEvaluation.parameter",
        "title": "CurveEvaluation > Property detail > parameter",
        "section": "Property detail > parameter",
        "text": "property CurveEvaluation.parameter: ansys.geometry.core.typing.Real\n\nAbstractmethod\n\n\n\nParameter that the evaluation is based upon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation.html#CurveEvaluation.position",
        "title": "CurveEvaluation > Property detail > position",
        "section": "Property detail > position",
        "text": "property CurveEvaluation.position: ansys.geometry.core.math.point.Point3D\n\nAbstractmethod\n\n\n\nPosition of the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation.html#CurveEvaluation.first_derivative",
        "title": "CurveEvaluation > Property detail > first_derivative",
        "section": "Property detail > first_derivative",
        "text": "property CurveEvaluation.first_derivative: ansys.geometry.core.math.vector.Vector3D\n\nAbstractmethod\n\n\n\nFirst derivative of the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation.html#CurveEvaluation.second_derivative",
        "title": "CurveEvaluation > Property detail > second_derivative",
        "section": "Property detail > second_derivative",
        "text": "property CurveEvaluation.second_derivative: ansys.geometry.core.math.vector.Vector3D\n\nAbstractmethod\n\n\n\nSecond derivative of the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation.html#CurveEvaluation.curvature",
        "title": "CurveEvaluation > Property detail > curvature",
        "section": "Property detail > curvature",
        "text": "property CurveEvaluation.curvature: ansys.geometry.core.typing.Real\n\nAbstractmethod\n\n\n\nCurvature of the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation.html#method-detail",
        "title": "CurveEvaluation > Method detail",
        "section": "Method detail",
        "text": "Determine if the parameter for the evaluation has been set.\nMethod detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/CurveEvaluation.html#CurveEvaluation.is_set",
        "title": "CurveEvaluation > Method detail > is_set",
        "section": "Method detail > is_set",
        "text": "CurveEvaluation.is_set() -> bool\n\nDetermine if the parameter for the evaluation has been set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/index",
        "href": "api/ansys/geometry/core/tools/index.html#the-tools-package",
        "title": "The tools package",
        "section": "The tools package",
        "text": "The tools package\ntools"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/index",
        "href": "api/ansys/geometry/core/tools/index.html#summary",
        "title": "The tools package > Summary",
        "section": "Summary",
        "text": "check_geometry\nModule for repair tool message.\nmeasurement_tools\nProvides tools for measurement.\nprepare_tools\nProvides tools for preparing geometry for use with simulation.\nproblem_areas\nThe problem area definition.\nrepair_tool_message\nModule for repair tool message.\nrepair_tools\nProvides tools for repairing bodies.\nunsupported\nUnsupported functions for the PyAnsys Geometry library.\nSummary\ncheck_geometry\nmeasurement_tools\nprepare_tools\nproblem_areas\nrepair_tool_message\nrepair_tools\nunsupported"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/index",
        "href": "api/ansys/geometry/core/tools/index.html#description",
        "title": "The tools package > Description",
        "section": "Description",
        "text": "PyAnsys Geometry tools subpackage.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/index",
        "href": "api/ansys/geometry/core/designer/index.html#the-designer-package",
        "title": "The designer package",
        "section": "The designer package",
        "text": "The designer package\ndesigner"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/index",
        "href": "api/ansys/geometry/core/designer/index.html#summary",
        "title": "The designer package > Summary",
        "section": "Summary",
        "text": "beam\nProvides for creating and managing a beam.\nbody\nProvides for managing a body.\ncomponent\nProvides for managing components.\ncoordinate_system\nProvides for managing a user-defined coordinate system.\ndesign\nProvides for managing designs.\ndesignpoint\nModule for creating and managing design points.\nedge\nModule for managing an edge.\nface\nModule for managing a face.\ngeometry_commands\nProvides tools for pulling geometry.\npart\nModule providing fundamental data of an assembly.\nselection\nModule for creating a named selection.\nSummary\nbeam\nbody\ncomponent\ncoordinate_system\ndesign\ndesignpoint\nedge\nface\ngeometry_commands\npart\nselection"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/index",
        "href": "api/ansys/geometry/core/designer/index.html#description",
        "title": "The designer package > Description",
        "section": "Description",
        "text": "PyAnsys Geometry designer subpackage.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/errors/GeometryExitedError",
        "href": "api/ansys/geometry/core/errors/GeometryExitedError.html#geometryexitederror",
        "title": "GeometryExitedError",
        "section": "GeometryExitedError",
        "text": "Bases: RuntimeError\nProvides error message to raise when Geometry service has exited.\nMessage to raise.\nGeometryExitedError\nGeometryExitedError\nRuntimeError\npython:str\nservice\nhas"
    },
    {
        "objectID": "api/ansys/geometry/core/errors/GeometryExitedError",
        "href": "api/ansys/geometry/core/errors/GeometryExitedError.html#ansys.geometry.core.errors.GeometryExitedError",
        "title": "GeometryExitedError > GeometryExitedError > GeometryExitedError",
        "section": "GeometryExitedError > GeometryExitedError",
        "text": "exception ansys.geometry.core.errors.GeometryExitedError(msg='Geometry service has exited.')\n\nBases: RuntimeError\n\nProvides error message to raise when Geometry service has exited.\n\nParameters\n\nmsg\n\npython:str, default: “Geometry service has exited.”\n\nMessage to raise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/errors/GeometryExitedError",
        "href": "api/ansys/geometry/core/errors/GeometryExitedError.html#import-detail",
        "title": "GeometryExitedError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/index",
        "href": "api/ansys/geometry/core/connection/backend/index.html#the-backendpy-module",
        "title": "The backend.py module",
        "section": "The backend.py module",
        "text": "The backend.py module\nbackend.py"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/index",
        "href": "api/ansys/geometry/core/connection/backend/index.html#summary",
        "title": "The backend.py module > Summary",
        "section": "Summary",
        "text": "BackendType\nProvides an enum holding the available backend types.\nApiVersions\nProvides an enum for all the compatibles API versions.\nSummary\nBackendType\nApiVersions"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/index",
        "href": "api/ansys/geometry/core/connection/backend/index.html#description",
        "title": "The backend.py module > Description",
        "section": "Description",
        "text": "Module providing definitions for the backend types.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass",
        "href": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass.html#defaultunitsclass",
        "title": "DefaultUnitsClass",
        "section": "DefaultUnitsClass",
        "text": "Provides default units for PyAnsys Geometry.\nDefaultUnitsClass\nDefaultUnitsClass"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass",
        "href": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass.html#ansys.geometry.core.misc.measurements.DefaultUnitsClass",
        "title": "DefaultUnitsClass > DefaultUnitsClass > DefaultUnitsClass",
        "section": "DefaultUnitsClass > DefaultUnitsClass",
        "text": "class ansys.geometry.core.misc.measurements.DefaultUnitsClass\n\nProvides default units for PyAnsys Geometry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass",
        "href": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass.html#overview",
        "title": "DefaultUnitsClass > Overview",
        "section": "Overview",
        "text": "LENGTH\nDefault length unit for PyAnsys Geometry.\nANGLE\nDefault angle unit for PyAnsys Geometry.\nSERVER_LENGTH\nDefault length unit for gRPC messages.\nSERVER_AREA\nDefault area unit for gRPC messages.\nSERVER_VOLUME\nDefault volume unit for gRPC messages.\nSERVER_ANGLE\nDefault angle unit for gRPC messages.\nOverview\nLENGTH\nANGLE\nSERVER_LENGTH\nSERVER_AREA\nSERVER_VOLUME\nSERVER_ANGLE"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass",
        "href": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass.html#import-detail",
        "title": "DefaultUnitsClass > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass",
        "href": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass.html#property-detail",
        "title": "DefaultUnitsClass > Property detail",
        "section": "Property detail",
        "text": "Default length unit for PyAnsys Geometry.\nDefault angle unit for PyAnsys Geometry.\nDefault length unit for gRPC messages.\nThe default units on the server side are not modifiable yet.\nDefault area unit for gRPC messages.\nThe default units on the server side are not modifiable yet.\nDefault volume unit for gRPC messages.\nThe default units on the server side are not modifiable yet.\nDefault angle unit for gRPC messages.\nThe default units on the server side are not modifiable yet.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass",
        "href": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass.html#DefaultUnitsClass.LENGTH",
        "title": "DefaultUnitsClass > Property detail > LENGTH",
        "section": "Property detail > LENGTH",
        "text": "property DefaultUnitsClass.LENGTH: pint.Unit\n\nDefault length unit for PyAnsys Geometry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass",
        "href": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass.html#DefaultUnitsClass.ANGLE",
        "title": "DefaultUnitsClass > Property detail > ANGLE",
        "section": "Property detail > ANGLE",
        "text": "property DefaultUnitsClass.ANGLE: pint.Unit\n\nDefault angle unit for PyAnsys Geometry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass",
        "href": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass.html#DefaultUnitsClass.SERVER_LENGTH",
        "title": "DefaultUnitsClass > Property detail > SERVER_LENGTH",
        "section": "Property detail > SERVER_LENGTH",
        "text": "property DefaultUnitsClass.SERVER_LENGTH: pint.Unit\n\nDefault length unit for gRPC messages.\n\nNotes\n\nThe default units on the server side are not modifiable yet.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass",
        "href": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass.html#DefaultUnitsClass.SERVER_AREA",
        "title": "DefaultUnitsClass > Property detail > SERVER_AREA",
        "section": "Property detail > SERVER_AREA",
        "text": "property DefaultUnitsClass.SERVER_AREA: pint.Unit\n\nDefault area unit for gRPC messages.\n\nNotes\n\nThe default units on the server side are not modifiable yet.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass",
        "href": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass.html#DefaultUnitsClass.SERVER_VOLUME",
        "title": "DefaultUnitsClass > Property detail > SERVER_VOLUME",
        "section": "Property detail > SERVER_VOLUME",
        "text": "property DefaultUnitsClass.SERVER_VOLUME: pint.Unit\n\nDefault volume unit for gRPC messages.\n\nNotes\n\nThe default units on the server side are not modifiable yet.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass",
        "href": "api/ansys/geometry/core/misc/measurements/DefaultUnitsClass.html#DefaultUnitsClass.SERVER_ANGLE",
        "title": "DefaultUnitsClass > Property detail > SERVER_ANGLE",
        "section": "Property detail > SERVER_ANGLE",
        "text": "property DefaultUnitsClass.SERVER_ANGLE: pint.Unit\n\nDefault angle unit for gRPC messages.\n\nNotes\n\nThe default units on the server side are not modifiable yet.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/Curve",
        "href": "api/ansys/geometry/core/shapes/curves/curve/Curve.html#curve",
        "title": "Curve",
        "section": "Curve",
        "text": "Bases: abc.ABC\nProvides the abstract base class representing a 3D curve.\nCurve\nCurve\nabc.ABC"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/Curve",
        "href": "api/ansys/geometry/core/shapes/curves/curve/Curve.html#ansys.geometry.core.shapes.curves.curve.Curve",
        "title": "Curve > Curve > Curve",
        "section": "Curve > Curve",
        "text": "class ansys.geometry.core.shapes.curves.curve.Curve\n\nBases: abc.ABC\n\nProvides the abstract base class representing a 3D curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/Curve",
        "href": "api/ansys/geometry/core/shapes/curves/curve/Curve.html#overview",
        "title": "Curve > Overview",
        "section": "Overview",
        "text": "parameterization\nParameterize the curve.\ncontains_param\nCheck a parameter is within the parametric range of the curve.\ncontains_point\nCheck a point is contained by the curve.\ntransformed_copy\nCreate a transformed copy of the curve.\n__eq__\nDetermine if two curves are equal.\nevaluate\nEvaluate the curve at the given parameter.\nproject_point\nProject a point to the curve.\ntrim\nTrim this curve by bounding it with an interval.\nOverview\nparameterization\ncontains_param\ncontains_point\ntransformed_copy\n__eq__\nevaluate\nproject_point\ntrim"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/Curve",
        "href": "api/ansys/geometry/core/shapes/curves/curve/Curve.html#import-detail",
        "title": "Curve > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/Curve",
        "href": "api/ansys/geometry/core/shapes/curves/curve/Curve.html#method-detail",
        "title": "Curve > Method detail",
        "section": "Method detail",
        "text": "Parameterize the curve.\nCheck a parameter is within the parametric range of the curve.\nCheck a point is contained by the curve.\nThe point can either lie within the curve or on its boundary.\nCreate a transformed copy of the curve.\nDetermine if two curves are equal.\nEvaluate the curve at the given parameter.\nProject a point to the curve.\nThis method returns the evaluation at the closest point.\nTrim this curve by bounding it with an interval.\nThe resulting bounded curve.\nMethod detail\nTrimmedCurve"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/Curve",
        "href": "api/ansys/geometry/core/shapes/curves/curve/Curve.html#Curve.parameterization",
        "title": "Curve > Method detail > parameterization",
        "section": "Method detail > parameterization",
        "text": "abstractmethod Curve.parameterization() -> ansys.geometry.core.shapes.parameterization.Parameterization\n\nParameterize the curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/Curve",
        "href": "api/ansys/geometry/core/shapes/curves/curve/Curve.html#Curve.contains_param",
        "title": "Curve > Method detail > contains_param",
        "section": "Method detail > contains_param",
        "text": "abstractmethod Curve.contains_param(param: ansys.geometry.core.typing.Real) -> bool\n\nCheck a parameter is within the parametric range of the curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/Curve",
        "href": "api/ansys/geometry/core/shapes/curves/curve/Curve.html#Curve.contains_point",
        "title": "Curve > Method detail > contains_point",
        "section": "Method detail > contains_point",
        "text": "abstractmethod Curve.contains_point(point: ansys.geometry.core.math.point.Point3D) -> bool\n\nCheck a point is contained by the curve.\n\nThe point can either lie within the curve or on its boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/Curve",
        "href": "api/ansys/geometry/core/shapes/curves/curve/Curve.html#Curve.transformed_copy",
        "title": "Curve > Method detail > transformed_copy",
        "section": "Method detail > transformed_copy",
        "text": "abstractmethod Curve.transformed_copy(matrix: ansys.geometry.core.math.matrix.Matrix44) -> Curve\n\nCreate a transformed copy of the curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/Curve",
        "href": "api/ansys/geometry/core/shapes/curves/curve/Curve.html#Curve.__eq__",
        "title": "Curve > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "abstractmethod Curve.__eq__(other: Curve) -> bool\n\nDetermine if two curves are equal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/Curve",
        "href": "api/ansys/geometry/core/shapes/curves/curve/Curve.html#Curve.evaluate",
        "title": "Curve > Method detail > evaluate",
        "section": "Method detail > evaluate",
        "text": "abstractmethod Curve.evaluate(parameter: ansys.geometry.core.typing.Real) -> ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\n\nEvaluate the curve at the given parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/Curve",
        "href": "api/ansys/geometry/core/shapes/curves/curve/Curve.html#Curve.project_point",
        "title": "Curve > Method detail > project_point",
        "section": "Method detail > project_point",
        "text": "abstractmethod Curve.project_point(point: ansys.geometry.core.math.point.Point3D) -> ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\n\nProject a point to the curve.\n\nThis method returns the evaluation at the closest point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/Curve",
        "href": "api/ansys/geometry/core/shapes/curves/curve/Curve.html#Curve.trim",
        "title": "Curve > Method detail > trim",
        "section": "Method detail > trim",
        "text": "Curve.trim(interval: ansys.geometry.core.shapes.parameterization.Interval) -> ansys.geometry.core.shapes.curves.trimmed_curve.TrimmedCurve\n\nTrim this curve by bounding it with an interval.\n\nReturns\n\nTrimmedCurve\n\nThe resulting bounded curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamForm",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamForm.html#paramform",
        "title": "ParamForm",
        "section": "ParamForm",
        "text": "Bases: enum.Enum\nParamForm enum class that defines the form of a Parameterization.\nParamForm\nParamForm\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamForm",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamForm.html#ansys.geometry.core.shapes.parameterization.ParamForm",
        "title": "ParamForm > ParamForm > ParamForm",
        "section": "ParamForm > ParamForm",
        "text": "class ansys.geometry.core.shapes.parameterization.ParamForm(*args, **kwds)\n\nBases: enum.Enum\n\nParamForm enum class that defines the form of a Parameterization.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamForm",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamForm.html#overview",
        "title": "ParamForm > Overview",
        "section": "Overview",
        "text": "OPEN\nCLOSED\nPERIODIC\nOTHER\nOverview\nOPEN\nCLOSED\nPERIODIC\nOTHER"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamForm",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamForm.html#import-detail",
        "title": "ParamForm > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamForm",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamForm.html#attribute-detail",
        "title": "ParamForm > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamForm",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamForm.html#ParamForm.OPEN",
        "title": "ParamForm > Attribute detail > OPEN",
        "section": "Attribute detail > OPEN",
        "text": "ParamForm.OPEN = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamForm",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamForm.html#ParamForm.CLOSED",
        "title": "ParamForm > Attribute detail > CLOSED",
        "section": "Attribute detail > CLOSED",
        "text": "ParamForm.CLOSED = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamForm",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamForm.html#ParamForm.PERIODIC",
        "title": "ParamForm > Attribute detail > PERIODIC",
        "section": "Attribute detail > PERIODIC",
        "text": "ParamForm.PERIODIC = 3\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamForm",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamForm.html#ParamForm.OTHER",
        "title": "ParamForm > Attribute detail > OTHER",
        "section": "Attribute detail > OTHER",
        "text": "ParamForm.OTHER = 4\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#polygon",
        "title": "Polygon",
        "section": "Polygon",
        "text": "Bases: ansys.geometry.core.sketch.face.SketchFace\nProvides for modeling regular polygons.\nCenter point of the circle.\nInner radius (apothem) of the polygon.\nNumber of sides of the polygon.\nPlacement angle for orientation alignment.\nPolygon\nPolygon\nansys.geometry.core.sketch.face.SketchFace\nQuantity\nDistance\nReal\npython:int\nQuantity\nAngle\nReal"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#ansys.geometry.core.sketch.polygon.Polygon",
        "title": "Polygon > Polygon > Polygon",
        "section": "Polygon > Polygon",
        "text": "class ansys.geometry.core.sketch.polygon.Polygon(center: ansys.geometry.core.math.point.Point2D, inner_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, sides: int, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0)\n\nBases: ansys.geometry.core.sketch.face.SketchFace\n\nProvides for modeling regular polygons.\n\nParameters\n\ncenter: Point2D\n\nCenter point of the circle.\n\ninner_radius\n\nQuantity | Distance | Real\n\nInner radius (apothem) of the polygon.\n\nsides\n\npython:int\n\nNumber of sides of the polygon.\n\nangle\n\nQuantity | Angle | Real, default: 0\n\nPlacement angle for orientation alignment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#overview",
        "title": "Polygon > Overview",
        "section": "Overview",
        "text": "center\nCenter point of the polygon.\ninner_radius\nInner radius (apothem) of the polygon.\nn_sides\nNumber of sides of the polygon.\nangle\nOrientation angle of the polygon.\nlength\nSide length of the polygon.\nouter_radius\nOuter radius of the polygon.\nperimeter\nPerimeter of the polygon.\narea\nArea of the polygon.\nvisualization_polydata\nVTK polydata representation for PyVista visualization.\nOverview\ncenter\ninner_radius\nn_sides\nangle\nlength\nouter_radius\nperimeter\narea\nvisualization_polydata"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#import-detail",
        "title": "Polygon > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#property-detail",
        "title": "Polygon > Property detail",
        "section": "Property detail",
        "text": "Center point of the polygon.\nInner radius (apothem) of the polygon.\nNumber of sides of the polygon.\nOrientation angle of the polygon.\nSide length of the polygon.\nOuter radius of the polygon.\nPerimeter of the polygon.\nArea of the polygon.\nVTK polydata representation for PyVista visualization.\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\nVTK pyvista.Polydata configuration.\nProperty detail\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#Polygon.center",
        "title": "Polygon > Property detail > center",
        "section": "Property detail > center",
        "text": "property Polygon.center: ansys.geometry.core.math.point.Point2D\n\nCenter point of the polygon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#Polygon.inner_radius",
        "title": "Polygon > Property detail > inner_radius",
        "section": "Property detail > inner_radius",
        "text": "property Polygon.inner_radius: pint.Quantity\n\nInner radius (apothem) of the polygon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#Polygon.n_sides",
        "title": "Polygon > Property detail > n_sides",
        "section": "Property detail > n_sides",
        "text": "property Polygon.n_sides: int\n\nNumber of sides of the polygon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#Polygon.angle",
        "title": "Polygon > Property detail > angle",
        "section": "Property detail > angle",
        "text": "property Polygon.angle: pint.Quantity\n\nOrientation angle of the polygon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#Polygon.length",
        "title": "Polygon > Property detail > length",
        "section": "Property detail > length",
        "text": "property Polygon.length: pint.Quantity\n\nSide length of the polygon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#Polygon.outer_radius",
        "title": "Polygon > Property detail > outer_radius",
        "section": "Property detail > outer_radius",
        "text": "property Polygon.outer_radius: pint.Quantity\n\nOuter radius of the polygon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#Polygon.perimeter",
        "title": "Polygon > Property detail > perimeter",
        "section": "Property detail > perimeter",
        "text": "property Polygon.perimeter: pint.Quantity\n\nPerimeter of the polygon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#Polygon.area",
        "title": "Polygon > Property detail > area",
        "section": "Property detail > area",
        "text": "property Polygon.area: pint.Quantity\n\nArea of the polygon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/polygon/Polygon",
        "href": "api/ansys/geometry/core/sketch/polygon/Polygon.html#Polygon.visualization_polydata",
        "title": "Polygon > Property detail > visualization_polydata",
        "section": "Property detail > visualization_polydata",
        "text": "property Polygon.visualization_polydata: pyvista.PolyData\n\nVTK polydata representation for PyVista visualization.\n\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\n\nReturns\n\npyvista.PolyData\n\nVTK pyvista.Polydata configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Distance",
        "href": "api/ansys/geometry/core/misc/measurements/Distance.html#distance",
        "title": "Distance",
        "section": "Distance",
        "text": "Bases: Measurement\nProvides the Measurement subclass for holding a distance.\nValue of the distance.\nUnits for the distance.\nDistance\nDistance\nMeasurement\nMeasurement\nReal\nQuantity\nUnit\nDEFAULT_UNITS.LENGTH"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Distance",
        "href": "api/ansys/geometry/core/misc/measurements/Distance.html#ansys.geometry.core.misc.measurements.Distance",
        "title": "Distance > Distance > Distance",
        "section": "Distance > Distance",
        "text": "class ansys.geometry.core.misc.measurements.Distance(value: ansys.geometry.core.typing.Real | pint.Quantity, unit: pint.Unit | None = None)\n\nBases: Measurement\n\nProvides the Measurement subclass for holding a distance.\n\nParameters\n\nvalue\n\nReal | Quantity\n\nValue of the distance.\n\nunit\n\nUnit, default: DEFAULT_UNITS.LENGTH\n\nUnits for the distance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Distance",
        "href": "api/ansys/geometry/core/misc/measurements/Distance.html#import-detail",
        "title": "Distance > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#arc",
        "title": "Arc",
        "section": "Arc",
        "text": "Bases: ansys.geometry.core.sketch.edge.SketchEdge\nProvides for modeling an arc.\nStarting point of the arc.\nEnding point of the arc.\nCenter point of the arc.\nWhether the arc spans the clockwise angle between the start and end points.\nWhen False (default), the arc spans the counter-clockwise angle. When\nTrue, the arc spands the clockwise angle.\nArc\nArc\nansys.geometry.core.sketch.edge.SketchEdge\nPoint2D\nPoint2D\nPoint2D\npython:False\nFalse\nTrue"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#ansys.geometry.core.sketch.arc.Arc",
        "title": "Arc > Arc > Arc",
        "section": "Arc > Arc",
        "text": "class ansys.geometry.core.sketch.arc.Arc(start: ansys.geometry.core.math.point.Point2D, end: ansys.geometry.core.math.point.Point2D, center: ansys.geometry.core.math.point.Point2D, clockwise: bool = False)\n\nBases: ansys.geometry.core.sketch.edge.SketchEdge\n\nProvides for modeling an arc.\n\nParameters\n\nstart\n\nPoint2D\n\nStarting point of the arc.\n\nend\n\nPoint2D\n\nEnding point of the arc.\n\ncenter\n\nPoint2D\n\nCenter point of the arc.\n\nclockwise\n\nbool, default: python:False\n\nWhether the arc spans the clockwise angle between the start and end points.\nWhen False (default), the arc spans the counter-clockwise angle. When\nTrue, the arc spands the clockwise angle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#overview",
        "title": "Arc > Overview",
        "section": "Overview",
        "text": "from_three_points\nCreate an arc from three given points.\nfrom_start_end_and_radius\nCreate an arc from a starting point, an ending point, and a radius.\nfrom_start_center_and_angle\nCreate an arc from a starting point, a center point, and an angle.\nstart\nStarting point of the arc line.\nend\nEnding point of the arc line.\ncenter\nCenter point of the arc.\nlength\nLength of the arc.\nradius\nRadius of the arc.\nangle\nAngle of the arc.\nis_clockwise\nFlag indicating whether the rotation of the angle is clockwise.\nsector_area\nArea of the sector of the arc.\nvisualization_polydata\nVTK polydata representation for PyVista visualization.\n__eq__\nEquals operator for the Arc class.\n__ne__\nNot equals operator for the Arc class.\nOverview\nfrom_three_points\nfrom_start_end_and_radius\nfrom_start_center_and_angle\nstart\nend\ncenter\nlength\nradius\nangle\nis_clockwise\nsector_area\nvisualization_polydata\n__eq__\nArc\n__ne__\nArc"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#import-detail",
        "title": "Arc > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#property-detail",
        "title": "Arc > Property detail",
        "section": "Property detail",
        "text": "Starting point of the arc line.\nEnding point of the arc line.\nCenter point of the arc.\nLength of the arc.\nRadius of the arc.\nAngle of the arc.\nFlag indicating whether the rotation of the angle is clockwise.\nTrue if the sense of rotation is clockwise.\nFalse if the sense of rotation is counter-clockwise.\nArea of the sector of the arc.\nVTK polydata representation for PyVista visualization.\nVTK pyvista.Polydata configuration.\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\nProperty detail\nTrue\nFalse\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.start",
        "title": "Arc > Property detail > start",
        "section": "Property detail > start",
        "text": "property Arc.start: ansys.geometry.core.math.point.Point2D\n\nStarting point of the arc line.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.end",
        "title": "Arc > Property detail > end",
        "section": "Property detail > end",
        "text": "property Arc.end: ansys.geometry.core.math.point.Point2D\n\nEnding point of the arc line.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.center",
        "title": "Arc > Property detail > center",
        "section": "Property detail > center",
        "text": "property Arc.center: ansys.geometry.core.math.point.Point2D\n\nCenter point of the arc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.length",
        "title": "Arc > Property detail > length",
        "section": "Property detail > length",
        "text": "property Arc.length: pint.Quantity\n\nLength of the arc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.radius",
        "title": "Arc > Property detail > radius",
        "section": "Property detail > radius",
        "text": "property Arc.radius: pint.Quantity\n\nRadius of the arc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.angle",
        "title": "Arc > Property detail > angle",
        "section": "Property detail > angle",
        "text": "property Arc.angle: pint.Quantity\n\nAngle of the arc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.is_clockwise",
        "title": "Arc > Property detail > is_clockwise",
        "section": "Property detail > is_clockwise",
        "text": "property Arc.is_clockwise: bool\n\nFlag indicating whether the rotation of the angle is clockwise.\n\nReturns\n\nbool\n\nTrue if the sense of rotation is clockwise.\nFalse if the sense of rotation is counter-clockwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.sector_area",
        "title": "Arc > Property detail > sector_area",
        "section": "Property detail > sector_area",
        "text": "property Arc.sector_area: pint.Quantity\n\nArea of the sector of the arc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.visualization_polydata",
        "title": "Arc > Property detail > visualization_polydata",
        "section": "Property detail > visualization_polydata",
        "text": "property Arc.visualization_polydata: pyvista.PolyData\n\nVTK polydata representation for PyVista visualization.\n\nReturns\n\npyvista.PolyData\n\nVTK pyvista.Polydata configuration.\n\nNotes\n\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#method-detail",
        "title": "Arc > Method detail",
        "section": "Method detail",
        "text": "Equals operator for the Arc class.\nNot equals operator for the Arc class.\nCreate an arc from three given points.\nStarting point of the arc.\nIntermediate point (location) of the arc.\nEnding point of the arc.\nArc generated from the three points.\nCreate an arc from a starting point, an ending point, and a radius.\nStarting point of the arc.\nEnding point of the arc.\nRadius of the arc.\nWhether the arc is convex. The default is False.\nWhen False, the arc is concave. When True, the arc is convex.\nWhether the arc spans the clockwise angle between the start and end points.\nWhen False, the arc spans the counter-clockwise angle.\nWhen True, the arc spands the clockwise angle.\nArc generated from the three points.\nCreate an arc from a starting point, a center point, and an angle.\nStarting point of the arc.\nCenter point of the arc.\nAngle of the arc.\nWhether the provided angle should be considered clockwise.\nWhen False, the angle is considered counter-clockwise.\nWhen True, the angle is considered clockwise.\nArc generated from the three points.\nMethod detail\nArc\nArc\nPoint2D\nPoint2D\nPoint2D\nArc\nPoint2D\nPoint2D\nQuantity\nDistance\nReal\npython:False\nFalse\nFalse\nTrue\npython:False\nFalse\nTrue\nArc\nPoint2D\nPoint2D\nAngle\nQuantity\nReal\npython:False\nFalse\nTrue\nArc"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.__eq__",
        "title": "Arc > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Arc.__eq__(other: Arc) -> bool\n\nEquals operator for the Arc class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.__ne__",
        "title": "Arc > Method detail > __ne__",
        "section": "Method detail > __ne__",
        "text": "Arc.__ne__(other: Arc) -> bool\n\nNot equals operator for the Arc class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.from_three_points",
        "title": "Arc > Method detail > from_three_points",
        "section": "Method detail > from_three_points",
        "text": "classmethod Arc.from_three_points(start: ansys.geometry.core.math.point.Point2D, inter: ansys.geometry.core.math.point.Point2D, end: ansys.geometry.core.math.point.Point2D)\n\nCreate an arc from three given points.\n\nParameters\n\nstart\n\nPoint2D\n\nStarting point of the arc.\n\ninter\n\nPoint2D\n\nIntermediate point (location) of the arc.\n\nend\n\nPoint2D\n\nEnding point of the arc.\n\nReturns\n\nArc\n\nArc generated from the three points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.from_start_end_and_radius",
        "title": "Arc > Method detail > from_start_end_and_radius",
        "section": "Method detail > from_start_end_and_radius",
        "text": "classmethod Arc.from_start_end_and_radius(start: ansys.geometry.core.math.point.Point2D, end: ansys.geometry.core.math.point.Point2D, radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, convex_arc: bool = False, clockwise: bool = False)\n\nCreate an arc from a starting point, an ending point, and a radius.\n\nParameters\n\nstart\n\nPoint2D\n\nStarting point of the arc.\n\nend\n\nPoint2D\n\nEnding point of the arc.\n\nradius\n\nQuantity | Distance | Real\n\nRadius of the arc.\n\nconvex_arc\n\nbool, default: python:False\n\nWhether the arc is convex. The default is False.\nWhen False, the arc is concave. When True, the arc is convex.\n\nclockwise\n\nbool, default: python:False\n\nWhether the arc spans the clockwise angle between the start and end points.\nWhen False, the arc spans the counter-clockwise angle.\nWhen True, the arc spands the clockwise angle.\n\nReturns\n\nArc\n\nArc generated from the three points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/Arc",
        "href": "api/ansys/geometry/core/sketch/arc/Arc.html#Arc.from_start_center_and_angle",
        "title": "Arc > Method detail > from_start_center_and_angle",
        "section": "Method detail > from_start_center_and_angle",
        "text": "classmethod Arc.from_start_center_and_angle(start: ansys.geometry.core.math.point.Point2D, center: ansys.geometry.core.math.point.Point2D, angle: ansys.geometry.core.misc.measurements.Angle | pint.Quantity | ansys.geometry.core.typing.Real, clockwise: bool = False)\n\nCreate an arc from a starting point, a center point, and an angle.\n\nParameters\n\nstart\n\nPoint2D\n\nStarting point of the arc.\n\ncenter\n\nPoint2D\n\nCenter point of the arc.\n\nangle\n\nAngle | Quantity | Real\n\nAngle of the arc.\n\nclockwise\n\nbool, default: python:False\n\nWhether the provided angle should be considered clockwise.\nWhen False, the angle is considered counter-clockwise.\nWhen True, the angle is considered clockwise.\n\nReturns\n\nArc\n\nArc generated from the three points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/02_sketching/advanced_sketching_gears",
        "href": "examples/02_sketching/advanced_sketching_gears.html#sketching-parametric-sketching-for-gears",
        "title": "Examples > Sketching: Parametric sketching for gears",
        "section": "Sketching: Parametric sketching for gears",
        "text": "This example shows how to use gear sketching shapes from PyAnsys Geometry.\nSketching: Parametric sketching for gears"
    },
    {
        "objectID": "examples/02_sketching/advanced_sketching_gears",
        "href": "examples/02_sketching/advanced_sketching_gears.html#perform-required-imports-and-pre-sketching-operations",
        "title": "Examples > Sketching: Parametric sketching for gears > Perform required imports and pre-sketching operations",
        "section": "Perform required imports and pre-sketching operations",
        "text": "Perform required imports and instantiate the Modeler instance and the basic elements that define a sketch.\nPerform required imports and pre-sketching operations\nModeler"
    },
    {
        "objectID": "examples/02_sketching/advanced_sketching_gears",
        "href": "examples/02_sketching/advanced_sketching_gears.html#sketch-a-dummy-gear",
        "title": "Examples > Sketching: Parametric sketching for gears > Sketch a dummy gear",
        "section": "Sketch a dummy gear",
        "text": "DummyGear sketches are simple gears that have straight teeth. While they do not ensure actual physical functionality, they might be useful for some simple playground tests.\nInstantiate a new Sketch object and then define and plot a dummy gear.\nAfter creating the sketch, extrudes it.\nSketch a dummy gear\nDummyGear\nSketch"
    },
    {
        "objectID": "examples/02_sketching/advanced_sketching_gears",
        "href": "examples/02_sketching/advanced_sketching_gears.html#sketch-a-spur-gear",
        "title": "Examples > Sketching: Parametric sketching for gears > Sketch a spur gear",
        "section": "Sketch a spur gear",
        "text": "SpurGear sketches are parametric CAD spur gears based on four parameters:\norigin: Center point location for the desired spur gear. The value must be a Point2D object.\nmodule: Ratio between the pitch circle diameter in millimeters and the number of teeth. This is a common parameter for spur gears. The value should be an integer or a float.\npressure_angle: Pressure angle expected for the teeth of the spur gear. This is also a common parameter for spur gears. The value must be a pint.Quantity object.\nn_teeth: Number of teeth. The value must be an integer.\nInstantiate a new Sketch object and then define and plot a spur gear.\nAfter creating the sketch, extrude it.\nSketch a spur gear\nSpurGear\norigin\nPoint2D\nmodule\npressure_angle\npint.Quantity\nn_teeth\nSketch"
    },
    {
        "objectID": "examples/02_sketching/advanced_sketching_gears",
        "href": "examples/02_sketching/advanced_sketching_gears.html#close-the-modeler",
        "title": "Examples > Sketching: Parametric sketching for gears > Close the modeler",
        "section": "Close the modeler",
        "text": "Close the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/index",
        "href": "api/ansys/geometry/core/misc/measurements/index.html#the-measurementspy-module",
        "title": "The measurements.py module",
        "section": "The measurements.py module",
        "text": "The measurements.py module\nmeasurements.py"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/index",
        "href": "api/ansys/geometry/core/misc/measurements/index.html#summary",
        "title": "The measurements.py module > Summary",
        "section": "Summary",
        "text": "SingletonMeta\nProvides a thread-safe implementation of a singleton design pattern.\nDefaultUnitsClass\nProvides default units for PyAnsys Geometry.\nMeasurement\nProvides the PhysicalQuantity subclass for holding a measurement.\nDistance\nProvides the Measurement subclass for holding a distance.\nAngle\nProvides the Measurement subclass for holding an angle.\nDEFAULT_UNITS\nPyAnsys Geometry default units object.\nSummary\nSingletonMeta\nDefaultUnitsClass\nMeasurement\nPhysicalQuantity\nDistance\nMeasurement\nAngle\nMeasurement\nDEFAULT_UNITS"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/index",
        "href": "api/ansys/geometry/core/misc/measurements/index.html#description",
        "title": "The measurements.py module > Description",
        "section": "Description",
        "text": "Provides various measurement-related classes.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/index",
        "href": "api/ansys/geometry/core/misc/measurements/index.html#module-detail",
        "title": "The measurements.py module > Module detail",
        "section": "Module detail",
        "text": "PyAnsys Geometry default units object.\nModule detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/index",
        "href": "api/ansys/geometry/core/misc/measurements/index.html#measurements.DEFAULT_UNITS",
        "title": "The measurements.py module > Module detail > DEFAULT_UNITS",
        "section": "Module detail > DEFAULT_UNITS",
        "text": "measurements.DEFAULT_UNITS\n\nPyAnsys Geometry default units object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryPercentStyle",
        "href": "api/ansys/geometry/core/logger/PyGeometryPercentStyle.html#pygeometrypercentstyle",
        "title": "PyGeometryPercentStyle",
        "section": "PyGeometryPercentStyle",
        "text": "Bases: logging.PercentStyle\nProvides a common messaging style.\nPyGeometryPercentStyle\nPyGeometryPercentStyle\nlogging.PercentStyle"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryPercentStyle",
        "href": "api/ansys/geometry/core/logger/PyGeometryPercentStyle.html#ansys.geometry.core.logger.PyGeometryPercentStyle",
        "title": "PyGeometryPercentStyle > PyGeometryPercentStyle > PyGeometryPercentStyle",
        "section": "PyGeometryPercentStyle > PyGeometryPercentStyle",
        "text": "class ansys.geometry.core.logger.PyGeometryPercentStyle(fmt, *, defaults=None)\n\nBases: logging.PercentStyle\n\nProvides a common messaging style.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryPercentStyle",
        "href": "api/ansys/geometry/core/logger/PyGeometryPercentStyle.html#import-detail",
        "title": "PyGeometryPercentStyle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "This section provides an overview of the PyAnsys Geometry library,\nexplaining key concepts and approaches for primitives,\nsketches (2D basic shape elements), and model designs.\nUser guide"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#pyansys-geometry-overview",
        "title": "User guide > PyAnsys Geometry overview",
        "section": "PyAnsys Geometry overview",
        "text": "PyAnsys Geometry is a Python wrapper for the Ansys Geometry service.\nHere are some of the key features of PyAnsys Geometry:\nAbility to use the library alongside other Python libraries\nA functional-style API for a clean and easy coding experience\nBuilt-in examples\nPyAnsys Geometry overview"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#simple-interactive-example",
        "title": "User guide > Simple interactive example",
        "section": "Simple interactive example",
        "text": "This simple interactive example shows how to start an instance of\nthe Geometry server and create a geometry model.\nSimple interactive example"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#start-geometry-server-instance",
        "title": "User guide > Start Geometry server instance",
        "section": "Start Geometry server instance",
        "text": "The Modeler() class\nwithin the ansys-geometry-core library creates an instance of\nthe Geometry service. By default, the Modeler instance connects to\n127.0.0.1 (\"localhost\") on port 50051. You can change this\nby modifying the host and port parameters of the Modeler object,\nbut note that you must also modify your docker run command by changing\nthe <HOST-PORT>:50051 argument.\nThis code starts an instance of the Geometry service:\nStart Geometry server instance\nModeler()\nansys-geometry-core\nModeler\n127.0.0.1\n\"localhost\"\n50051\nhost\nport\nModeler\ndocker run\n<HOST-PORT>:50051"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#create-geometry-model",
        "title": "User guide > Create geometry model",
        "section": "Create geometry model",
        "text": "Once an instance has started, you can create a\ngeometry model by initializing the sketch subpackage and using the\nshapes subpackage.\nCreate geometry model"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/index.html#the-trimmed_surfacepy-module",
        "title": "The trimmed_surface.py module",
        "section": "The trimmed_surface.py module",
        "text": "The trimmed_surface.py module\ntrimmed_surface.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/index.html#summary",
        "title": "The trimmed_surface.py module > Summary",
        "section": "Summary",
        "text": "TrimmedSurface\nRepresents a trimmed surface.\nReversedTrimmedSurface\nRepresents a reversed trimmed surface.\nSummary\nTrimmedSurface\nReversedTrimmedSurface"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/index.html#description",
        "title": "The trimmed_surface.py module > Description",
        "section": "Description",
        "text": "Provides the TrimmedSurface class.\nDescription\nTrimmedSurface"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/index",
        "href": "api/ansys/geometry/core/misc/index.html#the-misc-package",
        "title": "The misc package",
        "section": "The misc package",
        "text": "The misc package\nmisc"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/index",
        "href": "api/ansys/geometry/core/misc/index.html#summary",
        "title": "The misc package > Summary",
        "section": "Summary",
        "text": "accuracy\nProvides for evaluating decimal precision.\nauxiliary\nAuxiliary functions for the PyAnsys Geometry library.\nchecks\nProvides functions for performing common checks.\nmeasurements\nProvides various measurement-related classes.\noptions\nProvides various option classes.\nunits\nProvides for handling units homogeneously throughout PyAnsys Geometry.\nSummary\naccuracy\nauxiliary\nchecks\nmeasurements\noptions\nunits"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/index",
        "href": "api/ansys/geometry/core/misc/index.html#description",
        "title": "The misc package > Description",
        "section": "Description",
        "text": "Provides the PyAnsys Geometry miscellaneous subpackage.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/DesignPoint",
        "href": "api/ansys/geometry/core/designer/designpoint/DesignPoint.html#designpoint",
        "title": "DesignPoint",
        "section": "DesignPoint",
        "text": "Provides for creating design points in components.\nServer-defined ID for the design points.\nUser-defined label for the design points.\n3D point constituting the design points.\nParent component to place the new design point under within the design assembly.\nDesignPoint\nDesignPoint\npython:str\npython:str\nPoint3D\nComponent"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/DesignPoint",
        "href": "api/ansys/geometry/core/designer/designpoint/DesignPoint.html#ansys.geometry.core.designer.designpoint.DesignPoint",
        "title": "DesignPoint > DesignPoint > DesignPoint",
        "section": "DesignPoint > DesignPoint",
        "text": "class ansys.geometry.core.designer.designpoint.DesignPoint(id: str, name: str, point: ansys.geometry.core.math.point.Point3D, parent_component: ansys.geometry.core.designer.component.Component)\n\nProvides for creating design points in components.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the design points.\n\nname\n\npython:str\n\nUser-defined label for the design points.\n\npoints\n\nPoint3D\n\n3D point constituting the design points.\n\nparent_component\n\nComponent\n\nParent component to place the new design point under within the design assembly.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/DesignPoint",
        "href": "api/ansys/geometry/core/designer/designpoint/DesignPoint.html#overview",
        "title": "DesignPoint > Overview",
        "section": "Overview",
        "text": "id\nID of the design point.\nname\nName of the design point.\nvalue\nValue of the design point.\nparent_component\nComponent node that the design point is under.\n__repr__\nRepresent the design points as a string.\nOverview\nid\nname\nvalue\nparent_component\n__repr__"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/DesignPoint",
        "href": "api/ansys/geometry/core/designer/designpoint/DesignPoint.html#import-detail",
        "title": "DesignPoint > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/DesignPoint",
        "href": "api/ansys/geometry/core/designer/designpoint/DesignPoint.html#property-detail",
        "title": "DesignPoint > Property detail",
        "section": "Property detail",
        "text": "ID of the design point.\nName of the design point.\nValue of the design point.\nComponent node that the design point is under.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/DesignPoint",
        "href": "api/ansys/geometry/core/designer/designpoint/DesignPoint.html#DesignPoint.id",
        "title": "DesignPoint > Property detail > id",
        "section": "Property detail > id",
        "text": "property DesignPoint.id: str\n\nID of the design point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/DesignPoint",
        "href": "api/ansys/geometry/core/designer/designpoint/DesignPoint.html#DesignPoint.name",
        "title": "DesignPoint > Property detail > name",
        "section": "Property detail > name",
        "text": "property DesignPoint.name: str\n\nName of the design point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/DesignPoint",
        "href": "api/ansys/geometry/core/designer/designpoint/DesignPoint.html#DesignPoint.value",
        "title": "DesignPoint > Property detail > value",
        "section": "Property detail > value",
        "text": "property DesignPoint.value: ansys.geometry.core.math.point.Point3D\n\nValue of the design point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/DesignPoint",
        "href": "api/ansys/geometry/core/designer/designpoint/DesignPoint.html#DesignPoint.parent_component",
        "title": "DesignPoint > Property detail > parent_component",
        "section": "Property detail > parent_component",
        "text": "property DesignPoint.parent_component: ansys.geometry.core.designer.component.Component\n\nComponent node that the design point is under.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/DesignPoint",
        "href": "api/ansys/geometry/core/designer/designpoint/DesignPoint.html#method-detail",
        "title": "DesignPoint > Method detail",
        "section": "Method detail",
        "text": "Represent the design points as a string.\nMethod detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/DesignPoint",
        "href": "api/ansys/geometry/core/designer/designpoint/DesignPoint.html#DesignPoint.__repr__",
        "title": "DesignPoint > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "DesignPoint.__repr__() -> str\n\nRepresent the design points as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/01_getting_started/01_math",
        "href": "examples/01_getting_started/01_math.html#pyansys-geometry-101-math",
        "title": "Examples > PyAnsys Geometry 101: Math",
        "section": "PyAnsys Geometry 101: Math",
        "text": "The math module is the foundation of PyAnsys Geometry. This module is built on top of NumPy, one of the most renowned mathematical Python libraries.\nThis example shows some of the main PyAnsys Geometry math objects and demonstrates why they are important prior to doing more exciting things in PyAnsys Geometry.\nPyAnsys Geometry 101: Math\nmath"
    },
    {
        "objectID": "examples/01_getting_started/01_math",
        "href": "examples/01_getting_started/01_math.html#perform-required-imports",
        "title": "Examples > PyAnsys Geometry 101: Math > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/01_getting_started/01_math",
        "href": "examples/01_getting_started/01_math.html#create-points-and-vectors",
        "title": "Examples > PyAnsys Geometry 101: Math > Create points and vectors",
        "section": "Create points and vectors",
        "text": "Everything starts with Point and Vector objects, which can each be defined in a 2D or 3D form. These objects inherit from NumPy’s ndarray, providing them with enhanced functionalities. When creating these objects, you must remember to pass in the arguments as a list (that is, with brackets [ ]).\nCreate 2D and 3D point and vectors.\nYou can perform standard mathematical operations on points and vectors.\nPerform some standard operations on vectors.\nCreate a vector from two points.\nNormalize a vector to create a unit vector, which is also known as a direction.\nUse the UnitVector class to automatically normalize the input for the unit vector.\nPerform a few more mathematical operations on vectors.\nCreate points and vectors\nPoint\nVector\nndarray\n[ ]\nUnitVector"
    },
    {
        "objectID": "examples/01_getting_started/01_math",
        "href": "examples/01_getting_started/01_math.html#create-planes",
        "title": "Examples > PyAnsys Geometry 101: Math > Create planes",
        "section": "Create planes",
        "text": "Once you begin creating sketches and bodies, Plane objects become very important. A plane is defined by these items:\nAn origin, which consists of a 3D point\nTwo directions (direction_x and direction_y), which are both UnitVector3Dobjects\nIf no direction vectors are provided, the plane defaults to the XY plane.\nCreate two planes.\nCreate planes\nPlane\ndirection_x\ndirection_y\nUnitVector3D"
    },
    {
        "objectID": "examples/01_getting_started/01_math",
        "href": "examples/01_getting_started/01_math.html#perform-parametric-evaluations",
        "title": "Examples > PyAnsys Geometry 101: Math > Perform parametric evaluations",
        "section": "Perform parametric evaluations",
        "text": "PyAnsys Geometry implements parametric evaluations for some curves and surfaces.\nEvaluate a sphere.\nPerform parametric evaluations"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/index",
        "href": "api/ansys/geometry/core/designer/design/index.html#the-designpy-module",
        "title": "The design.py module",
        "section": "The design.py module",
        "text": "The design.py module\ndesign.py"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/index",
        "href": "api/ansys/geometry/core/designer/design/index.html#summary",
        "title": "The design.py module > Summary",
        "section": "Summary",
        "text": "Design\nProvides for organizing geometry assemblies.\nDesignFileFormat\nProvides supported file formats that can be downloaded for designs.\nSummary\nDesign\nDesignFileFormat"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/index",
        "href": "api/ansys/geometry/core/designer/design/index.html#description",
        "title": "The design.py module > Description",
        "section": "Description",
        "text": "Provides for managing designs.\nDescription"
    },
    {
        "objectID": "examples/03_modeling/tessellation_usage",
        "href": "examples/03_modeling/tessellation_usage.html#modeling-tessellation-of-two-bodies",
        "title": "Examples > Modeling: Tessellation of two bodies",
        "section": "Modeling: Tessellation of two bodies",
        "text": "This example shows how to create two stacked bodies and return the tessellation as two merged bodies.\nModeling: Tessellation of two bodies"
    },
    {
        "objectID": "examples/03_modeling/tessellation_usage",
        "href": "examples/03_modeling/tessellation_usage.html#perform-required-imports",
        "title": "Examples > Modeling: Tessellation of two bodies > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/03_modeling/tessellation_usage",
        "href": "examples/03_modeling/tessellation_usage.html#create-design",
        "title": "Examples > Modeling: Tessellation of two bodies > Create design",
        "section": "Create design",
        "text": "Create the basic sketches to be tessellated and extrude the sketch in the required plane. For more information on creating a component and extruding a sketch in the design, see the Rectangular plate with multiple bodies example.\nHere is a typical situation in which two bodies, with different sketch planes, merge each body into a single dataset. This effectively combines all the faces of each individual body into a single dataset without separating faces.\nCreate design"
    },
    {
        "objectID": "examples/03_modeling/tessellation_usage",
        "href": "examples/03_modeling/tessellation_usage.html#tessellate-component-as-two-merged-bodies",
        "title": "Examples > Modeling: Tessellation of two bodies > Tessellate component as two merged bodies",
        "section": "Tessellate component as two merged bodies",
        "text": "Tessellate the component and merge each body into a single dataset. This effectively combines all the faces of each individual body into a single dataset without separating faces.\nSingle body tessellation is possible. In that case, users can request the body-level tessellation method to tessellate the body and merge all the faces into a single dataset.\nTessellate component as two merged bodies"
    },
    {
        "objectID": "examples/03_modeling/tessellation_usage",
        "href": "examples/03_modeling/tessellation_usage.html#plot-design",
        "title": "Examples > Modeling: Tessellation of two bodies > Plot design",
        "section": "Plot design",
        "text": "Plot the design.\nPlot design"
    },
    {
        "objectID": "examples/03_modeling/tessellation_usage",
        "href": "examples/03_modeling/tessellation_usage.html#close-the-modeler",
        "title": "Examples > Modeling: Tessellation of two bodies > Close the modeler",
        "section": "Close the modeler",
        "text": "Close the modeler.\nClose the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#ibody",
        "title": "IBody",
        "section": "IBody",
        "text": "Bases: abc.ABC\nDefines the common methods for a body, providing the abstract body interface.\nBoth the MasterBody class and Body class both inherit from the IBody\nclass. All child classes must implement all abstract methods.\nIBody\nIBody\nabc.ABC\nMasterBody\nBody\nIBody"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#ansys.geometry.core.designer.body.IBody",
        "title": "IBody > IBody > IBody",
        "section": "IBody > IBody",
        "text": "class ansys.geometry.core.designer.body.IBody\n\nBases: abc.ABC\n\nDefines the common methods for a body, providing the abstract body interface.\n\nBoth the MasterBody class and Body class both inherit from the IBody\nclass. All child classes must implement all abstract methods.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#overview",
        "title": "IBody > Overview",
        "section": "Overview",
        "text": "id\nGet the ID of the body as a string.\nname\nGet the name of the body.\nset_name\nSet the name of the body.\nfill_style\nGet the fill style of the body.\nset_fill_style\nSet the fill style of the body.\nis_suppressed\nGet the body suppression state.\nset_suppressed\nSet the body suppression state.\ncolor\nGet the color of the body.\nset_color\nSet the color of the body.\nfaces\nGet a list of all faces within the body.\nedges\nGet a list of all edges within the body.\nis_alive\nCheck if the body is still alive and has not been deleted.\nis_surface\nCheck if the body is a planar body.\nsurface_thickness\nGet the surface thickness of a surface body.\nsurface_offset\nGet the surface offset type of a surface body.\nvolume\nCalculate the volume of the body.\nmaterial\nGet the assigned material of the body.\nassign_material\nAssign a material against the active design.\nget_assigned_material\nGet the assigned material of the body.\nadd_midsurface_thickness\nAdd a mid-surface thickness to a surface body.\nadd_midsurface_offset\nAdd a mid-surface offset to a surface body.\nimprint_curves\nImprint all specified geometries onto specified faces of the body.\nproject_curves\nProject all specified geometries onto the body.\nimprint_projected_curves\nProject and imprint specified geometries onto the body.\ntranslate\nTranslate the body in a specified direction and distance.\nrotate\nRotate the geometry body around the specified axis by a given angle.\nscale\nScale the geometry body by the given value.\nmap\nMap the geometry body to the new specified frame.\nmirror\nMirror the geometry body across the specified plane.\nget_collision\nGet the collision state between bodies.\ncopy\nCreate a copy of the body under the specified parent.\ntessellate\nTessellate the body and return the geometry as triangles.\nshell_body\nShell the body to the thickness specified.\nremove_faces\nShell by removing a given set of faces.\nplot\nPlot the body.\nintersect\nIntersect two (or more) bodies.\nsubtract\nSubtract two (or more) bodies.\nunite\nUnite two (or more) bodies.\nOverview\nid\nname\nset_name\nfill_style\nset_fill_style\nis_suppressed\nset_suppressed\ncolor\nset_color\nfaces\nedges\nis_alive\nis_surface\nsurface_thickness\nsurface_offset\nvolume\nmaterial\nassign_material\nget_assigned_material\nadd_midsurface_thickness\nadd_midsurface_offset\nimprint_curves\nproject_curves\nimprint_projected_curves\ntranslate\nrotate\nscale\nmap\nmirror\nget_collision\ncopy\ntessellate\nshell_body\nremove_faces\nplot\nintersect\nsubtract\nunite"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#import-detail",
        "title": "IBody > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#method-detail",
        "title": "IBody > Method detail",
        "section": "Method detail",
        "text": "Get the ID of the body as a string.\nGet the name of the body.\nSet the name of the body.\nGet the fill style of the body.\nSet the fill style of the body.\nGet the body suppression state.\nSet the body suppression state.\nGet the color of the body.\nSet the color of the body.\nColor to set the body to. This can be a string representing a color name\nor a tuple of RGB values in the range [0, 1] (RGBA) or [0, 255] (pure RGB).\nGet a list of all faces within the body.\nGet a list of all edges within the body.\nCheck if the body is still alive and has not been deleted.\nCheck if the body is a planar body.\nGet the surface thickness of a surface body.\nThis method is only for surface-type bodies that have been assigned a surface thickness.\nGet the surface offset type of a surface body.\nThis method is only for surface-type bodies that have been assigned a surface offset.\nCalculate the volume of the body.\nWhen dealing with a planar surface, a value of 0 is returned as a volume.\nGet the assigned material of the body.\nMaterial assigned to the body.\nAssign a material against the active design.\nSource material data.\nGet the assigned material of the body.\nMaterial assigned to the body.\nAdd a mid-surface thickness to a surface body.\nThickness to assign.\nOnly surface bodies are eligible for mid-surface thickness assignment.\nAdd a mid-surface offset to a surface body.\nSurface offset to assign.\nOnly surface bodies are eligible for mid-surface offset assignment.\nImprint all specified geometries onto specified faces of the body.\nlist of faces to imprint the curves of the sketch onto.\nAll curves to imprint on the faces.\nAll impacted edges and faces from the imprint operation.\nProject all specified geometries onto the body.\nDirection of the projection.\nAll curves to project on the body.\nWhether to target the closest face with the projection.\nWhether to project only one curve of the entire sketch. When\nTrue, only one curve is projected.\nAll faces from the project curves operation.\nThe only_one_curve parameter allows you to optimize the server call because\nprojecting curves is an expensive operation. This reduces the workload on the\nserver side.\nProject and imprint specified geometries onto the body.\nThis method combines the project_curves() and imprint_curves() method into\none method. It has higher performance than calling them back-to-back when dealing\nwith many curves. Because it is a specialized function, this method only returns\nthe faces (and not the edges) from the imprint operation.\nDirection of the projection.\nAll curves to project on the body.\nWhether to target the closest face with the projection.\nWhether to project only one curve of the entire sketch. When\nTrue, only one curve is projected.\nAll imprinted faces from the operation.\nThe only_one_curve parameter allows you to optimize the server call because\nprojecting curves is an expensive operation. This reduces the workload on the\nserver side.\nTranslate the body in a specified direction and distance.\nDirection of the translation.\nDistance (magnitude) of the translation.\nRotate the geometry body around the specified axis by a given angle.\nOrigin of the rotational axis.\nThe axis of rotation.\nAngle (magnitude) of the rotation.\nScale the geometry body by the given value.\nValue to scale the body by.\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\nMap the geometry body to the new specified frame.\nStructure defining the orientation of the body.\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\nMirror the geometry body across the specified plane.\nRepresents the mirror.\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\nGet the collision state between bodies.\nObject that the collision state is checked with.\nEnum that defines the collision state between bodies.\nCreate a copy of the body under the specified parent.\nParent component to place the new body under within the design assembly.\nName to give the new body.\nCopy of the body.\nTessellate the body and return the geometry as triangles.\nWhether to merge the body into a single mesh. When False (default), the\nnumber of triangles are preserved and only the topology is merged.\nWhen True, the individual faces of the tessellation are merged.\nMerged pyvista.PolyData if merge=True or a composite dataset.\nExtrude a box centered at the origin to create a rectangular body and\ntessellate it:\nMerge the body:\nShell the body to the thickness specified.\nShell thickness.\nTrue when successful, False when failed.\nShell by removing a given set of faces.\nFace or faces to be removed.\nShell thickness.\nTrue when successful, False when failed.\nPlot the body.\nWhether to merge the body into a single mesh. Performance improved when True.\nWhen True (default), the individual faces of the tessellation are merged.\nWhen False, the number of triangles are preserved and only the topology\nis merged.\nPath for saving a screenshot of the image that is being represented.\nWhether to enable the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\nWhether to use the colors assigned to the body in the service. The default\nis None, in which case the ansys.geometry.core.USE_SERVICE_COLORS\nglobal setting is used.\nKeyword arguments for plotting. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nExtrude a box centered at the origin to create rectangular body and\nplot it:\nPlot the body and color each face individually:\nIntersect two (or more) bodies.\nBody to intersect with.\nWhether to retain the intersected body or not.\nIf the bodies do not intersect.\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe intersected body is retained.\nSubtract two (or more) bodies.\nBody to subtract from the self parameter.\nWhether to retain the subtracted body or not.\nIf the subtraction results in an empty (complete) subtraction.\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe subtracted body is retained.\nUnite two (or more) bodies.\nBody to unite with the self parameter.\nWhether to retain the united body or not.\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe united body is retained.\nMethod detail\npython:str\npython:tuple\npython:float\npython:float\npython:float\npython:list\nFace\npython:list\nEdge\n0\nMaterial\nMaterial\nMaterial\nQuantity\nMidSurfaceOffsetType\npython:tuple\npython:list\nEdge\npython:list\nFace\nTrue\npython:list\nFace\nonly_one_curve\nproject_curves()\nimprint_curves()\nTrue\npython:list\nFace\nonly_one_curve\npython:None\npython:None\nCollisionType\nBody\npython:False\nFalse\nTrue\nPolyData\nMultiBlock\npyvista.PolyData\nmerge=True\nReal\nTrue\nFalse\nFace\nIterable\nFace\nReal\nTrue\nFalse\npython:True\nTrue\nTrue\nFalse\npython:str\npython:None\npython:None\nNone\nansys.tools.visualization_interface.USE_TRAME\npython:None\nNone\nansys.geometry.core.USE_SERVICE_COLORS\npython:dict\npython:None\nPlotter.add_mesh\nBody\npython:False\nValueError\nself\nother\nkeep_other\nTrue\nBody\nself\npython:False\nValueError\nself\nother\nkeep_other\nTrue\nBody\nself\npython:False\nself\nother\nkeep_other\nTrue"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.id",
        "title": "IBody > Method detail > id",
        "section": "Method detail > id",
        "text": "abstractmethod IBody.id() -> str\n\nGet the ID of the body as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.name",
        "title": "IBody > Method detail > name",
        "section": "Method detail > name",
        "text": "abstractmethod IBody.name() -> str\n\nGet the name of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.set_name",
        "title": "IBody > Method detail > set_name",
        "section": "Method detail > set_name",
        "text": "abstractmethod IBody.set_name(str) -> None\n\nSet the name of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.fill_style",
        "title": "IBody > Method detail > fill_style",
        "section": "Method detail > fill_style",
        "text": "abstractmethod IBody.fill_style() -> FillStyle\n\nGet the fill style of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.set_fill_style",
        "title": "IBody > Method detail > set_fill_style",
        "section": "Method detail > set_fill_style",
        "text": "abstractmethod IBody.set_fill_style(fill_style: FillStyle) -> None\n\nSet the fill style of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.is_suppressed",
        "title": "IBody > Method detail > is_suppressed",
        "section": "Method detail > is_suppressed",
        "text": "abstractmethod IBody.is_suppressed() -> bool\n\nGet the body suppression state.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.set_suppressed",
        "title": "IBody > Method detail > set_suppressed",
        "section": "Method detail > set_suppressed",
        "text": "abstractmethod IBody.set_suppressed(suppressed: bool) -> None\n\nSet the body suppression state.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.color",
        "title": "IBody > Method detail > color",
        "section": "Method detail > color",
        "text": "abstractmethod IBody.color() -> str\n\nGet the color of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.set_color",
        "title": "IBody > Method detail > set_color",
        "section": "Method detail > set_color",
        "text": "abstractmethod IBody.set_color(color: str | tuple[float, float, float]) -> None\n\nSet the color of the body.\n\nParameters\n\ncolor\n\npython:str | python:tuple[python:float, python:float, python:float]\n\nColor to set the body to. This can be a string representing a color name\nor a tuple of RGB values in the range [0, 1] (RGBA) or [0, 255] (pure RGB).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.faces",
        "title": "IBody > Method detail > faces",
        "section": "Method detail > faces",
        "text": "abstractmethod IBody.faces() -> list[ansys.geometry.core.designer.face.Face]\n\nGet a list of all faces within the body.\n\nReturns\n\npython:list[Face]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.edges",
        "title": "IBody > Method detail > edges",
        "section": "Method detail > edges",
        "text": "abstractmethod IBody.edges() -> list[ansys.geometry.core.designer.edge.Edge]\n\nGet a list of all edges within the body.\n\nReturns\n\npython:list[Edge]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.is_alive",
        "title": "IBody > Method detail > is_alive",
        "section": "Method detail > is_alive",
        "text": "abstractmethod IBody.is_alive() -> bool\n\nCheck if the body is still alive and has not been deleted.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.is_surface",
        "title": "IBody > Method detail > is_surface",
        "section": "Method detail > is_surface",
        "text": "abstractmethod IBody.is_surface() -> bool\n\nCheck if the body is a planar body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.surface_thickness",
        "title": "IBody > Method detail > surface_thickness",
        "section": "Method detail > surface_thickness",
        "text": "abstractmethod IBody.surface_thickness() -> pint.Quantity | None\n\nGet the surface thickness of a surface body.\n\nNotes\n\nThis method is only for surface-type bodies that have been assigned a surface thickness.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.surface_offset",
        "title": "IBody > Method detail > surface_offset",
        "section": "Method detail > surface_offset",
        "text": "abstractmethod IBody.surface_offset() -> MidSurfaceOffsetType | None\n\nGet the surface offset type of a surface body.\n\nNotes\n\nThis method is only for surface-type bodies that have been assigned a surface offset.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.volume",
        "title": "IBody > Method detail > volume",
        "section": "Method detail > volume",
        "text": "abstractmethod IBody.volume() -> pint.Quantity\n\nCalculate the volume of the body.\n\nNotes\n\nWhen dealing with a planar surface, a value of 0 is returned as a volume.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.material",
        "title": "IBody > Method detail > material",
        "section": "Method detail > material",
        "text": "abstractmethod IBody.material() -> ansys.geometry.core.materials.material.Material\n\nGet the assigned material of the body.\n\nReturns\n\nMaterial\n\nMaterial assigned to the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.assign_material",
        "title": "IBody > Method detail > assign_material",
        "section": "Method detail > assign_material",
        "text": "abstractmethod IBody.assign_material(material: ansys.geometry.core.materials.material.Material) -> None\n\nAssign a material against the active design.\n\nParameters\n\nmaterial\n\nMaterial\n\nSource material data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.get_assigned_material",
        "title": "IBody > Method detail > get_assigned_material",
        "section": "Method detail > get_assigned_material",
        "text": "abstractmethod IBody.get_assigned_material() -> ansys.geometry.core.materials.material.Material\n\nGet the assigned material of the body.\n\nReturns\n\nMaterial\n\nMaterial assigned to the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.add_midsurface_thickness",
        "title": "IBody > Method detail > add_midsurface_thickness",
        "section": "Method detail > add_midsurface_thickness",
        "text": "abstractmethod IBody.add_midsurface_thickness(thickness: pint.Quantity) -> None\n\nAdd a mid-surface thickness to a surface body.\n\nParameters\n\nthickness\n\nQuantity\n\nThickness to assign.\n\nNotes\n\nOnly surface bodies are eligible for mid-surface thickness assignment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.add_midsurface_offset",
        "title": "IBody > Method detail > add_midsurface_offset",
        "section": "Method detail > add_midsurface_offset",
        "text": "abstractmethod IBody.add_midsurface_offset(offset: MidSurfaceOffsetType) -> None\n\nAdd a mid-surface offset to a surface body.\n\nParameters\n\noffset_type\n\nMidSurfaceOffsetType\n\nSurface offset to assign.\n\nNotes\n\nOnly surface bodies are eligible for mid-surface offset assignment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.imprint_curves",
        "title": "IBody > Method detail > imprint_curves",
        "section": "Method detail > imprint_curves",
        "text": "abstractmethod IBody.imprint_curves(faces: list[ansys.geometry.core.designer.face.Face], sketch: ansys.geometry.core.sketch.sketch.Sketch) -> tuple[list[ansys.geometry.core.designer.edge.Edge], list[ansys.geometry.core.designer.face.Face]]\n\nImprint all specified geometries onto specified faces of the body.\n\nParameters\n\nfaces: list[Face]\n\nlist of faces to imprint the curves of the sketch onto.\n\nsketch: Sketch\n\nAll curves to imprint on the faces.\n\nReturns\n\npython:tuple[python:list[Edge], python:list[Face]]\n\nAll impacted edges and faces from the imprint operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.project_curves",
        "title": "IBody > Method detail > project_curves",
        "section": "Method detail > project_curves",
        "text": "abstractmethod IBody.project_curves(direction: ansys.geometry.core.math.vector.UnitVector3D, sketch: ansys.geometry.core.sketch.sketch.Sketch, closest_face: bool, only_one_curve: bool = False) -> list[ansys.geometry.core.designer.face.Face]\n\nProject all specified geometries onto the body.\n\nParameters\n\ndirection: UnitVector3D\n\nDirection of the projection.\n\nsketch: Sketch\n\nAll curves to project on the body.\n\nclosest_face: bool\n\nWhether to target the closest face with the projection.\n\nonly_one_curve: bool, default: False\n\nWhether to project only one curve of the entire sketch. When\nTrue, only one curve is projected.\n\nReturns\n\npython:list[Face]\n\nAll faces from the project curves operation.\n\nNotes\n\nThe only_one_curve parameter allows you to optimize the server call because\nprojecting curves is an expensive operation. This reduces the workload on the\nserver side.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.imprint_projected_curves",
        "title": "IBody > Method detail > imprint_projected_curves",
        "section": "Method detail > imprint_projected_curves",
        "text": "abstractmethod IBody.imprint_projected_curves(direction: ansys.geometry.core.math.vector.UnitVector3D, sketch: ansys.geometry.core.sketch.sketch.Sketch, closest_face: bool, only_one_curve: bool = False) -> list[ansys.geometry.core.designer.face.Face]\n\nProject and imprint specified geometries onto the body.\n\nThis method combines the project_curves() and imprint_curves() method into\none method. It has higher performance than calling them back-to-back when dealing\nwith many curves. Because it is a specialized function, this method only returns\nthe faces (and not the edges) from the imprint operation.\n\nParameters\n\ndirection: UnitVector3D\n\nDirection of the projection.\n\nsketch: Sketch\n\nAll curves to project on the body.\n\nclosest_face: bool\n\nWhether to target the closest face with the projection.\n\nonly_one_curve: bool, default: False\n\nWhether to project only one curve of the entire sketch. When\nTrue, only one curve is projected.\n\nReturns\n\npython:list[Face]\n\nAll imprinted faces from the operation.\n\nNotes\n\nThe only_one_curve parameter allows you to optimize the server call because\nprojecting curves is an expensive operation. This reduces the workload on the\nserver side.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.translate",
        "title": "IBody > Method detail > translate",
        "section": "Method detail > translate",
        "text": "abstractmethod IBody.translate(direction: ansys.geometry.core.math.vector.UnitVector3D, distance: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real) -> None\n\nTranslate the body in a specified direction and distance.\n\nParameters\n\ndirection: UnitVector3D\n\nDirection of the translation.\n\ndistance: ~pint.Quantity | Distance | Real\n\nDistance (magnitude) of the translation.\n\nReturns\n\npython:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.rotate",
        "title": "IBody > Method detail > rotate",
        "section": "Method detail > rotate",
        "text": "abstractmethod IBody.rotate(axis_origin: ansys.geometry.core.math.point.Point3D, axis_direction: ansys.geometry.core.math.vector.UnitVector3D, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real) -> None\n\nRotate the geometry body around the specified axis by a given angle.\n\nParameters\n\naxis_origin: Point3D\n\nOrigin of the rotational axis.\n\naxis_direction: UnitVector3D\n\nThe axis of rotation.\n\nangle: ~pint.Quantity | Angle | Real\n\nAngle (magnitude) of the rotation.\n\nReturns\n\npython:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.scale",
        "title": "IBody > Method detail > scale",
        "section": "Method detail > scale",
        "text": "abstractmethod IBody.scale(value: ansys.geometry.core.typing.Real) -> None\n\nScale the geometry body by the given value.\n\nParameters\n\nvalue: Real\n\nValue to scale the body by.\n\nNotes\n\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.map",
        "title": "IBody > Method detail > map",
        "section": "Method detail > map",
        "text": "abstractmethod IBody.map(frame: ansys.geometry.core.math.frame.Frame) -> None\n\nMap the geometry body to the new specified frame.\n\nParameters\n\nframe: Frame\n\nStructure defining the orientation of the body.\n\nNotes\n\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.mirror",
        "title": "IBody > Method detail > mirror",
        "section": "Method detail > mirror",
        "text": "abstractmethod IBody.mirror(plane: ansys.geometry.core.math.plane.Plane) -> None\n\nMirror the geometry body across the specified plane.\n\nParameters\n\nplane: Plane\n\nRepresents the mirror.\n\nNotes\n\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.get_collision",
        "title": "IBody > Method detail > get_collision",
        "section": "Method detail > get_collision",
        "text": "abstractmethod IBody.get_collision(body: Body) -> CollisionType\n\nGet the collision state between bodies.\n\nParameters\n\nbody: Body\n\nObject that the collision state is checked with.\n\nReturns\n\nCollisionType\n\nEnum that defines the collision state between bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.copy",
        "title": "IBody > Method detail > copy",
        "section": "Method detail > copy",
        "text": "abstractmethod IBody.copy(parent: ansys.geometry.core.designer.component.Component, name: str = None) -> Body\n\nCreate a copy of the body under the specified parent.\n\nParameters\n\nparent: Component\n\nParent component to place the new body under within the design assembly.\n\nname: str\n\nName to give the new body.\n\nReturns\n\nBody\n\nCopy of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.tessellate",
        "title": "IBody > Method detail > tessellate",
        "section": "Method detail > tessellate",
        "text": "abstractmethod IBody.tessellate(merge: bool = False) -> pyvista.PolyData | pyvista.MultiBlock\n\nTessellate the body and return the geometry as triangles.\n\nParameters\n\nmerge\n\nbool, default: python:False\n\nWhether to merge the body into a single mesh. When False (default), the\nnumber of triangles are preserved and only the topology is merged.\nWhen True, the individual faces of the tessellation are merged.\n\nReturns\n\nPolyData, MultiBlock\n\nMerged pyvista.PolyData if merge=True or a composite dataset.\n\nExamples\n\nExtrude a box centered at the origin to create a rectangular body and\ntessellate it:\n\n>>> from ansys.geometry.core.misc.units import UNITS as u\n>>> from ansys.geometry.core.sketch import Sketch\n>>> from ansys.geometry.core.math import Plane, Point2D, Point3D, UnitVector3D\n>>> from ansys.geometry.core import Modeler\n>>> modeler = Modeler()\n>>> origin = Point3D([0, 0, 0])\n>>> plane = Plane(origin, direction_x=[1, 0, 0], direction_y=[0, 0, 1])\n>>> sketch = Sketch(plane)\n>>> box = sketch.box(Point2D([2, 0]), 4, 4)\n>>> design = modeler.create_design(\"my-design\")\n>>> my_comp = design.add_component(\"my-comp\")\n>>> body = my_comp.extrude_sketch(\"my-sketch\", sketch, 1 * u.m)\n>>> blocks = body.tessellate()\n>>> blocks\n>>> MultiBlock(0x7F94EC757460)\n     N Blocks:  6\n     X Bounds:  0.000, 4.000\n     Y Bounds:  -1.000, 0.000\n     Z Bounds:  -0.500, 4.500\n\nMerge the body:\n\n>>> mesh = body.tessellate(merge=True)\n>>> mesh\nPolyData (0x7f94ec75f3a0)\n  N Cells:      12\n  N Points:     24\n  X Bounds:     0.000e+00, 4.000e+00\n  Y Bounds:     -1.000e+00, 0.000e+00\n  Z Bounds:     -5.000e-01, 4.500e+00\n  N Arrays:     0\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.shell_body",
        "title": "IBody > Method detail > shell_body",
        "section": "Method detail > shell_body",
        "text": "abstractmethod IBody.shell_body(offset: ansys.geometry.core.typing.Real) -> bool\n\nShell the body to the thickness specified.\n\nParameters\n\noffset\n\nReal\n\nShell thickness.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.remove_faces",
        "title": "IBody > Method detail > remove_faces",
        "section": "Method detail > remove_faces",
        "text": "abstractmethod IBody.remove_faces(selection: ansys.geometry.core.designer.face.Face | collections.abc.Iterable[ansys.geometry.core.designer.face.Face], offset: ansys.geometry.core.typing.Real) -> bool\n\nShell by removing a given set of faces.\n\nParameters\n\nselection\n\nFace | Iterable[Face]\n\nFace or faces to be removed.\n\noffset\n\nReal\n\nShell thickness.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.plot",
        "title": "IBody > Method detail > plot",
        "section": "Method detail > plot",
        "text": "abstractmethod IBody.plot(merge: bool = True, screenshot: str | None = None, use_trame: bool | None = None, use_service_colors: bool | None = None, **plotting_options: dict | None) -> None\n\nPlot the body.\n\nParameters\n\nmerge\n\nbool, default: python:True\n\nWhether to merge the body into a single mesh. Performance improved when True.\nWhen True (default), the individual faces of the tessellation are merged.\nWhen False, the number of triangles are preserved and only the topology\nis merged.\n\nscreenshot\n\npython:str, default: python:None\n\nPath for saving a screenshot of the image that is being represented.\n\nuse_trame\n\nbool, default: python:None\n\nWhether to enable the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\n\nuse_service_colors\n\nbool, default: python:None\n\nWhether to use the colors assigned to the body in the service. The default\nis None, in which case the ansys.geometry.core.USE_SERVICE_COLORS\nglobal setting is used.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments for plotting. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\nExamples\n\nExtrude a box centered at the origin to create rectangular body and\nplot it:\n\n>>> from ansys.geometry.core.misc.units import UNITS as u\n>>> from ansys.geometry.core.sketch import Sketch\n>>> from ansys.geometry.core.math import Plane, Point2D, Point3D, UnitVector3D\n>>> from ansys.geometry.core import Modeler\n>>> modeler = Modeler()\n>>> origin = Point3D([0, 0, 0])\n>>> plane = Plane(origin, direction_x=[1, 0, 0], direction_y=[0, 0, 1])\n>>> sketch = Sketch(plane)\n>>> box = sketch.box(Point2D([2, 0]), 4, 4)\n>>> design = modeler.create_design(\"my-design\")\n>>> mycomp = design.add_component(\"my-comp\")\n>>> body = mycomp.extrude_sketch(\"my-sketch\", sketch, 1 * u.m)\n>>> body.plot()\n\nPlot the body and color each face individually:\n\n>>> body.plot(multi_colors=True)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.intersect",
        "title": "IBody > Method detail > intersect",
        "section": "Method detail > intersect",
        "text": "IBody.intersect(other: Body | collections.abc.Iterable[Body], keep_other: bool = False) -> None\n\nIntersect two (or more) bodies.\n\nParameters\n\nother\n\nBody\n\nBody to intersect with.\n\nkeep_other\n\nbool, default: python:False\n\nWhether to retain the intersected body or not.\n\nRaises\n\nValueError\n\nIf the bodies do not intersect.\n\nNotes\n\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe intersected body is retained.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.subtract",
        "title": "IBody > Method detail > subtract",
        "section": "Method detail > subtract",
        "text": "IBody.subtract(other: Body | collections.abc.Iterable[Body], keep_other: bool = False) -> None\n\nSubtract two (or more) bodies.\n\nParameters\n\nother\n\nBody\n\nBody to subtract from the self parameter.\n\nkeep_other\n\nbool, default: python:False\n\nWhether to retain the subtracted body or not.\n\nRaises\n\nValueError\n\nIf the subtraction results in an empty (complete) subtraction.\n\nNotes\n\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe subtracted body is retained.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/IBody",
        "href": "api/ansys/geometry/core/designer/body/IBody.html#IBody.unite",
        "title": "IBody > Method detail > unite",
        "section": "Method detail > unite",
        "text": "IBody.unite(other: Body | collections.abc.Iterable[Body], keep_other: bool = False) -> None\n\nUnite two (or more) bodies.\n\nParameters\n\nother\n\nBody\n\nBody to unite with the self parameter.\n\nkeep_other\n\nbool, default: python:False\n\nWhether to retain the united body or not.\n\nNotes\n\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe united body is retained.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#component",
        "title": "Component",
        "section": "Component",
        "text": "Provides for creating and managing a component.\nThis class synchronizes to a design within a supporting Geometry service instance.\nUser-defined label for the new component.\nParent component to place the new component under within the design assembly. The\ndefault is None only when dealing with a Design object.\nActive supporting Geometry service instance for design modeling.\nTemplate to create this component from. This creates an\ninstance component that shares a master with the template component.\nUser defined optional name for the component instance.\nID of a component pre-existing on the server side to use to create the component\non the client-side data model. If an ID is specified, a new component is not\ncreated on the server.\nMaster component to use to create a nested component instance instead\nof creating a new conponent.\nWhether an existing component on the service should be read. This\nparameter is only valid when connecting to an existing service session.\nOtherwise, avoid using this optional parameter.\nComponent\nComponent\npython:str\nComponent\npython:None\nNone\nDesign\nGrpcClient\nComponent\npython:None\npython:str\npython:None\nMasterComponent\npython:None\npython:False"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#ansys.geometry.core.designer.component.Component",
        "title": "Component > Component > Component",
        "section": "Component > Component",
        "text": "class ansys.geometry.core.designer.component.Component(name: str, parent_component: Component | None, grpc_client: ansys.geometry.core.connection.client.GrpcClient, template: Component | None = None, instance_name: str | None = None, preexisting_id: str | None = None, master_component: ansys.geometry.core.designer.part.MasterComponent | None = None, read_existing_comp: bool = False)\n\nProvides for creating and managing a component.\n\nThis class synchronizes to a design within a supporting Geometry service instance.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the new component.\n\nparent_component\n\nComponent or python:None\n\nParent component to place the new component under within the design assembly. The\ndefault is None only when dealing with a Design object.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting Geometry service instance for design modeling.\n\ntemplate\n\nComponent, default: python:None\n\nTemplate to create this component from. This creates an\ninstance component that shares a master with the template component.\n\ninstance_name: str, default: None\n\nUser defined optional name for the component instance.\n\npreexisting_id\n\npython:str, default: python:None\n\nID of a component pre-existing on the server side to use to create the component\non the client-side data model. If an ID is specified, a new component is not\ncreated on the server.\n\nmaster_component\n\nMasterComponent, default: python:None\n\nMaster component to use to create a nested component instance instead\nof creating a new conponent.\n\nread_existing_comp\n\nbool, default: python:False\n\nWhether an existing component on the service should be read. This\nparameter is only valid when connecting to an existing service session.\nOtherwise, avoid using this optional parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#overview",
        "title": "Component > Overview",
        "section": "Overview",
        "text": "get_all_bodies\nGet all bodies in the component hierarchy.\nget_world_transform\nGet the full transformation matrix of the component in world space.\nmodify_placement\nApply a translation and/or rotation to the placement matrix.\nreset_placement\nReset a component’s placement matrix to an identity matrix.\nadd_component\nAdd a new component under this component within the design assembly.\nset_shared_topology\nSet the shared topology to apply to the component.\nextrude_sketch\nCreate a solid body by extruding the sketch profile a distance.\nsweep_sketch\nCreate a body by sweeping a planar profile along a path.\nsweep_chain\nCreate a body by sweeping a chain of curves along a path.\nrevolve_sketch\nCreate a solid body by revolving a sketch profile around an axis.\nextrude_face\nExtrude the face profile by a given distance to create a solid body.\ncreate_sphere\nCreate a sphere body defined by the center point and the radius.\ncreate_body_from_loft_profile\nCreate a lofted body from a collection of trimmed curves.\ncreate_surface\nCreate a surface body with a sketch profile.\ncreate_surface_from_face\nCreate a surface body based on a face.\ncreate_body_from_surface\nCreate a surface body from a trimmed surface.\ncreate_surface_from_trimmed_curves\nCreate a surface body from a list of trimmed curves all lying on the same plane.\ncreate_coordinate_system\nCreate a coordinate system.\ntranslate_bodies\nTranslate the bodies in a specified direction by a distance.\ncreate_beams\nCreate beams under the component.\ncreate_beam\nCreate a beam under the component.\ndelete_component\nDelete a component (itself or its children).\ndelete_body\nDelete a body belonging to this component (or its children).\nadd_design_point\nCreate a single design point.\nadd_design_points\nCreate a list of design points.\ndelete_beam\nDelete an existing beam belonging to this component’s scope.\nsearch_component\nSearch nested components recursively for a component.\nsearch_body\nSearch bodies in the component’s scope.\nsearch_beam\nSearch beams in the component’s scope.\ntessellate\nTessellate the component.\nplot\nPlot the component.\ntree_print\nPrint the component in tree format.\nid\nID of the component.\nname\nName of the component.\ninstance_name\nName of the component instance.\ncomponents\nList of Component objects inside of the component.\nbodies\nList of Body objects inside of the component.\nbeams\nList of Beam objects inside of the component.\ndesign_points\nList of DesignPoint objects inside of the component.\ncoordinate_systems\nList of CoordinateSystem objects inside of the component.\nparent_component\nParent of the component.\nis_alive\nWhether the component is still alive on the server side.\nshared_topology\nShared topology type of the component (if any).\n__repr__\nRepresent the Component as a string.\nOverview\nget_all_bodies\nget_world_transform\nmodify_placement\nreset_placement\nadd_component\nset_shared_topology\nextrude_sketch\nsweep_sketch\nsweep_chain\nrevolve_sketch\nextrude_face\ncreate_sphere\ncreate_body_from_loft_profile\ncreate_surface\ncreate_surface_from_face\ncreate_body_from_surface\ncreate_surface_from_trimmed_curves\ncreate_coordinate_system\ntranslate_bodies\ncreate_beams\ncreate_beam\ndelete_component\ndelete_body\nadd_design_point\nadd_design_points\ndelete_beam\nsearch_component\nsearch_body\nsearch_beam\ntessellate\nplot\ntree_print\nid\nname\ninstance_name\ncomponents\nComponent\nbodies\nBody\nbeams\nBeam\ndesign_points\nDesignPoint\ncoordinate_systems\nCoordinateSystem\nparent_component\nis_alive\nshared_topology\n__repr__\nComponent"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#import-detail",
        "title": "Component > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#property-detail",
        "title": "Component > Property detail",
        "section": "Property detail",
        "text": "ID of the component.\nName of the component.\nName of the component instance.\nList of Component objects inside of the component.\nList of Body objects inside of the component.\nList of Beam objects inside of the component.\nList of DesignPoint objects inside of the component.\nList of CoordinateSystem objects inside of the component.\nParent of the component.\nWhether the component is still alive on the server side.\nShared topology type of the component (if any).\nIf no shared topology has been set, None is returned.\nProperty detail\nComponent\nBody\nBeam\nDesignPoint\nCoordinateSystem\nNone"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.id",
        "title": "Component > Property detail > id",
        "section": "Property detail > id",
        "text": "property Component.id: str\n\nID of the component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.name",
        "title": "Component > Property detail > name",
        "section": "Property detail > name",
        "text": "property Component.name: str\n\nName of the component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.instance_name",
        "title": "Component > Property detail > instance_name",
        "section": "Property detail > instance_name",
        "text": "property Component.instance_name: str\n\nName of the component instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.components",
        "title": "Component > Property detail > components",
        "section": "Property detail > components",
        "text": "property Component.components: list[Component]\n\nList of Component objects inside of the component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.bodies",
        "title": "Component > Property detail > bodies",
        "section": "Property detail > bodies",
        "text": "property Component.bodies: list[ansys.geometry.core.designer.body.Body]\n\nList of Body objects inside of the component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.beams",
        "title": "Component > Property detail > beams",
        "section": "Property detail > beams",
        "text": "property Component.beams: list[ansys.geometry.core.designer.beam.Beam]\n\nList of Beam objects inside of the component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.design_points",
        "title": "Component > Property detail > design_points",
        "section": "Property detail > design_points",
        "text": "property Component.design_points: list[ansys.geometry.core.designer.designpoint.DesignPoint]\n\nList of DesignPoint objects inside of the component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.coordinate_systems",
        "title": "Component > Property detail > coordinate_systems",
        "section": "Property detail > coordinate_systems",
        "text": "property Component.coordinate_systems: list[ansys.geometry.core.designer.coordinate_system.CoordinateSystem]\n\nList of CoordinateSystem objects inside of the component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.parent_component",
        "title": "Component > Property detail > parent_component",
        "section": "Property detail > parent_component",
        "text": "property Component.parent_component: Component\n\nParent of the component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.is_alive",
        "title": "Component > Property detail > is_alive",
        "section": "Property detail > is_alive",
        "text": "property Component.is_alive: bool\n\nWhether the component is still alive on the server side.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.shared_topology",
        "title": "Component > Property detail > shared_topology",
        "section": "Property detail > shared_topology",
        "text": "property Component.shared_topology: SharedTopologyType | None\n\nShared topology type of the component (if any).\n\nNotes\n\nIf no shared topology has been set, None is returned.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#method-detail",
        "title": "Component > Method detail",
        "section": "Method detail",
        "text": "Get all bodies in the component hierarchy.\nList of all bodies in the component hierarchy.\nGet the full transformation matrix of the component in world space.\n4x4 transformation matrix of the component in world space.\nApply a translation and/or rotation to the placement matrix.\nVector that defines the desired translation to the component.\nOrigin that defines the axis to rotate the component about.\nDirection of the axis to rotate the component about.\nAngle to rotate the component around the axis.\nTo reset a component’s placement to an identity matrix, see\nreset_placement() or call modify_placement() with no arguments.\nReset a component’s placement matrix to an identity matrix.\nSee modify_placement().\nAdd a new component under this component within the design assembly.\nUser-defined label for the new component.\nTemplate to create this component from. This creates an\ninstance component that shares a master with the template component.\nNew component with no children in the design assembly.\nSet the shared topology to apply to the component.\nShared topology type to assign to the component.\nCreate a solid body by extruding the sketch profile a distance.\nUser-defined label for the new solid body.\nTwo-dimensional sketch source for the extrusion.\nDistance to extrude the solid body.\nDirection for extruding the solid body.\nThe default is to extrude in the positive normal direction of the sketch.\nOptions are “+” and “-” as a string, or the enum values.\nWhether to cut the extrusion from the existing component.\nBy default, the extrusion is added to the existing component.\nExtruded body from the given sketch.\nIf the cut parameter is True, the function returns None.\nThe newly created body is placed under this component within the design assembly.\nCreate a body by sweeping a planar profile along a path.\nUser-defined label for the new solid body.\nTwo-dimensional sketch source for the extrusion.\nThe path to sweep the profile along.\nCreated body from the given sketch.\nThe newly created body is placed under this component within the design assembly.\nCreate a body by sweeping a chain of curves along a path.\nUser-defined label for the new solid body.\nThe path to sweep the chain along.\nA chain of trimmed curves.\nCreated body from the given sketch.\nThe newly created body is placed under this component within the design assembly.\nCreate a solid body by revolving a sketch profile around an axis.\nUser-defined label for the new solid body.\nTwo-dimensional sketch source for the revolve.\nAxis of rotation for the revolve.\nAngle to revolve the solid body around the axis. The angle can be positive or negative.\nOrigin of the axis of rotation.\nRevolved body from the given sketch.\nExtrude the face profile by a given distance to create a solid body.\nThere are no modifications against the body containing the source face.\nUser-defined label for the new solid body.\nTarget face to use as the source for the new surface.\nDistance to extrude the solid body.\nDirection for extruding the solid body’s face.\nThe default is to extrude in the positive normal direction of the face.\nOptions are “+” and “-” as a string, or the enum values.\nExtruded solid body.\nThe source face can be anywhere within the design component hierarchy.\nTherefore, there is no validation requiring that the face is placed under the\ntarget component where the body is to be created.\nCreate a sphere body defined by the center point and the radius.\nBody name.\nCenter point of the sphere.\nRadius of the sphere.\nSphere body object.\nCreate a lofted body from a collection of trimmed curves.\nName of the lofted body.\nCollection of lists of trimmed curves (profiles) defining the lofted body’s shape.\nWhether the lofted body should have periodic continuity.\nWhether the lofted body should be ruled.\nCreated lofted body object.\nSurfaces produced have a U parameter in the direction of the profile curves,\nand a V parameter in the direction of lofting.\nProfiles can have different numbers of segments. A minimum twist solution is\nproduced.\nProfiles should be all closed or all open. Closed profiles cannot contain inner\nloops. If closed profiles are supplied, a closed (solid) body is produced, if\npossible. Otherwise, an open (sheet) body is produced.\nThe periodic argument applies when the profiles are closed. It is ignored if\nthe profiles are open.\nIf periodic=True, at least three profiles must be supplied. The loft continues\nfrom the last profile back to the first profile to produce surfaces that are\nperiodic in V.\nIf periodic=False, at least two profiles must be supplied. If the first\nand last profiles are planar, end capping faces are created. Otherwise, an open\n(sheet) body is produced.\nIf ruled=True, separate ruled surfaces are produced between each pair of profiles.\nIf periodic=True, the loft continues from the last profile back to the first\nprofile, but the surfaces are not periodic.\nCreate a surface body with a sketch profile.\nThe newly created body is placed under this component within the design assembly.\nUser-defined label for the new surface body.\nTwo-dimensional sketch source for the surface definition.\nBody (as a planar surface) from the given sketch.\nCreate a surface body based on a face.\nUser-defined label for the new surface body.\nTarget face to use as the source for the new surface.\nSurface body.\nThe source face can be anywhere within the design component hierarchy.\nTherefore, there is no validation requiring that the face is placed under the\ntarget component where the body is to be created.\nCreate a surface body from a trimmed surface.\nUser-defined label for the new surface body.\nGeometry for the new surface body.\nSurface body.\nIt is possible to create a closed solid body (as opposed to an open surface body) with a\nSphere or Torus if they are untrimmed. This can be validated with body.is_surface.\nCreate a surface body from a list of trimmed curves all lying on the same plane.\nUser-defined label for the new surface body.\nCurves to define the plane and body.\nSurface body.\nCreate a coordinate system.\nThe newly created coordinate system is place under this component\nwithin the design assembly.\nUser-defined label for the new coordinate system.\nFrame defining the coordinate system bounds.\nTranslate the bodies in a specified direction by a distance.\nlist of bodies to translate by the same distance.\nDirection of the translation.\nMagnitude of the translation.\nIf the body does not belong to this component (or its children), it\nis not translated.\nCreate beams under the component.\nlist of start and end pairs, each specifying a single line segment.\nBeam profile to use to create the beams.\nThe newly created beams synchronize to a design within a supporting\nGeometry service instance.\nCreate a beam under the component.\nThe newly created beam synchronizes to a design within a supporting\nGeometry service instance.\nStarting point of the beam line segment.\nEnding point of the beam line segment.\nBeam profile to use to create the beam.\nDelete a component (itself or its children).\nID of the component or instance to delete.\nIf the component is not this component (or its children), it\nis not deleted.\nDelete a body belonging to this component (or its children).\nID of the body or instance to delete.\nIf the body does not belong to this component (or its children), it\nis not deleted.\nCreate a single design point.\nUser-defined label for the design points.\n3D point constituting the design point.\nCreate a list of design points.\nUser-defined label for the list of design points.\nlist of the 3D points that constitute the list of design points.\nDelete an existing beam belonging to this component’s scope.\nID of the beam or instance to delete.\nIf the beam belongs to this component’s children, it is deleted.\nIf the beam does not belong to this component (or its children), it\nis not deleted.\nSearch nested components recursively for a component.\nID of the component to search for.\nComponent with the requested ID. If this ID is not found, None is returned.\nSearch bodies in the component’s scope.\nID of the body to search for.\nBody with the requested ID. If the ID is not found, None is returned.\nThis method searches for bodies in the component and nested components\nrecursively.\nSearch beams in the component’s scope.\nID of the beam to search for.\nBeam with the requested ID. If the ID is not found, None is returned.\nThis method searches for beams in the component and nested components\nrecursively.\nTessellate the component.\nInternal flag to indicate if this method is being called recursively.\nNot to be used by the user.\nTessellated component as a single PolyData object.\nIf the method is called recursively, a list of MultiBlock objects is returned.\nPlot the component.\nWhether to merge the component into a single dataset. By default, True.\nPerformance improved. When True, all the faces of the component are effectively\nmerged into a single dataset. If False, the individual bodies are kept separate.\nWhether to merge each body into a single dataset. By default, True.\nPerformance improved. When True, all the faces of each individual body are\neffectively merged into a single dataset. If False, the individual faces are kept\nseparate.\nPath for saving a screenshot of the image being represented.\nWhether to enable the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\nWhether to use the colors assigned to the body in the service. The default\nis None, in which case the ansys.geometry.core.USE_SERVICE_COLORS\nglobal setting is used.\nWhether to enable picking. The default is None, in which case the\npicker is not enabled.\nKeyword arguments for plotting. For allowable keyword arguments, see the\nIf allow_picking=True, a list of picked objects is returned. Otherwise, None.\nCreate 25 small cylinders in a grid-like pattern on the XY plane and\nplot them. Make the cylinders look metallic by enabling\nphysically-based rendering with pbr=True.\nRepresent the Component as a string.\nPrint the component in tree format.\nWhether to print the nested components.\nWhether to print the bodies.\nWhether to print the beams.\nDepth level to print. If None, it prints all levels.\nIndentation level. Minimum is 2 - if less than 2, it is set to 2\nby default.\nWhether to sort the keys alphabetically.\nWhether to return a list of strings or print out\nthe tree structure.\nWhether to skip the location header. Mostly for internal use.\nTree-style printed component or list of strings representing the component tree.\nMethod detail\npython:list\nBody\nMatrix44\nVector3D\npython:None\nPoint3D\npython:None\nUnitVector3D\npython:None\nQuantity\nAngle\nReal\nreset_placement()\nmodify_placement()\nmodify_placement()\npython:str\nComponent\npython:None\nComponent\nSharedTopologyType\npython:str\nSketch\nQuantity\nDistance\nReal\nExtrusionDirection\npython:str\npython:False\nBody\npython:None\nTrue\nNone\npython:str\nSketch\npython:list\nTrimmedCurve\nBody\npython:str\npython:list\nTrimmedCurve\npython:list\nTrimmedCurve\nBody\npython:str\nSketch\nVector3D\nQuantity\nAngle\nReal\nPoint3D\nBody\npython:str\nFace\nQuantity\nDistance\nReal\nExtrusionDirection\npython:str\nBody\npython:str\nPoint3D\nDistance\nBody\npython:str\npython:list\npython:list\nTrimmedCurve\npython:False\nBody\nperiodic=True\nperiodic=False\nruled=True\nperiodic=True\npython:str\nSketch\nBody\npython:str\nFace\nBody\npython:str\nTrimmedSurface\nBody\npython:str\npython:list\nTrimmedCurve\nBody\npython:str\nFrame\nCoordinateSystem\npython:None\npython:list\npython:tuple\nPoint3D\nPoint3D\nBeamProfile\nPoint3D\nPoint3D\nBeamProfile\nComponent\npython:str\nBody\npython:str\npython:str\nPoint3D\npython:str\npython:list\nPoint3D\nBeam\npython:str\npython:str\nComponent\nNone\npython:str\nBody\npython:None\nNone\npython:str\nBeam\npython:None\nNone\nPolyData\npython:list\nMultiBlock\npython:True\nTrue\nTrue\nFalse\npython:True\nTrue\nTrue\nFalse\npython:str\npython:None\npython:None\nNone\nansys.tools.visualization_interface.USE_TRAME\npython:None\nNone\nansys.geometry.core.USE_SERVICE_COLORS\npython:None\nNone\npython:dict\npython:None\npython:None\npython:list\nAny\nallow_picking=True\nNone\npbr=True\nComponent\npython:True\npython:True\npython:True\npython:int\npython:None\npython:None\npython:int\npython:False\npython:False\npython:False\npython:None\npython:list\npython:str"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.get_all_bodies",
        "title": "Component > Method detail > get_all_bodies",
        "section": "Method detail > get_all_bodies",
        "text": "Component.get_all_bodies() -> list[ansys.geometry.core.designer.body.Body]\n\nGet all bodies in the component hierarchy.\n\nReturns\n\npython:list[Body]\n\nList of all bodies in the component hierarchy.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.get_world_transform",
        "title": "Component > Method detail > get_world_transform",
        "section": "Method detail > get_world_transform",
        "text": "Component.get_world_transform() -> ansys.geometry.core.math.matrix.Matrix44\n\nGet the full transformation matrix of the component in world space.\n\nReturns\n\nMatrix44\n\n4x4 transformation matrix of the component in world space.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.modify_placement",
        "title": "Component > Method detail > modify_placement",
        "section": "Method detail > modify_placement",
        "text": "Component.modify_placement(translation: ansys.geometry.core.math.vector.Vector3D | None = None, rotation_origin: ansys.geometry.core.math.point.Point3D | None = None, rotation_direction: ansys.geometry.core.math.vector.UnitVector3D | None = None, rotation_angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0)\n\nApply a translation and/or rotation to the placement matrix.\n\nParameters\n\ntranslation\n\nVector3D, default: python:None\n\nVector that defines the desired translation to the component.\n\nrotation_origin\n\nPoint3D, default: python:None\n\nOrigin that defines the axis to rotate the component about.\n\nrotation_direction\n\nUnitVector3D, default: python:None\n\nDirection of the axis to rotate the component about.\n\nrotation_angle\n\nQuantity | Angle | Real, default: 0\n\nAngle to rotate the component around the axis.\n\nNotes\n\nTo reset a component’s placement to an identity matrix, see\nreset_placement() or call modify_placement() with no arguments.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.reset_placement",
        "title": "Component > Method detail > reset_placement",
        "section": "Method detail > reset_placement",
        "text": "Component.reset_placement()\n\nReset a component’s placement matrix to an identity matrix.\n\nSee modify_placement().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.add_component",
        "title": "Component > Method detail > add_component",
        "section": "Method detail > add_component",
        "text": "Component.add_component(name: str, template: Component | None = None, instance_name: str = None) -> Component\n\nAdd a new component under this component within the design assembly.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the new component.\n\ntemplate\n\nComponent, default: python:None\n\nTemplate to create this component from. This creates an\ninstance component that shares a master with the template component.\n\nReturns\n\nComponent\n\nNew component with no children in the design assembly.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.set_shared_topology",
        "title": "Component > Method detail > set_shared_topology",
        "section": "Method detail > set_shared_topology",
        "text": "Component.set_shared_topology(share_type: SharedTopologyType) -> None\n\nSet the shared topology to apply to the component.\n\nParameters\n\nshare_type\n\nSharedTopologyType\n\nShared topology type to assign to the component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.extrude_sketch",
        "title": "Component > Method detail > extrude_sketch",
        "section": "Method detail > extrude_sketch",
        "text": "Component.extrude_sketch(name: str, sketch: ansys.geometry.core.sketch.sketch.Sketch, distance: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, direction: ExtrusionDirection | str = ExtrusionDirection.POSITIVE, cut: bool = False) -> ansys.geometry.core.designer.body.Body | None\n\nCreate a solid body by extruding the sketch profile a distance.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the new solid body.\n\nsketch\n\nSketch\n\nTwo-dimensional sketch source for the extrusion.\n\ndistance\n\nQuantity | Distance | Real\n\nDistance to extrude the solid body.\n\ndirection\n\nExtrusionDirection | python:str, default: “+”\n\nDirection for extruding the solid body.\nThe default is to extrude in the positive normal direction of the sketch.\nOptions are “+” and “-” as a string, or the enum values.\n\ncut\n\nbool, default: python:False\n\nWhether to cut the extrusion from the existing component.\nBy default, the extrusion is added to the existing component.\n\nReturns\n\nBody\n\nExtruded body from the given sketch.\n\npython:None\n\nIf the cut parameter is True, the function returns None.\n\nNotes\n\nThe newly created body is placed under this component within the design assembly.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.sweep_sketch",
        "title": "Component > Method detail > sweep_sketch",
        "section": "Method detail > sweep_sketch",
        "text": "Component.sweep_sketch(name: str, sketch: ansys.geometry.core.sketch.sketch.Sketch, path: list[ansys.geometry.core.shapes.curves.trimmed_curve.TrimmedCurve]) -> ansys.geometry.core.designer.body.Body\n\nCreate a body by sweeping a planar profile along a path.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the new solid body.\n\nsketch\n\nSketch\n\nTwo-dimensional sketch source for the extrusion.\n\npath\n\npython:list[TrimmedCurve]\n\nThe path to sweep the profile along.\n\nReturns\n\nBody\n\nCreated body from the given sketch.\n\nNotes\n\nThe newly created body is placed under this component within the design assembly.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.sweep_chain",
        "title": "Component > Method detail > sweep_chain",
        "section": "Method detail > sweep_chain",
        "text": "Component.sweep_chain(name: str, path: list[ansys.geometry.core.shapes.curves.trimmed_curve.TrimmedCurve], chain: list[ansys.geometry.core.shapes.curves.trimmed_curve.TrimmedCurve]) -> ansys.geometry.core.designer.body.Body\n\nCreate a body by sweeping a chain of curves along a path.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the new solid body.\n\npath\n\npython:list[TrimmedCurve]\n\nThe path to sweep the chain along.\n\nchain\n\npython:list[TrimmedCurve]\n\nA chain of trimmed curves.\n\nReturns\n\nBody\n\nCreated body from the given sketch.\n\nNotes\n\nThe newly created body is placed under this component within the design assembly.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.revolve_sketch",
        "title": "Component > Method detail > revolve_sketch",
        "section": "Method detail > revolve_sketch",
        "text": "Component.revolve_sketch(name: str, sketch: ansys.geometry.core.sketch.sketch.Sketch, axis: ansys.geometry.core.math.vector.Vector3D, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real, rotation_origin: ansys.geometry.core.math.point.Point3D) -> ansys.geometry.core.designer.body.Body\n\nCreate a solid body by revolving a sketch profile around an axis.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the new solid body.\n\nsketch\n\nSketch\n\nTwo-dimensional sketch source for the revolve.\n\naxis\n\nVector3D\n\nAxis of rotation for the revolve.\n\nangle\n\nQuantity | Angle | Real\n\nAngle to revolve the solid body around the axis. The angle can be positive or negative.\n\nrotation_origin\n\nPoint3D\n\nOrigin of the axis of rotation.\n\nReturns\n\nBody\n\nRevolved body from the given sketch.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.extrude_face",
        "title": "Component > Method detail > extrude_face",
        "section": "Method detail > extrude_face",
        "text": "Component.extrude_face(name: str, face: ansys.geometry.core.designer.face.Face, distance: pint.Quantity | ansys.geometry.core.misc.measurements.Distance, direction: ExtrusionDirection | str = ExtrusionDirection.POSITIVE) -> ansys.geometry.core.designer.body.Body\n\nExtrude the face profile by a given distance to create a solid body.\n\nThere are no modifications against the body containing the source face.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the new solid body.\n\nface\n\nFace\n\nTarget face to use as the source for the new surface.\n\ndistance\n\nQuantity | Distance | Real\n\nDistance to extrude the solid body.\n\ndirection\n\nExtrusionDirection | python:str, default: “+”\n\nDirection for extruding the solid body’s face.\nThe default is to extrude in the positive normal direction of the face.\nOptions are “+” and “-” as a string, or the enum values.\n\nReturns\n\nBody\n\nExtruded solid body.\n\nNotes\n\nThe source face can be anywhere within the design component hierarchy.\nTherefore, there is no validation requiring that the face is placed under the\ntarget component where the body is to be created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.create_sphere",
        "title": "Component > Method detail > create_sphere",
        "section": "Method detail > create_sphere",
        "text": "Component.create_sphere(name: str, center: ansys.geometry.core.math.point.Point3D, radius: ansys.geometry.core.misc.measurements.Distance) -> ansys.geometry.core.designer.body.Body\n\nCreate a sphere body defined by the center point and the radius.\n\nParameters\n\nname\n\npython:str\n\nBody name.\n\ncenter\n\nPoint3D\n\nCenter point of the sphere.\n\nradius\n\nDistance\n\nRadius of the sphere.\n\nReturns\n\nBody\n\nSphere body object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.create_body_from_loft_profile",
        "title": "Component > Method detail > create_body_from_loft_profile",
        "section": "Method detail > create_body_from_loft_profile",
        "text": "Component.create_body_from_loft_profile(name: str, profiles: list[list[ansys.geometry.core.shapes.curves.trimmed_curve.TrimmedCurve]], periodic: bool = False, ruled: bool = False) -> ansys.geometry.core.designer.body.Body\n\nCreate a lofted body from a collection of trimmed curves.\n\nParameters\n\nname\n\npython:str\n\nName of the lofted body.\n\nprofiles\n\npython:list[python:list[TrimmedCurve]]\n\nCollection of lists of trimmed curves (profiles) defining the lofted body’s shape.\n\nperiodic\n\nbool, default: python:False\n\nWhether the lofted body should have periodic continuity.\n\nruled\n\nbool\n\nWhether the lofted body should be ruled.\n\nReturns\n\nBody\n\nCreated lofted body object.\n\nNotes\n\nSurfaces produced have a U parameter in the direction of the profile curves,\nand a V parameter in the direction of lofting.\nProfiles can have different numbers of segments. A minimum twist solution is\nproduced.\nProfiles should be all closed or all open. Closed profiles cannot contain inner\nloops. If closed profiles are supplied, a closed (solid) body is produced, if\npossible. Otherwise, an open (sheet) body is produced.\nThe periodic argument applies when the profiles are closed. It is ignored if\nthe profiles are open.\n\nIf periodic=True, at least three profiles must be supplied. The loft continues\nfrom the last profile back to the first profile to produce surfaces that are\nperiodic in V.\n\nIf periodic=False, at least two profiles must be supplied. If the first\nand last profiles are planar, end capping faces are created. Otherwise, an open\n(sheet) body is produced.\nIf ruled=True, separate ruled surfaces are produced between each pair of profiles.\nIf periodic=True, the loft continues from the last profile back to the first\nprofile, but the surfaces are not periodic.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.create_surface",
        "title": "Component > Method detail > create_surface",
        "section": "Method detail > create_surface",
        "text": "Component.create_surface(name: str, sketch: ansys.geometry.core.sketch.sketch.Sketch) -> ansys.geometry.core.designer.body.Body\n\nCreate a surface body with a sketch profile.\n\nThe newly created body is placed under this component within the design assembly.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the new surface body.\n\nsketch\n\nSketch\n\nTwo-dimensional sketch source for the surface definition.\n\nReturns\n\nBody\n\nBody (as a planar surface) from the given sketch.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.create_surface_from_face",
        "title": "Component > Method detail > create_surface_from_face",
        "section": "Method detail > create_surface_from_face",
        "text": "Component.create_surface_from_face(name: str, face: ansys.geometry.core.designer.face.Face) -> ansys.geometry.core.designer.body.Body\n\nCreate a surface body based on a face.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the new surface body.\n\nface\n\nFace\n\nTarget face to use as the source for the new surface.\n\nReturns\n\nBody\n\nSurface body.\n\nNotes\n\nThe source face can be anywhere within the design component hierarchy.\nTherefore, there is no validation requiring that the face is placed under the\ntarget component where the body is to be created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.create_body_from_surface",
        "title": "Component > Method detail > create_body_from_surface",
        "section": "Method detail > create_body_from_surface",
        "text": "Component.create_body_from_surface(name: str, trimmed_surface: ansys.geometry.core.shapes.surfaces.TrimmedSurface) -> ansys.geometry.core.designer.body.Body\n\nCreate a surface body from a trimmed surface.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the new surface body.\n\ntrimmed_surface\n\nTrimmedSurface\n\nGeometry for the new surface body.\n\nReturns\n\nBody\n\nSurface body.\n\nNotes\n\nIt is possible to create a closed solid body (as opposed to an open surface body) with a\nSphere or Torus if they are untrimmed. This can be validated with body.is_surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.create_surface_from_trimmed_curves",
        "title": "Component > Method detail > create_surface_from_trimmed_curves",
        "section": "Method detail > create_surface_from_trimmed_curves",
        "text": "Component.create_surface_from_trimmed_curves(name: str, trimmed_curves: list[ansys.geometry.core.shapes.curves.trimmed_curve.TrimmedCurve]) -> ansys.geometry.core.designer.body.Body\n\nCreate a surface body from a list of trimmed curves all lying on the same plane.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the new surface body.\n\ntrimmed_curves\n\npython:list[TrimmedCurve]\n\nCurves to define the plane and body.\n\nReturns\n\nBody\n\nSurface body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.create_coordinate_system",
        "title": "Component > Method detail > create_coordinate_system",
        "section": "Method detail > create_coordinate_system",
        "text": "Component.create_coordinate_system(name: str, frame: ansys.geometry.core.math.frame.Frame) -> ansys.geometry.core.designer.coordinate_system.CoordinateSystem\n\nCreate a coordinate system.\n\nThe newly created coordinate system is place under this component\nwithin the design assembly.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the new coordinate system.\n\nframe\n\nFrame\n\nFrame defining the coordinate system bounds.\n\nReturns\n\nCoordinateSystem\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.translate_bodies",
        "title": "Component > Method detail > translate_bodies",
        "section": "Method detail > translate_bodies",
        "text": "Component.translate_bodies(bodies: list[ansys.geometry.core.designer.body.Body], direction: ansys.geometry.core.math.vector.UnitVector3D, distance: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real) -> None\n\nTranslate the bodies in a specified direction by a distance.\n\nParameters\n\nbodies: list[Body]\n\nlist of bodies to translate by the same distance.\n\ndirection: UnitVector3D\n\nDirection of the translation.\n\ndistance: ~pint.Quantity | Distance | Real\n\nMagnitude of the translation.\n\nReturns\n\npython:None\n\n\n\nNotes\n\nIf the body does not belong to this component (or its children), it\nis not translated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.create_beams",
        "title": "Component > Method detail > create_beams",
        "section": "Method detail > create_beams",
        "text": "Component.create_beams(segments: list[tuple[ansys.geometry.core.math.point.Point3D, ansys.geometry.core.math.point.Point3D]], profile: ansys.geometry.core.designer.beam.BeamProfile) -> list[ansys.geometry.core.designer.beam.Beam]\n\nCreate beams under the component.\n\nParameters\n\nsegments\n\npython:list[python:tuple[Point3D, Point3D]]\n\nlist of start and end pairs, each specifying a single line segment.\n\nprofile\n\nBeamProfile\n\nBeam profile to use to create the beams.\n\nNotes\n\nThe newly created beams synchronize to a design within a supporting\nGeometry service instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.create_beam",
        "title": "Component > Method detail > create_beam",
        "section": "Method detail > create_beam",
        "text": "Component.create_beam(start: ansys.geometry.core.math.point.Point3D, end: ansys.geometry.core.math.point.Point3D, profile: ansys.geometry.core.designer.beam.BeamProfile) -> ansys.geometry.core.designer.beam.Beam\n\nCreate a beam under the component.\n\nThe newly created beam synchronizes to a design within a supporting\nGeometry service instance.\n\nParameters\n\nstart\n\nPoint3D\n\nStarting point of the beam line segment.\n\nend\n\nPoint3D\n\nEnding point of the beam line segment.\n\nprofile\n\nBeamProfile\n\nBeam profile to use to create the beam.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.delete_component",
        "title": "Component > Method detail > delete_component",
        "section": "Method detail > delete_component",
        "text": "Component.delete_component(component: Component | str) -> None\n\nDelete a component (itself or its children).\n\nParameters\n\ncomponent\n\nComponent | python:str\n\nID of the component or instance to delete.\n\nNotes\n\nIf the component is not this component (or its children), it\nis not deleted.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.delete_body",
        "title": "Component > Method detail > delete_body",
        "section": "Method detail > delete_body",
        "text": "Component.delete_body(body: ansys.geometry.core.designer.body.Body | str) -> None\n\nDelete a body belonging to this component (or its children).\n\nParameters\n\nbody\n\nBody | python:str\n\nID of the body or instance to delete.\n\nNotes\n\nIf the body does not belong to this component (or its children), it\nis not deleted.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.add_design_point",
        "title": "Component > Method detail > add_design_point",
        "section": "Method detail > add_design_point",
        "text": "Component.add_design_point(name: str, point: ansys.geometry.core.math.point.Point3D) -> ansys.geometry.core.designer.designpoint.DesignPoint\n\nCreate a single design point.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the design points.\n\npoints\n\nPoint3D\n\n3D point constituting the design point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.add_design_points",
        "title": "Component > Method detail > add_design_points",
        "section": "Method detail > add_design_points",
        "text": "Component.add_design_points(name: str, points: list[ansys.geometry.core.math.point.Point3D]) -> list[ansys.geometry.core.designer.designpoint.DesignPoint]\n\nCreate a list of design points.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the list of design points.\n\npoints\n\npython:list[Point3D]\n\nlist of the 3D points that constitute the list of design points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.delete_beam",
        "title": "Component > Method detail > delete_beam",
        "section": "Method detail > delete_beam",
        "text": "Component.delete_beam(beam: ansys.geometry.core.designer.beam.Beam | str) -> None\n\nDelete an existing beam belonging to this component’s scope.\n\nParameters\n\nbeam\n\nBeam | python:str\n\nID of the beam or instance to delete.\n\nNotes\n\nIf the beam belongs to this component’s children, it is deleted.\nIf the beam does not belong to this component (or its children), it\nis not deleted.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.search_component",
        "title": "Component > Method detail > search_component",
        "section": "Method detail > search_component",
        "text": "Component.search_component(id: str) -> Component | None\n\nSearch nested components recursively for a component.\n\nParameters\n\nid\n\npython:str\n\nID of the component to search for.\n\nReturns\n\nComponent\n\nComponent with the requested ID. If this ID is not found, None is returned.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.search_body",
        "title": "Component > Method detail > search_body",
        "section": "Method detail > search_body",
        "text": "Component.search_body(id: str) -> ansys.geometry.core.designer.body.Body | None\n\nSearch bodies in the component’s scope.\n\nParameters\n\nid\n\npython:str\n\nID of the body to search for.\n\nReturns\n\nBody | python:None\n\nBody with the requested ID. If the ID is not found, None is returned.\n\nNotes\n\nThis method searches for bodies in the component and nested components\nrecursively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.search_beam",
        "title": "Component > Method detail > search_beam",
        "section": "Method detail > search_beam",
        "text": "Component.search_beam(id: str) -> ansys.geometry.core.designer.beam.Beam | None\n\nSearch beams in the component’s scope.\n\nParameters\n\nid\n\npython:str\n\nID of the beam to search for.\n\nReturns\n\nBeam | python:None\n\nBeam with the requested ID. If the ID is not found, None is returned.\n\nNotes\n\nThis method searches for beams in the component and nested components\nrecursively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.tessellate",
        "title": "Component > Method detail > tessellate",
        "section": "Method detail > tessellate",
        "text": "Component.tessellate(_recursive_call: bool = False) -> pyvista.PolyData | list[pyvista.MultiBlock]\n\nTessellate the component.\n\nParameters\n\n_recursive_call: bool, default: False\n\nInternal flag to indicate if this method is being called recursively.\nNot to be used by the user.\n\nReturns\n\nPolyData, python:list[MultiBlock]\n\nTessellated component as a single PolyData object.\nIf the method is called recursively, a list of MultiBlock objects is returned.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.plot",
        "title": "Component > Method detail > plot",
        "section": "Method detail > plot",
        "text": "Component.plot(merge_component: bool = True, merge_bodies: bool = True, screenshot: str | None = None, use_trame: bool | None = None, use_service_colors: bool | None = None, allow_picking: bool | None = None, **plotting_options: dict | None) -> None | list[Any]\n\nPlot the component.\n\nParameters\n\nmerge_component\n\nbool, default: python:True\n\nWhether to merge the component into a single dataset. By default, True.\nPerformance improved. When True, all the faces of the component are effectively\nmerged into a single dataset. If False, the individual bodies are kept separate.\n\nmerge_bodies\n\nbool, default: python:True\n\nWhether to merge each body into a single dataset. By default, True.\nPerformance improved. When True, all the faces of each individual body are\neffectively merged into a single dataset. If False, the individual faces are kept\nseparate.\n\nscreenshot\n\npython:str, default: python:None\n\nPath for saving a screenshot of the image being represented.\n\nuse_trame\n\nbool, default: python:None\n\nWhether to enable the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\n\nuse_service_colors\n\nbool, default: python:None\n\nWhether to use the colors assigned to the body in the service. The default\nis None, in which case the ansys.geometry.core.USE_SERVICE_COLORS\nglobal setting is used.\n\nallow_picking\n\nbool, default: python:None\n\nWhether to enable picking. The default is None, in which case the\npicker is not enabled.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments for plotting. For allowable keyword arguments, see the\n\nReturns\n\npython:None | python:list[Any]\n\nIf allow_picking=True, a list of picked objects is returned. Otherwise, None.\n\nExamples\n\nCreate 25 small cylinders in a grid-like pattern on the XY plane and\nplot them. Make the cylinders look metallic by enabling\nphysically-based rendering with pbr=True.\n\n>>> from ansys.geometry.core.misc.units import UNITS as u\n>>> from ansys.geometry.core.sketch import Sketch\n>>> from ansys.geometry.core.math import Plane, Point2D, Point3D, UnitVector3D\n>>> from ansys.geometry.core import Modeler\n>>> import numpy as np\n>>> modeler = Modeler()\n>>> origin = Point3D([0, 0, 0])\n>>> plane = Plane(origin, direction_x=[1, 0, 0], direction_y=[0, 1, 0])\n>>> design = modeler.create_design(\"my-design\")\n>>> mycomp = design.add_component(\"my-comp\")\n>>> n = 5\n>>> xx, yy = np.meshgrid(\n...     np.linspace(-4, 4, n),\n...     np.linspace(-4, 4, n),\n... )\n>>> for x, y in zip(xx.ravel(), yy.ravel()):\n...     sketch = Sketch(plane)\n...     sketch.circle(Point2D([x, y]), 0.2 * u.m)\n...     mycomp.extrude_sketch(f\"body-{x}-{y}\", sketch, 1 * u.m)\n>>> mycomp\nansys.geometry.core.designer.Component 0x2203cc9ec50\n    Name                 : my-comp\n    Exists               : True\n    Parent component     : my-design\n    N Bodies             : 25\n    N Components         : 0\n    N Coordinate Systems : 0\n>>> mycomp.plot(pbr=True, metallic=1.0)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.__repr__",
        "title": "Component > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Component.__repr__() -> str\n\nRepresent the Component as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/Component",
        "href": "api/ansys/geometry/core/designer/component/Component.html#Component.tree_print",
        "title": "Component > Method detail > tree_print",
        "section": "Method detail > tree_print",
        "text": "Component.tree_print(consider_comps: bool = True, consider_bodies: bool = True, consider_beams: bool = True, depth: int | None = None, indent: int = 4, sort_keys: bool = False, return_list: bool = False, skip_loc_header: bool = False) -> None | list[str]\n\nPrint the component in tree format.\n\nParameters\n\nconsider_comps\n\nbool, default: python:True\n\nWhether to print the nested components.\n\nconsider_bodies\n\nbool, default: python:True\n\nWhether to print the bodies.\n\nconsider_beams\n\nbool, default: python:True\n\nWhether to print the beams.\n\ndepth\n\npython:int | python:None, default: python:None\n\nDepth level to print. If None, it prints all levels.\n\nindent\n\npython:int, default: 4\n\nIndentation level. Minimum is 2 - if less than 2, it is set to 2\nby default.\n\nsort_keys\n\nbool, default: python:False\n\nWhether to sort the keys alphabetically.\n\nreturn_list\n\nbool, default: python:False\n\nWhether to return a list of strings or print out\nthe tree structure.\n\nskip_loc_header\n\nbool, default: python:False\n\nWhether to skip the location header. Mostly for internal use.\n\nReturns\n\npython:None | python:list[python:str]\n\nTree-style printed component or list of strings representing the component tree.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples",
        "href": "examples.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "These examples demonstrate the behavior and usage of PyAnsys Geometry.\nExamples"
    },
    {
        "objectID": "examples",
        "href": "examples.html#pyansys-geometry-101-examples",
        "title": "Examples > PyAnsys Geometry 101 examples",
        "section": "PyAnsys Geometry 101 examples",
        "text": "These examples demonstrate basic operations you can perform\nwith PyAnsys Geometry.\nPyAnsys Geometry 101 examples"
    },
    {
        "objectID": "examples",
        "href": "examples.html#sketching-examples",
        "title": "Examples > Sketching examples",
        "section": "Sketching examples",
        "text": "These examples demonstrate math operations on geometric objects\nand sketching capabilities, combined with server-based operations.\nSketching examples"
    },
    {
        "objectID": "examples",
        "href": "examples.html#modeling-examples",
        "title": "Examples > Modeling examples",
        "section": "Modeling examples",
        "text": "These examples demonstrate service-based modeling operations.\nModeling examples"
    },
    {
        "objectID": "examples",
        "href": "examples.html#applied-examples",
        "title": "Examples > Applied examples",
        "section": "Applied examples",
        "text": "These examples demonstrate the usage of PyAnsys Geometry for real-world\napplications.\nApplied examples"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/index.html#the-conepy-module",
        "title": "The cone.py module",
        "section": "The cone.py module",
        "text": "The cone.py module\ncone.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/index.html#summary",
        "title": "The cone.py module > Summary",
        "section": "Summary",
        "text": "Cone\nProvides 3D cone representation.\nConeEvaluation\nEvaluate the cone at given parameters.\nSummary\nCone\nConeEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/index.html#description",
        "title": "The cone.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a cone.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance",
        "href": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance.html#localdockerinstance",
        "title": "LocalDockerInstance",
        "section": "LocalDockerInstance",
        "text": "Instantiates a Geometry service as a local Docker container.\nBy default, if a container with the Geometry service already exists at the given port,\nPyAnsys Geometry connects to it. Otherwise, PyAnsys Geometry tries to launch its own service.\nLocalhost port to deploy the Geometry service on or the\nthe Modeler interface to connect to (if it is already deployed). By default,\nthe value is the one for the DEFAULT_PORT connection parameter.\nWhether the Modeler interface should connect to a Geometry\nservice already deployed at the specified port.\nWhether the Geometry service (which is already running)\nshould be restarted when attempting connection.\nName of the Docker container to deploy. The default is None,\nin which case Docker assigns it a random name.\nThe Geometry service Docker image to deploy. The default is None,\nin which case the LocalDockerInstance class identifies the OS of your\nDocker engine and deploys the latest version of the Geometry service for that\nOS.\nLocalDockerInstance\nLocalDockerInstance\npython:int\noptional\nModeler\nDEFAULT_PORT\npython:True\nModeler\npython:False\npython:str\npython:None\npython:None\nNone\nGeometryContainers\npython:None\npython:None\nNone\nLocalDockerInstance"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance",
        "href": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance.html#ansys.geometry.core.connection.docker_instance.LocalDockerInstance",
        "title": "LocalDockerInstance > LocalDockerInstance > LocalDockerInstance",
        "section": "LocalDockerInstance > LocalDockerInstance",
        "text": "class ansys.geometry.core.connection.docker_instance.LocalDockerInstance(port: int = DEFAULT_PORT, connect_to_existing_service: bool = True, restart_if_existing_service: bool = False, name: str | None = None, image: GeometryContainers | None = None)\n\nInstantiates a Geometry service as a local Docker container.\n\nBy default, if a container with the Geometry service already exists at the given port,\nPyAnsys Geometry connects to it. Otherwise, PyAnsys Geometry tries to launch its own service.\n\nParameters\n\nport\n\npython:int, optional\n\nLocalhost port to deploy the Geometry service on or the\nthe Modeler interface to connect to (if it is already deployed). By default,\nthe value is the one for the DEFAULT_PORT connection parameter.\n\nconnect_to_existing_service\n\nbool, default: python:True\n\nWhether the Modeler interface should connect to a Geometry\nservice already deployed at the specified port.\n\nrestart_if_existing_service\n\nbool, default: python:False\n\nWhether the Geometry service (which is already running)\nshould be restarted when attempting connection.\n\nname\n\npython:str or python:None, default: python:None\n\nName of the Docker container to deploy. The default is None,\nin which case Docker assigns it a random name.\n\nimage\n\nGeometryContainers or python:None, default: python:None\n\nThe Geometry service Docker image to deploy. The default is None,\nin which case the LocalDockerInstance class identifies the OS of your\nDocker engine and deploys the latest version of the Geometry service for that\nOS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance",
        "href": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance.html#overview",
        "title": "LocalDockerInstance > Overview",
        "section": "Overview",
        "text": "container\nDocker container object that hosts the deployed Geometry service.\nexisted_previously\nFlag indicating whether the container previously existed.\n__DOCKER_CLIENT__\nDocker client class variable.\ndocker_client\nGet the initialized __DOCKER_CLIENT__ object.\nis_docker_installed\nCheck a local installation of Docker engine is available and running.\nOverview\ncontainer\nexisted_previously\n__DOCKER_CLIENT__\ndocker_client\n__DOCKER_CLIENT__\nis_docker_installed"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance",
        "href": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance.html#import-detail",
        "title": "LocalDockerInstance > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance",
        "href": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance.html#property-detail",
        "title": "LocalDockerInstance > Property detail",
        "section": "Property detail",
        "text": "Docker container object that hosts the deployed Geometry service.\nFlag indicating whether the container previously existed.\nReturns False if the Geometry service was effectively\ndeployed by this class or True if it already existed.\nProperty detail\nFalse\nTrue"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance",
        "href": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance.html#LocalDockerInstance.container",
        "title": "LocalDockerInstance > Property detail > container",
        "section": "Property detail > container",
        "text": "property LocalDockerInstance.container: docker.models.containers.Container\n\nDocker container object that hosts the deployed Geometry service.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance",
        "href": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance.html#LocalDockerInstance.existed_previously",
        "title": "LocalDockerInstance > Property detail > existed_previously",
        "section": "Property detail > existed_previously",
        "text": "property LocalDockerInstance.existed_previously: bool\n\nFlag indicating whether the container previously existed.\n\nReturns False if the Geometry service was effectively\ndeployed by this class or True if it already existed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance",
        "href": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance.html#attribute-detail",
        "title": "LocalDockerInstance > Attribute detail",
        "section": "Attribute detail",
        "text": "Docker client class variable.\nThe default is None, in which case lazy initialization is used.\n__DOCKER_CLIENT__ is a class variable, meaning that it is\nthe same variable for all instances of this class.\nAttribute detail\nNone\n__DOCKER_CLIENT__"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance",
        "href": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance.html#LocalDockerInstance.__DOCKER_CLIENT__",
        "title": "LocalDockerInstance > Attribute detail > __DOCKER_CLIENT__",
        "section": "Attribute detail > __DOCKER_CLIENT__",
        "text": "LocalDockerInstance.__DOCKER_CLIENT__: docker.client.DockerClient = None\n\nDocker client class variable.\n\nNotes\n\nThe default is None, in which case lazy initialization is used.\n__DOCKER_CLIENT__ is a class variable, meaning that it is\nthe same variable for all instances of this class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance",
        "href": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance.html#method-detail",
        "title": "LocalDockerInstance > Method detail",
        "section": "Method detail",
        "text": "Get the initialized __DOCKER_CLIENT__ object.\nInitialized Docker client.\nThe LocalDockerInstance class performs a lazy initialization of the\n__DOCKER_CLIENT__ class variable.\nCheck a local installation of Docker engine is available and running.\nTrue if Docker engine is available and running, False otherwise.\nMethod detail\n__DOCKER_CLIENT__\nDockerClient\nLocalDockerInstance\n__DOCKER_CLIENT__\nTrue\nFalse"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance",
        "href": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance.html#LocalDockerInstance.docker_client",
        "title": "LocalDockerInstance > Method detail > docker_client",
        "section": "Method detail > docker_client",
        "text": "static LocalDockerInstance.docker_client() -> docker.client.DockerClient\n\nGet the initialized __DOCKER_CLIENT__ object.\n\nReturns\n\nDockerClient\n\nInitialized Docker client.\n\nNotes\n\nThe LocalDockerInstance class performs a lazy initialization of the\n__DOCKER_CLIENT__ class variable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance",
        "href": "api/ansys/geometry/core/connection/docker_instance/LocalDockerInstance.html#LocalDockerInstance.is_docker_installed",
        "title": "LocalDockerInstance > Method detail > is_docker_installed",
        "section": "Method detail > is_docker_installed",
        "text": "static LocalDockerInstance.is_docker_installed() -> bool\n\nCheck a local installation of Docker engine is available and running.\n\nReturns\n\nbool\n\nTrue if Docker engine is available and running, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamCircularProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamCircularProfile.html#beamcircularprofile",
        "title": "BeamCircularProfile",
        "section": "BeamCircularProfile",
        "text": "Bases: BeamProfile\nRepresents a single circular beam profile.\nThis profile synchronizes to a design within a supporting Geometry service instance.\nServer-defined ID for the beam profile.\nUser-defined label for the beam profile.\nRadius of the circle.\n3D point representing the center of the circle.\nX-axis direction.\nY-axis direction.\nBeamProfile objects are expected to be created from the Design object.\nThis means that you are not expected to instantiate your own BeamProfile\nobject. You should call the specific Design API for the BeamProfile desired.\nBeamCircularProfile\nBeamCircularProfile\nBeamProfile\npython:str\npython:str\nDistance\nBeamProfile\nDesign\nBeamProfile\nDesign\nBeamProfile"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamCircularProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamCircularProfile.html#ansys.geometry.core.designer.beam.BeamCircularProfile",
        "title": "BeamCircularProfile > BeamCircularProfile > BeamCircularProfile",
        "section": "BeamCircularProfile > BeamCircularProfile",
        "text": "class ansys.geometry.core.designer.beam.BeamCircularProfile(id: str, name: str, radius: ansys.geometry.core.misc.measurements.Distance, center: ansys.geometry.core.math.point.Point3D, direction_x: ansys.geometry.core.math.vector.UnitVector3D, direction_y: ansys.geometry.core.math.vector.UnitVector3D)\n\nBases: BeamProfile\n\nRepresents a single circular beam profile.\n\nThis profile synchronizes to a design within a supporting Geometry service instance.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the beam profile.\n\nname\n\npython:str\n\nUser-defined label for the beam profile.\n\nradius\n\nDistance\n\nRadius of the circle.\n\ncenter: Point3D\n\n3D point representing the center of the circle.\n\ndirection_x: UnitVector3D\n\nX-axis direction.\n\ndirection_y: UnitVector3D\n\nY-axis direction.\n\nNotes\n\nBeamProfile objects are expected to be created from the Design object.\nThis means that you are not expected to instantiate your own BeamProfile\nobject. You should call the specific Design API for the BeamProfile desired.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamCircularProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamCircularProfile.html#overview",
        "title": "BeamCircularProfile > Overview",
        "section": "Overview",
        "text": "radius\nRadius of the circular beam profile.\ncenter\nCenter of the circular beam profile.\ndirection_x\nX-axis direction of the circular beam profile.\ndirection_y\nY-axis direction of the circular beam profile.\n__repr__\nRepresent the BeamCircularProfile as a string.\nOverview\nradius\ncenter\ndirection_x\ndirection_y\n__repr__\nBeamCircularProfile"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamCircularProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamCircularProfile.html#import-detail",
        "title": "BeamCircularProfile > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamCircularProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamCircularProfile.html#property-detail",
        "title": "BeamCircularProfile > Property detail",
        "section": "Property detail",
        "text": "Radius of the circular beam profile.\nCenter of the circular beam profile.\nX-axis direction of the circular beam profile.\nY-axis direction of the circular beam profile.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamCircularProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamCircularProfile.html#BeamCircularProfile.radius",
        "title": "BeamCircularProfile > Property detail > radius",
        "section": "Property detail > radius",
        "text": "property BeamCircularProfile.radius: ansys.geometry.core.misc.measurements.Distance\n\nRadius of the circular beam profile.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamCircularProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamCircularProfile.html#BeamCircularProfile.center",
        "title": "BeamCircularProfile > Property detail > center",
        "section": "Property detail > center",
        "text": "property BeamCircularProfile.center: ansys.geometry.core.math.point.Point3D\n\nCenter of the circular beam profile.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamCircularProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamCircularProfile.html#BeamCircularProfile.direction_x",
        "title": "BeamCircularProfile > Property detail > direction_x",
        "section": "Property detail > direction_x",
        "text": "property BeamCircularProfile.direction_x: ansys.geometry.core.math.vector.UnitVector3D\n\nX-axis direction of the circular beam profile.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamCircularProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamCircularProfile.html#BeamCircularProfile.direction_y",
        "title": "BeamCircularProfile > Property detail > direction_y",
        "section": "Property detail > direction_y",
        "text": "property BeamCircularProfile.direction_y: ansys.geometry.core.math.vector.UnitVector3D\n\nY-axis direction of the circular beam profile.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamCircularProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamCircularProfile.html#method-detail",
        "title": "BeamCircularProfile > Method detail",
        "section": "Method detail",
        "text": "Represent the BeamCircularProfile as a string.\nMethod detail\nBeamCircularProfile"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/BeamCircularProfile",
        "href": "api/ansys/geometry/core/designer/beam/BeamCircularProfile.html#BeamCircularProfile.__repr__",
        "title": "BeamCircularProfile > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "BeamCircularProfile.__repr__() -> str\n\nRepresent the BeamCircularProfile as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#planesurface",
        "title": "PlaneSurface",
        "section": "PlaneSurface",
        "text": "Bases: ansys.geometry.core.shapes.surfaces.surface.Surface\nProvides 3D plane surface representation.\nCentered origin of the plane.\nX-axis direction.\nX-axis direction.\nPlaneSurface\nPlaneSurface\nansys.geometry.core.shapes.surfaces.surface.Surface\nndarray\nRealSequence\nPoint3D\nndarray\nRealSequence\nUnitVector3D\nVector3D\nndarray\nRealSequence\nUnitVector3D\nVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#ansys.geometry.core.shapes.surfaces.plane.PlaneSurface",
        "title": "PlaneSurface > PlaneSurface > PlaneSurface",
        "section": "PlaneSurface > PlaneSurface",
        "text": "class ansys.geometry.core.shapes.surfaces.plane.PlaneSurface(origin: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D, reference: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_X, axis: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_Z)\n\nBases: ansys.geometry.core.shapes.surfaces.surface.Surface\n\nProvides 3D plane surface representation.\n\nParameters\n\norigin\n\nndarray | RealSequence | Point3D\n\nCentered origin of the plane.\n\nreference\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nX-axis direction.\n\naxis\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nX-axis direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#overview",
        "title": "PlaneSurface > Overview",
        "section": "Overview",
        "text": "contains_param\nCheck a ParamUV is within the parametric range of the surface.\ncontains_point\nCheck whether a 3D point is in the domain of the plane.\nparameterization\nParametrize the plane.\nproject_point\nEvaluate the plane at a given 3D point.\ntransformed_copy\nGet a transformed version of the plane given the transform.\nevaluate\nEvaluate the plane at a given u and v parameter.\norigin\nOrigin of the plane.\ndir_x\nX-direction of the plane.\ndir_y\nY-direction of the plane.\ndir_z\nZ-direction of the plane.\n__eq__\nCheck whether two planes are equal.\nOverview\ncontains_param\nParamUV\ncontains_point\nparameterization\nproject_point\ntransformed_copy\nevaluate\norigin\ndir_x\ndir_y\ndir_z\n__eq__"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#import-detail",
        "title": "PlaneSurface > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#property-detail",
        "title": "PlaneSurface > Property detail",
        "section": "Property detail",
        "text": "Origin of the plane.\nX-direction of the plane.\nY-direction of the plane.\nZ-direction of the plane.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#PlaneSurface.origin",
        "title": "PlaneSurface > Property detail > origin",
        "section": "Property detail > origin",
        "text": "property PlaneSurface.origin: ansys.geometry.core.math.point.Point3D\n\nOrigin of the plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#PlaneSurface.dir_x",
        "title": "PlaneSurface > Property detail > dir_x",
        "section": "Property detail > dir_x",
        "text": "property PlaneSurface.dir_x: ansys.geometry.core.math.vector.UnitVector3D\n\nX-direction of the plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#PlaneSurface.dir_y",
        "title": "PlaneSurface > Property detail > dir_y",
        "section": "Property detail > dir_y",
        "text": "property PlaneSurface.dir_y: ansys.geometry.core.math.vector.UnitVector3D\n\nY-direction of the plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#PlaneSurface.dir_z",
        "title": "PlaneSurface > Property detail > dir_z",
        "section": "Property detail > dir_z",
        "text": "property PlaneSurface.dir_z: ansys.geometry.core.math.vector.UnitVector3D\n\nZ-direction of the plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#method-detail",
        "title": "PlaneSurface > Method detail",
        "section": "Method detail",
        "text": "Check whether two planes are equal.\nCheck a ParamUV is within the parametric range of the surface.\nCheck whether a 3D point is in the domain of the plane.\nParametrize the plane.\nEvaluate the plane at a given 3D point.\nGet a transformed version of the plane given the transform.\nEvaluate the plane at a given u and v parameter.\nMethod detail\nParamUV"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#PlaneSurface.__eq__",
        "title": "PlaneSurface > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "PlaneSurface.__eq__(other: PlaneSurface) -> bool\n\nCheck whether two planes are equal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#PlaneSurface.contains_param",
        "title": "PlaneSurface > Method detail > contains_param",
        "section": "Method detail > contains_param",
        "text": "abstractmethod PlaneSurface.contains_param(param_uv: ansys.geometry.core.shapes.parameterization.ParamUV) -> bool\n\nCheck a ParamUV is within the parametric range of the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#PlaneSurface.contains_point",
        "title": "PlaneSurface > Method detail > contains_point",
        "section": "Method detail > contains_point",
        "text": "abstractmethod PlaneSurface.contains_point(point: ansys.geometry.core.math.point.Point3D) -> bool\n\nCheck whether a 3D point is in the domain of the plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#PlaneSurface.parameterization",
        "title": "PlaneSurface > Method detail > parameterization",
        "section": "Method detail > parameterization",
        "text": "PlaneSurface.parameterization() -> tuple[ansys.geometry.core.shapes.parameterization.Parameterization, ansys.geometry.core.shapes.parameterization.Parameterization]\n\nParametrize the plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#PlaneSurface.project_point",
        "title": "PlaneSurface > Method detail > project_point",
        "section": "Method detail > project_point",
        "text": "PlaneSurface.project_point(point: ansys.geometry.core.math.point.Point3D) -> ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\n\nEvaluate the plane at a given 3D point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#PlaneSurface.transformed_copy",
        "title": "PlaneSurface > Method detail > transformed_copy",
        "section": "Method detail > transformed_copy",
        "text": "PlaneSurface.transformed_copy(matrix: ansys.geometry.core.math.matrix.Matrix44) -> ansys.geometry.core.shapes.surfaces.surface.Surface\n\nGet a transformed version of the plane given the transform.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/PlaneSurface.html#PlaneSurface.evaluate",
        "title": "PlaneSurface > Method detail > evaluate",
        "section": "Method detail > evaluate",
        "text": "PlaneSurface.evaluate(parameter: ansys.geometry.core.shapes.parameterization.ParamUV) -> PlaneEvaluation\n\nEvaluate the plane at a given u and v parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/index",
        "href": "api/ansys/geometry/core/designer/coordinate_system/index.html#the-coordinate_systempy-module",
        "title": "The coordinate_system.py module",
        "section": "The coordinate_system.py module",
        "text": "The coordinate_system.py module\ncoordinate_system.py"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/index",
        "href": "api/ansys/geometry/core/designer/coordinate_system/index.html#summary",
        "title": "The coordinate_system.py module > Summary",
        "section": "Summary",
        "text": "CoordinateSystem\nRepresents a user-defined coordinate system within the design assembly.\nSummary\nCoordinateSystem"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/index",
        "href": "api/ansys/geometry/core/designer/coordinate_system/index.html#description",
        "title": "The coordinate_system.py module > Description",
        "section": "Description",
        "text": "Provides for managing a user-defined coordinate system.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#face",
        "title": "Face",
        "section": "Face",
        "text": "Represents a single face of a body within the design assembly.\nThis class synchronizes to a design within a supporting Geometry service instance.\nServer-defined ID for the body.\nType of surface that the face forms.\nParent body that the face constructs.\nActive supporting Geometry service instance for design modeling.\nFace\nFace\npython:str\nSurfaceType\nBody\nGrpcClient"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#ansys.geometry.core.designer.face.Face",
        "title": "Face > Face > Face",
        "section": "Face > Face",
        "text": "class ansys.geometry.core.designer.face.Face(id: str, surface_type: SurfaceType, body: ansys.geometry.core.designer.body.Body, grpc_client: ansys.geometry.core.connection.client.GrpcClient, is_reversed: bool = False)\n\nRepresents a single face of a body within the design assembly.\n\nThis class synchronizes to a design within a supporting Geometry service instance.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the body.\n\nsurface_type\n\nSurfaceType\n\nType of surface that the face forms.\n\nbody\n\nBody\n\nParent body that the face constructs.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting Geometry service instance for design modeling.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#overview",
        "title": "Face > Overview",
        "section": "Overview",
        "text": "set_color\nSet the color of the face.\nnormal\nGet the normal direction to the face at certain UV coordinates.\nface_normal\nGet the normal direction to the face at certain UV coordinates.\npoint\nGet a point of the face evaluated at certain UV coordinates.\nface_point\nGet a point of the face evaluated at certain UV coordinates.\ncreate_isoparametric_curves\nCreate isoparametic curves at the given proportional parameter.\nsetup_offset_relationship\nCreate an offset relationship between two faces.\ntessellate\nTessellate the face and return the geometry as triangles.\nplot\nPlot the face.\nid\nFace ID.\nis_reversed\nFlag indicating if the face is reversed.\nbody\nBody that the face belongs to.\nshape\nUnderlying trimmed surface of the face.\nsurface_type\nSurface type of the face.\narea\nCalculated area of the face.\nedges\nList of all edges of the face.\nloops\nList of all loops of the face.\ncolor\nGet the current color of the face.\nbounding_box\nGet the bounding box for the face.\nOverview\nset_color\nnormal\nface_normal\npoint\nface_point\ncreate_isoparametric_curves\nsetup_offset_relationship\ntessellate\nplot\nid\nis_reversed\nbody\nshape\nsurface_type\narea\nedges\nloops\ncolor\nbounding_box"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#import-detail",
        "title": "Face > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#property-detail",
        "title": "Face > Property detail",
        "section": "Property detail",
        "text": "Face ID.\nFlag indicating if the face is reversed.\nBody that the face belongs to.\nUnderlying trimmed surface of the face.\nIf the face is reversed, its shape is a ReversedTrimmedSurface type, which handles the\ndirection of the normal vector to ensure it is always facing outward.\nSurface type of the face.\nCalculated area of the face.\nList of all edges of the face.\nList of all loops of the face.\nGet the current color of the face.\nGet the bounding box for the face.\nProperty detail\nReversedTrimmedSurface"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.id",
        "title": "Face > Property detail > id",
        "section": "Property detail > id",
        "text": "property Face.id: str\n\nFace ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.is_reversed",
        "title": "Face > Property detail > is_reversed",
        "section": "Property detail > is_reversed",
        "text": "property Face.is_reversed: bool\n\nFlag indicating if the face is reversed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.body",
        "title": "Face > Property detail > body",
        "section": "Property detail > body",
        "text": "property Face.body: ansys.geometry.core.designer.body.Body\n\nBody that the face belongs to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.shape",
        "title": "Face > Property detail > shape",
        "section": "Property detail > shape",
        "text": "property Face.shape: ansys.geometry.core.shapes.surfaces.trimmed_surface.TrimmedSurface\n\nUnderlying trimmed surface of the face.\n\nIf the face is reversed, its shape is a ReversedTrimmedSurface type, which handles the\ndirection of the normal vector to ensure it is always facing outward.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.surface_type",
        "title": "Face > Property detail > surface_type",
        "section": "Property detail > surface_type",
        "text": "property Face.surface_type: SurfaceType\n\nSurface type of the face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.area",
        "title": "Face > Property detail > area",
        "section": "Property detail > area",
        "text": "property Face.area: pint.Quantity\n\nCalculated area of the face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.edges",
        "title": "Face > Property detail > edges",
        "section": "Property detail > edges",
        "text": "property Face.edges: list[ansys.geometry.core.designer.edge.Edge]\n\nList of all edges of the face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.loops",
        "title": "Face > Property detail > loops",
        "section": "Property detail > loops",
        "text": "property Face.loops: list[FaceLoop]\n\nList of all loops of the face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.color",
        "title": "Face > Property detail > color",
        "section": "Property detail > color",
        "text": "property Face.color: str\n\nGet the current color of the face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.bounding_box",
        "title": "Face > Property detail > bounding_box",
        "section": "Property detail > bounding_box",
        "text": "property Face.bounding_box: ansys.geometry.core.math.bbox.BoundingBox2D\n\nGet the bounding box for the face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#method-detail",
        "title": "Face > Method detail",
        "section": "Method detail",
        "text": "Set the color of the face.\nGet the normal direction to the face at certain UV coordinates.\nFirst coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\nSecond coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\nUnitVector3D object evaluated at the given U and V coordinates.\nThis UnitVector3D object is perpendicular to the surface at the\ngiven UV coordinates.\nTo properly use this method, you must handle UV coordinates. Thus, you must\nknow how these relate to the underlying Geometry service. It is an advanced\nmethod for Geometry experts only.\nGet the normal direction to the face at certain UV coordinates.\nFirst coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\nSecond coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\nUnitVector3D object evaluated at the given U and V coordinates.\nThis UnitVector3D object is perpendicular to the surface at the\ngiven UV coordinates.\nThis method is deprecated. Use the normal method instead.\nGet a point of the face evaluated at certain UV coordinates.\nFirst coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\nSecond coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\nPoint3D object evaluated at the given UV coordinates.\nTo properly use this method, you must handle UV coordinates. Thus, you must\nknow how these relate to the underlying Geometry service. It is an advanced\nmethod for Geometry experts only.\nGet a point of the face evaluated at certain UV coordinates.\nFirst coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\nSecond coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\nPoint3D object evaluated at the given UV coordinates.\nThis method is deprecated. Use the point method instead.\nCreate isoparametic curves at the given proportional parameter.\nTypically, only one curve is created, but if the face has a hole, it is possible that\nmore than one curve is created.\nWhether the parameter is the u coordinate or v coordinate. If True,\nit is the u coordinate. If False, it is the v coordinate.\nProportional [0-1] parameter to create the one or more curves at.\nlist of curves that were created.\nCreate an offset relationship between two faces.\nThe face to setup an offset relationship with.\nAutomatically set baseline faces.\nLook for relationships of the same offset on adjacent faces.\nTrue when successful, False when failed.\nTessellate the face and return the geometry as triangles.\npyvista.PolyData object holding the face.\nPlot the face.\nPath for saving a screenshot of the image that is being represented.\nWhether to enable the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\nWhether to use the colors assigned to the face in the service. The default\nis None, in which case the ansys.geometry.core.USE_SERVICE_COLORS\nglobal setting is used.\nKeyword arguments for plotting. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nMethod detail\npython:float\n0.5\npython:float\n0.5\nUnitVector3D\nUnitVector3D\nUnitVector3D\npython:float\n0.5\npython:float\n0.5\nUnitVector3D\nUnitVector3D\nUnitVector3D\nnormal\npython:float\n0.5\npython:float\n0.5\nPoint3D\nPoint3D\npython:float\n0.5\npython:float\n0.5\nPoint3D\nPoint3D\npoint\nu\nv\nTrue\nu\nFalse\nv\npython:float\npython:list\nTrimmedCurve\nFace\npython:False\npython:False\nTrue\nFalse\nPolyData\npyvista.PolyData\npython:str\npython:None\npython:None\nNone\nansys.tools.visualization_interface.USE_TRAME\npython:None\nNone\nansys.geometry.core.USE_SERVICE_COLORS\npython:dict\npython:None\nPlotter.add_mesh"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.set_color",
        "title": "Face > Method detail > set_color",
        "section": "Method detail > set_color",
        "text": "Face.set_color(color: str | tuple[float, float, float]) -> None\n\nSet the color of the face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.normal",
        "title": "Face > Method detail > normal",
        "section": "Method detail > normal",
        "text": "Face.normal(u: float = 0.5, v: float = 0.5) -> ansys.geometry.core.math.vector.UnitVector3D\n\nGet the normal direction to the face at certain UV coordinates.\n\nParameters\n\nu\n\npython:float, default: 0.5\n\nFirst coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\n\nv\n\npython:float, default: 0.5\n\nSecond coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\n\nReturns\n\nUnitVector3D\n\nUnitVector3D object evaluated at the given U and V coordinates.\nThis UnitVector3D object is perpendicular to the surface at the\ngiven UV coordinates.\n\nNotes\n\nTo properly use this method, you must handle UV coordinates. Thus, you must\nknow how these relate to the underlying Geometry service. It is an advanced\nmethod for Geometry experts only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.face_normal",
        "title": "Face > Method detail > face_normal",
        "section": "Method detail > face_normal",
        "text": "Face.face_normal(u: float = 0.5, v: float = 0.5) -> ansys.geometry.core.math.vector.UnitVector3D\n\nGet the normal direction to the face at certain UV coordinates.\n\nParameters\n\nu\n\npython:float, default: 0.5\n\nFirst coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\n\nv\n\npython:float, default: 0.5\n\nSecond coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\n\nReturns\n\nUnitVector3D\n\nUnitVector3D object evaluated at the given U and V coordinates.\nThis UnitVector3D object is perpendicular to the surface at the\ngiven UV coordinates.\n\nNotes\n\nThis method is deprecated. Use the normal method instead.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.point",
        "title": "Face > Method detail > point",
        "section": "Method detail > point",
        "text": "Face.point(u: float = 0.5, v: float = 0.5) -> ansys.geometry.core.math.point.Point3D\n\nGet a point of the face evaluated at certain UV coordinates.\n\nParameters\n\nu\n\npython:float, default: 0.5\n\nFirst coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\n\nv\n\npython:float, default: 0.5\n\nSecond coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\n\nReturns\n\nPoint3D\n\nPoint3D object evaluated at the given UV coordinates.\n\nNotes\n\nTo properly use this method, you must handle UV coordinates. Thus, you must\nknow how these relate to the underlying Geometry service. It is an advanced\nmethod for Geometry experts only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.face_point",
        "title": "Face > Method detail > face_point",
        "section": "Method detail > face_point",
        "text": "Face.face_point(u: float = 0.5, v: float = 0.5) -> ansys.geometry.core.math.point.Point3D\n\nGet a point of the face evaluated at certain UV coordinates.\n\nParameters\n\nu\n\npython:float, default: 0.5\n\nFirst coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\n\nv\n\npython:float, default: 0.5\n\nSecond coordinate of the 2D representation of a surface in UV space.\nThe default is 0.5, which is the center of the surface.\n\nReturns\n\nPoint3D\n\nPoint3D object evaluated at the given UV coordinates.\n\nNotes\n\nThis method is deprecated. Use the point method instead.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.create_isoparametric_curves",
        "title": "Face > Method detail > create_isoparametric_curves",
        "section": "Method detail > create_isoparametric_curves",
        "text": "Face.create_isoparametric_curves(use_u_param: bool, parameter: float) -> list[ansys.geometry.core.shapes.curves.trimmed_curve.TrimmedCurve]\n\nCreate isoparametic curves at the given proportional parameter.\n\nTypically, only one curve is created, but if the face has a hole, it is possible that\nmore than one curve is created.\n\nParameters\n\nuse_u_param\n\nbool\n\nWhether the parameter is the u coordinate or v coordinate. If True,\nit is the u coordinate. If False, it is the v coordinate.\n\nparameter\n\npython:float\n\nProportional [0-1] parameter to create the one or more curves at.\n\nReturns\n\npython:list[TrimmedCurve]\n\nlist of curves that were created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.setup_offset_relationship",
        "title": "Face > Method detail > setup_offset_relationship",
        "section": "Method detail > setup_offset_relationship",
        "text": "Face.setup_offset_relationship(other_face: Face, set_baselines: bool = False, process_adjacent_faces: bool = False) -> bool\n\nCreate an offset relationship between two faces.\n\nParameters\n\nother_face\n\nFace\n\nThe face to setup an offset relationship with.\n\nset_baselines\n\nbool, default: python:False\n\nAutomatically set baseline faces.\n\nprocess_adjacent_faces\n\nbool, default: python:False\n\nLook for relationships of the same offset on adjacent faces.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.tessellate",
        "title": "Face > Method detail > tessellate",
        "section": "Method detail > tessellate",
        "text": "Face.tessellate() -> pyvista.PolyData\n\nTessellate the face and return the geometry as triangles.\n\nReturns\n\nPolyData\n\npyvista.PolyData object holding the face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/Face",
        "href": "api/ansys/geometry/core/designer/face/Face.html#Face.plot",
        "title": "Face > Method detail > plot",
        "section": "Method detail > plot",
        "text": "Face.plot(screenshot: str | None = None, use_trame: bool | None = None, use_service_colors: bool | None = None, **plotting_options: dict | None) -> None\n\nPlot the face.\n\nParameters\n\nscreenshot\n\npython:str, default: python:None\n\nPath for saving a screenshot of the image that is being represented.\n\nuse_trame\n\nbool, default: python:None\n\nWhether to enable the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\n\nuse_service_colors\n\nbool, default: python:None\n\nWhether to use the colors assigned to the face in the service. The default\nis None, in which case the ansys.geometry.core.USE_SERVICE_COLORS\nglobal setting is used.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments for plotting. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix33",
        "href": "api/ansys/geometry/core/math/matrix/Matrix33.html#matrix33",
        "title": "Matrix33",
        "section": "Matrix33",
        "text": "Bases: Matrix\nProvides 3x3 matrix representation.\nMatrix arguments as a np.ndarray class.\nMatrix33\nMatrix33\nMatrix\nndarray\nRealSequence\nMatrix\nDEFAULT_MATRIX33\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix33",
        "href": "api/ansys/geometry/core/math/matrix/Matrix33.html#ansys.geometry.core.math.matrix.Matrix33",
        "title": "Matrix33 > Matrix33 > Matrix33",
        "section": "Matrix33 > Matrix33",
        "text": "class ansys.geometry.core.math.matrix.Matrix33(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)\n\nBases: Matrix\n\nProvides 3x3 matrix representation.\n\nParameters\n\ninput\n\nndarray | RealSequence | Matrix, default: DEFAULT_MATRIX33\n\nMatrix arguments as a np.ndarray class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix33",
        "href": "api/ansys/geometry/core/math/matrix/Matrix33.html#import-detail",
        "title": "Matrix33 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "examples/01_getting_started/02_units",
        "href": "examples/01_getting_started/02_units.html#pyansys-geometry-101-units",
        "title": "Examples > PyAnsys Geometry 101: Units",
        "section": "PyAnsys Geometry 101: Units",
        "text": "To handle units inside the source code, PyAnsys Geometry uses Pint, a third-party open source software that other PyAnsys libraries also use.\nThe following code examples show how to operate with units inside the PyAnsys Geometry codebase and create objects with different units.\nPyAnsys Geometry 101: Units"
    },
    {
        "objectID": "examples/01_getting_started/02_units",
        "href": "examples/01_getting_started/02_units.html#import-units-handler",
        "title": "Examples > PyAnsys Geometry 101: Units > Import units handler",
        "section": "Import units handler",
        "text": "The following line of code imports the units handler: pint.util.UnitRegistry. For more information on the UnitRegistry class in the pint API, see Most important classes in the Pint documentation.\nImport units handler\npint.util.UnitRegistry\nUnitRegistry\npint"
    },
    {
        "objectID": "examples/01_getting_started/02_units",
        "href": "examples/01_getting_started/02_units.html#create-and-work-with-quantity-objects",
        "title": "Examples > PyAnsys Geometry 101: Units > Create and work with Quantity objects",
        "section": "Create and work with Quantity objects",
        "text": "With the UnitRegistry object called UNITS, you can create Quantity objects. A Quantity object is simply a container class with two core elements:\nA number\nA unit\nQuantity objects have convenience methods, including those for transforming to different units and comparing magnitudes, values, and units. For more information on the Quantity class in the pint API, see Most important classes in the Pint documentation. You can also step through this Pint tutorial.\nPyAnsys Geometry objects work by returning Quantity objects whenever the property requested has a physical meaning.\nReturn Quantity objects for Point3D objects.\nCreate and work with Quantity objects\nQuantity\nUnitRegistry\nUNITS\nQuantity\nQuantity\nQuantity\nQuantity\npint\nQuantity\nQuantity\nPoint3D"
    },
    {
        "objectID": "examples/01_getting_started/02_units",
        "href": "examples/01_getting_started/02_units.html#use-default-units",
        "title": "Examples > PyAnsys Geometry 101: Units > Use default units",
        "section": "Use default units",
        "text": "PyAnsys Geometry implements the concept of default units.\nIt is important to differentiate between client-side default units and server-side default units. You are able to control both of them.\nPrint the default server unit length.\nUse default units.\nPyAnsys Geometry has certain auxiliary classes implemented that provide proper unit checking when assigning values. Although they are basically intended for internal use of the library, you can define them for use.\nStart with Distance. The main difference between a Quantity object (that is, from pint import Quantity) and a Distance is that there is an active check on the units passed (in case they are not the default ones). Here are some examples.\nThe next two code examples show how unreasonable operations raise errors.\nThe same behavior applies to the Angle object. Here are some examples.\nUse default units\nDistance\nQuantity\nfrom pint import Quantity\nDistance\nAngle"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/index",
        "href": "api/ansys/geometry/core/shapes/curves/curve/index.html#the-curvepy-module",
        "title": "The curve.py module",
        "section": "The curve.py module",
        "text": "The curve.py module\ncurve.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/index",
        "href": "api/ansys/geometry/core/shapes/curves/curve/index.html#summary",
        "title": "The curve.py module > Summary",
        "section": "Summary",
        "text": "Curve\nProvides the abstract base class representing a 3D curve.\nSummary\nCurve"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve/index",
        "href": "api/ansys/geometry/core/shapes/curves/curve/index.html#description",
        "title": "The curve.py module > Description",
        "section": "Description",
        "text": "Provides the Curve class.\nDescription\nCurve"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/index",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/index.html#the-ellipsepy-module",
        "title": "The ellipse.py module",
        "section": "The ellipse.py module",
        "text": "The ellipse.py module\nellipse.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/index",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/index.html#summary",
        "title": "The ellipse.py module > Summary",
        "section": "Summary",
        "text": "Ellipse\nProvides 3D ellipse representation.\nEllipseEvaluation\nEvaluate an ellipse at a given parameter.\nSummary\nEllipse\nEllipseEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/index",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/index.html#description",
        "title": "The ellipse.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing an ellipse.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamType",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamType.html#paramtype",
        "title": "ParamType",
        "section": "ParamType",
        "text": "Bases: enum.Enum\nParamType enum class that defines the type of a Parameterization.\nParamType\nParamType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamType",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamType.html#ansys.geometry.core.shapes.parameterization.ParamType",
        "title": "ParamType > ParamType > ParamType",
        "section": "ParamType > ParamType",
        "text": "class ansys.geometry.core.shapes.parameterization.ParamType(*args, **kwds)\n\nBases: enum.Enum\n\nParamType enum class that defines the type of a Parameterization.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamType",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamType.html#overview",
        "title": "ParamType > Overview",
        "section": "Overview",
        "text": "LINEAR\nCIRCULAR\nOTHER\nOverview\nLINEAR\nCIRCULAR\nOTHER"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamType",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamType.html#import-detail",
        "title": "ParamType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamType",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamType.html#attribute-detail",
        "title": "ParamType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamType",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamType.html#ParamType.LINEAR",
        "title": "ParamType > Attribute detail > LINEAR",
        "section": "Attribute detail > LINEAR",
        "text": "ParamType.LINEAR = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamType",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamType.html#ParamType.CIRCULAR",
        "title": "ParamType > Attribute detail > CIRCULAR",
        "section": "Attribute detail > CIRCULAR",
        "text": "ParamType.CIRCULAR = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamType",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamType.html#ParamType.OTHER",
        "title": "ParamType > Attribute detail > OTHER",
        "section": "Attribute detail > OTHER",
        "text": "ParamType.OTHER = 3\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#grpcclient",
        "title": "GrpcClient",
        "section": "GrpcClient",
        "text": "Wraps the gRPC connection for the Geometry service.\nHost where the server is running.\nPort number where the server is running.\ngRPC channel for server communication.\nCorresponding remote instance when the Geometry service\nis launched through PyPIM.\nThis instance is deleted when calling the\nGrpcClient.close\nmethod.\nCorresponding local Docker instance when the Geometry service is launched using\nthe launch_docker_modeler() method. This local Docker instance is deleted\nwhen the GrpcClient.close\nmethod is called.\nCorresponding local product instance when the product (Discovery or SpaceClaim)\nis launched through the launch_modeler_with_geometry_service(),\nlaunch_modeler_with_discovery() or the launch_modeler_with_spaceclaim()\ninterface. This instance will be deleted\nwhen the GrpcClient.close\nmethod is called.\nMaximum time to spend trying to make the connection.\nLogging level to apply to the client.\nFile to output the log to, if requested.\nType of the backend that PyAnsys Geometry is communicating with. By default, this\nvalue is unknown, which results in None being the default value.\nGrpcClient\nGrpcClient\npython:str\nDEFAULT_HOST\npython:str\npython:int\nDEFAULT_PORT\nChannel\npython:None\nansys.platform.instancemanagement.Instance\npython:None\nGrpcClient.close\nLocalDockerInstance\npython:None\nlaunch_docker_modeler()\nGrpcClient.close\nProductInstance\npython:None\nlaunch_modeler_with_geometry_service()\nlaunch_modeler_with_discovery()\nlaunch_modeler_with_spaceclaim()\nGrpcClient.close\nreal\npython:int\nINFO\npython:str\nPath\npython:None\nNone"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#ansys.geometry.core.connection.client.GrpcClient",
        "title": "GrpcClient > GrpcClient > GrpcClient",
        "section": "GrpcClient > GrpcClient",
        "text": "class ansys.geometry.core.connection.client.GrpcClient(host: str = DEFAULT_HOST, port: str | int = DEFAULT_PORT, channel: grpc.Channel | None = None, remote_instance: ansys.platform.instancemanagement.Instance | None = None, docker_instance: ansys.geometry.core.connection.docker_instance.LocalDockerInstance | None = None, product_instance: ansys.geometry.core.connection.product_instance.ProductInstance | None = None, timeout: ansys.geometry.core.typing.Real = 120, logging_level: int = logging.INFO, logging_file: pathlib.Path | str | None = None, backend_type: ansys.geometry.core.connection.backend.BackendType | None = None)\n\nWraps the gRPC connection for the Geometry service.\n\nParameters\n\nhost\n\npython:str, default: DEFAULT_HOST\n\nHost where the server is running.\n\nport\n\npython:str or python:int, default: DEFAULT_PORT\n\nPort number where the server is running.\n\nchannel\n\nChannel, default: python:None\n\ngRPC channel for server communication.\n\nremote_instance\n\nansys.platform.instancemanagement.Instance, default: python:None\n\nCorresponding remote instance when the Geometry service\nis launched through PyPIM.\nThis instance is deleted when calling the\nGrpcClient.close\nmethod.\n\ndocker_instance\n\nLocalDockerInstance, default: python:None\n\nCorresponding local Docker instance when the Geometry service is launched using\nthe launch_docker_modeler() method. This local Docker instance is deleted\nwhen the GrpcClient.close\nmethod is called.\n\nproduct_instance\n\nProductInstance, default: python:None\n\nCorresponding local product instance when the product (Discovery or SpaceClaim)\nis launched through the launch_modeler_with_geometry_service(),\nlaunch_modeler_with_discovery() or the launch_modeler_with_spaceclaim()\ninterface. This instance will be deleted\nwhen the GrpcClient.close\nmethod is called.\n\ntimeout\n\nreal, default: 120\n\nMaximum time to spend trying to make the connection.\n\nlogging_level\n\npython:int, default: INFO\n\nLogging level to apply to the client.\n\nlogging_file\n\npython:str or Path, default: python:None\n\nFile to output the log to, if requested.\n\nbackend_type: BackendType, default: None\n\nType of the backend that PyAnsys Geometry is communicating with. By default, this\nvalue is unknown, which results in None being the default value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#overview",
        "title": "GrpcClient > Overview",
        "section": "Overview",
        "text": "close\nClose the channel.\ntarget\nGet the target of the channel.\nget_name\nGet the target name of the connection.\nbackend_type\nBackend type.\nbackend_version\nGet the current backend version.\nmultiple_designs_allowed\nFlag indicating whether multiple designs are allowed.\nchannel\nClient gRPC channel.\nlog\nSpecific instance logger.\nis_closed\nFlag indicating whether the client connection is closed.\nhealthy\nFlag indicating whether the client channel is healthy.\n__repr__\nRepresent the client as a string.\nOverview\nclose\ntarget\nget_name\nbackend_type\nbackend_version\nmultiple_designs_allowed\nchannel\nlog\nis_closed\nhealthy\n__repr__"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#import-detail",
        "title": "GrpcClient > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#property-detail",
        "title": "GrpcClient > Property detail",
        "section": "Property detail",
        "text": "Backend type.\nOptions are Windows Service, Linux Service, Discovery,\nand SpaceClaim.\nThis method might return None because determining the backend type is\nnot straightforward.\nGet the current backend version.\nBackend version.\nFlag indicating whether multiple designs are allowed.\nCurrently, only one design is allowed per service. This method will always\nreturn False.\nClient gRPC channel.\nSpecific instance logger.\nFlag indicating whether the client connection is closed.\nFlag indicating whether the client channel is healthy.\nProperty detail\nWindows Service\nLinux Service\nDiscovery\nSpaceClaim\nNone\nVersion\nFalse"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#GrpcClient.backend_type",
        "title": "GrpcClient > Property detail > backend_type",
        "section": "Property detail > backend_type",
        "text": "property GrpcClient.backend_type: ansys.geometry.core.connection.backend.BackendType\n\nBackend type.\n\nOptions are Windows Service, Linux Service, Discovery,\nand SpaceClaim.\n\nNotes\n\nThis method might return None because determining the backend type is\nnot straightforward.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#GrpcClient.backend_version",
        "title": "GrpcClient > Property detail > backend_version",
        "section": "Property detail > backend_version",
        "text": "property GrpcClient.backend_version: semver.version.Version\n\nGet the current backend version.\n\nReturns\n\nVersion\n\nBackend version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#GrpcClient.multiple_designs_allowed",
        "title": "GrpcClient > Property detail > multiple_designs_allowed",
        "section": "Property detail > multiple_designs_allowed",
        "text": "property GrpcClient.multiple_designs_allowed: bool\n\nFlag indicating whether multiple designs are allowed.\n\nNotes\n\nCurrently, only one design is allowed per service. This method will always\nreturn False.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#GrpcClient.channel",
        "title": "GrpcClient > Property detail > channel",
        "section": "Property detail > channel",
        "text": "property GrpcClient.channel: grpc.Channel\n\nClient gRPC channel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#GrpcClient.log",
        "title": "GrpcClient > Property detail > log",
        "section": "Property detail > log",
        "text": "property GrpcClient.log: ansys.geometry.core.logger.PyGeometryCustomAdapter\n\nSpecific instance logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#GrpcClient.is_closed",
        "title": "GrpcClient > Property detail > is_closed",
        "section": "Property detail > is_closed",
        "text": "property GrpcClient.is_closed: bool\n\nFlag indicating whether the client connection is closed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#GrpcClient.healthy",
        "title": "GrpcClient > Property detail > healthy",
        "section": "Property detail > healthy",
        "text": "property GrpcClient.healthy: bool\n\nFlag indicating whether the client channel is healthy.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#method-detail",
        "title": "GrpcClient > Method detail",
        "section": "Method detail",
        "text": "Represent the client as a string.\nClose the channel.\nIf an instance of the Geometry service was started using\nPyPIM, this instance is\ndeleted. Furthermore, if a local Docker instance\nof the Geometry service was started, it is stopped.\nGet the target of the channel.\nGet the target name of the connection.\nMethod detail"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#GrpcClient.__repr__",
        "title": "GrpcClient > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "GrpcClient.__repr__() -> str\n\nRepresent the client as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#GrpcClient.close",
        "title": "GrpcClient > Method detail > close",
        "section": "Method detail > close",
        "text": "GrpcClient.close()\n\nClose the channel.\n\nNotes\n\nIf an instance of the Geometry service was started using\nPyPIM, this instance is\ndeleted. Furthermore, if a local Docker instance\nof the Geometry service was started, it is stopped.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#GrpcClient.target",
        "title": "GrpcClient > Method detail > target",
        "section": "Method detail > target",
        "text": "GrpcClient.target() -> str\n\nGet the target of the channel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/GrpcClient",
        "href": "api/ansys/geometry/core/connection/client/GrpcClient.html#GrpcClient.get_name",
        "title": "GrpcClient > Method detail > get_name",
        "section": "Method detail > get_name",
        "text": "GrpcClient.get_name() -> str\n\nGet the target name of the connection.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/index",
        "href": "api/ansys/geometry/core/sketch/gears/index.html#the-gearspy-module",
        "title": "The gears.py module",
        "section": "The gears.py module",
        "text": "The gears.py module\ngears.py"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/index",
        "href": "api/ansys/geometry/core/sketch/gears/index.html#summary",
        "title": "The gears.py module > Summary",
        "section": "Summary",
        "text": "Gear\nProvides the base class for sketching gears.\nDummyGear\nProvides the dummy class for sketching gears.\nSpurGear\nProvides the class for sketching spur gears.\nSummary\nGear\nDummyGear\nSpurGear"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/index",
        "href": "api/ansys/geometry/core/sketch/gears/index.html#description",
        "title": "The gears.py module > Description",
        "section": "Description",
        "text": "Module for creating and managing gears.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/index",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/index.html#the-curve_evaluationpy-module",
        "title": "The curve_evaluation.py module",
        "section": "The curve_evaluation.py module",
        "text": "The curve_evaluation.py module\ncurve_evaluation.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/index",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/index.html#summary",
        "title": "The curve_evaluation.py module > Summary",
        "section": "Summary",
        "text": "CurveEvaluation\nProvides for evaluating a curve.\nSummary\nCurveEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/curve_evaluation/index",
        "href": "api/ansys/geometry/core/shapes/curves/curve_evaluation/index.html#description",
        "title": "The curve_evaluation.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a curve.\nDescription"
    },
    {
        "objectID": "examples/04_applied/01_naca_airfoils",
        "href": "examples/04_applied/01_naca_airfoils.html#applied-create-a-naca-4-digit-airfoil",
        "title": "Examples > Applied: Create a NACA 4-digit airfoil",
        "section": "Applied: Create a NACA 4-digit airfoil",
        "text": "NACA airfoils are a series of airfoil shapes for aircraft wings developed by the National Advisory Committee for Aeronautics (NACA). They are a standardized system of airfoil shapes that are defined by a series of digits. The digits, which indicate the shape of the airfoil, are used to create the airfoil shape.\nEach digit in the NACA airfoil number has a specific meaning:\nThe first digit defines the maximum camber as a percentage of the chord length.\nThe second digit defines the position of the maximum camber as a percentage of the chord length.\nThe last two digits define the maximum thickness of the airfoil as a percentage of the chord length.\nTo fully understand the previous definitions, it is important to know that the chord length is the length of the airfoil from the leading edge to the trailing edge. The camber is the curvature of the airfoil, and the thickness is the distance between the upper and lower surfaces.\nSymmetric airfoils have a camber of 0% and consequently, the first two digits of the NACA number are 0. For example, the NACA 0012 airfoil is a symmetric airfoil with a maximum thickness of 12%.\nApplied: Create a NACA 4-digit airfoil"
    },
    {
        "objectID": "examples/04_applied/01_naca_airfoils",
        "href": "examples/04_applied/01_naca_airfoils.html#define-the-naca-4-digit-airfoil-equation",
        "title": "Examples > Applied: Create a NACA 4-digit airfoil > Define the NACA 4-digit airfoil equation",
        "section": "Define the NACA 4-digit airfoil equation",
        "text": "The following code uses the equation for a NACA 4-digit airfoil to create a set of points that define the airfoil shape. These points are Point2D objects in PyAnsys Geometry.\nDefine the NACA 4-digit airfoil equation\nPoint2D"
    },
    {
        "objectID": "examples/04_applied/01_naca_airfoils",
        "href": "examples/04_applied/01_naca_airfoils.html#example-of-a-symmetric-airfoil-naca-0012",
        "title": "Examples > Applied: Create a NACA 4-digit airfoil > Example of a symmetric airfoil: NACA 0012",
        "section": "Example of a symmetric airfoil: NACA 0012",
        "text": "Now that the function for generating a NACA 4-digit airfoil is generated, this code creates a NACA 0012 airfoil, which is symmetric. This airfoil has a maximum thickness of 12%. The NACA number is a constant.\nExample of a symmetric airfoil: NACA 0012"
    },
    {
        "objectID": "examples/04_applied/01_naca_airfoils",
        "href": "examples/04_applied/01_naca_airfoils.html#required-imports",
        "title": "Examples > Applied: Create a NACA 4-digit airfoil > Required imports",
        "section": "Required imports",
        "text": "Before you start creating the airfoil points, you must import the necessary modules to create the airfoil using PyAnsys Geometry.\nRequired imports"
    },
    {
        "objectID": "examples/04_applied/01_naca_airfoils",
        "href": "examples/04_applied/01_naca_airfoils.html#generate-the-airfoil-points",
        "title": "Examples > Applied: Create a NACA 4-digit airfoil > Generate the airfoil points",
        "section": "Generate the airfoil points",
        "text": "Using the function defined previously, you generate the points that define the NACA 0012 airfoil. Create a Sketch object and add the points to it. Then, approximate the airfoil using straight lines between the points.\nGenerate the airfoil points\nSketch"
    },
    {
        "objectID": "examples/04_applied/01_naca_airfoils",
        "href": "examples/04_applied/01_naca_airfoils.html#create-the-3d-airfoil",
        "title": "Examples > Applied: Create a NACA 4-digit airfoil > Create the 3D airfoil",
        "section": "Create the 3D airfoil",
        "text": "Once the Sketch object is created, you create a 3D airfoil. For this operation, you must create a modeler object, create a design object, and extrude the sketch.\nCreate the 3D airfoil\nSketch"
    },
    {
        "objectID": "examples/04_applied/01_naca_airfoils",
        "href": "examples/04_applied/01_naca_airfoils.html#save-the-design",
        "title": "Examples > Applied: Create a NACA 4-digit airfoil > Save the design",
        "section": "Save the design",
        "text": "Finally, save the design to a file. This file can be used in other applications or imported into a simulation software. This code saves the design as an FMD file, which can then be imported into Ansys Fluent.\nSave the design"
    },
    {
        "objectID": "examples/04_applied/01_naca_airfoils",
        "href": "examples/04_applied/01_naca_airfoils.html#close-the-modeler",
        "title": "Examples > Applied: Create a NACA 4-digit airfoil > Close the modeler",
        "section": "Close the modeler",
        "text": "Close the modeler"
    },
    {
        "objectID": "examples/04_applied/01_naca_airfoils",
        "href": "examples/04_applied/01_naca_airfoils.html#example-of-a-cambered-airfoil-naca-6412",
        "title": "Examples > Applied: Create a NACA 4-digit airfoil > Example of a cambered airfoil: NACA 6412",
        "section": "Example of a cambered airfoil: NACA 6412",
        "text": "This code creates a NACA 6412 airfoil, which is cambered. This airfoil has a maximum camber of 6% and a maximum thickness of 12%. After overriding the NACA number, the code generates the airfoil points.\nExample of a cambered airfoil: NACA 6412"
    },
    {
        "objectID": "examples/04_applied/01_naca_airfoils",
        "href": "examples/04_applied/01_naca_airfoils.html#generate-the-airfoil-points",
        "title": "Examples > Applied: Create a NACA 4-digit airfoil > Generate the airfoil points",
        "section": "Generate the airfoil points",
        "text": "As before, you generate the points that define the NACA 6412 airfoil. Create a Sketch object and add the points to it. Then, approximate the airfoil using straight lines.\nGenerate the airfoil points\nSketch"
    },
    {
        "objectID": "examples/04_applied/01_naca_airfoils",
        "href": "examples/04_applied/01_naca_airfoils.html#create-the-3d-airfoil",
        "title": "Examples > Applied: Create a NACA 4-digit airfoil > Create the 3D airfoil",
        "section": "Create the 3D airfoil",
        "text": "Create the 3D airfoil"
    },
    {
        "objectID": "examples/04_applied/01_naca_airfoils",
        "href": "examples/04_applied/01_naca_airfoils.html#save-the-design",
        "title": "Examples > Applied: Create a NACA 4-digit airfoil > Save the design",
        "section": "Save the design",
        "text": "In this case, the design is saved as an SCDOCX file.\nSave the design"
    },
    {
        "objectID": "examples/04_applied/01_naca_airfoils",
        "href": "examples/04_applied/01_naca_airfoils.html#close-the-modeler",
        "title": "Examples > Applied: Create a NACA 4-digit airfoil > Close the modeler",
        "section": "Close the modeler",
        "text": "Close the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/math/plane/Plane",
        "href": "api/ansys/geometry/core/math/plane/Plane.html#plane",
        "title": "Plane",
        "section": "Plane",
        "text": "Bases: ansys.geometry.core.math.frame.Frame\nProvides primitive representation of a 2D plane in 3D space.\nCentered origin of the frame. The default is ZERO_POINT3D, which is the\nCartesian origin.\nX-axis direction.\nY-axis direction.\nPlane\nPlane\nansys.geometry.core.math.frame.Frame\nndarray\nRealSequence\nPoint3D\nZERO_POINT3D\nZERO_POINT3D\nndarray\nRealSequence\nUnitVector3D\nVector3D\nUNITVECTOR3D_X\nndarray\nRealSequence\nUnitVector3D\nVector3D\nUNITVECTOR3D_Y"
    },
    {
        "objectID": "api/ansys/geometry/core/math/plane/Plane",
        "href": "api/ansys/geometry/core/math/plane/Plane.html#ansys.geometry.core.math.plane.Plane",
        "title": "Plane > Plane > Plane",
        "section": "Plane > Plane",
        "text": "class ansys.geometry.core.math.plane.Plane(origin: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D = ZERO_POINT3D, direction_x: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_X, direction_y: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_Y)\n\nBases: ansys.geometry.core.math.frame.Frame\n\nProvides primitive representation of a 2D plane in 3D space.\n\nParameters\n\norigin\n\nndarray | RealSequence | Point3D, default: ZERO_POINT3D\n\nCentered origin of the frame. The default is ZERO_POINT3D, which is the\nCartesian origin.\n\ndirection_x\n\nndarray | RealSequence | UnitVector3D | Vector3D, default: UNITVECTOR3D_X\n\nX-axis direction.\n\ndirection_y\n\nndarray | RealSequence | UnitVector3D | Vector3D, default: UNITVECTOR3D_Y\n\nY-axis direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/plane/Plane",
        "href": "api/ansys/geometry/core/math/plane/Plane.html#overview",
        "title": "Plane > Overview",
        "section": "Overview",
        "text": "is_point_contained\nCheck if a 3D point is contained in the plane.\nnormal\nCalculate the normal vector of the plane.\n__eq__\nEquals operator for the Plane class.\n__ne__\nNot equals operator for the Plane class.\nOverview\nis_point_contained\nnormal\n__eq__\nPlane\n__ne__\nPlane"
    },
    {
        "objectID": "api/ansys/geometry/core/math/plane/Plane",
        "href": "api/ansys/geometry/core/math/plane/Plane.html#import-detail",
        "title": "Plane > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/plane/Plane",
        "href": "api/ansys/geometry/core/math/plane/Plane.html#property-detail",
        "title": "Plane > Property detail",
        "section": "Property detail",
        "text": "Calculate the normal vector of the plane.\nNormal vector of the plane.\nProperty detail\nUnitVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/plane/Plane",
        "href": "api/ansys/geometry/core/math/plane/Plane.html#Plane.normal",
        "title": "Plane > Property detail > normal",
        "section": "Property detail > normal",
        "text": "property Plane.normal: ansys.geometry.core.math.vector.UnitVector3D\n\nCalculate the normal vector of the plane.\n\nReturns\n\nUnitVector3D\n\nNormal vector of the plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/plane/Plane",
        "href": "api/ansys/geometry/core/math/plane/Plane.html#method-detail",
        "title": "Plane > Method detail",
        "section": "Method detail",
        "text": "Check if a 3D point is contained in the plane.\nPoint3D class to check.\nTrue if the 3D point is contained in the plane, False otherwise.\nEquals operator for the Plane class.\nNot equals operator for the Plane class.\nMethod detail\nPoint3D\nPoint3D\nTrue\nFalse\nPlane\nPlane"
    },
    {
        "objectID": "api/ansys/geometry/core/math/plane/Plane",
        "href": "api/ansys/geometry/core/math/plane/Plane.html#Plane.is_point_contained",
        "title": "Plane > Method detail > is_point_contained",
        "section": "Method detail > is_point_contained",
        "text": "Plane.is_point_contained(point: ansys.geometry.core.math.point.Point3D) -> bool\n\nCheck if a 3D point is contained in the plane.\n\nParameters\n\npoint\n\nPoint3D\n\nPoint3D class to check.\n\nReturns\n\nbool\n\nTrue if the 3D point is contained in the plane, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/plane/Plane",
        "href": "api/ansys/geometry/core/math/plane/Plane.html#Plane.__eq__",
        "title": "Plane > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Plane.__eq__(other: Plane) -> bool\n\nEquals operator for the Plane class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/plane/Plane",
        "href": "api/ansys/geometry/core/math/plane/Plane.html#Plane.__ne__",
        "title": "Plane > Method detail > __ne__",
        "section": "Method detail > __ne__",
        "text": "Plane.__ne__(other: Plane) -> bool\n\nNot equals operator for the Plane class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#the-conversionspy-module",
        "title": "The conversions.py module",
        "section": "The conversions.py module",
        "text": "The conversions.py module\nconversions.py"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#summary",
        "title": "The conversions.py module > Summary",
        "section": "Summary",
        "text": "unit_vector_to_grpc_direction\nConvert a UnitVector3D class to a unit vector gRPC message.\nframe_to_grpc_frame\nConvert a Frame class to a frame gRPC message.\nplane_to_grpc_plane\nConvert a Plane class to a plane gRPC message.\nsketch_shapes_to_grpc_geometries\nConvert lists of SketchEdge and SketchFace to a gRPC message.\nsketch_edges_to_grpc_geometries\nConvert a list of SketchEdge to a gRPC message.\nsketch_arc_to_grpc_arc\nConvert an Arc class to an arc gRPC message.\nsketch_ellipse_to_grpc_ellipse\nConvert a SketchEllipse class to an ellipse gRPC message.\nsketch_circle_to_grpc_circle\nConvert a SketchCircle class to a circle gRPC message.\npoint3d_to_grpc_point\nConvert a Point3D class to a point gRPC message.\ngrpc_point_to_point3d\nConvert a point gRPC message class to a Point3D class.\npoint2d_to_grpc_point\nConvert a Point2D class to a point gRPC message.\nsketch_polygon_to_grpc_polygon\nConvert a Polygon class to a polygon gRPC message.\nsketch_segment_to_grpc_line\nConvert a Segment class to a line gRPC message.\ntess_to_pd\nConvert an ansys.api.geometry.Tessellation to pyvista.PolyData.\ngrpc_matrix_to_matrix\nConvert an ansys.api.geometry.Matrix to a Matrix44.\ngrpc_frame_to_frame\nConvert a frame gRPC message to a Frame class.\ngrpc_surface_to_surface\nConvert a surface gRPC message to a Surface class.\ngrpc_curve_to_curve\nConvert a curve gRPC message to a Curve.\ncurve_to_grpc_curve\nConvert a Curve object to a curve gRPC message.\ntrimmed_curve_to_grpc_trimmed_curve\nConvert a TrimmedCurve to a trimmed curve gRPC message.\nsurface_to_grpc_surface\nConvert a Surface object to a surface gRPC message.\ntrimmed_surface_to_grpc_trimmed_surface\nConvert a TrimmedSurface to a trimmed surface gRPC message.\nline_to_grpc_line\nConvert a Line to a line gRPC message.\ngrpc_material_to_material\nConvert a material gRPC message to a Material class.\ngrpc_material_property_to_material_property\nConvert a material property gRPC message to a MaterialProperty class.\nSummary\nunit_vector_to_grpc_direction\nUnitVector3D\nframe_to_grpc_frame\nFrame\nplane_to_grpc_plane\nPlane\nsketch_shapes_to_grpc_geometries\nSketchEdge\nSketchFace\nsketch_edges_to_grpc_geometries\nSketchEdge\nsketch_arc_to_grpc_arc\nArc\nsketch_ellipse_to_grpc_ellipse\nSketchEllipse\nsketch_circle_to_grpc_circle\nSketchCircle\npoint3d_to_grpc_point\nPoint3D\ngrpc_point_to_point3d\nPoint3D\npoint2d_to_grpc_point\nPoint2D\nsketch_polygon_to_grpc_polygon\nPolygon\nsketch_segment_to_grpc_line\nSegment\ntess_to_pd\nansys.api.geometry.Tessellation\npyvista.PolyData\ngrpc_matrix_to_matrix\nansys.api.geometry.Matrix\nMatrix44\ngrpc_frame_to_frame\nFrame\ngrpc_surface_to_surface\nSurface\ngrpc_curve_to_curve\nCurve\ncurve_to_grpc_curve\nCurve\ntrimmed_curve_to_grpc_trimmed_curve\nTrimmedCurve\nsurface_to_grpc_surface\nSurface\ntrimmed_surface_to_grpc_trimmed_surface\nTrimmedSurface\nline_to_grpc_line\nLine\ngrpc_material_to_material\nMaterial\ngrpc_material_property_to_material_property\nMaterialProperty"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#description",
        "title": "The conversions.py module > Description",
        "section": "Description",
        "text": "Module providing for conversions.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#module-detail",
        "title": "The conversions.py module > Module detail",
        "section": "Module detail",
        "text": "Convert a UnitVector3D class to a unit vector gRPC message.\nSource vector data.\nGeometry service gRPC direction message.\nConvert a Frame class to a frame gRPC message.\nSource frame data.\nGeometry service gRPC frame message. The unit for the frame origin is meters.\nConvert a Plane class to a plane gRPC message.\nSource plane data.\nGeometry service gRPC plane message. The unit is meters.\nConvert lists of SketchEdge and SketchFace to a gRPC message.\nPlane for positioning the 2D sketches.\nSource edge data.\nSource face data.\nWhether to project one curve of the whole set of geometries to\nenhance performance.\nGeometry service gRPC geometries message. The unit is meters.\nConvert a list of SketchEdge to a gRPC message.\nSource edge data.\nPlane for positioning the 2D sketches.\nGeometry service gRPC line and arc messages. The unit is meters.\nConvert an Arc class to an arc gRPC message.\nSource arc data.\nPlane for positioning the arc within.\nGeometry service gRPC arc message. The unit is meters.\nConvert a SketchEllipse class to an ellipse gRPC message.\nSource ellipse data.\nGeometry service gRPC ellipse message. The unit is meters.\nConvert a SketchCircle class to a circle gRPC message.\nSource circle data.\nPlane for positioning the circle.\nGeometry service gRPC circle message. The unit is meters.\nConvert a Point3D class to a point gRPC message.\nSource point data.\nGeometry service gRPC point message. The unit is meters.\nConvert a point gRPC message class to a Point3D class.\nSource point data.\nConverted point.\nConvert a Point2D class to a point gRPC message.\nPlane for positioning the 2D point.\nSource point data.\nGeometry service gRPC point message. The unit is meters.\nConvert a Polygon class to a polygon gRPC message.\nSource polygon data.\nGeometry service gRPC polygon message. The unit is meters.\nConvert a Segment class to a line gRPC message.\nSource segment data.\nGeometry service gRPC line message. The unit is meters.\nConvert an ansys.api.geometry.Tessellation to pyvista.PolyData.\nConvert an ansys.api.geometry.Matrix to a Matrix44.\nConvert a frame gRPC message to a Frame class.\nGeometry service gRPC frame message. The unit for the frame origin is meters.\nResulting converted frame.\nConvert a surface gRPC message to a Surface class.\nGeometry service gRPC surface message.\nResulting converted surface.\nConvert a curve gRPC message to a Curve.\nGeometry service gRPC curve message.\nResulting converted curve.\nConvert a Curve object to a curve gRPC message.\nCurve to convert.\nReturn Curve as a ansys.api.geometry.CurveGeometry message.\nConvert a TrimmedCurve to a trimmed curve gRPC message.\nCurve to convert.\nGeometry service gRPC TrimmedCurve message.\nConvert a Surface object to a surface gRPC message.\nSurface to convert.\nReturn Surface as a ansys.api.geometry.Surface message.\nReturn the grpc surface type of Surface.\nConvert a TrimmedSurface to a trimmed surface gRPC message.\nSurface to convert.\nGeometry service gRPC TrimmedSurface message.\nConvert a Line to a line gRPC message.\nLine to convert.\nGeometry service gRPC Line message.\nConvert a material gRPC message to a Material class.\nMaterial gRPC message.\nConverted material.\nConvert a material property gRPC message to a MaterialProperty class.\nMaterial property gRPC message.\nConverted material property.\nModule detail\nUnitVector3D\nUnitVector3D\nGRPCDirection\nFrame\nFrame\nGRPCFrame\nPlane\nPlane\nGRPCPlane\nSketchEdge\nSketchFace\nPlane\npython:list\nSketchEdge\npython:list\nSketchFace\npython:False\nGRPCGeometries\nSketchEdge\npython:list\nSketchEdge\nPlane\npython:tuple\npython:list\nGRPCLine\npython:list\nGRPCArc\nArc\nArc\nPlane\nGRPCArc\nSketchEllipse\nSketchEllipse\nGRPCEllipse\nSketchCircle\nSketchCircle\nPlane\nGRPCCircle\nPoint3D\nPoint3D\nGRPCPoint\nPoint3D\nGRPCPoint\nPoint3D\nPoint2D\nPlane\nPoint2D\nGRPCPoint\nPolygon\nPolygon\nGRPCPolygon\nSegment\nSketchSegment\nGRPCLine\nansys.api.geometry.Tessellation\npyvista.PolyData\nansys.api.geometry.Matrix\nMatrix44\nFrame\nFrame\nSurface\nGRPCSurface\nSurface\nCurve\nGRPCCurve\nCurve\nCurve\nCurve\nGRPCCurve\nCurve\nansys.api.geometry.CurveGeometry\nTrimmedCurve\nTrimmedCurve\nGRPCTrimmedCurve\nTrimmedCurve\nSurface\nSurface\nGRPCSurface\nSurface\nansys.api.geometry.Surface\nGRPCSurfaceType\nSurface\nTrimmedSurface\nTrimmedSurface\nGRPCTrimmedSurface\nTrimmedSurface\nLine\nLine\nGRPCLine\nLine\nMaterial\nGRPCMaterial\nMaterial\nMaterialProperty\nGRPCMaterialProperty\nMaterialProperty"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.unit_vector_to_grpc_direction",
        "title": "The conversions.py module > Module detail > unit_vector_to_grpc_direction",
        "section": "Module detail > unit_vector_to_grpc_direction",
        "text": "conversions.unit_vector_to_grpc_direction(unit_vector: ansys.geometry.core.math.vector.UnitVector3D) -> ansys.api.geometry.v0.models_pb2.Direction\n\nConvert a UnitVector3D class to a unit vector gRPC message.\n\nParameters\n\nunit_vector\n\nUnitVector3D\n\nSource vector data.\n\nReturns\n\nGRPCDirection\n\nGeometry service gRPC direction message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.frame_to_grpc_frame",
        "title": "The conversions.py module > Module detail > frame_to_grpc_frame",
        "section": "Module detail > frame_to_grpc_frame",
        "text": "conversions.frame_to_grpc_frame(frame: ansys.geometry.core.math.frame.Frame) -> ansys.api.geometry.v0.models_pb2.Frame\n\nConvert a Frame class to a frame gRPC message.\n\nParameters\n\nframe\n\nFrame\n\nSource frame data.\n\nReturns\n\nGRPCFrame\n\nGeometry service gRPC frame message. The unit for the frame origin is meters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.plane_to_grpc_plane",
        "title": "The conversions.py module > Module detail > plane_to_grpc_plane",
        "section": "Module detail > plane_to_grpc_plane",
        "text": "conversions.plane_to_grpc_plane(plane: ansys.geometry.core.math.plane.Plane) -> ansys.api.geometry.v0.models_pb2.Plane\n\nConvert a Plane class to a plane gRPC message.\n\nParameters\n\nplane\n\nPlane\n\nSource plane data.\n\nReturns\n\nGRPCPlane\n\nGeometry service gRPC plane message. The unit is meters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.sketch_shapes_to_grpc_geometries",
        "title": "The conversions.py module > Module detail > sketch_shapes_to_grpc_geometries",
        "section": "Module detail > sketch_shapes_to_grpc_geometries",
        "text": "conversions.sketch_shapes_to_grpc_geometries(plane: ansys.geometry.core.math.plane.Plane, edges: list[ansys.geometry.core.sketch.edge.SketchEdge], faces: list[ansys.geometry.core.sketch.face.SketchFace], only_one_curve: bool = False) -> ansys.api.geometry.v0.models_pb2.Geometries\n\nConvert lists of SketchEdge and SketchFace to a gRPC message.\n\nParameters\n\nplane\n\nPlane\n\nPlane for positioning the 2D sketches.\n\nedges\n\npython:list[SketchEdge]\n\nSource edge data.\n\nfaces\n\npython:list[SketchFace]\n\nSource face data.\n\nonly_one_curve\n\nbool, default: python:False\n\nWhether to project one curve of the whole set of geometries to\nenhance performance.\n\nReturns\n\nGRPCGeometries\n\nGeometry service gRPC geometries message. The unit is meters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.sketch_edges_to_grpc_geometries",
        "title": "The conversions.py module > Module detail > sketch_edges_to_grpc_geometries",
        "section": "Module detail > sketch_edges_to_grpc_geometries",
        "text": "conversions.sketch_edges_to_grpc_geometries(edges: list[ansys.geometry.core.sketch.edge.SketchEdge], plane: ansys.geometry.core.math.plane.Plane) -> tuple[list[ansys.api.geometry.v0.models_pb2.Line], list[ansys.api.geometry.v0.models_pb2.Arc]]\n\nConvert a list of SketchEdge to a gRPC message.\n\nParameters\n\nedges\n\npython:list[SketchEdge]\n\nSource edge data.\n\nplane\n\nPlane\n\nPlane for positioning the 2D sketches.\n\nReturns\n\npython:tuple[python:list[GRPCLine], python:list[GRPCArc]]\n\nGeometry service gRPC line and arc messages. The unit is meters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.sketch_arc_to_grpc_arc",
        "title": "The conversions.py module > Module detail > sketch_arc_to_grpc_arc",
        "section": "Module detail > sketch_arc_to_grpc_arc",
        "text": "conversions.sketch_arc_to_grpc_arc(arc: ansys.geometry.core.sketch.arc.Arc, plane: ansys.geometry.core.math.plane.Plane) -> ansys.api.geometry.v0.models_pb2.Arc\n\nConvert an Arc class to an arc gRPC message.\n\nParameters\n\narc\n\nArc\n\nSource arc data.\n\nplane\n\nPlane\n\nPlane for positioning the arc within.\n\nReturns\n\nGRPCArc\n\nGeometry service gRPC arc message. The unit is meters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.sketch_ellipse_to_grpc_ellipse",
        "title": "The conversions.py module > Module detail > sketch_ellipse_to_grpc_ellipse",
        "section": "Module detail > sketch_ellipse_to_grpc_ellipse",
        "text": "conversions.sketch_ellipse_to_grpc_ellipse(ellipse: ansys.geometry.core.sketch.ellipse.SketchEllipse, plane: ansys.geometry.core.math.plane.Plane) -> ansys.api.geometry.v0.models_pb2.Ellipse\n\nConvert a SketchEllipse class to an ellipse gRPC message.\n\nParameters\n\nellipse\n\nSketchEllipse\n\nSource ellipse data.\n\nReturns\n\nGRPCEllipse\n\nGeometry service gRPC ellipse message. The unit is meters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.sketch_circle_to_grpc_circle",
        "title": "The conversions.py module > Module detail > sketch_circle_to_grpc_circle",
        "section": "Module detail > sketch_circle_to_grpc_circle",
        "text": "conversions.sketch_circle_to_grpc_circle(circle: ansys.geometry.core.sketch.circle.SketchCircle, plane: ansys.geometry.core.math.plane.Plane) -> ansys.api.geometry.v0.models_pb2.Circle\n\nConvert a SketchCircle class to a circle gRPC message.\n\nParameters\n\ncircle\n\nSketchCircle\n\nSource circle data.\n\nplane\n\nPlane\n\nPlane for positioning the circle.\n\nReturns\n\nGRPCCircle\n\nGeometry service gRPC circle message. The unit is meters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.point3d_to_grpc_point",
        "title": "The conversions.py module > Module detail > point3d_to_grpc_point",
        "section": "Module detail > point3d_to_grpc_point",
        "text": "conversions.point3d_to_grpc_point(point: ansys.geometry.core.math.point.Point3D) -> ansys.api.geometry.v0.models_pb2.Point\n\nConvert a Point3D class to a point gRPC message.\n\nParameters\n\npoint\n\nPoint3D\n\nSource point data.\n\nReturns\n\nGRPCPoint\n\nGeometry service gRPC point message. The unit is meters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.grpc_point_to_point3d",
        "title": "The conversions.py module > Module detail > grpc_point_to_point3d",
        "section": "Module detail > grpc_point_to_point3d",
        "text": "conversions.grpc_point_to_point3d(point: ansys.api.geometry.v0.models_pb2.Point) -> ansys.geometry.core.math.point.Point3D\n\nConvert a point gRPC message class to a Point3D class.\n\nParameters\n\npoint\n\nGRPCPoint\n\nSource point data.\n\nReturns\n\nPoint3D\n\nConverted point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.point2d_to_grpc_point",
        "title": "The conversions.py module > Module detail > point2d_to_grpc_point",
        "section": "Module detail > point2d_to_grpc_point",
        "text": "conversions.point2d_to_grpc_point(plane: ansys.geometry.core.math.plane.Plane, point2d: ansys.geometry.core.math.point.Point2D) -> ansys.api.geometry.v0.models_pb2.Point\n\nConvert a Point2D class to a point gRPC message.\n\nParameters\n\nplane\n\nPlane\n\nPlane for positioning the 2D point.\n\npoint\n\nPoint2D\n\nSource point data.\n\nReturns\n\nGRPCPoint\n\nGeometry service gRPC point message. The unit is meters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.sketch_polygon_to_grpc_polygon",
        "title": "The conversions.py module > Module detail > sketch_polygon_to_grpc_polygon",
        "section": "Module detail > sketch_polygon_to_grpc_polygon",
        "text": "conversions.sketch_polygon_to_grpc_polygon(polygon: ansys.geometry.core.sketch.polygon.Polygon, plane: ansys.geometry.core.math.plane.Plane) -> ansys.api.geometry.v0.models_pb2.Polygon\n\nConvert a Polygon class to a polygon gRPC message.\n\nParameters\n\npolygon\n\nPolygon\n\nSource polygon data.\n\nReturns\n\nGRPCPolygon\n\nGeometry service gRPC polygon message. The unit is meters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.sketch_segment_to_grpc_line",
        "title": "The conversions.py module > Module detail > sketch_segment_to_grpc_line",
        "section": "Module detail > sketch_segment_to_grpc_line",
        "text": "conversions.sketch_segment_to_grpc_line(segment: ansys.geometry.core.sketch.segment.SketchSegment, plane: ansys.geometry.core.math.plane.Plane) -> ansys.api.geometry.v0.models_pb2.Line\n\nConvert a Segment class to a line gRPC message.\n\nParameters\n\nsegment\n\nSketchSegment\n\nSource segment data.\n\nReturns\n\nGRPCLine\n\nGeometry service gRPC line message. The unit is meters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.tess_to_pd",
        "title": "The conversions.py module > Module detail > tess_to_pd",
        "section": "Module detail > tess_to_pd",
        "text": "conversions.tess_to_pd(tess: ansys.api.geometry.v0.models_pb2.Tessellation) -> pyvista.PolyData\n\nConvert an ansys.api.geometry.Tessellation to pyvista.PolyData.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.grpc_matrix_to_matrix",
        "title": "The conversions.py module > Module detail > grpc_matrix_to_matrix",
        "section": "Module detail > grpc_matrix_to_matrix",
        "text": "conversions.grpc_matrix_to_matrix(m: ansys.api.geometry.v0.models_pb2.Matrix) -> ansys.geometry.core.math.matrix.Matrix44\n\nConvert an ansys.api.geometry.Matrix to a Matrix44.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.grpc_frame_to_frame",
        "title": "The conversions.py module > Module detail > grpc_frame_to_frame",
        "section": "Module detail > grpc_frame_to_frame",
        "text": "conversions.grpc_frame_to_frame(frame: ansys.api.geometry.v0.models_pb2.Frame) -> ansys.geometry.core.math.frame.Frame\n\nConvert a frame gRPC message to a Frame class.\n\nParameters\n\nGRPCFrame\n\nGeometry service gRPC frame message. The unit for the frame origin is meters.\n\nReturns\n\nframe\n\nFrame\n\nResulting converted frame.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.grpc_surface_to_surface",
        "title": "The conversions.py module > Module detail > grpc_surface_to_surface",
        "section": "Module detail > grpc_surface_to_surface",
        "text": "conversions.grpc_surface_to_surface(surface: ansys.api.geometry.v0.models_pb2.Surface, surface_type: ansys.geometry.core.designer.face.SurfaceType) -> ansys.geometry.core.shapes.surfaces.surface.Surface\n\nConvert a surface gRPC message to a Surface class.\n\nParameters\n\nsurface\n\nGRPCSurface\n\nGeometry service gRPC surface message.\n\nReturns\n\nSurface\n\nResulting converted surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.grpc_curve_to_curve",
        "title": "The conversions.py module > Module detail > grpc_curve_to_curve",
        "section": "Module detail > grpc_curve_to_curve",
        "text": "conversions.grpc_curve_to_curve(curve: ansys.api.geometry.v0.models_pb2.CurveGeometry) -> ansys.geometry.core.shapes.curves.curve.Curve\n\nConvert a curve gRPC message to a Curve.\n\nParameters\n\ncurve\n\nGRPCCurve\n\nGeometry service gRPC curve message.\n\nReturns\n\nCurve\n\nResulting converted curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.curve_to_grpc_curve",
        "title": "The conversions.py module > Module detail > curve_to_grpc_curve",
        "section": "Module detail > curve_to_grpc_curve",
        "text": "conversions.curve_to_grpc_curve(curve: ansys.geometry.core.shapes.curves.curve.Curve) -> ansys.api.geometry.v0.models_pb2.CurveGeometry\n\nConvert a Curve object to a curve gRPC message.\n\nParameters\n\ncurve\n\nCurve\n\nCurve to convert.\n\nReturns\n\nGRPCCurve\n\nReturn Curve as a ansys.api.geometry.CurveGeometry message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.trimmed_curve_to_grpc_trimmed_curve",
        "title": "The conversions.py module > Module detail > trimmed_curve_to_grpc_trimmed_curve",
        "section": "Module detail > trimmed_curve_to_grpc_trimmed_curve",
        "text": "conversions.trimmed_curve_to_grpc_trimmed_curve(curve: ansys.geometry.core.shapes.curves.trimmed_curve.TrimmedCurve) -> ansys.api.geometry.v0.models_pb2.TrimmedCurve\n\nConvert a TrimmedCurve to a trimmed curve gRPC message.\n\nParameters\n\ncurve\n\nTrimmedCurve\n\nCurve to convert.\n\nReturns\n\nGRPCTrimmedCurve\n\nGeometry service gRPC TrimmedCurve message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.surface_to_grpc_surface",
        "title": "The conversions.py module > Module detail > surface_to_grpc_surface",
        "section": "Module detail > surface_to_grpc_surface",
        "text": "conversions.surface_to_grpc_surface(surface: ansys.geometry.core.shapes.surfaces.surface.Surface) -> tuple[ansys.api.geometry.v0.models_pb2.Surface, ansys.api.geometry.v0.models_pb2.SurfaceType]\n\nConvert a Surface object to a surface gRPC message.\n\nParameters\n\nsurface\n\nSurface\n\nSurface to convert.\n\nReturns\n\nGRPCSurface\n\nReturn Surface as a ansys.api.geometry.Surface message.\n\nGRPCSurfaceType\n\nReturn the grpc surface type of Surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.trimmed_surface_to_grpc_trimmed_surface",
        "title": "The conversions.py module > Module detail > trimmed_surface_to_grpc_trimmed_surface",
        "section": "Module detail > trimmed_surface_to_grpc_trimmed_surface",
        "text": "conversions.trimmed_surface_to_grpc_trimmed_surface(trimmed_surface: ansys.geometry.core.shapes.surfaces.TrimmedSurface) -> ansys.api.geometry.v0.models_pb2.TrimmedSurface\n\nConvert a TrimmedSurface to a trimmed surface gRPC message.\n\nParameters\n\ntrimmed_surface\n\nTrimmedSurface\n\nSurface to convert.\n\nReturns\n\nGRPCTrimmedSurface\n\nGeometry service gRPC TrimmedSurface message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.line_to_grpc_line",
        "title": "The conversions.py module > Module detail > line_to_grpc_line",
        "section": "Module detail > line_to_grpc_line",
        "text": "conversions.line_to_grpc_line(line: ansys.geometry.core.shapes.curves.line.Line) -> ansys.api.geometry.v0.models_pb2.Line\n\nConvert a Line to a line gRPC message.\n\nParameters\n\nline\n\nLine\n\nLine to convert.\n\nReturns\n\nGRPCLine\n\nGeometry service gRPC Line message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.grpc_material_to_material",
        "title": "The conversions.py module > Module detail > grpc_material_to_material",
        "section": "Module detail > grpc_material_to_material",
        "text": "conversions.grpc_material_to_material(material: ansys.api.geometry.v0.models_pb2.Material) -> ansys.geometry.core.materials.material.Material\n\nConvert a material gRPC message to a Material class.\n\nParameters\n\nmaterial\n\nGRPCMaterial\n\nMaterial gRPC message.\n\nReturns\n\nMaterial\n\nConverted material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/conversions/index",
        "href": "api/ansys/geometry/core/connection/conversions/index.html#conversions.grpc_material_property_to_material_property",
        "title": "The conversions.py module > Module detail > grpc_material_property_to_material_property",
        "section": "Module detail > grpc_material_property_to_material_property",
        "text": "conversions.grpc_material_property_to_material_property(material_property: ansys.api.geometry.v0.models_pb2.MaterialProperty) -> ansys.geometry.core.materials.material.MaterialProperty\n\nConvert a material property gRPC message to a MaterialProperty class.\n\nParameters\n\nmaterial_property\n\nGRPCMaterialProperty\n\nMaterial property gRPC message.\n\nReturns\n\nMaterialProperty\n\nConverted material property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#sphere",
        "title": "Sphere",
        "section": "Sphere",
        "text": "Bases: ansys.geometry.core.shapes.surfaces.surface.Surface\nProvides 3D sphere representation.\nOrigin of the sphere.\nRadius of the sphere.\nX-axis direction.\nZ-axis direction.\nSphere\nSphere\nansys.geometry.core.shapes.surfaces.surface.Surface\nndarray\nRealSequence\nPoint3D\nQuantity\nDistance\nReal\nndarray\nRealSequence\nUnitVector3D\nVector3D\nndarray\nRealSequence\nUnitVector3D\nVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#ansys.geometry.core.shapes.surfaces.sphere.Sphere",
        "title": "Sphere > Sphere > Sphere",
        "section": "Sphere > Sphere",
        "text": "class ansys.geometry.core.shapes.surfaces.sphere.Sphere(origin: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D, radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, reference: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_X, axis: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_Z)\n\nBases: ansys.geometry.core.shapes.surfaces.surface.Surface\n\nProvides 3D sphere representation.\n\nParameters\n\norigin\n\nndarray | RealSequence | Point3D\n\nOrigin of the sphere.\n\nradius\n\nQuantity | Distance | Real\n\nRadius of the sphere.\n\nreference\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nX-axis direction.\n\naxis\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nZ-axis direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#overview",
        "title": "Sphere > Overview",
        "section": "Overview",
        "text": "contains_param\nCheck a parameter is within the parametric range of the surface.\ncontains_point\nCheck a point is contained by the surface.\ntransformed_copy\nCreate a transformed copy of the sphere from a transformation matrix.\nmirrored_copy\nCreate a mirrored copy of the sphere along the y-axis.\nevaluate\nEvaluate the sphere at the given parameters.\nproject_point\nProject a point onto the sphere and evaluate the sphere.\nparameterization\nParameterization of the sphere surface as a tuple (U, V).\norigin\nOrigin of the sphere.\nradius\nRadius of the sphere.\ndir_x\nX-direction of the sphere.\ndir_y\nY-direction of the sphere.\ndir_z\nZ-direction of the sphere.\nsurface_area\nSurface area of the sphere.\nvolume\nVolume of the sphere.\n__eq__\nEquals operator for the Sphere class.\nOverview\ncontains_param\ncontains_point\ntransformed_copy\nmirrored_copy\nevaluate\nproject_point\nparameterization\norigin\nradius\ndir_x\ndir_y\ndir_z\nsurface_area\nvolume\n__eq__\nSphere"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#import-detail",
        "title": "Sphere > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#property-detail",
        "title": "Sphere > Property detail",
        "section": "Property detail",
        "text": "Origin of the sphere.\nRadius of the sphere.\nX-direction of the sphere.\nY-direction of the sphere.\nZ-direction of the sphere.\nSurface area of the sphere.\nVolume of the sphere.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.origin",
        "title": "Sphere > Property detail > origin",
        "section": "Property detail > origin",
        "text": "property Sphere.origin: ansys.geometry.core.math.point.Point3D\n\nOrigin of the sphere.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.radius",
        "title": "Sphere > Property detail > radius",
        "section": "Property detail > radius",
        "text": "property Sphere.radius: pint.Quantity\n\nRadius of the sphere.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.dir_x",
        "title": "Sphere > Property detail > dir_x",
        "section": "Property detail > dir_x",
        "text": "property Sphere.dir_x: ansys.geometry.core.math.vector.UnitVector3D\n\nX-direction of the sphere.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.dir_y",
        "title": "Sphere > Property detail > dir_y",
        "section": "Property detail > dir_y",
        "text": "property Sphere.dir_y: ansys.geometry.core.math.vector.UnitVector3D\n\nY-direction of the sphere.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.dir_z",
        "title": "Sphere > Property detail > dir_z",
        "section": "Property detail > dir_z",
        "text": "property Sphere.dir_z: ansys.geometry.core.math.vector.UnitVector3D\n\nZ-direction of the sphere.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.surface_area",
        "title": "Sphere > Property detail > surface_area",
        "section": "Property detail > surface_area",
        "text": "property Sphere.surface_area: pint.Quantity\n\nSurface area of the sphere.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.volume",
        "title": "Sphere > Property detail > volume",
        "section": "Property detail > volume",
        "text": "property Sphere.volume: pint.Quantity\n\nVolume of the sphere.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#method-detail",
        "title": "Sphere > Method detail",
        "section": "Method detail",
        "text": "Equals operator for the Sphere class.\nCreate a transformed copy of the sphere from a transformation matrix.\n4X4 transformation matrix to apply to the sphere.\nNew sphere that is the transformed copy of the original sphere.\nCreate a mirrored copy of the sphere along the y-axis.\nNew sphere that is a mirrored copy of the original sphere.\nEvaluate the sphere at the given parameters.\nParameters (u,v) to evaluate the sphere at.\nResulting evaluation.\nProject a point onto the sphere and evaluate the sphere.\nPoint to project onto the sphere.\nResulting evaluation.\nParameterization of the sphere surface as a tuple (U, V).\nThe U parameter specifies the longitude angle, increasing clockwise (east) about\ndir_z (right-hand corkscrew law). It has a zero parameter at dir_x and a\nperiod of 2*pi.\nThe V parameter specifies the latitude, increasing north, with a zero parameter\nat the equator and a range of [-pi/2, pi/2].\nInformation about how a sphere’s u and v parameters are parameterized, respectively.\nCheck a parameter is within the parametric range of the surface.\nCheck a point is contained by the surface.\nThe point can either lie within the surface or on its boundary.\nMethod detail\nSphere\nMatrix44\nSphere\nSphere\nParamUV\nSphereEvaluation\nPoint3D\nSphereEvaluation\ndir_z\ndir_x\n2*pi\npython:tuple\nParameterization\nParameterization"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.__eq__",
        "title": "Sphere > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Sphere.__eq__(other: Sphere) -> bool\n\nEquals operator for the Sphere class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.transformed_copy",
        "title": "Sphere > Method detail > transformed_copy",
        "section": "Method detail > transformed_copy",
        "text": "Sphere.transformed_copy(matrix: ansys.geometry.core.math.matrix.Matrix44) -> Sphere\n\nCreate a transformed copy of the sphere from a transformation matrix.\n\nParameters\n\nmatrix\n\nMatrix44\n\n4X4 transformation matrix to apply to the sphere.\n\nReturns\n\nSphere\n\nNew sphere that is the transformed copy of the original sphere.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.mirrored_copy",
        "title": "Sphere > Method detail > mirrored_copy",
        "section": "Method detail > mirrored_copy",
        "text": "Sphere.mirrored_copy() -> Sphere\n\nCreate a mirrored copy of the sphere along the y-axis.\n\nReturns\n\nSphere\n\nNew sphere that is a mirrored copy of the original sphere.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.evaluate",
        "title": "Sphere > Method detail > evaluate",
        "section": "Method detail > evaluate",
        "text": "Sphere.evaluate(parameter: ansys.geometry.core.shapes.parameterization.ParamUV) -> SphereEvaluation\n\nEvaluate the sphere at the given parameters.\n\nParameters\n\nparameter\n\nParamUV\n\nParameters (u,v) to evaluate the sphere at.\n\nReturns\n\nSphereEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.project_point",
        "title": "Sphere > Method detail > project_point",
        "section": "Method detail > project_point",
        "text": "Sphere.project_point(point: ansys.geometry.core.math.point.Point3D) -> SphereEvaluation\n\nProject a point onto the sphere and evaluate the sphere.\n\nParameters\n\npoint\n\nPoint3D\n\nPoint to project onto the sphere.\n\nReturns\n\nSphereEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.parameterization",
        "title": "Sphere > Method detail > parameterization",
        "section": "Method detail > parameterization",
        "text": "Sphere.parameterization() -> tuple[ansys.geometry.core.shapes.parameterization.Parameterization, ansys.geometry.core.shapes.parameterization.Parameterization]\n\nParameterization of the sphere surface as a tuple (U, V).\n\nThe U parameter specifies the longitude angle, increasing clockwise (east) about\ndir_z (right-hand corkscrew law). It has a zero parameter at dir_x and a\nperiod of 2*pi.\n\nThe V parameter specifies the latitude, increasing north, with a zero parameter\nat the equator and a range of [-pi/2, pi/2].\n\nReturns\n\npython:tuple[Parameterization, Parameterization]\n\nInformation about how a sphere’s u and v parameters are parameterized, respectively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.contains_param",
        "title": "Sphere > Method detail > contains_param",
        "section": "Method detail > contains_param",
        "text": "abstractmethod Sphere.contains_param(param_uv: ansys.geometry.core.shapes.parameterization.ParamUV) -> bool\n\nCheck a parameter is within the parametric range of the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere",
        "href": "api/ansys/geometry/core/shapes/surfaces/sphere/Sphere.html#Sphere.contains_point",
        "title": "Sphere > Method detail > contains_point",
        "section": "Method detail > contains_point",
        "text": "abstractmethod Sphere.contains_point(point: ansys.geometry.core.math.point.Point3D) -> bool\n\nCheck a point is contained by the surface.\n\nThe point can either lie within the surface or on its boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/docker/index",
        "href": "getting_started/docker/index.html#docker-containers",
        "title": "Docker containers",
        "section": "Docker containers",
        "text": "Docker containers"
    },
    {
        "objectID": "getting_started/docker/index",
        "href": "getting_started/docker/index.html#what-is-docker",
        "title": "Docker containers > What is Docker?",
        "section": "What is Docker?",
        "text": "Docker is an open platform for developing, shipping, and running apps in a\ncontainerized way.\nContainers are standard units of software that package the code and all its dependencies\nso that the app runs quickly and reliably from one computing environment to another.\nEnsure that the machine where the Geometry service is to run has Docker installed. Otherwise,\nsee Install Docker Engine in the Docker documentation.\nWhat is Docker?"
    },
    {
        "objectID": "getting_started/docker/index",
        "href": "getting_started/docker/index.html#select-your-docker-container",
        "title": "Docker containers > Select your Docker container",
        "section": "Select your Docker container",
        "text": "Currently, the Geometry service backend is mainly delivered as a Windows Docker container.\nHowever, these containers require a Windows machine to run them.\nSelect the kind of Docker container you want to build:\nBuild a Windows Docker container for the Geometry service\nand use it from PyAnsys Geometry. Explore the full potential\nof the Geometry service.\nGo to Getting started\nSelect your Docker container"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/MeasurementTools",
        "href": "api/ansys/geometry/core/tools/measurement_tools/MeasurementTools.html#measurementtools",
        "title": "MeasurementTools",
        "section": "MeasurementTools",
        "text": "Measurement tools for PyAnsys Geometry.\ngRPC client to use for the measurement tools.\nMeasurementTools\nMeasurementTools\nGrpcClient"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/MeasurementTools",
        "href": "api/ansys/geometry/core/tools/measurement_tools/MeasurementTools.html#ansys.geometry.core.tools.measurement_tools.MeasurementTools",
        "title": "MeasurementTools > MeasurementTools > MeasurementTools",
        "section": "MeasurementTools > MeasurementTools",
        "text": "class ansys.geometry.core.tools.measurement_tools.MeasurementTools(grpc_client: ansys.geometry.core.connection.GrpcClient)\n\nMeasurement tools for PyAnsys Geometry.\n\nParameters\n\ngrpc_client\n\nGrpcClient\n\ngRPC client to use for the measurement tools.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/MeasurementTools",
        "href": "api/ansys/geometry/core/tools/measurement_tools/MeasurementTools.html#overview",
        "title": "MeasurementTools > Overview",
        "section": "Overview",
        "text": "min_distance_between_objects\nFind the gap between two bodies.\nOverview\nmin_distance_between_objects"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/MeasurementTools",
        "href": "api/ansys/geometry/core/tools/measurement_tools/MeasurementTools.html#import-detail",
        "title": "MeasurementTools > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/MeasurementTools",
        "href": "api/ansys/geometry/core/tools/measurement_tools/MeasurementTools.html#method-detail",
        "title": "MeasurementTools > Method detail",
        "section": "Method detail",
        "text": "Find the gap between two bodies.\nFirst object to measure the gap.\nSecond object to measure the gap.\nGap between two bodies.\nMethod detail\nUnion\nBody\nFace\nEdge\nUnion\nBody\nFace\nEdge\nGap"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/MeasurementTools",
        "href": "api/ansys/geometry/core/tools/measurement_tools/MeasurementTools.html#MeasurementTools.min_distance_between_objects",
        "title": "MeasurementTools > Method detail > min_distance_between_objects",
        "section": "Method detail > min_distance_between_objects",
        "text": "MeasurementTools.min_distance_between_objects(object1: ansys.geometry.core.designer.body.Body | ansys.geometry.core.designer.face.Face | ansys.geometry.core.designer.edge.Edge, object2: ansys.geometry.core.designer.body.Body | ansys.geometry.core.designer.face.Face | ansys.geometry.core.designer.edge.Edge) -> Gap\n\nFind the gap between two bodies.\n\nParameters\n\nobject1\n\nUnion[Body, Face, Edge]\n\nFirst object to measure the gap.\n\nobject2\n\nUnion[Body, Face, Edge]\n\nSecond object to measure the gap.\n\nReturns\n\nGap\n\nGap between two bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/index",
        "href": "api/ansys/geometry/core/sketch/box/index.html#the-boxpy-module",
        "title": "The box.py module",
        "section": "The box.py module",
        "text": "The box.py module\nbox.py"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/index",
        "href": "api/ansys/geometry/core/sketch/box/index.html#summary",
        "title": "The box.py module > Summary",
        "section": "Summary",
        "text": "Box\nProvides for modeling a box.\nSummary\nBox"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/index",
        "href": "api/ansys/geometry/core/sketch/box/index.html#description",
        "title": "The box.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a box (quadrilateral).\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas.html#unsimplifiedfaceproblemareas",
        "title": "UnsimplifiedFaceProblemAreas",
        "section": "UnsimplifiedFaceProblemAreas",
        "text": "Bases: ProblemArea\nRepresents a unsimplified face problem area with unique identifier and associated faces.\nServer-defined ID for the problem area.\nActive supporting geometry service instance for design modeling.\nList of faces associated with the design.\nUnsimplifiedFaceProblemAreas\nUnsimplifiedFaceProblemAreas\nProblemArea\npython:str\nGrpcClient\npython:list\nFace"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas.html#ansys.geometry.core.tools.problem_areas.UnsimplifiedFaceProblemAreas",
        "title": "UnsimplifiedFaceProblemAreas > UnsimplifiedFaceProblemAreas > UnsimplifiedFaceProblemAreas",
        "section": "UnsimplifiedFaceProblemAreas > UnsimplifiedFaceProblemAreas",
        "text": "class ansys.geometry.core.tools.problem_areas.UnsimplifiedFaceProblemAreas(id: str, grpc_client: ansys.geometry.core.connection.GrpcClient, faces: list[ansys.geometry.core.designer.face.Face])\n\nBases: ProblemArea\n\nRepresents a unsimplified face problem area with unique identifier and associated faces.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the problem area.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting geometry service instance for design modeling.\n\nfaces\n\npython:list[Face]\n\nList of faces associated with the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas.html#overview",
        "title": "UnsimplifiedFaceProblemAreas > Overview",
        "section": "Overview",
        "text": "fix\nFix the problem area.\nfaces\nThe list of faces connected to this problem area.\nOverview\nfix\nfaces"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas.html#import-detail",
        "title": "UnsimplifiedFaceProblemAreas > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas.html#property-detail",
        "title": "UnsimplifiedFaceProblemAreas > Property detail",
        "section": "Property detail",
        "text": "The list of faces connected to this problem area.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas.html#UnsimplifiedFaceProblemAreas.faces",
        "title": "UnsimplifiedFaceProblemAreas > Property detail > faces",
        "section": "Property detail > faces",
        "text": "property UnsimplifiedFaceProblemAreas.faces: list[ansys.geometry.core.designer.face.Face]\n\nThe list of faces connected to this problem area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas.html#method-detail",
        "title": "UnsimplifiedFaceProblemAreas > Method detail",
        "section": "Method detail",
        "text": "Fix the problem area.\nMessage containing created and/or modified bodies.\nMethod detail\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/UnsimplifiedFaceProblemAreas.html#UnsimplifiedFaceProblemAreas.fix",
        "title": "UnsimplifiedFaceProblemAreas > Method detail > fix",
        "section": "Method detail > fix",
        "text": "UnsimplifiedFaceProblemAreas.fix() -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFix the problem area.\n\nReturns\n\nmessage: RepairToolMessage\n\nMessage containing created and/or modified bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#the-auxiliarypy-module",
        "title": "The auxiliary.py module",
        "section": "The auxiliary.py module",
        "text": "The auxiliary.py module\nauxiliary.py"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#summary",
        "title": "The auxiliary.py module > Summary",
        "section": "Summary",
        "text": "get_design_from_component\nGet the Design of the given Component object.\nget_design_from_body\nGet the Design of the given Body object.\nget_design_from_face\nGet the Design of the given Face object.\nget_design_from_edge\nGet the Design of the given Edge object.\nget_all_bodies_from_design\nFind all the Body objects inside a Design.\nget_bodies_from_ids\nFind the Body objects inside a Design from its ids.\nget_faces_from_ids\nFind the Face objects inside a Design from its ids.\nget_edges_from_ids\nFind the Edge objects inside a Design from its ids.\nconvert_color_to_hex\nGet the hex string color from input formats.\nDEFAULT_COLOR\nSummary\nget_design_from_component\nDesign\nComponent\nget_design_from_body\nDesign\nBody\nget_design_from_face\nDesign\nFace\nget_design_from_edge\nDesign\nEdge\nget_all_bodies_from_design\nBody\nDesign\nget_bodies_from_ids\nBody\nDesign\nget_faces_from_ids\nFace\nDesign\nget_edges_from_ids\nEdge\nDesign\nconvert_color_to_hex\nDEFAULT_COLOR"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#description",
        "title": "The auxiliary.py module > Description",
        "section": "Description",
        "text": "Auxiliary functions for the PyAnsys Geometry library.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#module-detail",
        "title": "The auxiliary.py module > Module detail",
        "section": "Module detail",
        "text": "Get the Design of the given Component object.\nThe component object for which to find the Design.\nThe Design of the provided component object.\nGet the Design of the given Body object.\nThe body object for which to find the Design.\nThe Design of the provided body object.\nGet the Design of the given Face object.\nThe face object for which to find the Design.\nThe Design of the provided face object.\nGet the Design of the given Edge object.\nThe edge object for which to find the Design.\nThe Design of the provided edge object.\nFind all the Body objects inside a Design.\nParent design for the bodies.\nList of Body objects.\nThis method takes a design and gets the corresponding Body objects.\nFind the Body objects inside a Design from its ids.\nParent design for the faces.\nList of body ids.\nList of Body objects.\nThis method takes a design and body ids, and gets their corresponding Body object.\nFind the Face objects inside a Design from its ids.\nParent design for the faces.\nList of face ids.\nList of Face objects.\nThis method takes a design and face ids, and gets their corresponding Face object.\nFind the Edge objects inside a Design from its ids.\nParent design for the edges.\nList of edge ids.\nList of Edge objects.\nThis method takes a design and edge ids, and gets their corresponding Edge objects.\nGet the hex string color from input formats.\nColor to set the body to. This can be a string representing a color name\nor a tuple of RGB values in the range [0, 1] (RGBA) or [0, 255] (pure RGB).\nThe hex code string for the color.\nModule detail\nDesign\nComponent\nComponent\nDesign\nDesign\nDesign\nDesign\nBody\nBody\nDesign\nDesign\nDesign\nDesign\nFace\nFace\nDesign\nDesign\nDesign\nDesign\nEdge\nEdge\nDesign\nDesign\nDesign\nBody\nDesign\nDesign\npython:list\nBody\nBody\nBody\nDesign\nDesign\npython:list\npython:str\npython:list\nBody\nBody\nFace\nDesign\nDesign\npython:list\npython:str\npython:list\nFace\nFace\nEdge\nDesign\nDesign\npython:list\npython:str\npython:list\nEdge\nEdge\npython:str\npython:tuple\npython:float\npython:float\npython:float\npython:str"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#auxiliary.get_design_from_component",
        "title": "The auxiliary.py module > Module detail > get_design_from_component",
        "section": "Module detail > get_design_from_component",
        "text": "auxiliary.get_design_from_component(component: ansys.geometry.core.designer.component.Component) -> ansys.geometry.core.designer.design.Design\n\nGet the Design of the given Component object.\n\nParameters\n\ncomponent\n\nComponent\n\nThe component object for which to find the Design.\n\nReturns\n\nDesign\n\nThe Design of the provided component object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#auxiliary.get_design_from_body",
        "title": "The auxiliary.py module > Module detail > get_design_from_body",
        "section": "Module detail > get_design_from_body",
        "text": "auxiliary.get_design_from_body(body: ansys.geometry.core.designer.body.Body) -> ansys.geometry.core.designer.design.Design\n\nGet the Design of the given Body object.\n\nParameters\n\nbody\n\nBody\n\nThe body object for which to find the Design.\n\nReturns\n\nDesign\n\nThe Design of the provided body object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#auxiliary.get_design_from_face",
        "title": "The auxiliary.py module > Module detail > get_design_from_face",
        "section": "Module detail > get_design_from_face",
        "text": "auxiliary.get_design_from_face(face: ansys.geometry.core.designer.face.Face) -> ansys.geometry.core.designer.design.Design\n\nGet the Design of the given Face object.\n\nParameters\n\nface\n\nFace\n\nThe face object for which to find the Design.\n\nReturns\n\nDesign\n\nThe Design of the provided face object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#auxiliary.get_design_from_edge",
        "title": "The auxiliary.py module > Module detail > get_design_from_edge",
        "section": "Module detail > get_design_from_edge",
        "text": "auxiliary.get_design_from_edge(edge: ansys.geometry.core.designer.edge.Edge) -> ansys.geometry.core.designer.design.Design\n\nGet the Design of the given Edge object.\n\nParameters\n\nedge\n\nEdge\n\nThe edge object for which to find the Design.\n\nReturns\n\nDesign\n\nThe Design of the provided edge object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#auxiliary.get_all_bodies_from_design",
        "title": "The auxiliary.py module > Module detail > get_all_bodies_from_design",
        "section": "Module detail > get_all_bodies_from_design",
        "text": "auxiliary.get_all_bodies_from_design(design: ansys.geometry.core.designer.design.Design) -> list[ansys.geometry.core.designer.body.Body]\n\nFind all the Body objects inside a Design.\n\nParameters\n\ndesign\n\nDesign\n\nParent design for the bodies.\n\nReturns\n\npython:list[Body]\n\nList of Body objects.\n\nNotes\n\nThis method takes a design and gets the corresponding Body objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#auxiliary.get_bodies_from_ids",
        "title": "The auxiliary.py module > Module detail > get_bodies_from_ids",
        "section": "Module detail > get_bodies_from_ids",
        "text": "auxiliary.get_bodies_from_ids(design: ansys.geometry.core.designer.design.Design, body_ids: list[str]) -> list[ansys.geometry.core.designer.body.Body]\n\nFind the Body objects inside a Design from its ids.\n\nParameters\n\ndesign\n\nDesign\n\nParent design for the faces.\n\nbody_ids\n\npython:list[python:str]\n\nList of body ids.\n\nReturns\n\npython:list[Body]\n\nList of Body objects.\n\nNotes\n\nThis method takes a design and body ids, and gets their corresponding Body object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#auxiliary.get_faces_from_ids",
        "title": "The auxiliary.py module > Module detail > get_faces_from_ids",
        "section": "Module detail > get_faces_from_ids",
        "text": "auxiliary.get_faces_from_ids(design: ansys.geometry.core.designer.design.Design, face_ids: list[str]) -> list[ansys.geometry.core.designer.face.Face]\n\nFind the Face objects inside a Design from its ids.\n\nParameters\n\ndesign\n\nDesign\n\nParent design for the faces.\n\nface_ids\n\npython:list[python:str]\n\nList of face ids.\n\nReturns\n\npython:list[Face]\n\nList of Face objects.\n\nNotes\n\nThis method takes a design and face ids, and gets their corresponding Face object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#auxiliary.get_edges_from_ids",
        "title": "The auxiliary.py module > Module detail > get_edges_from_ids",
        "section": "Module detail > get_edges_from_ids",
        "text": "auxiliary.get_edges_from_ids(design: ansys.geometry.core.designer.design.Design, edge_ids: list[str]) -> list[ansys.geometry.core.designer.edge.Edge]\n\nFind the Edge objects inside a Design from its ids.\n\nParameters\n\ndesign\n\nDesign\n\nParent design for the edges.\n\nedge_ids\n\npython:list[python:str]\n\nList of edge ids.\n\nReturns\n\npython:list[Edge]\n\nList of Edge objects.\n\nNotes\n\nThis method takes a design and edge ids, and gets their corresponding Edge objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#auxiliary.convert_color_to_hex",
        "title": "The auxiliary.py module > Module detail > convert_color_to_hex",
        "section": "Module detail > convert_color_to_hex",
        "text": "auxiliary.convert_color_to_hex(color: str | tuple[float, float, float]) -> str\n\nGet the hex string color from input formats.\n\nParameters\n\ncolor\n\npython:str | python:tuple[python:float, python:float, python:float]\n\nColor to set the body to. This can be a string representing a color name\nor a tuple of RGB values in the range [0, 1] (RGBA) or [0, 255] (pure RGB).\n\nReturns\n\npython:str\n\nThe hex code string for the color.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/auxiliary/index",
        "href": "api/ansys/geometry/core/misc/auxiliary/index.html#auxiliary.DEFAULT_COLOR",
        "title": "The auxiliary.py module > Module detail > DEFAULT_COLOR",
        "section": "Module detail > DEFAULT_COLOR",
        "text": "auxiliary.DEFAULT_COLOR = '#D6F7D1'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#logger",
        "title": "Logger",
        "section": "Logger",
        "text": "Provides the logger used for each PyAnsys Geometry session.\nThis class allows you to add handlers to the logger to output messages\nto a file or to the standard output (stdout).\nLogging level to filter the message severity allowed in the logger.\nThe default is 10, in which case the logging.DEBUG level\nis used.\nWhether to write log messages to a file.\nWhether to write log messages to the standard output.\nName of the file to write log log messages to.\nDemonstrate logger usage from the Modeler instance, which is automatically\ncreated when a Geometry service instance is created.\nImport the global PyAnsys Geometry logger and add a file output handler.\nLogger\nLogger\npython:int\n10\nlogging.DEBUG\npython:False\npython:True\npython:str\nModeler"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#ansys.geometry.core.logger.Logger",
        "title": "Logger > Logger > Logger",
        "section": "Logger > Logger",
        "text": "class ansys.geometry.core.logger.Logger(level=logging.DEBUG, to_file=False, to_stdout=True, filename=FILE_NAME)\n\nProvides the logger used for each PyAnsys Geometry session.\n\nThis class allows you to add handlers to the logger to output messages\nto a file or to the standard output (stdout).\n\nParameters\n\nlevel\n\npython:int, default: 10\n\nLogging level to filter the message severity allowed in the logger.\nThe default is 10, in which case the logging.DEBUG level\nis used.\n\nto_file\n\nbool, default: python:False\n\nWhether to write log messages to a file.\n\nto_stdout\n\nbool, default: python:True\n\nWhether to write log messages to the standard output.\n\nfilename\n\npython:str, default: “pyansys-geometry.log”\n\nName of the file to write log log messages to.\n\nExamples\n\nDemonstrate logger usage from the Modeler instance, which is automatically\ncreated when a Geometry service instance is created.\n\n>>> from ansys.geometry.core import Modeler\n>>> modeler = Modeler(loglevel=\"DEBUG\")\n>>> modeler._log.info(\"This is a useful message\")\nINFO -  -  <ipython-input-24-80df150fe31f> - <module> - This is LOG debug message.\n\nImport the global PyAnsys Geometry logger and add a file output handler.\n\n>>> import os\n>>> from ansys.geometry.core import LOG\n>>> file_path = os.path.join(os.getcwd(), \"pyansys-geometry.log\")\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#overview",
        "title": "Logger > Overview",
        "section": "Overview",
        "text": "log_to_file\nAdd a file handler to the logger.\nlog_to_stdout\nAdd the standard output handler to the logger.\nsetLevel\nChange the log level of the object and the attached handlers.\nadd_child_logger\nAdd a child logger to the main logger.\nadd_instance_logger\nAdd a logger for a Geometry service instance.\nadd_handling_uncaught_expections\nRedirect the output of an exception to a logger.\nfile_handler\nstd_out_handler\nlogger\nlevel\ndebug\ninfo\nwarning\nerror\ncritical\nlog\n__getitem__\nOverload the access method by item for the Logger class.\nOverview\nlog_to_file\nlog_to_stdout\nsetLevel\nadd_child_logger\nadd_instance_logger\nadd_handling_uncaught_expections\nfile_handler\nstd_out_handler\nlogger\nlevel\ndebug\ninfo\nwarning\nerror\ncritical\nlog\n__getitem__\nLogger"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#import-detail",
        "title": "Logger > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#attribute-detail",
        "title": "Logger > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.file_handler",
        "title": "Logger > Attribute detail > file_handler",
        "section": "Attribute detail > file_handler",
        "text": "Logger.file_handler = None\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.std_out_handler",
        "title": "Logger > Attribute detail > std_out_handler",
        "section": "Attribute detail > std_out_handler",
        "text": "Logger.std_out_handler = None\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.logger",
        "title": "Logger > Attribute detail > logger",
        "section": "Attribute detail > logger",
        "text": "Logger.logger\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.level",
        "title": "Logger > Attribute detail > level",
        "section": "Attribute detail > level",
        "text": "Logger.level = 0\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.debug",
        "title": "Logger > Attribute detail > debug",
        "section": "Attribute detail > debug",
        "text": "Logger.debug\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.info",
        "title": "Logger > Attribute detail > info",
        "section": "Attribute detail > info",
        "text": "Logger.info\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.warning",
        "title": "Logger > Attribute detail > warning",
        "section": "Attribute detail > warning",
        "text": "Logger.warning\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.error",
        "title": "Logger > Attribute detail > error",
        "section": "Attribute detail > error",
        "text": "Logger.error\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.critical",
        "title": "Logger > Attribute detail > critical",
        "section": "Attribute detail > critical",
        "text": "Logger.critical\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.log",
        "title": "Logger > Attribute detail > log",
        "section": "Attribute detail > log",
        "text": "Logger.log\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#method-detail",
        "title": "Logger > Method detail",
        "section": "Method detail",
        "text": "Add a file handler to the logger.\nName of the file to write log messages to.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nWrite to the \"pyansys-geometry.log\" file in the current working directory:\nAdd the standard output handler to the logger.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nChange the log level of the object and the attached handlers.\nAdd a child logger to the main logger.\nThis logger is more general than an instance logger, which is designed to\ntrack the state of Geometry service instances.\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\nName of the child logger.\nLevel of logging.\nLogger class.\nAdd a logger for a Geometry service instance.\nThe Geometry service instance logger is a logger with an adapter that adds\ncontextual information such as the Geometry service instance name. This logger is\nreturned, and you can use it to log events as a normal logger. It is\nstored in the _instances field.\nName for the new instance logger.\nGeometry service GrpcClient object, which should contain the get_name method.\nLevel of logging.\nLogger adapter customized to add Geometry service information to the\nlogs. You can use this class to log events in the same\nway you would with the Logger class.\nOverload the access method by item for the Logger class.\nRedirect the output of an exception to a logger.\nName of the logger.\nMethod detail\npython:str\npython:int\n10\nlogging.DEBUG\n\"pyansys-geometry.log\"\npython:int\n10\nlogging.DEBUG\n_global\npython:str\npython:str\npython:None\nlogging.Logger\n_instances\npython:str\nGrpcClient\nget_name\npython:int\npython:None\nPyGeometryCustomAdapter\nLogger\nLogger\npython:str"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.log_to_file",
        "title": "Logger > Method detail > log_to_file",
        "section": "Method detail > log_to_file",
        "text": "Logger.log_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, default: “pyansys-geometry.log”\n\nName of the file to write log messages to.\n\nlevel\n\npython:int, default: 10\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\nExamples\n\nWrite to the \"pyansys-geometry.log\" file in the current working directory:\n\n>>> from ansys.geometry.core import LOG\n>>> import os\n>>> file_path = os.path.join(os.getcwd(), \"pyansys-geometry.log\")\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.log_to_stdout",
        "title": "Logger > Method detail > log_to_stdout",
        "section": "Method detail > log_to_stdout",
        "text": "Logger.log_to_stdout(level=LOG_LEVEL)\n\nAdd the standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:int, default: 10\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.setLevel",
        "title": "Logger > Method detail > setLevel",
        "section": "Method detail > setLevel",
        "text": "Logger.setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.add_child_logger",
        "title": "Logger > Method detail > add_child_logger",
        "section": "Method detail > add_child_logger",
        "text": "Logger.add_child_logger(suffix: str, level: str | None = None)\n\nAdd a child logger to the main logger.\n\nThis logger is more general than an instance logger, which is designed to\ntrack the state of Geometry service instances.\n\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\n\nParameters\n\nsuffix\n\npython:str\n\nName of the child logger.\n\nlevel\n\npython:str, default: python:None\n\nLevel of logging.\n\nReturns\n\nlogging.Logger\n\nLogger class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.add_instance_logger",
        "title": "Logger > Method detail > add_instance_logger",
        "section": "Method detail > add_instance_logger",
        "text": "Logger.add_instance_logger(name: str, client_instance: ansys.geometry.core.connection.client.GrpcClient, level: int | None = None) -> PyGeometryCustomAdapter\n\nAdd a logger for a Geometry service instance.\n\nThe Geometry service instance logger is a logger with an adapter that adds\ncontextual information such as the Geometry service instance name. This logger is\nreturned, and you can use it to log events as a normal logger. It is\nstored in the _instances field.\n\nParameters\n\nname\n\npython:str\n\nName for the new instance logger.\n\nclient_instance\n\nGrpcClient\n\nGeometry service GrpcClient object, which should contain the get_name method.\n\nlevel\n\npython:int, default: python:None\n\nLevel of logging.\n\nReturns\n\nPyGeometryCustomAdapter\n\nLogger adapter customized to add Geometry service information to the\nlogs. You can use this class to log events in the same\nway you would with the Logger class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.__getitem__",
        "title": "Logger > Method detail > __getitem__",
        "section": "Method detail > __getitem__",
        "text": "Logger.__getitem__(key)\n\nOverload the access method by item for the Logger class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/Logger",
        "href": "api/ansys/geometry/core/logger/Logger.html#Logger.add_handling_uncaught_expections",
        "title": "Logger > Method detail > add_handling_uncaught_expections",
        "section": "Method detail > add_handling_uncaught_expections",
        "text": "Logger.add_handling_uncaught_expections(logger)\n\nRedirect the output of an exception to a logger.\n\nParameters\n\nlogger\n\npython:str\n\nName of the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialProperty",
        "href": "api/ansys/geometry/core/materials/property/MaterialProperty.html#materialproperty",
        "title": "MaterialProperty",
        "section": "MaterialProperty",
        "text": "Provides the data structure for a material property.\nType of the material property. If the type is a string, it must be a valid\nmaterial property type - though it might not be supported by the MaterialPropertyType\nenum.\nMaterial property name.\nValue and unit in case of a supported Quantity. If the type is not supported, it\nmust be a Real value (float or integer).\nMaterialProperty\nMaterialProperty\nMaterialPropertyType\npython:str"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialProperty",
        "href": "api/ansys/geometry/core/materials/property/MaterialProperty.html#ansys.geometry.core.materials.property.MaterialProperty",
        "title": "MaterialProperty > MaterialProperty > MaterialProperty",
        "section": "MaterialProperty > MaterialProperty",
        "text": "class ansys.geometry.core.materials.property.MaterialProperty(type: MaterialPropertyType | str, name: str, quantity: pint.Quantity | ansys.geometry.core.typing.Real)\n\nProvides the data structure for a material property.\n\nParameters\n\ntype\n\nMaterialPropertyType | python:str\n\nType of the material property. If the type is a string, it must be a valid\nmaterial property type - though it might not be supported by the MaterialPropertyType\nenum.\n\nname: str\n\nMaterial property name.\n\nquantity: ~pint.Quantity | Real\n\nValue and unit in case of a supported Quantity. If the type is not supported, it\nmust be a Real value (float or integer).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialProperty",
        "href": "api/ansys/geometry/core/materials/property/MaterialProperty.html#overview",
        "title": "MaterialProperty > Overview",
        "section": "Overview",
        "text": "type\nMaterial property ID.\nname\nMaterial property name.\nquantity\nMaterial property quantity and unit.\nOverview\ntype\nname\nquantity"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialProperty",
        "href": "api/ansys/geometry/core/materials/property/MaterialProperty.html#import-detail",
        "title": "MaterialProperty > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialProperty",
        "href": "api/ansys/geometry/core/materials/property/MaterialProperty.html#property-detail",
        "title": "MaterialProperty > Property detail",
        "section": "Property detail",
        "text": "Material property ID.\nIf the type is not supported, it will be a string.\nMaterial property name.\nMaterial property quantity and unit.\nIf the type is not supported, it will be a Real value (float or\ninteger).\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialProperty",
        "href": "api/ansys/geometry/core/materials/property/MaterialProperty.html#MaterialProperty.type",
        "title": "MaterialProperty > Property detail > type",
        "section": "Property detail > type",
        "text": "property MaterialProperty.type: MaterialPropertyType | str\n\nMaterial property ID.\n\nIf the type is not supported, it will be a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialProperty",
        "href": "api/ansys/geometry/core/materials/property/MaterialProperty.html#MaterialProperty.name",
        "title": "MaterialProperty > Property detail > name",
        "section": "Property detail > name",
        "text": "property MaterialProperty.name: str\n\nMaterial property name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialProperty",
        "href": "api/ansys/geometry/core/materials/property/MaterialProperty.html#MaterialProperty.quantity",
        "title": "MaterialProperty > Property detail > quantity",
        "section": "Property detail > quantity",
        "text": "property MaterialProperty.quantity: pint.Quantity | ansys.geometry.core.typing.Real\n\nMaterial property quantity and unit.\n\nIf the type is not supported, it will be a Real value (float or\ninteger).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/existing/index",
        "href": "getting_started/existing/index.html#use-an-existing-session",
        "title": "Use an existing session",
        "section": "Use an existing session",
        "text": "If a session of Discovery, SpaceClaim, or the Geometry service is already\nrunning, PyAnsys Geometry can be used to connect to it.\nRunning a SpaceClaim or Discovery normal session does not suffice to be\nable to use it with PyAnsys Geometry. Both products need the ApiServer extension to be\nrunning. In this case, to ease the process, you should launch the products directly from the PyAnsys\nGeometry library as shown in ref_creating_local_session.\nUse an existing session"
    },
    {
        "objectID": "getting_started/existing/index",
        "href": "getting_started/existing/index.html#establish-the-connection",
        "title": "Use an existing session > Establish the connection",
        "section": "Establish the connection",
        "text": "From Python, establish a connection to the existing client session by creating a Modeler object:\nIf no error messages are received, your connection is established successfully.\nNote that your local port number might differ from the one shown in the preceding code.\nEstablish the connection\nModeler"
    },
    {
        "objectID": "getting_started/existing/index",
        "href": "getting_started/existing/index.html#verify-the-connection",
        "title": "Use an existing session > Verify the connection",
        "section": "Verify the connection",
        "text": "If you want to verify that the connection is successful, request the status of the client\nconnection inside your Modeler object:\nGo to Getting started\nVerify the connection\nModeler"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/SketchSegment",
        "href": "api/ansys/geometry/core/sketch/segment/SketchSegment.html#sketchsegment",
        "title": "SketchSegment",
        "section": "SketchSegment",
        "text": "Bases: ansys.geometry.core.sketch.edge.SketchEdge, ansys.geometry.core.shapes.curves.line.Line\nProvides segment representation of a line.\nStarting point of the line segment.\nEnding point of the line segment.\nPlane containing the sketched circle, which is the global XY plane\nby default.\nSketchSegment\nSketchSegment\nansys.geometry.core.sketch.edge.SketchEdge\nansys.geometry.core.shapes.curves.line.Line\nPoint2D\nPoint2D\nPlane\noptional"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/SketchSegment",
        "href": "api/ansys/geometry/core/sketch/segment/SketchSegment.html#ansys.geometry.core.sketch.segment.SketchSegment",
        "title": "SketchSegment > SketchSegment > SketchSegment",
        "section": "SketchSegment > SketchSegment",
        "text": "class ansys.geometry.core.sketch.segment.SketchSegment(start: ansys.geometry.core.math.point.Point2D, end: ansys.geometry.core.math.point.Point2D, plane: ansys.geometry.core.math.plane.Plane = Plane())\n\nBases: ansys.geometry.core.sketch.edge.SketchEdge, ansys.geometry.core.shapes.curves.line.Line\n\nProvides segment representation of a line.\n\nParameters\n\nstart\n\nPoint2D\n\nStarting point of the line segment.\n\nend\n\nPoint2D\n\nEnding point of the line segment.\n\nplane\n\nPlane, optional\n\nPlane containing the sketched circle, which is the global XY plane\nby default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/SketchSegment",
        "href": "api/ansys/geometry/core/sketch/segment/SketchSegment.html#overview",
        "title": "SketchSegment > Overview",
        "section": "Overview",
        "text": "plane_change\nRedefine the plane containing SketchSegment objects.\nstart\nStarting point of the segment.\nend\nEnding point of the segment.\nlength\nLength of the segment.\nvisualization_polydata\nVTK polydata representation for PyVista visualization.\n__eq__\nEquals operator for the SketchSegment class.\n__ne__\nNot equals operator for the SketchSegment class.\nOverview\nplane_change\nSketchSegment\nstart\nend\nlength\nvisualization_polydata\n__eq__\nSketchSegment\n__ne__\nSketchSegment"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/SketchSegment",
        "href": "api/ansys/geometry/core/sketch/segment/SketchSegment.html#import-detail",
        "title": "SketchSegment > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/SketchSegment",
        "href": "api/ansys/geometry/core/sketch/segment/SketchSegment.html#property-detail",
        "title": "SketchSegment > Property detail",
        "section": "Property detail",
        "text": "Starting point of the segment.\nEnding point of the segment.\nLength of the segment.\nVTK polydata representation for PyVista visualization.\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\nVTK pyvista.Polydata configuration.\nProperty detail\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/SketchSegment",
        "href": "api/ansys/geometry/core/sketch/segment/SketchSegment.html#SketchSegment.start",
        "title": "SketchSegment > Property detail > start",
        "section": "Property detail > start",
        "text": "property SketchSegment.start: ansys.geometry.core.math.point.Point2D\n\nStarting point of the segment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/SketchSegment",
        "href": "api/ansys/geometry/core/sketch/segment/SketchSegment.html#SketchSegment.end",
        "title": "SketchSegment > Property detail > end",
        "section": "Property detail > end",
        "text": "property SketchSegment.end: ansys.geometry.core.math.point.Point2D\n\nEnding point of the segment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/SketchSegment",
        "href": "api/ansys/geometry/core/sketch/segment/SketchSegment.html#SketchSegment.length",
        "title": "SketchSegment > Property detail > length",
        "section": "Property detail > length",
        "text": "property SketchSegment.length: pint.Quantity\n\nLength of the segment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/SketchSegment",
        "href": "api/ansys/geometry/core/sketch/segment/SketchSegment.html#SketchSegment.visualization_polydata",
        "title": "SketchSegment > Property detail > visualization_polydata",
        "section": "Property detail > visualization_polydata",
        "text": "property SketchSegment.visualization_polydata: pyvista.PolyData\n\nVTK polydata representation for PyVista visualization.\n\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\n\nReturns\n\npyvista.PolyData\n\nVTK pyvista.Polydata configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/SketchSegment",
        "href": "api/ansys/geometry/core/sketch/segment/SketchSegment.html#method-detail",
        "title": "SketchSegment > Method detail",
        "section": "Method detail",
        "text": "Equals operator for the SketchSegment class.\nNot equals operator for the SketchSegment class.\nRedefine the plane containing SketchSegment objects.\nDesired new plane that is to contain the sketched segment.\nThis implies that their 3D definition might suffer changes.\nMethod detail\nSketchSegment\nSketchSegment\nSketchSegment\nPlane"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/SketchSegment",
        "href": "api/ansys/geometry/core/sketch/segment/SketchSegment.html#SketchSegment.__eq__",
        "title": "SketchSegment > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "SketchSegment.__eq__(other: SketchSegment) -> bool\n\nEquals operator for the SketchSegment class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/SketchSegment",
        "href": "api/ansys/geometry/core/sketch/segment/SketchSegment.html#SketchSegment.__ne__",
        "title": "SketchSegment > Method detail > __ne__",
        "section": "Method detail > __ne__",
        "text": "SketchSegment.__ne__(other: SketchSegment) -> bool\n\nNot equals operator for the SketchSegment class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/SketchSegment",
        "href": "api/ansys/geometry/core/sketch/segment/SketchSegment.html#SketchSegment.plane_change",
        "title": "SketchSegment > Method detail > plane_change",
        "section": "Method detail > plane_change",
        "text": "SketchSegment.plane_change(plane: ansys.geometry.core.math.plane.Plane) -> None\n\nRedefine the plane containing SketchSegment objects.\n\nParameters\n\nplane\n\nPlane\n\nDesired new plane that is to contain the sketched segment.\n\nNotes\n\nThis implies that their 3D definition might suffer changes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#parametertype",
        "title": "ParameterType",
        "section": "ParameterType",
        "text": "Bases: enum.Enum\nProvides values for the parameter types supported.\nParameterType\nParameterType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#ansys.geometry.core.parameters.parameter.ParameterType",
        "title": "ParameterType > ParameterType > ParameterType",
        "section": "ParameterType > ParameterType",
        "text": "class ansys.geometry.core.parameters.parameter.ParameterType(*args, **kwds)\n\nBases: enum.Enum\n\nProvides values for the parameter types supported.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#overview",
        "title": "ParameterType > Overview",
        "section": "Overview",
        "text": "DIMENSIONTYPE_UNKNOWN\nDIMENSIONTYPE_LINEAR\nDIMENSIONTYPE_DIAMETRIC\nDIMENSIONTYPE_RADIAL\nDIMENSIONTYPE_ARC\nDIMENSIONTYPE_AREA\nDIMENSIONTYPE_VOLUME\nDIMENSIONTYPE_MASS\nDIMENSIONTYPE_ANGULAR\nDIMENSIONTYPE_COUNT\nDIMENSIONTYPE_UNITLESS\nOverview\nDIMENSIONTYPE_UNKNOWN\nDIMENSIONTYPE_LINEAR\nDIMENSIONTYPE_DIAMETRIC\nDIMENSIONTYPE_RADIAL\nDIMENSIONTYPE_ARC\nDIMENSIONTYPE_AREA\nDIMENSIONTYPE_VOLUME\nDIMENSIONTYPE_MASS\nDIMENSIONTYPE_ANGULAR\nDIMENSIONTYPE_COUNT\nDIMENSIONTYPE_UNITLESS"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#import-detail",
        "title": "ParameterType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#attribute-detail",
        "title": "ParameterType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#ParameterType.DIMENSIONTYPE_UNKNOWN",
        "title": "ParameterType > Attribute detail > DIMENSIONTYPE_UNKNOWN",
        "section": "Attribute detail > DIMENSIONTYPE_UNKNOWN",
        "text": "ParameterType.DIMENSIONTYPE_UNKNOWN = 0\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#ParameterType.DIMENSIONTYPE_LINEAR",
        "title": "ParameterType > Attribute detail > DIMENSIONTYPE_LINEAR",
        "section": "Attribute detail > DIMENSIONTYPE_LINEAR",
        "text": "ParameterType.DIMENSIONTYPE_LINEAR = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#ParameterType.DIMENSIONTYPE_DIAMETRIC",
        "title": "ParameterType > Attribute detail > DIMENSIONTYPE_DIAMETRIC",
        "section": "Attribute detail > DIMENSIONTYPE_DIAMETRIC",
        "text": "ParameterType.DIMENSIONTYPE_DIAMETRIC = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#ParameterType.DIMENSIONTYPE_RADIAL",
        "title": "ParameterType > Attribute detail > DIMENSIONTYPE_RADIAL",
        "section": "Attribute detail > DIMENSIONTYPE_RADIAL",
        "text": "ParameterType.DIMENSIONTYPE_RADIAL = 3\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#ParameterType.DIMENSIONTYPE_ARC",
        "title": "ParameterType > Attribute detail > DIMENSIONTYPE_ARC",
        "section": "Attribute detail > DIMENSIONTYPE_ARC",
        "text": "ParameterType.DIMENSIONTYPE_ARC = 4\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#ParameterType.DIMENSIONTYPE_AREA",
        "title": "ParameterType > Attribute detail > DIMENSIONTYPE_AREA",
        "section": "Attribute detail > DIMENSIONTYPE_AREA",
        "text": "ParameterType.DIMENSIONTYPE_AREA = 5\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#ParameterType.DIMENSIONTYPE_VOLUME",
        "title": "ParameterType > Attribute detail > DIMENSIONTYPE_VOLUME",
        "section": "Attribute detail > DIMENSIONTYPE_VOLUME",
        "text": "ParameterType.DIMENSIONTYPE_VOLUME = 6\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#ParameterType.DIMENSIONTYPE_MASS",
        "title": "ParameterType > Attribute detail > DIMENSIONTYPE_MASS",
        "section": "Attribute detail > DIMENSIONTYPE_MASS",
        "text": "ParameterType.DIMENSIONTYPE_MASS = 7\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#ParameterType.DIMENSIONTYPE_ANGULAR",
        "title": "ParameterType > Attribute detail > DIMENSIONTYPE_ANGULAR",
        "section": "Attribute detail > DIMENSIONTYPE_ANGULAR",
        "text": "ParameterType.DIMENSIONTYPE_ANGULAR = 8\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#ParameterType.DIMENSIONTYPE_COUNT",
        "title": "ParameterType > Attribute detail > DIMENSIONTYPE_COUNT",
        "section": "Attribute detail > DIMENSIONTYPE_COUNT",
        "text": "ParameterType.DIMENSIONTYPE_COUNT = 9\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterType",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterType.html#ParameterType.DIMENSIONTYPE_UNITLESS",
        "title": "ParameterType > Attribute detail > DIMENSIONTYPE_UNITLESS",
        "section": "Attribute detail > DIMENSIONTYPE_UNITLESS",
        "text": "ParameterType.DIMENSIONTYPE_UNITLESS = 10\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#spurgear",
        "title": "SpurGear",
        "section": "SpurGear",
        "text": "Bases: Gear\nProvides the class for sketching spur gears.\nOrigin of the spur gear.\nModule of the spur gear. This is also the ratio between the pitch circle\ndiameter in millimeters and the number of teeth.\nPressure angle of the spur gear.\nNumber of teeth of the spur gear.\nSpurGear\nSpurGear\nGear\nPoint2D\nReal\nQuantity\nAngle\nReal\npython:int"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#ansys.geometry.core.sketch.gears.SpurGear",
        "title": "SpurGear > SpurGear > SpurGear",
        "section": "SpurGear > SpurGear",
        "text": "class ansys.geometry.core.sketch.gears.SpurGear(origin: ansys.geometry.core.math.point.Point2D, module: ansys.geometry.core.typing.Real, pressure_angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real, n_teeth: int)\n\nBases: Gear\n\nProvides the class for sketching spur gears.\n\nParameters\n\norigin\n\nPoint2D\n\nOrigin of the spur gear.\n\nmodule\n\nReal\n\nModule of the spur gear. This is also the ratio between the pitch circle\ndiameter in millimeters and the number of teeth.\n\npressure_angle\n\nQuantity | Angle | Real\n\nPressure angle of the spur gear.\n\nn_teeth\n\npython:int\n\nNumber of teeth of the spur gear.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#overview",
        "title": "SpurGear > Overview",
        "section": "Overview",
        "text": "origin\nOrigin of the spur gear.\nmodule\nModule of the spur gear.\npressure_angle\nPressure angle of the spur gear.\nn_teeth\nNumber of teeth of the spur gear.\nref_diameter\nReference diameter of the spur gear.\nbase_diameter\nBase diameter of the spur gear.\naddendum\nAddendum of the spur gear.\ndedendum\nDedendum of the spur gear.\ntip_diameter\nTip diameter of the spur gear.\nroot_diameter\nRoot diameter of the spur gear.\nOverview\norigin\nmodule\npressure_angle\nn_teeth\nref_diameter\nbase_diameter\naddendum\ndedendum\ntip_diameter\nroot_diameter"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#import-detail",
        "title": "SpurGear > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#property-detail",
        "title": "SpurGear > Property detail",
        "section": "Property detail",
        "text": "Origin of the spur gear.\nModule of the spur gear.\nPressure angle of the spur gear.\nNumber of teeth of the spur gear.\nReference diameter of the spur gear.\nBase diameter of the spur gear.\nAddendum of the spur gear.\nDedendum of the spur gear.\nTip diameter of the spur gear.\nRoot diameter of the spur gear.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#SpurGear.origin",
        "title": "SpurGear > Property detail > origin",
        "section": "Property detail > origin",
        "text": "property SpurGear.origin: ansys.geometry.core.math.point.Point2D\n\nOrigin of the spur gear.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#SpurGear.module",
        "title": "SpurGear > Property detail > module",
        "section": "Property detail > module",
        "text": "property SpurGear.module: ansys.geometry.core.typing.Real\n\nModule of the spur gear.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#SpurGear.pressure_angle",
        "title": "SpurGear > Property detail > pressure_angle",
        "section": "Property detail > pressure_angle",
        "text": "property SpurGear.pressure_angle: pint.Quantity\n\nPressure angle of the spur gear.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#SpurGear.n_teeth",
        "title": "SpurGear > Property detail > n_teeth",
        "section": "Property detail > n_teeth",
        "text": "property SpurGear.n_teeth: int\n\nNumber of teeth of the spur gear.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#SpurGear.ref_diameter",
        "title": "SpurGear > Property detail > ref_diameter",
        "section": "Property detail > ref_diameter",
        "text": "property SpurGear.ref_diameter: ansys.geometry.core.typing.Real\n\nReference diameter of the spur gear.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#SpurGear.base_diameter",
        "title": "SpurGear > Property detail > base_diameter",
        "section": "Property detail > base_diameter",
        "text": "property SpurGear.base_diameter: ansys.geometry.core.typing.Real\n\nBase diameter of the spur gear.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#SpurGear.addendum",
        "title": "SpurGear > Property detail > addendum",
        "section": "Property detail > addendum",
        "text": "property SpurGear.addendum: ansys.geometry.core.typing.Real\n\nAddendum of the spur gear.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#SpurGear.dedendum",
        "title": "SpurGear > Property detail > dedendum",
        "section": "Property detail > dedendum",
        "text": "property SpurGear.dedendum: ansys.geometry.core.typing.Real\n\nDedendum of the spur gear.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#SpurGear.tip_diameter",
        "title": "SpurGear > Property detail > tip_diameter",
        "section": "Property detail > tip_diameter",
        "text": "property SpurGear.tip_diameter: ansys.geometry.core.typing.Real\n\nTip diameter of the spur gear.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/SpurGear",
        "href": "api/ansys/geometry/core/sketch/gears/SpurGear.html#SpurGear.root_diameter",
        "title": "SpurGear > Property detail > root_diameter",
        "section": "Property detail > root_diameter",
        "text": "property SpurGear.root_diameter: ansys.geometry.core.typing.Real\n\nRoot diameter of the spur gear.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/index.html#the-surfaces-package",
        "title": "The surfaces package",
        "section": "The surfaces package",
        "text": "The surfaces package\nsurfaces"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/index.html#summary",
        "title": "The surfaces package > Summary",
        "section": "Summary",
        "text": "cone\nProvides for creating and managing a cone.\ncylinder\nProvides for creating and managing a cylinder.\nplane\nProvides for creating and managing a plane.\nsphere\nProvides for creating and managing a sphere.\nsurface\nProvides the Surface class.\nsurface_evaluation\nProvides for evaluating a surface.\ntorus\nProvides for creating and managing a torus.\ntrimmed_surface\nProvides the TrimmedSurface class.\nSummary\ncone\ncylinder\nplane\nsphere\nsurface\nSurface\nsurface_evaluation\ntorus\ntrimmed_surface\nTrimmedSurface"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/index.html#description",
        "title": "The surfaces package > Description",
        "section": "Description",
        "text": "Provides the PyAnsys Geometry surface subpackage.\nDescription\nsurface"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/circle/SketchCircle",
        "href": "api/ansys/geometry/core/sketch/circle/SketchCircle.html#sketchcircle",
        "title": "SketchCircle",
        "section": "SketchCircle",
        "text": "Bases: ansys.geometry.core.sketch.face.SketchFace, ansys.geometry.core.shapes.curves.circle.Circle\nProvides for modeling a circle.\nCenter point of the circle.\nRadius of the circle.\nPlane containing the sketched circle, which is the global XY plane\nby default.\nSketchCircle\nSketchCircle\nansys.geometry.core.sketch.face.SketchFace\nansys.geometry.core.shapes.curves.circle.Circle\nQuantity\nDistance\nReal\nPlane\noptional"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/circle/SketchCircle",
        "href": "api/ansys/geometry/core/sketch/circle/SketchCircle.html#ansys.geometry.core.sketch.circle.SketchCircle",
        "title": "SketchCircle > SketchCircle > SketchCircle",
        "section": "SketchCircle > SketchCircle",
        "text": "class ansys.geometry.core.sketch.circle.SketchCircle(center: ansys.geometry.core.math.point.Point2D, radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, plane: ansys.geometry.core.math.plane.Plane = Plane())\n\nBases: ansys.geometry.core.sketch.face.SketchFace, ansys.geometry.core.shapes.curves.circle.Circle\n\nProvides for modeling a circle.\n\nParameters\n\ncenter: Point2D\n\nCenter point of the circle.\n\nradius\n\nQuantity | Distance | Real\n\nRadius of the circle.\n\nplane\n\nPlane, optional\n\nPlane containing the sketched circle, which is the global XY plane\nby default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/circle/SketchCircle",
        "href": "api/ansys/geometry/core/sketch/circle/SketchCircle.html#overview",
        "title": "SketchCircle > Overview",
        "section": "Overview",
        "text": "plane_change\nRedefine the plane containing the SketchCircle objects.\ncenter\nCenter of the circle.\nperimeter\nPerimeter of the circle.\nvisualization_polydata\nVTK polydata representation for PyVista visualization.\nOverview\nplane_change\nSketchCircle\ncenter\nperimeter\nvisualization_polydata"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/circle/SketchCircle",
        "href": "api/ansys/geometry/core/sketch/circle/SketchCircle.html#import-detail",
        "title": "SketchCircle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/circle/SketchCircle",
        "href": "api/ansys/geometry/core/sketch/circle/SketchCircle.html#property-detail",
        "title": "SketchCircle > Property detail",
        "section": "Property detail",
        "text": "Center of the circle.\nPerimeter of the circle.\nThis property resolves the dilemma between using the SkethFace.perimeter\nproperty and the Circle.perimeter property.\nVTK polydata representation for PyVista visualization.\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\nVTK pyvista.Polydata configuration.\nProperty detail\nSkethFace.perimeter\nCircle.perimeter\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/circle/SketchCircle",
        "href": "api/ansys/geometry/core/sketch/circle/SketchCircle.html#SketchCircle.center",
        "title": "SketchCircle > Property detail > center",
        "section": "Property detail > center",
        "text": "property SketchCircle.center: ansys.geometry.core.math.point.Point2D\n\nCenter of the circle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/circle/SketchCircle",
        "href": "api/ansys/geometry/core/sketch/circle/SketchCircle.html#SketchCircle.perimeter",
        "title": "SketchCircle > Property detail > perimeter",
        "section": "Property detail > perimeter",
        "text": "property SketchCircle.perimeter: pint.Quantity\n\nPerimeter of the circle.\n\nNotes\n\nThis property resolves the dilemma between using the SkethFace.perimeter\nproperty and the Circle.perimeter property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/circle/SketchCircle",
        "href": "api/ansys/geometry/core/sketch/circle/SketchCircle.html#SketchCircle.visualization_polydata",
        "title": "SketchCircle > Property detail > visualization_polydata",
        "section": "Property detail > visualization_polydata",
        "text": "property SketchCircle.visualization_polydata: pyvista.PolyData\n\nVTK polydata representation for PyVista visualization.\n\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\n\nReturns\n\npyvista.PolyData\n\nVTK pyvista.Polydata configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/circle/SketchCircle",
        "href": "api/ansys/geometry/core/sketch/circle/SketchCircle.html#method-detail",
        "title": "SketchCircle > Method detail",
        "section": "Method detail",
        "text": "Redefine the plane containing the SketchCircle objects.\nDesired new plane that is to contain the sketched circle.\nThis implies that their 3D definition might suffer changes.\nMethod detail\nSketchCircle\nPlane"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/circle/SketchCircle",
        "href": "api/ansys/geometry/core/sketch/circle/SketchCircle.html#SketchCircle.plane_change",
        "title": "SketchCircle > Method detail > plane_change",
        "section": "Method detail > plane_change",
        "text": "SketchCircle.plane_change(plane: ansys.geometry.core.math.plane.Plane) -> None\n\nRedefine the plane containing the SketchCircle objects.\n\nParameters\n\nplane\n\nPlane\n\nDesired new plane that is to contain the sketched circle.\n\nNotes\n\nThis implies that their 3D definition might suffer changes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/02_sketching/basic_usage",
        "href": "examples/02_sketching/basic_usage.html#sketching-basic-usage",
        "title": "Examples > Sketching: Basic usage",
        "section": "Sketching: Basic usage",
        "text": "This example shows how to use basic PyAnsys Geometry sketching capabilities.\nSketching: Basic usage"
    },
    {
        "objectID": "examples/02_sketching/basic_usage",
        "href": "examples/02_sketching/basic_usage.html#perform-required-imports",
        "title": "Examples > Sketching: Basic usage > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/02_sketching/basic_usage",
        "href": "examples/02_sketching/basic_usage.html#create-a-sketch",
        "title": "Examples > Sketching: Basic usage > Create a sketch",
        "section": "Create a sketch",
        "text": "Sketches are fundamental objects for drawing basic shapes like lines, segments, circles, ellipses, arcs, and polygons.\nYou create a Sketch instance by defining a drawing plane. To define a plane, you declare a point and two fundamental orthogonal directions.\nDefine a plane for creating a sketch.\nCreate a sketch\nSketch"
    },
    {
        "objectID": "examples/02_sketching/basic_usage",
        "href": "examples/02_sketching/basic_usage.html#draw-shapes",
        "title": "Examples > Sketching: Basic usage > Draw shapes",
        "section": "Draw shapes",
        "text": "To draw different shapes in the sketch, you use draw methods.\nDraw shapes\ndraw"
    },
    {
        "objectID": "examples/02_sketching/basic_usage",
        "href": "examples/02_sketching/basic_usage.html#draw-a-circle",
        "title": "Examples > Sketching: Basic usage > Draw a circle",
        "section": "Draw a circle",
        "text": "You draw a circle in a sketch by specifying the center and radius.\nDraw a circle"
    },
    {
        "objectID": "examples/02_sketching/basic_usage",
        "href": "examples/02_sketching/basic_usage.html#draw-an-ellipse",
        "title": "Examples > Sketching: Basic usage > Draw an ellipse",
        "section": "Draw an ellipse",
        "text": "You draw an ellipse in a sketch by specifying the center, major radius, and minor radius.\nDraw an ellipse"
    },
    {
        "objectID": "examples/02_sketching/basic_usage",
        "href": "examples/02_sketching/basic_usage.html#draw-a-polygon",
        "title": "Examples > Sketching: Basic usage > Draw a polygon",
        "section": "Draw a polygon",
        "text": "You draw a regular polygon by specifying the center, radius, and desired number of sides.\nDraw a polygon"
    },
    {
        "objectID": "examples/02_sketching/basic_usage",
        "href": "examples/02_sketching/basic_usage.html#draw-an-arc",
        "title": "Examples > Sketching: Basic usage > Draw an arc",
        "section": "Draw an arc",
        "text": "You draw an arc of circumference by specifying the center, starting point, and ending point.\nThere are also additional ways to draw arcs, such as by specifying the start, center point, and angle.\nOr by specifying the start, end point, and radius.\nDraw an arc"
    },
    {
        "objectID": "examples/02_sketching/basic_usage",
        "href": "examples/02_sketching/basic_usage.html#draw-a-slot",
        "title": "Examples > Sketching: Basic usage > Draw a slot",
        "section": "Draw a slot",
        "text": "You draw a slot by specifying the center, width, and height.\nDraw a slot"
    },
    {
        "objectID": "examples/02_sketching/basic_usage",
        "href": "examples/02_sketching/basic_usage.html#draw-a-box",
        "title": "Examples > Sketching: Basic usage > Draw a box",
        "section": "Draw a box",
        "text": "You draw a box by specifying the center, width, and height.\nDraw a box"
    },
    {
        "objectID": "examples/02_sketching/basic_usage",
        "href": "examples/02_sketching/basic_usage.html#draw-a-segment",
        "title": "Examples > Sketching: Basic usage > Draw a segment",
        "section": "Draw a segment",
        "text": "You draw a segment by specifying the starting point and ending point.\nDraw a segment"
    },
    {
        "objectID": "examples/02_sketching/basic_usage",
        "href": "examples/02_sketching/basic_usage.html#plot-the-sketch",
        "title": "Examples > Sketching: Basic usage > Plot the sketch",
        "section": "Plot the sketch",
        "text": "The Plotter class provides capabilities for plotting different PyAnsys Geometry objects. PyAnsys Geometry uses PyVista as the visualization backend.\nYou use the plot_sketch method to plot a sketch. This method accepts a Sketch instance and some extra arguments to further customize the visualization of the sketch. These arguments include showing the plane of the sketch and its frame.\nPlot the sketch\nPlotter\nplot_sketch\nSketch"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType.html#extrudetype",
        "title": "ExtrudeType",
        "section": "ExtrudeType",
        "text": "Bases: enum.Enum\nProvides values for extrusion types.\nExtrudeType\nExtrudeType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType.html#ansys.geometry.core.designer.geometry_commands.ExtrudeType",
        "title": "ExtrudeType > ExtrudeType > ExtrudeType",
        "section": "ExtrudeType > ExtrudeType",
        "text": "class ansys.geometry.core.designer.geometry_commands.ExtrudeType(*args, **kwds)\n\nBases: enum.Enum\n\nProvides values for extrusion types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType.html#overview",
        "title": "ExtrudeType > Overview",
        "section": "Overview",
        "text": "NONE\nADD\nCUT\nFORCE_ADD\nFORCE_CUT\nFORCE_INDEPENDENT\nFORCE_NEW_SURFACE\nOverview\nNONE\nADD\nCUT\nFORCE_ADD\nFORCE_CUT\nFORCE_INDEPENDENT\nFORCE_NEW_SURFACE"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType.html#import-detail",
        "title": "ExtrudeType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType.html#attribute-detail",
        "title": "ExtrudeType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType.html#ExtrudeType.NONE",
        "title": "ExtrudeType > Attribute detail > NONE",
        "section": "Attribute detail > NONE",
        "text": "ExtrudeType.NONE = 0\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType.html#ExtrudeType.ADD",
        "title": "ExtrudeType > Attribute detail > ADD",
        "section": "Attribute detail > ADD",
        "text": "ExtrudeType.ADD = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType.html#ExtrudeType.CUT",
        "title": "ExtrudeType > Attribute detail > CUT",
        "section": "Attribute detail > CUT",
        "text": "ExtrudeType.CUT = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType.html#ExtrudeType.FORCE_ADD",
        "title": "ExtrudeType > Attribute detail > FORCE_ADD",
        "section": "Attribute detail > FORCE_ADD",
        "text": "ExtrudeType.FORCE_ADD = 3\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType.html#ExtrudeType.FORCE_CUT",
        "title": "ExtrudeType > Attribute detail > FORCE_CUT",
        "section": "Attribute detail > FORCE_CUT",
        "text": "ExtrudeType.FORCE_CUT = 4\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType.html#ExtrudeType.FORCE_INDEPENDENT",
        "title": "ExtrudeType > Attribute detail > FORCE_INDEPENDENT",
        "section": "Attribute detail > FORCE_INDEPENDENT",
        "text": "ExtrudeType.FORCE_INDEPENDENT = 5\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/ExtrudeType.html#ExtrudeType.FORCE_NEW_SURFACE",
        "title": "ExtrudeType > Attribute detail > FORCE_NEW_SURFACE",
        "section": "Attribute detail > FORCE_NEW_SURFACE",
        "text": "ExtrudeType.FORCE_NEW_SURFACE = 6\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus.html#parameterupdatestatus",
        "title": "ParameterUpdateStatus",
        "section": "ParameterUpdateStatus",
        "text": "Bases: enum.Enum\nProvides values for the status messages associated with parameter updates.\nParameterUpdateStatus\nParameterUpdateStatus\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus.html#ansys.geometry.core.parameters.parameter.ParameterUpdateStatus",
        "title": "ParameterUpdateStatus > ParameterUpdateStatus > ParameterUpdateStatus",
        "section": "ParameterUpdateStatus > ParameterUpdateStatus",
        "text": "class ansys.geometry.core.parameters.parameter.ParameterUpdateStatus(*args, **kwds)\n\nBases: enum.Enum\n\nProvides values for the status messages associated with parameter updates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus.html#overview",
        "title": "ParameterUpdateStatus > Overview",
        "section": "Overview",
        "text": "SUCCESS\nFAILURE\nCONSTRAINED_PARAMETERS\nUNKNOWN\nOverview\nSUCCESS\nFAILURE\nCONSTRAINED_PARAMETERS\nUNKNOWN"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus.html#import-detail",
        "title": "ParameterUpdateStatus > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus.html#attribute-detail",
        "title": "ParameterUpdateStatus > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus.html#ParameterUpdateStatus.SUCCESS",
        "title": "ParameterUpdateStatus > Attribute detail > SUCCESS",
        "section": "Attribute detail > SUCCESS",
        "text": "ParameterUpdateStatus.SUCCESS = 0\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus.html#ParameterUpdateStatus.FAILURE",
        "title": "ParameterUpdateStatus > Attribute detail > FAILURE",
        "section": "Attribute detail > FAILURE",
        "text": "ParameterUpdateStatus.FAILURE = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus.html#ParameterUpdateStatus.CONSTRAINED_PARAMETERS",
        "title": "ParameterUpdateStatus > Attribute detail > CONSTRAINED_PARAMETERS",
        "section": "Attribute detail > CONSTRAINED_PARAMETERS",
        "text": "ParameterUpdateStatus.CONSTRAINED_PARAMETERS = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus",
        "href": "api/ansys/geometry/core/parameters/parameter/ParameterUpdateStatus.html#ParameterUpdateStatus.UNKNOWN",
        "title": "ParameterUpdateStatus > Attribute detail > UNKNOWN",
        "section": "Attribute detail > UNKNOWN",
        "text": "ParameterUpdateStatus.UNKNOWN = 3\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/index",
        "href": "api/ansys/geometry/core/materials/property/index.html#the-propertypy-module",
        "title": "The property.py module",
        "section": "The property.py module",
        "text": "The property.py module\nproperty.py"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/index",
        "href": "api/ansys/geometry/core/materials/property/index.html#summary",
        "title": "The property.py module > Summary",
        "section": "Summary",
        "text": "MaterialProperty\nProvides the data structure for a material property.\nMaterialPropertyType\nEnum holding the possible values for MaterialProperty objects.\nSummary\nMaterialProperty\nMaterialPropertyType\nMaterialProperty"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/index",
        "href": "api/ansys/geometry/core/materials/property/index.html#description",
        "title": "The property.py module > Description",
        "section": "Description",
        "text": "Provides the MaterialProperty class.\nDescription\nMaterialProperty"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/index",
        "href": "api/ansys/geometry/core/shapes/curves/circle/index.html#the-circlepy-module",
        "title": "The circle.py module",
        "section": "The circle.py module",
        "text": "The circle.py module\ncircle.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/index",
        "href": "api/ansys/geometry/core/shapes/curves/circle/index.html#summary",
        "title": "The circle.py module > Summary",
        "section": "Summary",
        "text": "Circle\nProvides 3D circle representation.\nCircleEvaluation\nProvides evaluation of a circle at a given parameter.\nSummary\nCircle\nCircleEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/index",
        "href": "api/ansys/geometry/core/shapes/curves/circle/index.html#description",
        "title": "The circle.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a circle.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#geometrycontainers",
        "title": "GeometryContainers",
        "section": "GeometryContainers",
        "text": "Bases: enum.Enum\nProvides an enum holding the available Geometry services.\nGeometryContainers\nGeometryContainers\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#ansys.geometry.core.connection.docker_instance.GeometryContainers",
        "title": "GeometryContainers > GeometryContainers > GeometryContainers",
        "section": "GeometryContainers > GeometryContainers",
        "text": "class ansys.geometry.core.connection.docker_instance.GeometryContainers(*args, **kwds)\n\nBases: enum.Enum\n\nProvides an enum holding the available Geometry services.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#overview",
        "title": "GeometryContainers > Overview",
        "section": "Overview",
        "text": "CORE_WINDOWS_LATEST\nCORE_LINUX_LATEST\nCORE_WINDOWS_LATEST_UNSTABLE\nCORE_LINUX_LATEST_UNSTABLE\nWINDOWS_LATEST\nWINDOWS_LATEST_UNSTABLE\nWINDOWS_24_1\nWINDOWS_24_2\nWINDOWS_25_1\nWINDOWS_25_2\nCORE_WINDOWS_25_2\nCORE_LINUX_25_2\nOverview\nCORE_WINDOWS_LATEST\nCORE_LINUX_LATEST\nCORE_WINDOWS_LATEST_UNSTABLE\nCORE_LINUX_LATEST_UNSTABLE\nWINDOWS_LATEST\nWINDOWS_LATEST_UNSTABLE\nWINDOWS_24_1\nWINDOWS_24_2\nWINDOWS_25_1\nWINDOWS_25_2\nCORE_WINDOWS_25_2\nCORE_LINUX_25_2"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#import-detail",
        "title": "GeometryContainers > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#attribute-detail",
        "title": "GeometryContainers > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#GeometryContainers.CORE_WINDOWS_LATEST",
        "title": "GeometryContainers > Attribute detail > CORE_WINDOWS_LATEST",
        "section": "Attribute detail > CORE_WINDOWS_LATEST",
        "text": "GeometryContainers.CORE_WINDOWS_LATEST = (0, 'windows', 'core-windows-latest')\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#GeometryContainers.CORE_LINUX_LATEST",
        "title": "GeometryContainers > Attribute detail > CORE_LINUX_LATEST",
        "section": "Attribute detail > CORE_LINUX_LATEST",
        "text": "GeometryContainers.CORE_LINUX_LATEST = (1, 'linux', 'core-linux-latest')\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#GeometryContainers.CORE_WINDOWS_LATEST_UNSTABLE",
        "title": "GeometryContainers > Attribute detail > CORE_WINDOWS_LATEST_UNSTABLE",
        "section": "Attribute detail > CORE_WINDOWS_LATEST_UNSTABLE",
        "text": "GeometryContainers.CORE_WINDOWS_LATEST_UNSTABLE = (2, 'windows', 'core-windows-latest-unstable')\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#GeometryContainers.CORE_LINUX_LATEST_UNSTABLE",
        "title": "GeometryContainers > Attribute detail > CORE_LINUX_LATEST_UNSTABLE",
        "section": "Attribute detail > CORE_LINUX_LATEST_UNSTABLE",
        "text": "GeometryContainers.CORE_LINUX_LATEST_UNSTABLE = (3, 'linux', 'core-linux-latest-unstable')\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#GeometryContainers.WINDOWS_LATEST",
        "title": "GeometryContainers > Attribute detail > WINDOWS_LATEST",
        "section": "Attribute detail > WINDOWS_LATEST",
        "text": "GeometryContainers.WINDOWS_LATEST = (4, 'windows', 'windows-latest')\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#GeometryContainers.WINDOWS_LATEST_UNSTABLE",
        "title": "GeometryContainers > Attribute detail > WINDOWS_LATEST_UNSTABLE",
        "section": "Attribute detail > WINDOWS_LATEST_UNSTABLE",
        "text": "GeometryContainers.WINDOWS_LATEST_UNSTABLE = (5, 'windows', 'windows-latest-unstable')\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#GeometryContainers.WINDOWS_24_1",
        "title": "GeometryContainers > Attribute detail > WINDOWS_24_1",
        "section": "Attribute detail > WINDOWS_24_1",
        "text": "GeometryContainers.WINDOWS_24_1 = (6, 'windows', 'windows-24.1')\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#GeometryContainers.WINDOWS_24_2",
        "title": "GeometryContainers > Attribute detail > WINDOWS_24_2",
        "section": "Attribute detail > WINDOWS_24_2",
        "text": "GeometryContainers.WINDOWS_24_2 = (7, 'windows', 'windows-24.2')\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#GeometryContainers.WINDOWS_25_1",
        "title": "GeometryContainers > Attribute detail > WINDOWS_25_1",
        "section": "Attribute detail > WINDOWS_25_1",
        "text": "GeometryContainers.WINDOWS_25_1 = (8, 'windows', 'windows-25.1')\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#GeometryContainers.WINDOWS_25_2",
        "title": "GeometryContainers > Attribute detail > WINDOWS_25_2",
        "section": "Attribute detail > WINDOWS_25_2",
        "text": "GeometryContainers.WINDOWS_25_2 = (9, 'windows', 'windows-25.2')\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#GeometryContainers.CORE_WINDOWS_25_2",
        "title": "GeometryContainers > Attribute detail > CORE_WINDOWS_25_2",
        "section": "Attribute detail > CORE_WINDOWS_25_2",
        "text": "GeometryContainers.CORE_WINDOWS_25_2 = (10, 'windows', 'core-windows-25.2')\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers",
        "href": "api/ansys/geometry/core/connection/docker_instance/GeometryContainers.html#GeometryContainers.CORE_LINUX_25_2",
        "title": "GeometryContainers > Attribute detail > CORE_LINUX_25_2",
        "section": "Attribute detail > CORE_LINUX_25_2",
        "text": "GeometryContainers.CORE_LINUX_25_2 = (11, 'linux', 'core-linux-25.2')\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/index",
        "href": "api/ansys/geometry/core/designer/component/index.html#the-componentpy-module",
        "title": "The component.py module",
        "section": "The component.py module",
        "text": "The component.py module\ncomponent.py"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/index",
        "href": "api/ansys/geometry/core/designer/component/index.html#summary",
        "title": "The component.py module > Summary",
        "section": "Summary",
        "text": "Component\nProvides for creating and managing a component.\nSharedTopologyType\nShared topologies available.\nExtrusionDirection\nEnum for extrusion direction definition.\nSummary\nComponent\nSharedTopologyType\nExtrusionDirection"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/index",
        "href": "api/ansys/geometry/core/designer/component/index.html#description",
        "title": "The component.py module > Description",
        "section": "Description",
        "text": "Provides for managing components.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/selection/index",
        "href": "api/ansys/geometry/core/designer/selection/index.html#the-selectionpy-module",
        "title": "The selection.py module",
        "section": "The selection.py module",
        "text": "The selection.py module\nselection.py"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/selection/index",
        "href": "api/ansys/geometry/core/designer/selection/index.html#summary",
        "title": "The selection.py module > Summary",
        "section": "Summary",
        "text": "NamedSelection\nRepresents a single named selection within the design assembly.\nSummary\nNamedSelection"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/selection/index",
        "href": "api/ansys/geometry/core/designer/selection/index.html#description",
        "title": "The selection.py module > Description",
        "section": "Description",
        "text": "Module for creating a named selection.\nDescription"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section describes ansys-geometry-core endpoints, their capabilities, and how\nto interact with them programmatically.\nAPI reference"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#interval",
        "title": "Interval",
        "section": "Interval",
        "text": "Interval class that defines a range of values.\nStart value of the interval.\nEnd value of the interval.\nInterval\nInterval\nReal\nReal"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#ansys.geometry.core.shapes.parameterization.Interval",
        "title": "Interval > Interval > Interval",
        "section": "Interval > Interval",
        "text": "class ansys.geometry.core.shapes.parameterization.Interval(start: ansys.geometry.core.typing.Real, end: ansys.geometry.core.typing.Real)\n\nInterval class that defines a range of values.\n\nParameters\n\nstart\n\nReal\n\nStart value of the interval.\n\nend\n\nReal\n\nEnd value of the interval.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#overview",
        "title": "Interval > Overview",
        "section": "Overview",
        "text": "is_open\nIf the interval is open (-inf, inf).\nis_closed\nIf the interval is closed. Neither value is inf or -inf.\nis_empty\nCheck if the current interval is empty.\nget_span\nGet the quantity contained by the interval.\nget_relative_val\nGet an evaluation property of the interval, used in BoxUV.\nis_negative\nIndicate whether the current interval is negative.\nself_unite\nGet the union of two intervals and update the current interval.\nself_intersect\nGet the intersection of two intervals and update the current one.\ncontains_value\nCheck if the current interval contains the value t.\ncontains\nCheck if interval contains value t using default accuracy.\ninflate\nEnlarge the current interval by the given delta value.\nstart\nStart value of the interval.\nend\nEnd value of the interval.\nnot_empty\nunite\nGet the union of two intervals.\nintersect\nGet the intersection of two intervals.\n__eq__\nCompare two intervals.\n__repr__\nRepresent the interval as a string.\nOverview\nis_open\nis_closed\nis_empty\nget_span\nget_relative_val\nis_negative\nself_unite\nself_intersect\ncontains_value\nt\ncontains\nt\ninflate\nstart\nend\nnot_empty\nunite\nintersect\n__eq__\n__repr__"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#import-detail",
        "title": "Interval > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#property-detail",
        "title": "Interval > Property detail",
        "section": "Property detail",
        "text": "Start value of the interval.\nEnd value of the interval.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.start",
        "title": "Interval > Property detail > start",
        "section": "Property detail > start",
        "text": "property Interval.start: ansys.geometry.core.typing.Real\n\nStart value of the interval.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.end",
        "title": "Interval > Property detail > end",
        "section": "Property detail > end",
        "text": "property Interval.end: ansys.geometry.core.typing.Real\n\nEnd value of the interval.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#attribute-detail",
        "title": "Interval > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.not_empty",
        "title": "Interval > Attribute detail > not_empty",
        "section": "Attribute detail > not_empty",
        "text": "Interval.not_empty = True\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#method-detail",
        "title": "Interval > Method detail",
        "section": "Method detail",
        "text": "Compare two intervals.\nIf the interval is open (-inf, inf).\nTrue if both ends of the interval are negative and positive infinity respectively.\nIf the interval is closed. Neither value is inf or -inf.\nTrue if neither bound of the interval is infinite.\nCheck if the current interval is empty.\nTrue when the interval is empty, False otherwise.\nGet the quantity contained by the interval.\nThe interval must be closed.\nThe difference between the end and start of the interval.\nGet an evaluation property of the interval, used in BoxUV.\nOffset to evaluate the interval at.\nActual value according to the offset.\nIndicate whether the current interval is negative.\nAccepted range because the data type of the interval could be in doubles.\nTrue if the interval is negative, False otherwise.\nGet the union of two intervals.\nFirst interval.\nSecond interval.\nUnion of the two intervals.\nGet the union of two intervals and update the current interval.\nInterval to unite with.\nGet the intersection of two intervals.\nFirst interval.\nSecond interval.\nIntersection of the two intervals.\nGet the intersection of two intervals and update the current one.\nInterval to intersect with.\nAccepted range of error given that the interval could be in float values.\nCheck if the current interval contains the value t.\nValue of interest.\nAccepted range of error given that the interval could be in float values.\nTrue if the interval contains the value, False otherwise.\nCheck if interval contains value t using default accuracy.\nValue of interest.\nTrue if the interval contains the value, False otherwise.\nEnlarge the current interval by the given delta value.\nRepresent the interval as a string.\nMethod detail\nTrue\nFalse\nReal\nReal\nReal\nReal\nTrue\nFalse\nInterval\nInterval\nInterval\nInterval\nInterval\nInterval\nInterval\nInterval\nReal\nt\nReal\nReal\nTrue\nFalse\nt\nReal\nTrue\nFalse"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.__eq__",
        "title": "Interval > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Interval.__eq__(other: object)\n\nCompare two intervals.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.is_open",
        "title": "Interval > Method detail > is_open",
        "section": "Method detail > is_open",
        "text": "Interval.is_open() -> bool\n\nIf the interval is open (-inf, inf).\n\nReturns\n\nbool\n\nTrue if both ends of the interval are negative and positive infinity respectively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.is_closed",
        "title": "Interval > Method detail > is_closed",
        "section": "Method detail > is_closed",
        "text": "Interval.is_closed() -> bool\n\nIf the interval is closed. Neither value is inf or -inf.\n\nReturns\n\nbool\n\nTrue if neither bound of the interval is infinite.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.is_empty",
        "title": "Interval > Method detail > is_empty",
        "section": "Method detail > is_empty",
        "text": "Interval.is_empty() -> bool\n\nCheck if the current interval is empty.\n\nReturns\n\nbool\n\nTrue when the interval is empty, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.get_span",
        "title": "Interval > Method detail > get_span",
        "section": "Method detail > get_span",
        "text": "Interval.get_span() -> ansys.geometry.core.typing.Real\n\nGet the quantity contained by the interval.\n\nThe interval must be closed.\n\nReturns\n\nReal\n\nThe difference between the end and start of the interval.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.get_relative_val",
        "title": "Interval > Method detail > get_relative_val",
        "section": "Method detail > get_relative_val",
        "text": "Interval.get_relative_val(t: ansys.geometry.core.typing.Real) -> ansys.geometry.core.typing.Real\n\nGet an evaluation property of the interval, used in BoxUV.\n\nParameters\n\nt\n\nReal\n\nOffset to evaluate the interval at.\n\nReturns\n\nReal\n\nActual value according to the offset.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.is_negative",
        "title": "Interval > Method detail > is_negative",
        "section": "Method detail > is_negative",
        "text": "Interval.is_negative(tolerance: ansys.geometry.core.typing.Real) -> bool\n\nIndicate whether the current interval is negative.\n\nParameters\n\ntolerance\n\nReal\n\nAccepted range because the data type of the interval could be in doubles.\n\nReturns\n\nbool\n\nTrue if the interval is negative, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.unite",
        "title": "Interval > Method detail > unite",
        "section": "Method detail > unite",
        "text": "static Interval.unite(first: Interval, second: Interval) -> Interval\n\nGet the union of two intervals.\n\nParameters\n\nfirst\n\nInterval\n\nFirst interval.\n\nsecond\n\nInterval\n\nSecond interval.\n\nReturns\n\nInterval\n\nUnion of the two intervals.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.self_unite",
        "title": "Interval > Method detail > self_unite",
        "section": "Method detail > self_unite",
        "text": "Interval.self_unite(other: Interval) -> None\n\nGet the union of two intervals and update the current interval.\n\nParameters\n\nother\n\nInterval\n\nInterval to unite with.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.intersect",
        "title": "Interval > Method detail > intersect",
        "section": "Method detail > intersect",
        "text": "static Interval.intersect(first: Interval, second: Interval, tolerance: ansys.geometry.core.typing.Real) -> Interval\n\nGet the intersection of two intervals.\n\nParameters\n\nfirst\n\nInterval\n\nFirst interval.\n\nsecond\n\nInterval\n\nSecond interval.\n\nReturns\n\nInterval\n\nIntersection of the two intervals.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.self_intersect",
        "title": "Interval > Method detail > self_intersect",
        "section": "Method detail > self_intersect",
        "text": "Interval.self_intersect(other: Interval, tolerance: ansys.geometry.core.typing.Real) -> None\n\nGet the intersection of two intervals and update the current one.\n\nParameters\n\nother\n\nInterval\n\nInterval to intersect with.\n\ntolerance\n\nReal\n\nAccepted range of error given that the interval could be in float values.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.contains_value",
        "title": "Interval > Method detail > contains_value",
        "section": "Method detail > contains_value",
        "text": "Interval.contains_value(t: ansys.geometry.core.typing.Real, accuracy: ansys.geometry.core.typing.Real) -> bool\n\nCheck if the current interval contains the value t.\n\nParameters\n\nt\n\nReal\n\nValue of interest.\n\naccuracy\n\nReal\n\nAccepted range of error given that the interval could be in float values.\n\nReturns\n\nbool\n\nTrue if the interval contains the value, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.contains",
        "title": "Interval > Method detail > contains",
        "section": "Method detail > contains",
        "text": "Interval.contains(t: ansys.geometry.core.typing.Real) -> bool\n\nCheck if interval contains value t using default accuracy.\n\nParameters\n\nt\n\nReal\n\nValue of interest.\n\nReturns\n\nbool\n\nTrue if the interval contains the value, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.inflate",
        "title": "Interval > Method detail > inflate",
        "section": "Method detail > inflate",
        "text": "Interval.inflate(delta: ansys.geometry.core.typing.Real) -> Interval\n\nEnlarge the current interval by the given delta value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/Interval",
        "href": "api/ansys/geometry/core/shapes/parameterization/Interval.html#Interval.__repr__",
        "title": "Interval > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Interval.__repr__() -> str\n\nRepresent the interval as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools",
        "href": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools.html#preparetools",
        "title": "PrepareTools",
        "section": "PrepareTools",
        "text": "Prepare tools for PyAnsys Geometry.\nActive supporting geometry service instance for design modeling.\nPrepareTools\nPrepareTools\nGrpcClient"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools",
        "href": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools.html#ansys.geometry.core.tools.prepare_tools.PrepareTools",
        "title": "PrepareTools > PrepareTools > PrepareTools",
        "section": "PrepareTools > PrepareTools",
        "text": "class ansys.geometry.core.tools.prepare_tools.PrepareTools(grpc_client: ansys.geometry.core.connection.GrpcClient)\n\nPrepare tools for PyAnsys Geometry.\n\nParameters\n\ngrpc_client\n\nGrpcClient\n\nActive supporting geometry service instance for design modeling.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools",
        "href": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools.html#overview",
        "title": "PrepareTools > Overview",
        "section": "Overview",
        "text": "extract_volume_from_faces\nExtract a volume from input faces.\nextract_volume_from_edge_loops\nExtract a volume from input edge loops.\nshare_topology\nShare topology between the chosen bodies.\nenhanced_share_topology\nShare topology between the chosen bodies.\nOverview\nextract_volume_from_faces\nextract_volume_from_edge_loops\nshare_topology\nenhanced_share_topology"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools",
        "href": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools.html#import-detail",
        "title": "PrepareTools > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools",
        "href": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools.html#method-detail",
        "title": "PrepareTools > Method detail",
        "section": "Method detail",
        "text": "Extract a volume from input faces.\nCreates a volume (typically a flow volume) from a list of faces that seal the volume\nand one or more faces that define the wetted surface (inside faces of the solid).\nList of faces that seal the volume.\nList of faces that define the interior of the solid.\nList of created bodies.\nExtract a volume from input edge loops.\nCreates a volume (typically a flow volume) from a list of edge loops that seal the volume.\nand one or more faces that define the wetted surface (inside faces of the solid).\nList of faces that seal the volume.\nList of faces that define the interior of the solid (not always necessary).\nList of created bodies.\nShare topology between the chosen bodies.\nList of bodies to share topology between.\nMaximum distance between bodies.\nWhether instances are preserved.\nTrue if successful, False if failed.\nShare topology between the chosen bodies.\nList of bodies to share topology between.\nMaximum distance between bodies.\nWhether instances are preserved.\nMessage containing number of problem areas found/fixed, created and/or modified bodies.\nMethod detail\npython:list\nFace\npython:list\nFace\npython:list\nBody\npython:list\nEdge\npython:list\nFace\noptional\npython:list\nBody\npython:list\nBody\nReal\nTrue\nFalse\npython:list\nBody\nReal\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools",
        "href": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools.html#PrepareTools.extract_volume_from_faces",
        "title": "PrepareTools > Method detail > extract_volume_from_faces",
        "section": "Method detail > extract_volume_from_faces",
        "text": "PrepareTools.extract_volume_from_faces(sealing_faces: list[ansys.geometry.core.designer.face.Face], inside_faces: list[ansys.geometry.core.designer.face.Face]) -> list[ansys.geometry.core.designer.body.Body]\n\nExtract a volume from input faces.\n\nCreates a volume (typically a flow volume) from a list of faces that seal the volume\nand one or more faces that define the wetted surface (inside faces of the solid).\n\nParameters\n\nsealing_faces\n\npython:list[Face]\n\nList of faces that seal the volume.\n\ninside_faces\n\npython:list[Face]\n\nList of faces that define the interior of the solid.\n\nReturns\n\npython:list[Body]\n\nList of created bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools",
        "href": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools.html#PrepareTools.extract_volume_from_edge_loops",
        "title": "PrepareTools > Method detail > extract_volume_from_edge_loops",
        "section": "Method detail > extract_volume_from_edge_loops",
        "text": "PrepareTools.extract_volume_from_edge_loops(sealing_edges: list[ansys.geometry.core.designer.edge.Edge], inside_faces: list[ansys.geometry.core.designer.face.Face] = None) -> list[ansys.geometry.core.designer.body.Body]\n\nExtract a volume from input edge loops.\n\nCreates a volume (typically a flow volume) from a list of edge loops that seal the volume.\nand one or more faces that define the wetted surface (inside faces of the solid).\n\nParameters\n\nsealing_edges\n\npython:list[Edge]\n\nList of faces that seal the volume.\n\ninside_faces\n\npython:list[Face], optional\n\nList of faces that define the interior of the solid (not always necessary).\n\nReturns\n\npython:list[Body]\n\nList of created bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools",
        "href": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools.html#PrepareTools.share_topology",
        "title": "PrepareTools > Method detail > share_topology",
        "section": "Method detail > share_topology",
        "text": "PrepareTools.share_topology(bodies: list[ansys.geometry.core.designer.body.Body], tol: ansys.geometry.core.typing.Real = 0.0, preserve_instances: bool = False) -> bool\n\nShare topology between the chosen bodies.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies to share topology between.\n\ntol\n\nReal\n\nMaximum distance between bodies.\n\npreserve_instances\n\nbool\n\nWhether instances are preserved.\n\nReturns\n\nbool\n\nTrue if successful, False if failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools",
        "href": "api/ansys/geometry/core/tools/prepare_tools/PrepareTools.html#PrepareTools.enhanced_share_topology",
        "title": "PrepareTools > Method detail > enhanced_share_topology",
        "section": "Method detail > enhanced_share_topology",
        "text": "PrepareTools.enhanced_share_topology(bodies: list[ansys.geometry.core.designer.body.Body], tol: ansys.geometry.core.typing.Real = 0.0, preserve_instances: bool = False) -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nShare topology between the chosen bodies.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies to share topology between.\n\ntol\n\nReal\n\nMaximum distance between bodies.\n\npreserve_instances\n\nbool\n\nWhether instances are preserved.\n\nReturns\n\nRepairToolMessage\n\nMessage containing number of problem areas found/fixed, created and/or modified bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#pygeometrycustomadapter",
        "title": "PyGeometryCustomAdapter",
        "section": "PyGeometryCustomAdapter",
        "text": "Bases: logging.LoggerAdapter\nKeeps the reference to the Geometry service instance name dynamic.\nIf you use the standard approach, which is supplying extra input\nto the logger, you must input Geometry service instances each time\nyou do a log.\nUsing adapters, you only need to specify the Geometry service\ninstance that you are referring to once.\nPyGeometryCustomAdapter\nPyGeometryCustomAdapter\nlogging.LoggerAdapter"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#ansys.geometry.core.logger.PyGeometryCustomAdapter",
        "title": "PyGeometryCustomAdapter > PyGeometryCustomAdapter > PyGeometryCustomAdapter",
        "section": "PyGeometryCustomAdapter > PyGeometryCustomAdapter",
        "text": "class ansys.geometry.core.logger.PyGeometryCustomAdapter(logger, extra=None)\n\nBases: logging.LoggerAdapter\n\nKeeps the reference to the Geometry service instance name dynamic.\n\nIf you use the standard approach, which is supplying extra input\nto the logger, you must input Geometry service instances each time\nyou do a log.\n\nUsing adapters, you only need to specify the Geometry service\ninstance that you are referring to once.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#overview",
        "title": "PyGeometryCustomAdapter > Overview",
        "section": "Overview",
        "text": "process\nProcess the logging message and keyword arguments passed in to\nlog_to_file\nAdd a file handler to the logger.\nlog_to_stdout\nAdd a standard output handler to the logger.\nsetLevel\nChange the log level of the object and the attached handlers.\nlevel\nfile_handler\nstdout_handler\nlogger\nstd_out_handler\nOverview\nprocess\nlog_to_file\nlog_to_stdout\nsetLevel\nlevel\nfile_handler\nstdout_handler\nlogger\nstd_out_handler"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#import-detail",
        "title": "PyGeometryCustomAdapter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#attribute-detail",
        "title": "PyGeometryCustomAdapter > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#PyGeometryCustomAdapter.level",
        "title": "PyGeometryCustomAdapter > Attribute detail > level",
        "section": "Attribute detail > level",
        "text": "PyGeometryCustomAdapter.level = None\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#PyGeometryCustomAdapter.file_handler",
        "title": "PyGeometryCustomAdapter > Attribute detail > file_handler",
        "section": "Attribute detail > file_handler",
        "text": "PyGeometryCustomAdapter.file_handler = None\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#PyGeometryCustomAdapter.stdout_handler",
        "title": "PyGeometryCustomAdapter > Attribute detail > stdout_handler",
        "section": "Attribute detail > stdout_handler",
        "text": "PyGeometryCustomAdapter.stdout_handler = None\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#PyGeometryCustomAdapter.logger",
        "title": "PyGeometryCustomAdapter > Attribute detail > logger",
        "section": "Attribute detail > logger",
        "text": "PyGeometryCustomAdapter.logger\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#PyGeometryCustomAdapter.std_out_handler",
        "title": "PyGeometryCustomAdapter > Attribute detail > std_out_handler",
        "section": "Attribute detail > std_out_handler",
        "text": "PyGeometryCustomAdapter.std_out_handler\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#method-detail",
        "title": "PyGeometryCustomAdapter > Method detail",
        "section": "Method detail",
        "text": "Process the logging message and keyword arguments passed in to\na logging call to insert contextual information. You can either\nmanipulate the message itself, the keyword args or both. Return\nthe message and kwargs modified (or not) to suit your needs.\nNormally, you’ll only need to override this one method in a\nLoggerAdapter subclass for your specific needs.\nAdd a file handler to the logger.\nName of the file to write log messages to.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nAdd a standard output handler to the logger.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nChange the log level of the object and the attached handlers.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nMethod detail\npython:str\npython:int\n10\nlogging.DEBUG\npython:int\n10\nlogging.DEBUG\npython:int\n10\nlogging.DEBUG"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#PyGeometryCustomAdapter.process",
        "title": "PyGeometryCustomAdapter > Method detail > process",
        "section": "Method detail > process",
        "text": "PyGeometryCustomAdapter.process(msg, kwargs)\n\nProcess the logging message and keyword arguments passed in to\na logging call to insert contextual information. You can either\nmanipulate the message itself, the keyword args or both. Return\nthe message and kwargs modified (or not) to suit your needs.\n\nNormally, you’ll only need to override this one method in a\nLoggerAdapter subclass for your specific needs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#PyGeometryCustomAdapter.log_to_file",
        "title": "PyGeometryCustomAdapter > Method detail > log_to_file",
        "section": "Method detail > log_to_file",
        "text": "PyGeometryCustomAdapter.log_to_file(filename: str = FILE_NAME, level: int = LOG_LEVEL)\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, default: “pyansys-geometry.log”\n\nName of the file to write log messages to.\n\nlevel\n\npython:int, default: 10\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#PyGeometryCustomAdapter.log_to_stdout",
        "title": "PyGeometryCustomAdapter > Method detail > log_to_stdout",
        "section": "Method detail > log_to_stdout",
        "text": "PyGeometryCustomAdapter.log_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:int, default: 10\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter",
        "href": "api/ansys/geometry/core/logger/PyGeometryCustomAdapter.html#PyGeometryCustomAdapter.setLevel",
        "title": "PyGeometryCustomAdapter > Method detail > setLevel",
        "section": "Method detail > setLevel",
        "text": "PyGeometryCustomAdapter.setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:int, default: 10\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ProblemArea",
        "href": "api/ansys/geometry/core/tools/problem_areas/ProblemArea.html#problemarea",
        "title": "ProblemArea",
        "section": "ProblemArea",
        "text": "Represents problem areas.\nServer-defined ID for the problem area.\nActive supporting geometry service instance for design modeling.\nProblemArea\nProblemArea\npython:str\nGrpcClient"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ProblemArea",
        "href": "api/ansys/geometry/core/tools/problem_areas/ProblemArea.html#ansys.geometry.core.tools.problem_areas.ProblemArea",
        "title": "ProblemArea > ProblemArea > ProblemArea",
        "section": "ProblemArea > ProblemArea",
        "text": "class ansys.geometry.core.tools.problem_areas.ProblemArea(id: str, grpc_client: ansys.geometry.core.connection.GrpcClient)\n\nRepresents problem areas.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the problem area.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting geometry service instance for design modeling.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ProblemArea",
        "href": "api/ansys/geometry/core/tools/problem_areas/ProblemArea.html#overview",
        "title": "ProblemArea > Overview",
        "section": "Overview",
        "text": "fix\nFix problem area.\nid\nThe id of the problem area.\nOverview\nfix\nid"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ProblemArea",
        "href": "api/ansys/geometry/core/tools/problem_areas/ProblemArea.html#import-detail",
        "title": "ProblemArea > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ProblemArea",
        "href": "api/ansys/geometry/core/tools/problem_areas/ProblemArea.html#property-detail",
        "title": "ProblemArea > Property detail",
        "section": "Property detail",
        "text": "The id of the problem area.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ProblemArea",
        "href": "api/ansys/geometry/core/tools/problem_areas/ProblemArea.html#ProblemArea.id",
        "title": "ProblemArea > Property detail > id",
        "section": "Property detail > id",
        "text": "property ProblemArea.id: str\n\nThe id of the problem area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ProblemArea",
        "href": "api/ansys/geometry/core/tools/problem_areas/ProblemArea.html#method-detail",
        "title": "ProblemArea > Method detail",
        "section": "Method detail",
        "text": "Fix problem area.\nMethod detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ProblemArea",
        "href": "api/ansys/geometry/core/tools/problem_areas/ProblemArea.html#ProblemArea.fix",
        "title": "ProblemArea > Method detail > fix",
        "section": "Method detail > fix",
        "text": "abstractmethod ProblemArea.fix()\n\nFix problem area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#vector2d",
        "title": "Vector2D",
        "section": "Vector2D",
        "text": "Bases: numpy.ndarray\nProvides for creating and managing a 2D vector.\n2D numpy.ndarray class with shape(X,).\nVector2D\nVector2D\nnumpy.ndarray\nndarray\nRealSequence\nnumpy.ndarray"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#ansys.geometry.core.math.vector.Vector2D",
        "title": "Vector2D > Vector2D > Vector2D",
        "section": "Vector2D > Vector2D",
        "text": "class ansys.geometry.core.math.vector.Vector2D(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)\n\nBases: numpy.ndarray\n\nProvides for creating and managing a 2D vector.\n\nParameters\n\ninput\n\nndarray | RealSequence\n\n2D numpy.ndarray class with shape(X,).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#overview",
        "title": "Vector2D > Overview",
        "section": "Overview",
        "text": "from_points\nCreate a 2D vector from two distinct 2D points.\ncross\nReturn the cross product of Vector2D objects.\nis_perpendicular_to\nCheck if this 2D vector and another 2D vector are perpendicular.\nis_parallel_to\nCheck if this vector and another vector are parallel.\nis_opposite\nCheck if this vector and another vector are opposite.\nnormalize\nReturn a normalized version of the 2D vector.\nget_angle_between\nGet the angle between this 2D vector and another 2D vector.\nx\nX coordinate of the 2D vector.\ny\nY coordinate of the 2D vector.\nnorm\nNorm of the 2D vector.\nmagnitude\nNorm of the 2D vector.\nis_zero\nCheck if values for all components of the 2D vector are zero.\n__eq__\nEquals operator for the Vector2D class.\n__ne__\nNot equals operator for the Vector2D class.\n__mul__\nOverload * operator with dot product.\n__add__\nAddition operation overload for 2D vectors.\n__sub__\nSubtraction operation overload for 2D vectors.\n__mod__\nOverload % operator with cross product.\nOverview\nfrom_points\ncross\nVector2D\nis_perpendicular_to\nis_parallel_to\nis_opposite\nnormalize\nget_angle_between\nx\ny\nnorm\nmagnitude\nis_zero\n__eq__\nVector2D\n__ne__\nVector2D\n__mul__\n__add__\n__sub__\n__mod__"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#import-detail",
        "title": "Vector2D > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#property-detail",
        "title": "Vector2D > Property detail",
        "section": "Property detail",
        "text": "X coordinate of the 2D vector.\nY coordinate of the 2D vector.\nNorm of the 2D vector.\nNorm of the 2D vector.\nCheck if values for all components of the 2D vector are zero.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.x",
        "title": "Vector2D > Property detail > x",
        "section": "Property detail > x",
        "text": "property Vector2D.x: ansys.geometry.core.typing.Real\n\nX coordinate of the 2D vector.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.y",
        "title": "Vector2D > Property detail > y",
        "section": "Property detail > y",
        "text": "property Vector2D.y: ansys.geometry.core.typing.Real\n\nY coordinate of the 2D vector.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.norm",
        "title": "Vector2D > Property detail > norm",
        "section": "Property detail > norm",
        "text": "property Vector2D.norm: float\n\nNorm of the 2D vector.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.magnitude",
        "title": "Vector2D > Property detail > magnitude",
        "section": "Property detail > magnitude",
        "text": "property Vector2D.magnitude: float\n\nNorm of the 2D vector.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.is_zero",
        "title": "Vector2D > Property detail > is_zero",
        "section": "Property detail > is_zero",
        "text": "property Vector2D.is_zero: bool\n\nCheck if values for all components of the 2D vector are zero.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#method-detail",
        "title": "Vector2D > Method detail",
        "section": "Method detail",
        "text": "Return the cross product of Vector2D objects.\nCheck if this 2D vector and another 2D vector are perpendicular.\nCheck if this vector and another vector are parallel.\nCheck if this vector and another vector are opposite.\nReturn a normalized version of the 2D vector.\nGet the angle between this 2D vector and another 2D vector.\nOther 2D vector to compute the angle with.\nAngle between these two 2D vectors.\nEquals operator for the Vector2D class.\nNot equals operator for the Vector2D class.\nOverload * operator with dot product.\nThis method also admits scalar multiplication.\nAddition operation overload for 2D vectors.\nSubtraction operation overload for 2D vectors.\nOverload % operator with cross product.\nCreate a 2D vector from two distinct 2D points.\nPoint2D\nclass representing the first point.\nPoint2D\nclass representing the second point.\n2D vector from point_a to point_b.\nThe resulting 2D vector is always expressed in Point2D\nbase units.\nMethod detail\nVector2D\nVector2D\nQuantity\nVector2D\nVector2D\nndarray\nRealSequence\nPoint2D\nPoint2D\nndarray\nRealSequence\nPoint2D\nPoint2D\nVector2D\npoint_a\npoint_b\nPoint2D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.cross",
        "title": "Vector2D > Method detail > cross",
        "section": "Method detail > cross",
        "text": "Vector2D.cross(v: Vector2D) -> ansys.geometry.core.typing.Real\n\nReturn the cross product of Vector2D objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.is_perpendicular_to",
        "title": "Vector2D > Method detail > is_perpendicular_to",
        "section": "Method detail > is_perpendicular_to",
        "text": "Vector2D.is_perpendicular_to(other_vector: Vector2D) -> bool\n\nCheck if this 2D vector and another 2D vector are perpendicular.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.is_parallel_to",
        "title": "Vector2D > Method detail > is_parallel_to",
        "section": "Method detail > is_parallel_to",
        "text": "Vector2D.is_parallel_to(other_vector: Vector2D) -> bool\n\nCheck if this vector and another vector are parallel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.is_opposite",
        "title": "Vector2D > Method detail > is_opposite",
        "section": "Method detail > is_opposite",
        "text": "Vector2D.is_opposite(other_vector: Vector2D) -> bool\n\nCheck if this vector and another vector are opposite.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.normalize",
        "title": "Vector2D > Method detail > normalize",
        "section": "Method detail > normalize",
        "text": "Vector2D.normalize() -> Vector2D\n\nReturn a normalized version of the 2D vector.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.get_angle_between",
        "title": "Vector2D > Method detail > get_angle_between",
        "section": "Method detail > get_angle_between",
        "text": "Vector2D.get_angle_between(v: Vector2D) -> pint.Quantity\n\nGet the angle between this 2D vector and another 2D vector.\n\nParameters\n\nv\n\nVector2D\n\nOther 2D vector to compute the angle with.\n\nReturns\n\nQuantity\n\nAngle between these two 2D vectors.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.__eq__",
        "title": "Vector2D > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Vector2D.__eq__(other: Vector2D) -> bool\n\nEquals operator for the Vector2D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.__ne__",
        "title": "Vector2D > Method detail > __ne__",
        "section": "Method detail > __ne__",
        "text": "Vector2D.__ne__(other: Vector2D) -> bool\n\nNot equals operator for the Vector2D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.__mul__",
        "title": "Vector2D > Method detail > __mul__",
        "section": "Method detail > __mul__",
        "text": "Vector2D.__mul__(other: Vector2D | ansys.geometry.core.typing.Real) -> Vector2D | ansys.geometry.core.typing.Real\n\nOverload * operator with dot product.\n\nNotes\n\nThis method also admits scalar multiplication.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.__add__",
        "title": "Vector2D > Method detail > __add__",
        "section": "Method detail > __add__",
        "text": "Vector2D.__add__(other: Vector2D | ansys.geometry.core.math.point.Point2D) -> Vector2D | ansys.geometry.core.math.point.Point2D\n\nAddition operation overload for 2D vectors.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.__sub__",
        "title": "Vector2D > Method detail > __sub__",
        "section": "Method detail > __sub__",
        "text": "Vector2D.__sub__(other: Vector2D) -> Vector2D\n\nSubtraction operation overload for 2D vectors.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.__mod__",
        "title": "Vector2D > Method detail > __mod__",
        "section": "Method detail > __mod__",
        "text": "Vector2D.__mod__(other: Vector2D) -> ansys.geometry.core.typing.Real\n\nOverload % operator with cross product.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector2D",
        "href": "api/ansys/geometry/core/math/vector/Vector2D.html#Vector2D.from_points",
        "title": "Vector2D > Method detail > from_points",
        "section": "Method detail > from_points",
        "text": "classmethod Vector2D.from_points(point_a: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point2D, point_b: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point2D)\n\nCreate a 2D vector from two distinct 2D points.\n\nParameters\n\npoint_a\n\nndarray | RealSequence | Point2D\n\nPoint2D\nclass representing the first point.\n\npoint_b\n\nndarray | RealSequence | Point2D\n\nPoint2D\nclass representing the second point.\n\nReturns\n\nVector2D\n\n2D vector from point_a to point_b.\n\nNotes\n\nThe resulting 2D vector is always expressed in Point2D\nbase units.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/ExtrusionDirection",
        "href": "api/ansys/geometry/core/designer/component/ExtrusionDirection.html#extrusiondirection",
        "title": "ExtrusionDirection",
        "section": "ExtrusionDirection",
        "text": "Bases: enum.Enum\nEnum for extrusion direction definition.\nExtrusionDirection\nExtrusionDirection\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/ExtrusionDirection",
        "href": "api/ansys/geometry/core/designer/component/ExtrusionDirection.html#ansys.geometry.core.designer.component.ExtrusionDirection",
        "title": "ExtrusionDirection > ExtrusionDirection > ExtrusionDirection",
        "section": "ExtrusionDirection > ExtrusionDirection",
        "text": "class ansys.geometry.core.designer.component.ExtrusionDirection(*args, **kwds)\n\nBases: enum.Enum\n\nEnum for extrusion direction definition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/ExtrusionDirection",
        "href": "api/ansys/geometry/core/designer/component/ExtrusionDirection.html#overview",
        "title": "ExtrusionDirection > Overview",
        "section": "Overview",
        "text": "from_string\nConvert a string to an ExtrusionDirection enum.\nPOSITIVE\nNEGATIVE\nOverview\nfrom_string\nExtrusionDirection\nPOSITIVE\nNEGATIVE"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/ExtrusionDirection",
        "href": "api/ansys/geometry/core/designer/component/ExtrusionDirection.html#import-detail",
        "title": "ExtrusionDirection > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/ExtrusionDirection",
        "href": "api/ansys/geometry/core/designer/component/ExtrusionDirection.html#attribute-detail",
        "title": "ExtrusionDirection > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/ExtrusionDirection",
        "href": "api/ansys/geometry/core/designer/component/ExtrusionDirection.html#ExtrusionDirection.POSITIVE",
        "title": "ExtrusionDirection > Attribute detail > POSITIVE",
        "section": "Attribute detail > POSITIVE",
        "text": "ExtrusionDirection.POSITIVE = '+'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/ExtrusionDirection",
        "href": "api/ansys/geometry/core/designer/component/ExtrusionDirection.html#ExtrusionDirection.NEGATIVE",
        "title": "ExtrusionDirection > Attribute detail > NEGATIVE",
        "section": "Attribute detail > NEGATIVE",
        "text": "ExtrusionDirection.NEGATIVE = '-'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/ExtrusionDirection",
        "href": "api/ansys/geometry/core/designer/component/ExtrusionDirection.html#method-detail",
        "title": "ExtrusionDirection > Method detail",
        "section": "Method detail",
        "text": "Convert a string to an ExtrusionDirection enum.\nMethod detail\nExtrusionDirection"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/ExtrusionDirection",
        "href": "api/ansys/geometry/core/designer/component/ExtrusionDirection.html#ExtrusionDirection.from_string",
        "title": "ExtrusionDirection > Method detail > from_string",
        "section": "Method detail > from_string",
        "text": "classmethod ExtrusionDirection.from_string(string: str, use_default_if_error: bool = False) -> ExtrusionDirection\n\nConvert a string to an ExtrusionDirection enum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/prepare_tools/index",
        "href": "api/ansys/geometry/core/tools/prepare_tools/index.html#the-prepare_toolspy-module",
        "title": "The prepare_tools.py module",
        "section": "The prepare_tools.py module",
        "text": "The prepare_tools.py module\nprepare_tools.py"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/prepare_tools/index",
        "href": "api/ansys/geometry/core/tools/prepare_tools/index.html#summary",
        "title": "The prepare_tools.py module > Summary",
        "section": "Summary",
        "text": "PrepareTools\nPrepare tools for PyAnsys Geometry.\nSummary\nPrepareTools"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/prepare_tools/index",
        "href": "api/ansys/geometry/core/tools/prepare_tools/index.html#description",
        "title": "The prepare_tools.py module > Description",
        "section": "Description",
        "text": "Provides tools for preparing geometry for use with simulation.\nDescription"
    },
    {
        "objectID": "examples/03_modeling/design_organization",
        "href": "examples/03_modeling/design_organization.html#modeling-design-organization",
        "title": "Examples > Modeling: Design organization",
        "section": "Modeling: Design organization",
        "text": "The Design instance creates a design project within the remote Geometry service to complete all CAD modeling against.\nYou can organize all solid and surface bodies in each design within a customizable component hierarchy. A component is simply an organization mechanism.\nThe top-level design node and each child component node can have one or more bodies assigned and one or more components assigned.\nThe API requires each component of the design hierarchy to be given a user-defined name.\nThere are several design operations that result in a body being created within a design. Executing each of these methods against a specific component instance explicitly specifies the node of the design tree to place the new body under.\nModeling: Design organization\nDesign"
    },
    {
        "objectID": "examples/03_modeling/design_organization",
        "href": "examples/03_modeling/design_organization.html#perform-required-imports",
        "title": "Examples > Modeling: Design organization > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/03_modeling/design_organization",
        "href": "examples/03_modeling/design_organization.html#organize-design",
        "title": "Examples > Modeling: Design organization > Organize design",
        "section": "Organize design",
        "text": "Extrude two sketches to create bodies. Assign the cylinder to the top-level design component. Assign the slot to the component nested one level beneath the top-level design component.\nOrganize design"
    },
    {
        "objectID": "examples/03_modeling/design_organization",
        "href": "examples/03_modeling/design_organization.html#create-nested-component",
        "title": "Examples > Modeling: Design organization > Create nested component",
        "section": "Create nested component",
        "text": "Create a component that is nested under the previously created component and then create another cylinder from the previously used sketch.\nCreate nested component"
    },
    {
        "objectID": "examples/03_modeling/design_organization",
        "href": "examples/03_modeling/design_organization.html#use-surfaces-from-body-to-create-additional-bodies",
        "title": "Examples > Modeling: Design organization > Use surfaces from body to create additional bodies",
        "section": "Use surfaces from body to create additional bodies",
        "text": "You can use surfaces from any body across the entire design as references for creating additional bodies.\nExtrude a cylinder from the surface body assigned to the child component.\nUse surfaces from body to create additional bodies"
    },
    {
        "objectID": "examples/03_modeling/design_organization",
        "href": "examples/03_modeling/design_organization.html#close-the-modeler",
        "title": "Examples > Modeling: Design organization > Close the modeler",
        "section": "Close the modeler",
        "text": "Close the modeler to release the resources.\nClose the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas.html#extraedgeproblemareas",
        "title": "ExtraEdgeProblemAreas",
        "section": "ExtraEdgeProblemAreas",
        "text": "Bases: ProblemArea\nRepresents a extra edge problem area with unique identifier and associated edges.\nServer-defined ID for the problem area.\nActive supporting geometry service instance for design modeling.\nList of edges associated with the design.\nExtraEdgeProblemAreas\nExtraEdgeProblemAreas\nProblemArea\npython:str\nGrpcClient\npython:list\nEdge"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas.html#ansys.geometry.core.tools.problem_areas.ExtraEdgeProblemAreas",
        "title": "ExtraEdgeProblemAreas > ExtraEdgeProblemAreas > ExtraEdgeProblemAreas",
        "section": "ExtraEdgeProblemAreas > ExtraEdgeProblemAreas",
        "text": "class ansys.geometry.core.tools.problem_areas.ExtraEdgeProblemAreas(id: str, grpc_client: ansys.geometry.core.connection.GrpcClient, edges: list[ansys.geometry.core.designer.edge.Edge])\n\nBases: ProblemArea\n\nRepresents a extra edge problem area with unique identifier and associated edges.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the problem area.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting geometry service instance for design modeling.\n\nedges\n\npython:list[Edge]\n\nList of edges associated with the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas.html#overview",
        "title": "ExtraEdgeProblemAreas > Overview",
        "section": "Overview",
        "text": "fix\nFix the problem area.\nedges\nThe list of edges connected to this problem area.\nOverview\nfix\nedges"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas.html#import-detail",
        "title": "ExtraEdgeProblemAreas > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas.html#property-detail",
        "title": "ExtraEdgeProblemAreas > Property detail",
        "section": "Property detail",
        "text": "The list of edges connected to this problem area.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas.html#ExtraEdgeProblemAreas.edges",
        "title": "ExtraEdgeProblemAreas > Property detail > edges",
        "section": "Property detail > edges",
        "text": "property ExtraEdgeProblemAreas.edges: list[ansys.geometry.core.designer.edge.Edge]\n\nThe list of edges connected to this problem area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas.html#method-detail",
        "title": "ExtraEdgeProblemAreas > Method detail",
        "section": "Method detail",
        "text": "Fix the problem area.\nMessage containing created and/or modified bodies.\nMethod detail\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ExtraEdgeProblemAreas.html#ExtraEdgeProblemAreas.fix",
        "title": "ExtraEdgeProblemAreas > Method detail > fix",
        "section": "Method detail > fix",
        "text": "ExtraEdgeProblemAreas.fix() -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFix the problem area.\n\nReturns\n\nmessage: RepairToolMessage\n\nMessage containing created and/or modified bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix",
        "href": "api/ansys/geometry/core/math/matrix/Matrix.html#matrix",
        "title": "Matrix",
        "section": "Matrix",
        "text": "Bases: numpy.ndarray\nProvides matrix representation.\nMatrix arguments as a np.ndarray class.\nMatrix\nMatrix\nnumpy.ndarray\nndarray\nRealSequence\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix",
        "href": "api/ansys/geometry/core/math/matrix/Matrix.html#ansys.geometry.core.math.matrix.Matrix",
        "title": "Matrix > Matrix > Matrix",
        "section": "Matrix > Matrix",
        "text": "class ansys.geometry.core.math.matrix.Matrix(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)\n\nBases: numpy.ndarray\n\nProvides matrix representation.\n\nParameters\n\ninput\n\nndarray | RealSequence\n\nMatrix arguments as a np.ndarray class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix",
        "href": "api/ansys/geometry/core/math/matrix/Matrix.html#overview",
        "title": "Matrix > Overview",
        "section": "Overview",
        "text": "determinant\nGet the determinant of the matrix.\ninverse\nProvide the inverse of the matrix.\n__mul__\nGet the multiplication of the matrix.\n__eq__\nEquals operator for the Matrix class.\n__ne__\nNot equals operator for the Matrix class.\nOverview\ndeterminant\ninverse\n__mul__\n__eq__\nMatrix\n__ne__\nMatrix"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix",
        "href": "api/ansys/geometry/core/math/matrix/Matrix.html#import-detail",
        "title": "Matrix > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix",
        "href": "api/ansys/geometry/core/math/matrix/Matrix.html#method-detail",
        "title": "Matrix > Method detail",
        "section": "Method detail",
        "text": "Get the determinant of the matrix.\nProvide the inverse of the matrix.\nGet the multiplication of the matrix.\nEquals operator for the Matrix class.\nNot equals operator for the Matrix class.\nMethod detail\nMatrix\nMatrix"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix",
        "href": "api/ansys/geometry/core/math/matrix/Matrix.html#Matrix.determinant",
        "title": "Matrix > Method detail > determinant",
        "section": "Method detail > determinant",
        "text": "Matrix.determinant() -> ansys.geometry.core.typing.Real\n\nGet the determinant of the matrix.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix",
        "href": "api/ansys/geometry/core/math/matrix/Matrix.html#Matrix.inverse",
        "title": "Matrix > Method detail > inverse",
        "section": "Method detail > inverse",
        "text": "Matrix.inverse() -> Matrix\n\nProvide the inverse of the matrix.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix",
        "href": "api/ansys/geometry/core/math/matrix/Matrix.html#Matrix.__mul__",
        "title": "Matrix > Method detail > __mul__",
        "section": "Method detail > __mul__",
        "text": "Matrix.__mul__(other: Matrix | numpy.ndarray) -> Matrix\n\nGet the multiplication of the matrix.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix",
        "href": "api/ansys/geometry/core/math/matrix/Matrix.html#Matrix.__eq__",
        "title": "Matrix > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Matrix.__eq__(other: Matrix) -> bool\n\nEquals operator for the Matrix class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix",
        "href": "api/ansys/geometry/core/math/matrix/Matrix.html#Matrix.__ne__",
        "title": "Matrix > Method detail > __ne__",
        "section": "Method detail > __ne__",
        "text": "Matrix.__ne__(other: Matrix) -> bool\n\nNot equals operator for the Matrix class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/primitives",
        "href": "user_guide/primitives.html#primitives",
        "title": "Primitives",
        "section": "Primitives",
        "text": "The PyAnsys Geometry math subpackage consists\nof primitive representations of basic geometric objects, such as a point, vector, and\nmatrix. To operate and manipulate physical quantities, this subpackage uses\nPint, a third-party open source software\nthat other PyAnsys libraries also use. It also uses its shapes\nsubpackage to evaluate and represent geometric shapes (both curves and surfaces),\nsuch as lines, circles, cones, spheres and torus.\nThis table shows PyAnsys Geometry names and base values for the physical quantities:\nName\nvalue\nLENGTH_ACCURACY\n1e-8\nANGLE_ACCURACY\n1e-6\nDEFAULT_UNITS.LENGTH\nmeter\nDEFAULT_UNITS.ANGLE\nradian\nTo define accuracy and measurements, you use these PyAnsys Geometry classes:\nAccuracy()\nMeasurements()\nPrimitives\nmath\nshapes\nAccuracy()\nMeasurements()"
    },
    {
        "objectID": "user_guide/primitives",
        "href": "user_guide/primitives.html#planes",
        "title": "Primitives > Planes",
        "section": "Planes",
        "text": "The Plane() class provides primitive representation\nof a 2D plane in 3D space. It has an origin and a coordinate system.\nSketched shapes are always defined relative to a plane.\nThe default working plane is XY, which has (0,0) as its origin.\nIf you create a 2D object in the plane, PyAnsys Geometry converts it to the global coordinate system so that\nthe 2D feature executes as expected:\nPlanes\nPlane()\n(0,0)"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode",
        "href": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode.html#offsetmode",
        "title": "OffsetMode",
        "section": "OffsetMode",
        "text": "Bases: enum.Enum\nProvides values for offset modes during extrusions.\nOffsetMode\nOffsetMode\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode",
        "href": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode.html#ansys.geometry.core.designer.geometry_commands.OffsetMode",
        "title": "OffsetMode > OffsetMode > OffsetMode",
        "section": "OffsetMode > OffsetMode",
        "text": "class ansys.geometry.core.designer.geometry_commands.OffsetMode(*args, **kwds)\n\nBases: enum.Enum\n\nProvides values for offset modes during extrusions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode",
        "href": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode.html#overview",
        "title": "OffsetMode > Overview",
        "section": "Overview",
        "text": "IGNORE_RELATIONSHIPS\nMOVE_FACES_TOGETHER\nMOVE_FACES_APART\nOverview\nIGNORE_RELATIONSHIPS\nMOVE_FACES_TOGETHER\nMOVE_FACES_APART"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode",
        "href": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode.html#import-detail",
        "title": "OffsetMode > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode",
        "href": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode.html#attribute-detail",
        "title": "OffsetMode > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode",
        "href": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode.html#OffsetMode.IGNORE_RELATIONSHIPS",
        "title": "OffsetMode > Attribute detail > IGNORE_RELATIONSHIPS",
        "section": "Attribute detail > IGNORE_RELATIONSHIPS",
        "text": "OffsetMode.IGNORE_RELATIONSHIPS = 0\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode",
        "href": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode.html#OffsetMode.MOVE_FACES_TOGETHER",
        "title": "OffsetMode > Attribute detail > MOVE_FACES_TOGETHER",
        "section": "Attribute detail > MOVE_FACES_TOGETHER",
        "text": "OffsetMode.MOVE_FACES_TOGETHER = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode",
        "href": "api/ansys/geometry/core/designer/geometry_commands/OffsetMode.html#OffsetMode.MOVE_FACES_APART",
        "title": "OffsetMode > Attribute detail > MOVE_FACES_APART",
        "section": "Attribute detail > MOVE_FACES_APART",
        "text": "OffsetMode.MOVE_FACES_APART = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/index",
        "href": "api/ansys/geometry/core/math/vector/index.html#the-vectorpy-module",
        "title": "The vector.py module",
        "section": "The vector.py module",
        "text": "The vector.py module\nvector.py"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/index",
        "href": "api/ansys/geometry/core/math/vector/index.html#summary",
        "title": "The vector.py module > Summary",
        "section": "Summary",
        "text": "Vector3D\nProvides for managing and creating a 3D vector.\nVector2D\nProvides for creating and managing a 2D vector.\nUnitVector3D\nProvides for creating and managing a 3D unit vector.\nUnitVector2D\nProvides for creating and managing a 3D unit vector.\nSummary\nVector3D\nVector2D\nUnitVector3D\nUnitVector2D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/index",
        "href": "api/ansys/geometry/core/math/vector/index.html#description",
        "title": "The vector.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing 2D and 3D vectors.\nDescription"
    },
    {
        "objectID": "getting_started/local/index",
        "href": "getting_started/local/index.html#launch-a-local-session",
        "title": "Launch a local session",
        "section": "Launch a local session",
        "text": "If Ansys 2024 R1 or later and PyAnsys Geometry are installed, you can create a local backend session using\nDiscovery, SpaceClaim, or the Geometry service. Once the backend is running, PyAnsys Geometry can manage the connection.\nTo launch and establish a connection to the service, open Python and use the following commands for\neither Discovery, SpaceClaim, or the Geometry service.\nWhen launching via Geometry Service, if you have a custom local install, you can define the path of this install\nin the ANSYS_GEOMETRY_SERVICE_ROOT environment variable. In that case, the launcher uses this location by default.\nFor more information on the arguments accepted by the launcher methods, see\ntheir API documentation:\nlaunch_modeler_with_discovery\nlaunch_modeler_with_spaceclaim\nlaunch_modeler_with_geometry_service\nBecause this is the first release of the Geometry service, you cannot yet define a product version\nor API version.\nGo to Getting started\nLaunch a local session"
    },
    {
        "objectID": "assets",
        "href": "assets.html#assets",
        "title": "Assets",
        "section": "Assets",
        "text": "In this section, users are able to download a set of assets related to PyAnsys Geometry.\nAssets"
    },
    {
        "objectID": "assets",
        "href": "assets.html#documentation",
        "title": "Assets > Documentation",
        "section": "Documentation",
        "text": "The following links provide users with downloadable documentation in various formats\nDocumentation in HTML format\nDocumentation in PDF format\nDocumentation"
    },
    {
        "objectID": "assets",
        "href": "assets.html#wheelhouse",
        "title": "Assets > Wheelhouse",
        "section": "Wheelhouse",
        "text": "If you lack an internet connection on your installation machine, you should install PyAnsys Geometry\nby downloading the wheelhouse archive.\nEach wheelhouse archive contains all the Python wheels necessary to install PyAnsys Geometry from scratch on Windows,\nLinux, and MacOS from Python 3.10 to 3.13. You can install this on an isolated system with a fresh Python\ninstallation or on a virtual environment.\nFor example, on Linux with Python 3.10, unzip the wheelhouse archive and install it with:\nIf you are on Windows with Python 3.10, unzip to a wheelhouse directory by running -d wheelhouse\n(this is required for unzipping to a directory on Windows) and install using the preceding command.\nConsider installing using a virtual environment.\nThe following wheelhouse files are available for download:\nWheelhouse\n-d wheelhouse"
    },
    {
        "objectID": "assets",
        "href": "assets.html#linux",
        "title": "Assets > Linux",
        "section": "Linux",
        "text": "Linux wheelhouse for Python 3.10\nLinux wheelhouse for Python 3.11\nLinux wheelhouse for Python 3.12\nLinux wheelhouse for Python 3.13\nLinux"
    },
    {
        "objectID": "assets",
        "href": "assets.html#windows",
        "title": "Assets > Windows",
        "section": "Windows",
        "text": "Windows wheelhouse for Python 3.10\nWindows wheelhouse for Python 3.11\nWindows wheelhouse for Python 3.12\nWindows wheelhouse for Python 3.13\nWindows"
    },
    {
        "objectID": "assets",
        "href": "assets.html#macos",
        "title": "Assets > MacOS",
        "section": "MacOS",
        "text": "MacOS wheelhouse for Python 3.10\nMacOS wheelhouse for Python 3.11\nMacOS wheelhouse for Python 3.12\nMacOS wheelhouse for Python 3.13\nMacOS"
    },
    {
        "objectID": "assets",
        "href": "assets.html#geometry-service-docker-container-assets",
        "title": "Assets > Geometry service Docker container assets",
        "section": "Geometry service Docker container assets",
        "text": "Build the latest Geometry service Docker container using the following assets. For\ninformation on how to build the container, see Docker containers.\nCurrently, the Geometry service backend is mainly delivered as a Windows Docker container.\nHowever, these containers require a Windows machine to run them.\nGeometry service Docker container assets"
    },
    {
        "objectID": "assets",
        "href": "assets.html#windows-container",
        "title": "Assets > Windows container",
        "section": "Windows container",
        "text": "Only users with access to https://github.com/ansys/pyansys-geometry-binaries can download these binaries.\nLatest Geometry service binaries for Windows containers\nLatest Geometry service Dockerfile for Windows containers\nWindows container"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid",
        "href": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid.html#trapezoid",
        "title": "Trapezoid",
        "section": "Trapezoid",
        "text": "Bases: ansys.geometry.core.sketch.face.SketchFace\nProvides for modeling a 2D trapezoid.\nWidth of the lower base of the trapezoid.\nHeight of the slot.\nAngle for trapezoid generation. Represents the angle\non the base of the trapezoid.\nAsymmetrical angles on each side of the trapezoid.\nThe default is None, in which case the trapezoid is symmetrical. If\nprovided, the trapezoid is asymmetrical and the right corner angle\nat the base of the trapezoid is set to the provided value.\nCenter point of the trapezoid.\nPlacement angle for orientation alignment.\nIf an asymmetric base angle is defined, the base angle is\napplied to the left-most angle, and the asymmetric base angle\nis applied to the right-most angle.\nTrapezoid\nTrapezoid\nansys.geometry.core.sketch.face.SketchFace\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\nQuantity\nAngle\nReal\npython:None\npython:None\nNone\nQuantity\nAngle\nReal"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid",
        "href": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid.html#ansys.geometry.core.sketch.trapezoid.Trapezoid",
        "title": "Trapezoid > Trapezoid > Trapezoid",
        "section": "Trapezoid > Trapezoid",
        "text": "class ansys.geometry.core.sketch.trapezoid.Trapezoid(base_width: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, height: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, base_angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real, base_asymmetric_angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real | None = None, center: ansys.geometry.core.math.point.Point2D = ZERO_POINT2D, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0)\n\nBases: ansys.geometry.core.sketch.face.SketchFace\n\nProvides for modeling a 2D trapezoid.\n\nParameters\n\nbase_width\n\nQuantity | Distance | Real\n\nWidth of the lower base of the trapezoid.\n\nheight\n\nQuantity | Distance | Real\n\nHeight of the slot.\n\nbase_angle\n\nQuantity | Distance | Real\n\nAngle for trapezoid generation. Represents the angle\non the base of the trapezoid.\n\nbase_asymmetric_angle\n\nQuantity | Angle | Real | python:None, default: python:None\n\nAsymmetrical angles on each side of the trapezoid.\nThe default is None, in which case the trapezoid is symmetrical. If\nprovided, the trapezoid is asymmetrical and the right corner angle\nat the base of the trapezoid is set to the provided value.\n\ncenter: Point2D, default: ZERO_POINT2D\n\nCenter point of the trapezoid.\n\nangle\n\nQuantity | Angle | Real, default: 0\n\nPlacement angle for orientation alignment.\n\nNotes\n\nIf an asymmetric base angle is defined, the base angle is\napplied to the left-most angle, and the asymmetric base angle\nis applied to the right-most angle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid",
        "href": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid.html#overview",
        "title": "Trapezoid > Overview",
        "section": "Overview",
        "text": "center\nCenter of the trapezoid.\nbase_width\nWidth of the trapezoid.\nheight\nHeight of the trapezoid.\nvisualization_polydata\nVTK polydata representation for PyVista visualization.\nOverview\ncenter\nbase_width\nheight\nvisualization_polydata"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid",
        "href": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid.html#import-detail",
        "title": "Trapezoid > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid",
        "href": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid.html#property-detail",
        "title": "Trapezoid > Property detail",
        "section": "Property detail",
        "text": "Center of the trapezoid.\nWidth of the trapezoid.\nHeight of the trapezoid.\nVTK polydata representation for PyVista visualization.\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\nVTK pyvista.Polydata configuration.\nProperty detail\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid",
        "href": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid.html#Trapezoid.center",
        "title": "Trapezoid > Property detail > center",
        "section": "Property detail > center",
        "text": "property Trapezoid.center: ansys.geometry.core.math.point.Point2D\n\nCenter of the trapezoid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid",
        "href": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid.html#Trapezoid.base_width",
        "title": "Trapezoid > Property detail > base_width",
        "section": "Property detail > base_width",
        "text": "property Trapezoid.base_width: pint.Quantity\n\nWidth of the trapezoid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid",
        "href": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid.html#Trapezoid.height",
        "title": "Trapezoid > Property detail > height",
        "section": "Property detail > height",
        "text": "property Trapezoid.height: pint.Quantity\n\nHeight of the trapezoid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid",
        "href": "api/ansys/geometry/core/sketch/trapezoid/Trapezoid.html#Trapezoid.visualization_polydata",
        "title": "Trapezoid > Property detail > visualization_polydata",
        "section": "Property detail > visualization_polydata",
        "text": "property Trapezoid.visualization_polydata: pyvista.PolyData\n\nVTK polydata representation for PyVista visualization.\n\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\n\nReturns\n\npyvista.PolyData\n\nVTK pyvista.Polydata configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/index",
        "href": "api/ansys/geometry/core/math/matrix/index.html#the-matrixpy-module",
        "title": "The matrix.py module",
        "section": "The matrix.py module",
        "text": "The matrix.py module\nmatrix.py"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/index",
        "href": "api/ansys/geometry/core/math/matrix/index.html#summary",
        "title": "The matrix.py module > Summary",
        "section": "Summary",
        "text": "Matrix\nProvides matrix representation.\nMatrix33\nProvides 3x3 matrix representation.\nMatrix44\nProvides 4x4 matrix representation.\nDEFAULT_MATRIX33\nDefault value of the 3x3 identity matrix for the Matrix33 class.\nDEFAULT_MATRIX44\nDefault value of the 4x4 identity matrix for the Matrix44 class.\nSummary\nMatrix\nMatrix33\nMatrix44\nDEFAULT_MATRIX33\nMatrix33\nDEFAULT_MATRIX44\nMatrix44"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/index",
        "href": "api/ansys/geometry/core/math/matrix/index.html#description",
        "title": "The matrix.py module > Description",
        "section": "Description",
        "text": "Provides matrix primitive representations.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/index",
        "href": "api/ansys/geometry/core/math/matrix/index.html#module-detail",
        "title": "The matrix.py module > Module detail",
        "section": "Module detail",
        "text": "Default value of the 3x3 identity matrix for the Matrix33 class.\nDefault value of the 4x4 identity matrix for the Matrix44 class.\nModule detail\nMatrix33\nMatrix44"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/index",
        "href": "api/ansys/geometry/core/math/matrix/index.html#matrix.DEFAULT_MATRIX33",
        "title": "The matrix.py module > Module detail > DEFAULT_MATRIX33",
        "section": "Module detail > DEFAULT_MATRIX33",
        "text": "matrix.DEFAULT_MATRIX33\n\nDefault value of the 3x3 identity matrix for the Matrix33 class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/index",
        "href": "api/ansys/geometry/core/math/matrix/index.html#matrix.DEFAULT_MATRIX44",
        "title": "The matrix.py module > Module detail > DEFAULT_MATRIX44",
        "section": "Module detail > DEFAULT_MATRIX44",
        "text": "matrix.DEFAULT_MATRIX44\n\nDefault value of the 4x4 identity matrix for the Matrix44 class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/triangle/index",
        "href": "api/ansys/geometry/core/sketch/triangle/index.html#the-trianglepy-module",
        "title": "The triangle.py module",
        "section": "The triangle.py module",
        "text": "The triangle.py module\ntriangle.py"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/triangle/index",
        "href": "api/ansys/geometry/core/sketch/triangle/index.html#summary",
        "title": "The triangle.py module > Summary",
        "section": "Summary",
        "text": "Triangle\nProvides for modeling 2D triangles.\nSummary\nTriangle"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/triangle/index",
        "href": "api/ansys/geometry/core/sketch/triangle/index.html#description",
        "title": "The triangle.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a triangle.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage",
        "href": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage.html#repairtoolmessage",
        "title": "RepairToolMessage",
        "section": "RepairToolMessage",
        "text": "Provides return message for the repair tool methods.\nRepairToolMessage\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage",
        "href": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage.html#ansys.geometry.core.tools.repair_tool_message.RepairToolMessage",
        "title": "RepairToolMessage > RepairToolMessage > RepairToolMessage",
        "section": "RepairToolMessage > RepairToolMessage",
        "text": "class ansys.geometry.core.tools.repair_tool_message.RepairToolMessage(success: bool, created_bodies: list[str], modified_bodies: list[str], found: int = -1, repaired: int = -1)\n\nProvides return message for the repair tool methods.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage",
        "href": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage.html#overview",
        "title": "RepairToolMessage > Overview",
        "section": "Overview",
        "text": "success\nThe success of the repair operation.\ncreated_bodies\nThe list of the created bodies after the repair operation.\nmodified_bodies\nThe list of the modified bodies after the repair operation.\nfound\nNumber of problem areas found for the repair operation.\nrepaired\nNumber of problem areas repaired during the repair operation.\nOverview\nsuccess\ncreated_bodies\nmodified_bodies\nfound\nrepaired"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage",
        "href": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage.html#import-detail",
        "title": "RepairToolMessage > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage",
        "href": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage.html#property-detail",
        "title": "RepairToolMessage > Property detail",
        "section": "Property detail",
        "text": "The success of the repair operation.\nThe list of the created bodies after the repair operation.\nThe list of the modified bodies after the repair operation.\nNumber of problem areas found for the repair operation.\nNumber of problem areas repaired during the repair operation.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage",
        "href": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage.html#RepairToolMessage.success",
        "title": "RepairToolMessage > Property detail > success",
        "section": "Property detail > success",
        "text": "property RepairToolMessage.success: bool\n\nThe success of the repair operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage",
        "href": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage.html#RepairToolMessage.created_bodies",
        "title": "RepairToolMessage > Property detail > created_bodies",
        "section": "Property detail > created_bodies",
        "text": "property RepairToolMessage.created_bodies: list[str]\n\nThe list of the created bodies after the repair operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage",
        "href": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage.html#RepairToolMessage.modified_bodies",
        "title": "RepairToolMessage > Property detail > modified_bodies",
        "section": "Property detail > modified_bodies",
        "text": "property RepairToolMessage.modified_bodies: list[str]\n\nThe list of the modified bodies after the repair operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage",
        "href": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage.html#RepairToolMessage.found",
        "title": "RepairToolMessage > Property detail > found",
        "section": "Property detail > found",
        "text": "property RepairToolMessage.found: int\n\nNumber of problem areas found for the repair operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage",
        "href": "api/ansys/geometry/core/tools/repair_tool_message/RepairToolMessage.html#RepairToolMessage.repaired",
        "title": "RepairToolMessage > Property detail > repaired",
        "section": "Property detail > repaired",
        "text": "property RepairToolMessage.repaired: int\n\nNumber of problem areas repaired during the repair operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/03_modeling/revolving",
        "href": "examples/03_modeling/revolving.html#modeling-revolving-a-sketch",
        "title": "Examples > Modeling: Revolving a sketch",
        "section": "Modeling: Revolving a sketch",
        "text": "This example shows how to use the revolve_sketch() method to revolve a sketch around an axis to create a 3D body. You can also specify the angle of revolution to create a partial body.\nModeling: Revolving a sketch\nrevolve_sketch()"
    },
    {
        "objectID": "examples/03_modeling/revolving",
        "href": "examples/03_modeling/revolving.html#initialize-the-modeler",
        "title": "Examples > Modeling: Revolving a sketch > Initialize the modeler",
        "section": "Initialize the modeler",
        "text": "Initialize the modeler"
    },
    {
        "objectID": "examples/03_modeling/revolving",
        "href": "examples/03_modeling/revolving.html#example-creating-a-quarter-of-a-donut",
        "title": "Examples > Modeling: Revolving a sketch > Example: Creating a quarter of a donut",
        "section": "Example: Creating a quarter of a donut",
        "text": "The following code snippets show how to use the revolve_sketch() function to create a quarter of a 3D donut. The process involves defining a quarter of a circle as a profile and then revolving it around the Z-axis to create a 3D body.\nExample: Creating a quarter of a donut\nrevolve_sketch()"
    },
    {
        "objectID": "examples/03_modeling/revolving",
        "href": "examples/03_modeling/revolving.html#initialize-the-sketch-design",
        "title": "Examples > Modeling: Revolving a sketch > Initialize the sketch design",
        "section": "Initialize the sketch design",
        "text": "Create a design sketch named quarter-donut.\nInitialize the sketch design\nquarter-donut"
    },
    {
        "objectID": "examples/03_modeling/revolving",
        "href": "examples/03_modeling/revolving.html#define-circle-parameters",
        "title": "Examples > Modeling: Revolving a sketch > Define circle parameters",
        "section": "Define circle parameters",
        "text": "Set path_radius, which represents the radius of the circular path that the profile circle sweeps along, to 5 units. Set profile_radius, which represents the radius of the profile circle that sweeps along the path to create the donut body, to 2 units.\nDefine circle parameters\npath_radius\n5\nprofile_radius\n2"
    },
    {
        "objectID": "examples/03_modeling/revolving",
        "href": "examples/03_modeling/revolving.html#create-the-profile-circle",
        "title": "Examples > Modeling: Revolving a sketch > Create the profile circle",
        "section": "Create the profile circle",
        "text": "Create a circle on the XZ plane centered at the coordinates (5, 0, 0) and useprofile_radius to define the radius. This circle serves as the profile or cross-sectional shape of the donut.\nCreate the profile circle\n(5, 0, 0)\nprofile_radius"
    },
    {
        "objectID": "examples/03_modeling/revolving",
        "href": "examples/03_modeling/revolving.html#perform-the-revolve-operation",
        "title": "Examples > Modeling: Revolving a sketch > Perform the revolve operation",
        "section": "Perform the revolve operation",
        "text": "Revolve the profile circle around the Z axis to create a quarter of a donut body. Set the angle of revolution to 90 degrees in the default direction, which is counterclockwise.\nPerform the revolve operation"
    },
    {
        "objectID": "examples/03_modeling/revolving",
        "href": "examples/03_modeling/revolving.html#perform-a-revolve-operation-with-a-negative-angle-of-revolution",
        "title": "Examples > Modeling: Revolving a sketch > Perform a revolve operation with a negative angle of revolution",
        "section": "Perform a revolve operation with a negative angle of revolution",
        "text": "You can use a negative angle of revolution to create a quarter of a donut in the opposite direction. The following code snippet shows how to create a quarter of a donut in the clockwise direction. The same profile circle is used, but the angle of revolution is set to -90 degrees.\nPerform a revolve operation with a negative angle of revolution"
    },
    {
        "objectID": "examples/03_modeling/revolving",
        "href": "examples/03_modeling/revolving.html#close-the-modeler",
        "title": "Examples > Modeling: Revolving a sketch > Close the modeler",
        "section": "Close the modeler",
        "text": "Close the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#trimmedcurve",
        "title": "TrimmedCurve",
        "section": "TrimmedCurve",
        "text": "Represents a trimmed curve.\nA trimmed curve is a curve that has a boundary. This boundary comes in the form of an interval.\nUnderlying mathematical representation of the curve.\nStart point of the curve.\nEnd point of the curve.\nParametric interval that bounds the curve.\nLength of the curve.\ngRPC client that is required for advanced functions such as intersect_curve().\nTrimmedCurve\nTrimmedCurve\nCurve\nPoint3D\nPoint3D\nInterval\nQuantity\nGrpcClient\npython:None\nintersect_curve()"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#ansys.geometry.core.shapes.curves.trimmed_curve.TrimmedCurve",
        "title": "TrimmedCurve > TrimmedCurve > TrimmedCurve",
        "section": "TrimmedCurve > TrimmedCurve",
        "text": "class ansys.geometry.core.shapes.curves.trimmed_curve.TrimmedCurve(geometry: ansys.geometry.core.shapes.curves.curve.Curve, start: ansys.geometry.core.math.point.Point3D, end: ansys.geometry.core.math.point.Point3D, interval: ansys.geometry.core.shapes.parameterization.Interval, length: pint.Quantity, grpc_client: ansys.geometry.core.connection.client.GrpcClient = None)\n\nRepresents a trimmed curve.\n\nA trimmed curve is a curve that has a boundary. This boundary comes in the form of an interval.\n\nParameters\n\ngeometry\n\nCurve\n\nUnderlying mathematical representation of the curve.\n\nstart\n\nPoint3D\n\nStart point of the curve.\n\nend\n\nPoint3D\n\nEnd point of the curve.\n\ninterval\n\nInterval\n\nParametric interval that bounds the curve.\n\nlength\n\nQuantity\n\nLength of the curve.\n\ngrpc_client\n\nGrpcClient, default: python:None\n\ngRPC client that is required for advanced functions such as intersect_curve().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#overview",
        "title": "TrimmedCurve > Overview",
        "section": "Overview",
        "text": "evaluate_proportion\nEvaluate the curve at a proportional value.\nintersect_curve\nGet the intersect points of this trimmed curve with another one.\ngeometry\nUnderlying mathematical curve.\nstart\nStart point of the curve.\nend\nEnd point of the curve.\nlength\nCalculated length of the edge.\ninterval\nInterval of the curve that provides its boundary.\n__repr__\nRepresent the trimmed curve as a string.\nOverview\nevaluate_proportion\nintersect_curve\ngeometry\nstart\nend\nlength\ninterval\n__repr__"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#import-detail",
        "title": "TrimmedCurve > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#property-detail",
        "title": "TrimmedCurve > Property detail",
        "section": "Property detail",
        "text": "Underlying mathematical curve.\nStart point of the curve.\nEnd point of the curve.\nCalculated length of the edge.\nInterval of the curve that provides its boundary.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#TrimmedCurve.geometry",
        "title": "TrimmedCurve > Property detail > geometry",
        "section": "Property detail > geometry",
        "text": "property TrimmedCurve.geometry: ansys.geometry.core.shapes.curves.curve.Curve\n\nUnderlying mathematical curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#TrimmedCurve.start",
        "title": "TrimmedCurve > Property detail > start",
        "section": "Property detail > start",
        "text": "property TrimmedCurve.start: ansys.geometry.core.math.point.Point3D\n\nStart point of the curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#TrimmedCurve.end",
        "title": "TrimmedCurve > Property detail > end",
        "section": "Property detail > end",
        "text": "property TrimmedCurve.end: ansys.geometry.core.math.point.Point3D\n\nEnd point of the curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#TrimmedCurve.length",
        "title": "TrimmedCurve > Property detail > length",
        "section": "Property detail > length",
        "text": "property TrimmedCurve.length: pint.Quantity\n\nCalculated length of the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#TrimmedCurve.interval",
        "title": "TrimmedCurve > Property detail > interval",
        "section": "Property detail > interval",
        "text": "property TrimmedCurve.interval: ansys.geometry.core.shapes.parameterization.Interval\n\nInterval of the curve that provides its boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#method-detail",
        "title": "TrimmedCurve > Method detail",
        "section": "Method detail",
        "text": "Evaluate the curve at a proportional value.\nA parameter of 0 corresponds to the start of the curve, while a parameter of 1\ncorresponds to the end of the curve.\nParameter in the proportional range [0,1].\nResulting curve evaluation.\nGet the intersect points of this trimmed curve with another one.\nIf the two trimmed curves do not intersect, an empty list is returned.\nTrimmed curve to intersect with.\nAll points of intersection between the curves.\nRepresent the trimmed curve as a string.\nMethod detail\n0\n1\nReal\nCurveEvaluation\nTrimmedCurve\npython:list\nPoint3D"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#TrimmedCurve.evaluate_proportion",
        "title": "TrimmedCurve > Method detail > evaluate_proportion",
        "section": "Method detail > evaluate_proportion",
        "text": "TrimmedCurve.evaluate_proportion(param: ansys.geometry.core.typing.Real) -> ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\n\nEvaluate the curve at a proportional value.\n\nA parameter of 0 corresponds to the start of the curve, while a parameter of 1\ncorresponds to the end of the curve.\n\nParameters\n\nparam\n\nReal\n\nParameter in the proportional range [0,1].\n\nReturns\n\nCurveEvaluation\n\nResulting curve evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#TrimmedCurve.intersect_curve",
        "title": "TrimmedCurve > Method detail > intersect_curve",
        "section": "Method detail > intersect_curve",
        "text": "TrimmedCurve.intersect_curve(other: TrimmedCurve) -> list[ansys.geometry.core.math.point.Point3D]\n\nGet the intersect points of this trimmed curve with another one.\n\nIf the two trimmed curves do not intersect, an empty list is returned.\n\nParameters\n\nother\n\nTrimmedCurve\n\nTrimmed curve to intersect with.\n\nReturns\n\npython:list[Point3D]\n\nAll points of intersection between the curves.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/TrimmedCurve.html#TrimmedCurve.__repr__",
        "title": "TrimmedCurve > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "TrimmedCurve.__repr__() -> str\n\nRepresent the trimmed curve as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#circle",
        "title": "Circle",
        "section": "Circle",
        "text": "Bases: ansys.geometry.core.shapes.curves.curve.Curve\nProvides 3D circle representation.\nOrigin of the circle.\nRadius of the circle.\nX-axis direction.\nZ-axis direction.\nCircle\nCircle\nansys.geometry.core.shapes.curves.curve.Curve\nndarray\nRealSequence\nPoint3D\nQuantity\nDistance\nReal\nndarray\nRealSequence\nUnitVector3D\nVector3D\nndarray\nRealSequence\nUnitVector3D\nVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#ansys.geometry.core.shapes.curves.circle.Circle",
        "title": "Circle > Circle > Circle",
        "section": "Circle > Circle",
        "text": "class ansys.geometry.core.shapes.curves.circle.Circle(origin: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D, radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, reference: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_X, axis: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_Z)\n\nBases: ansys.geometry.core.shapes.curves.curve.Curve\n\nProvides 3D circle representation.\n\nParameters\n\norigin\n\nndarray | RealSequence | Point3D\n\nOrigin of the circle.\n\nradius\n\nQuantity | Distance | Real\n\nRadius of the circle.\n\nreference\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nX-axis direction.\n\naxis\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nZ-axis direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#overview",
        "title": "Circle > Overview",
        "section": "Overview",
        "text": "contains_param\nCheck a parameter is within the parametric range of the curve.\ncontains_point\nCheck a point is contained by the curve.\nevaluate\nEvaluate the circle at a given parameter.\ntransformed_copy\nCreate a transformed copy of the circle from a transformation matrix.\nmirrored_copy\nCreate a mirrored copy of the circle along the y-axis.\nproject_point\nProject a point onto the circle and evauate the circle.\nis_coincident_circle\nDetermine if the circle is coincident with another.\nparameterization\nGet the parametrization of the circle.\norigin\nOrigin of the circle.\nradius\nRadius of the circle.\ndiameter\nDiameter of the circle.\nperimeter\nPerimeter of the circle.\narea\nArea of the circle.\ndir_x\nX-direction of the circle.\ndir_y\nY-direction of the circle.\ndir_z\nZ-direction of the circle.\n__eq__\nEquals operator for the Circle class.\nOverview\ncontains_param\ncontains_point\nevaluate\ntransformed_copy\nmirrored_copy\nproject_point\nis_coincident_circle\nparameterization\norigin\nradius\ndiameter\nperimeter\narea\ndir_x\ndir_y\ndir_z\n__eq__\nCircle"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#import-detail",
        "title": "Circle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#property-detail",
        "title": "Circle > Property detail",
        "section": "Property detail",
        "text": "Origin of the circle.\nRadius of the circle.\nDiameter of the circle.\nPerimeter of the circle.\nArea of the circle.\nX-direction of the circle.\nY-direction of the circle.\nZ-direction of the circle.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.origin",
        "title": "Circle > Property detail > origin",
        "section": "Property detail > origin",
        "text": "property Circle.origin: ansys.geometry.core.math.point.Point3D\n\nOrigin of the circle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.radius",
        "title": "Circle > Property detail > radius",
        "section": "Property detail > radius",
        "text": "property Circle.radius: pint.Quantity\n\nRadius of the circle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.diameter",
        "title": "Circle > Property detail > diameter",
        "section": "Property detail > diameter",
        "text": "property Circle.diameter: pint.Quantity\n\nDiameter of the circle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.perimeter",
        "title": "Circle > Property detail > perimeter",
        "section": "Property detail > perimeter",
        "text": "property Circle.perimeter: pint.Quantity\n\nPerimeter of the circle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.area",
        "title": "Circle > Property detail > area",
        "section": "Property detail > area",
        "text": "property Circle.area: pint.Quantity\n\nArea of the circle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.dir_x",
        "title": "Circle > Property detail > dir_x",
        "section": "Property detail > dir_x",
        "text": "property Circle.dir_x: ansys.geometry.core.math.vector.UnitVector3D\n\nX-direction of the circle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.dir_y",
        "title": "Circle > Property detail > dir_y",
        "section": "Property detail > dir_y",
        "text": "property Circle.dir_y: ansys.geometry.core.math.vector.UnitVector3D\n\nY-direction of the circle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.dir_z",
        "title": "Circle > Property detail > dir_z",
        "section": "Property detail > dir_z",
        "text": "property Circle.dir_z: ansys.geometry.core.math.vector.UnitVector3D\n\nZ-direction of the circle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#method-detail",
        "title": "Circle > Method detail",
        "section": "Method detail",
        "text": "Equals operator for the Circle class.\nEvaluate the circle at a given parameter.\nParameter to evaluate the circle at.\nResulting evaluation.\nCreate a transformed copy of the circle from a transformation matrix.\n4x4 transformation matrix to apply to the circle.\nNew circle that is the transformed copy of the original circle.\nCreate a mirrored copy of the circle along the y-axis.\nA new circle that is a mirrored copy of the original circle.\nProject a point onto the circle and evauate the circle.\nPoint to project onto the circle.\nResulting evaluation.\nDetermine if the circle is coincident with another.\nCircle to determine coincidence with.\nTrue if this circle is coincident with the other, False otherwise.\nGet the parametrization of the circle.\nThe parameter of a circle specifies the clockwise angle around the axis\n(right-hand corkscrew law), with a zero parameter at dir_x and a\nperiod of 2*pi.\nInformation about how the circle is parameterized.\nCheck a parameter is within the parametric range of the curve.\nCheck a point is contained by the curve.\nThe point can either lie within the curve or on its boundary.\nMethod detail\nCircle\nReal\nCircleEvaluation\nMatrix44\nCircle\nCircle\nPoint3D\nCircleEvaluation\nCircle\nTrue\nFalse\ndir_x\nParameterization"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.__eq__",
        "title": "Circle > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Circle.__eq__(other: Circle) -> bool\n\nEquals operator for the Circle class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.evaluate",
        "title": "Circle > Method detail > evaluate",
        "section": "Method detail > evaluate",
        "text": "Circle.evaluate(parameter: ansys.geometry.core.typing.Real) -> CircleEvaluation\n\nEvaluate the circle at a given parameter.\n\nParameters\n\nparameter\n\nReal\n\nParameter to evaluate the circle at.\n\nReturns\n\nCircleEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.transformed_copy",
        "title": "Circle > Method detail > transformed_copy",
        "section": "Method detail > transformed_copy",
        "text": "Circle.transformed_copy(matrix: ansys.geometry.core.math.matrix.Matrix44) -> Circle\n\nCreate a transformed copy of the circle from a transformation matrix.\n\nParameters\n\nmatrix\n\nMatrix44\n\n4x4 transformation matrix to apply to the circle.\n\nReturns\n\nCircle\n\nNew circle that is the transformed copy of the original circle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.mirrored_copy",
        "title": "Circle > Method detail > mirrored_copy",
        "section": "Method detail > mirrored_copy",
        "text": "Circle.mirrored_copy() -> Circle\n\nCreate a mirrored copy of the circle along the y-axis.\n\nReturns\n\nCircle\n\nA new circle that is a mirrored copy of the original circle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.project_point",
        "title": "Circle > Method detail > project_point",
        "section": "Method detail > project_point",
        "text": "Circle.project_point(point: ansys.geometry.core.math.point.Point3D) -> CircleEvaluation\n\nProject a point onto the circle and evauate the circle.\n\nParameters\n\npoint\n\nPoint3D\n\nPoint to project onto the circle.\n\nReturns\n\nCircleEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.is_coincident_circle",
        "title": "Circle > Method detail > is_coincident_circle",
        "section": "Method detail > is_coincident_circle",
        "text": "Circle.is_coincident_circle(other: Circle) -> bool\n\nDetermine if the circle is coincident with another.\n\nParameters\n\nother\n\nCircle\n\nCircle to determine coincidence with.\n\nReturns\n\nbool\n\nTrue if this circle is coincident with the other, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.parameterization",
        "title": "Circle > Method detail > parameterization",
        "section": "Method detail > parameterization",
        "text": "Circle.parameterization() -> ansys.geometry.core.shapes.parameterization.Parameterization\n\nGet the parametrization of the circle.\n\nThe parameter of a circle specifies the clockwise angle around the axis\n(right-hand corkscrew law), with a zero parameter at dir_x and a\nperiod of 2*pi.\n\nReturns\n\nParameterization\n\nInformation about how the circle is parameterized.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.contains_param",
        "title": "Circle > Method detail > contains_param",
        "section": "Method detail > contains_param",
        "text": "abstractmethod Circle.contains_param(param: ansys.geometry.core.typing.Real) -> bool\n\nCheck a parameter is within the parametric range of the curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/Circle",
        "href": "api/ansys/geometry/core/shapes/curves/circle/Circle.html#Circle.contains_point",
        "title": "Circle > Method detail > contains_point",
        "section": "Method detail > contains_point",
        "text": "abstractmethod Circle.contains_point(point: ansys.geometry.core.math.point.Point3D) -> bool\n\nCheck a point is contained by the curve.\n\nThe point can either lie within the curve or on its boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#pyansys-geometry-101-plotter",
        "title": "Examples > PyAnsys Geometry 101: Plotter",
        "section": "PyAnsys Geometry 101: Plotter",
        "text": "This example provides an overview of PyAnsys Geometry’s plotting capabilities, focusing on its plotter features. After reviewing the fundamental concepts of sketching and modeling in PyAnsys Geometry, it shows how to leverage these key plotting capabilities:\nMulti-object plotting: You can conveniently plot a list of elements, including objects created in both PyAnsys Geometry and PyVista libraries.\nInteractive object selection: You can interactively select PyAnsys Geometry objects within the scene. This enables efficient manipulation of these objects in subsequent scripting.\nPyAnsys Geometry 101: Plotter"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#perform-required-imports",
        "title": "Examples > PyAnsys Geometry 101: Plotter > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#launch-modeling-service",
        "title": "Examples > PyAnsys Geometry 101: Plotter > Launch modeling service",
        "section": "Launch modeling service",
        "text": "Launch a modeling service session.\nYou can also launch your own services and connect to them. For information on connecting to an existing service, see the Modeler API documentation.\nLaunch modeling service"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#instantiate-design-and-initialize-object-list",
        "title": "Examples > PyAnsys Geometry 101: Plotter > Instantiate design and initialize object list",
        "section": "Instantiate design and initialize object list",
        "text": "Instantiate a new design to work on and initialize a list of objects for plotting.\nYou are now ready to create some objects and use the plotter capabilities.\nInstantiate design and initialize object list"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#create-a-pyansys-geometry-body-cylinder",
        "title": "Examples > PyAnsys Geometry 101: Plotter > Create a PyAnsys Geometry body cylinder",
        "section": "Create a PyAnsys Geometry body cylinder",
        "text": "Use PyAnsys Geometry to create a body cylinder.\nCreate a PyAnsys Geometry body cylinder"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#create-a-pyansys-geometry-arc-sketch",
        "title": "Examples > PyAnsys Geometry 101: Plotter > Create a PyAnsys Geometry arc sketch",
        "section": "Create a PyAnsys Geometry arc sketch",
        "text": "Use PyAnsys Geometry to create an arc sketch.\nCreate a PyAnsys Geometry arc sketch"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#create-a-pyvista-cylinder",
        "title": "Examples > PyAnsys Geometry 101: Plotter > Create a PyVista cylinder",
        "section": "Create a PyVista cylinder",
        "text": "Use PyVista to create a cylinder.\nCreate a PyVista cylinder"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#create-a-pyvista-multiblock",
        "title": "Examples > PyAnsys Geometry 101: Plotter > Create a PyVista multiblock",
        "section": "Create a PyVista multiblock",
        "text": "Use PyVista to create a multiblock with a sphere and a cube.\nCreate a PyVista multiblock"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#create-a-pyansys-geometry-body-box",
        "title": "Examples > PyAnsys Geometry 101: Plotter > Create a PyAnsys Geometry body box",
        "section": "Create a PyAnsys Geometry body box",
        "text": "Use PyAnsys Geometry to create a body box that is a cube.\nCreate a PyAnsys Geometry body box"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#plot-objects",
        "title": "Examples > PyAnsys Geometry 101: Plotter > Plot objects",
        "section": "Plot objects",
        "text": "When plotting the created objects, you have several options.\nYou can simply plot one of the created objects.\nYou can plot the whole list of objects.\nThe Python visualizer is used by default. However, you can also use trame for visualization.\nPlot objects"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#clip-objects",
        "title": "Examples > PyAnsys Geometry 101: Plotter > Clip objects",
        "section": "Clip objects",
        "text": "You can clip any object represented in the plotter by defining a Plane object that intersects the target object.\nClip objects\nPlane"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#select-objects-interactively",
        "title": "Examples > PyAnsys Geometry 101: Plotter > Select objects interactively",
        "section": "Select objects interactively",
        "text": "PyAnsys Geometry’s plotter supports interactive object selection within the scene. This enables you to pick objects for subsequent script manipulation.\nIt is also possible to enable picking directly for a specific design or component object alone. In the following cell, picking is enabled for the design object.\nSelect objects interactively\ndesign\ncomponent\ndesign"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#render-in-different-colors",
        "title": "Examples > PyAnsys Geometry 101: Plotter > Render in different colors",
        "section": "Render in different colors",
        "text": "You can render the objects in different colors automatically using PyVista’s default color cycler. In order to do this, activate the multi_colors=True option when calling the plot() method.\nIn the following cell you can create a new design and plot a prism and a cylinder in different colors.\nRender in different colors\nmulti_colors=True\nplot()"
    },
    {
        "objectID": "examples/01_getting_started/05_plotter_picker",
        "href": "examples/01_getting_started/05_plotter_picker.html#close-session",
        "title": "Examples > PyAnsys Geometry 101: Plotter > Close session",
        "section": "Close session",
        "text": "When you finish interacting with your modeling service, you should close the active server session. This frees resources wherever the service is running.\nClose the server session.\nClose session"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#line",
        "title": "Line",
        "section": "Line",
        "text": "Bases: ansys.geometry.core.shapes.curves.curve.Curve\nProvides 3D line representation.\nOrigin of the line.\nDirection of the line.\nLine\nLine\nansys.geometry.core.shapes.curves.curve.Curve\nndarray\nRealSequence\nPoint3D\nndarray\nRealSequence\nUnitVector3D\nVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#ansys.geometry.core.shapes.curves.line.Line",
        "title": "Line > Line > Line",
        "section": "Line > Line",
        "text": "class ansys.geometry.core.shapes.curves.line.Line(origin: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D, direction: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D)\n\nBases: ansys.geometry.core.shapes.curves.curve.Curve\n\nProvides 3D line representation.\n\nParameters\n\norigin\n\nndarray | RealSequence | Point3D\n\nOrigin of the line.\n\ndirection\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nDirection of the line.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#overview",
        "title": "Line > Overview",
        "section": "Overview",
        "text": "contains_param\nCheck a parameter is within the parametric range of the curve.\ncontains_point\nCheck a point is contained by the curve.\nevaluate\nEvaluate the line at a given parameter.\ntransformed_copy\nCreate a transformed copy of the line from a transformation matrix.\nproject_point\nProject a point onto the line and evaluate the line.\nis_coincident_line\nDetermine if the line is coincident with another line.\nis_opposite_line\nDetermine if the line is opposite another line.\nparameterization\nGet the parametrization of the line.\norigin\nOrigin of the line.\ndirection\nDirection of the line.\n__eq__\nEquals operator for the Line class.\nOverview\ncontains_param\ncontains_point\nevaluate\ntransformed_copy\nproject_point\nis_coincident_line\nis_opposite_line\nparameterization\norigin\ndirection\n__eq__\nLine"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#import-detail",
        "title": "Line > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#property-detail",
        "title": "Line > Property detail",
        "section": "Property detail",
        "text": "Origin of the line.\nDirection of the line.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#Line.origin",
        "title": "Line > Property detail > origin",
        "section": "Property detail > origin",
        "text": "property Line.origin: ansys.geometry.core.math.point.Point3D\n\nOrigin of the line.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#Line.direction",
        "title": "Line > Property detail > direction",
        "section": "Property detail > direction",
        "text": "property Line.direction: ansys.geometry.core.math.vector.UnitVector3D\n\nDirection of the line.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#method-detail",
        "title": "Line > Method detail",
        "section": "Method detail",
        "text": "Equals operator for the Line class.\nEvaluate the line at a given parameter.\nParameter to evaluate the line at.\nResulting evaluation.\nCreate a transformed copy of the line from a transformation matrix.\n4X4 transformation matrix to apply to the line.\nNew line that is the transformed copy of the original line.\nProject a point onto the line and evaluate the line.\nPoint to project onto the line.\nResulting evaluation.\nDetermine if the line is coincident with another line.\nLine to determine coincidence with.\nTrue if the line is coincident with another line, False otherwise.\nDetermine if the line is opposite another line.\nLine to determine opposition with.\nTrue if the line is opposite to another line.\nGet the parametrization of the line.\nThe parameter of a line specifies the distance from the origin in the\ndirection of direction.\nInformation about how the line is parameterized.\nCheck a parameter is within the parametric range of the curve.\nCheck a point is contained by the curve.\nThe point can either lie within the curve or on its boundary.\nMethod detail\nLine\nReal\nLineEvaluation\nMatrix44\nLine\nPoint3D\nLineEvaluation\nLine\nTrue\nFalse\nLine\nTrue\nParameterization"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#Line.__eq__",
        "title": "Line > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Line.__eq__(other: object) -> bool\n\nEquals operator for the Line class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#Line.evaluate",
        "title": "Line > Method detail > evaluate",
        "section": "Method detail > evaluate",
        "text": "Line.evaluate(parameter: float) -> LineEvaluation\n\nEvaluate the line at a given parameter.\n\nParameters\n\nparameter\n\nReal\n\nParameter to evaluate the line at.\n\nReturns\n\nLineEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#Line.transformed_copy",
        "title": "Line > Method detail > transformed_copy",
        "section": "Method detail > transformed_copy",
        "text": "Line.transformed_copy(matrix: ansys.geometry.core.math.matrix.Matrix44) -> Line\n\nCreate a transformed copy of the line from a transformation matrix.\n\nParameters\n\nmatrix\n\nMatrix44\n\n4X4 transformation matrix to apply to the line.\n\nReturns\n\nLine\n\nNew line that is the transformed copy of the original line.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#Line.project_point",
        "title": "Line > Method detail > project_point",
        "section": "Method detail > project_point",
        "text": "Line.project_point(point: ansys.geometry.core.math.point.Point3D) -> LineEvaluation\n\nProject a point onto the line and evaluate the line.\n\nParameters\n\npoint\n\nPoint3D\n\nPoint to project onto the line.\n\nReturns\n\nLineEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#Line.is_coincident_line",
        "title": "Line > Method detail > is_coincident_line",
        "section": "Method detail > is_coincident_line",
        "text": "Line.is_coincident_line(other: Line) -> bool\n\nDetermine if the line is coincident with another line.\n\nParameters\n\nother\n\nLine\n\nLine to determine coincidence with.\n\nReturns\n\nbool\n\nTrue if the line is coincident with another line, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#Line.is_opposite_line",
        "title": "Line > Method detail > is_opposite_line",
        "section": "Method detail > is_opposite_line",
        "text": "Line.is_opposite_line(other: Line) -> bool\n\nDetermine if the line is opposite another line.\n\nParameters\n\nother\n\nLine\n\nLine to determine opposition with.\n\nReturns\n\nbool\n\nTrue if the line is opposite to another line.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#Line.parameterization",
        "title": "Line > Method detail > parameterization",
        "section": "Method detail > parameterization",
        "text": "Line.parameterization() -> ansys.geometry.core.shapes.parameterization.Parameterization\n\nGet the parametrization of the line.\n\nThe parameter of a line specifies the distance from the origin in the\ndirection of direction.\n\nReturns\n\nParameterization\n\nInformation about how the line is parameterized.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#Line.contains_param",
        "title": "Line > Method detail > contains_param",
        "section": "Method detail > contains_param",
        "text": "abstractmethod Line.contains_param(param: ansys.geometry.core.typing.Real) -> bool\n\nCheck a parameter is within the parametric range of the curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/Line",
        "href": "api/ansys/geometry/core/shapes/curves/line/Line.html#Line.contains_point",
        "title": "Line > Method detail > contains_point",
        "section": "Method detail > contains_point",
        "text": "abstractmethod Line.contains_point(point: ansys.geometry.core.math.point.Point3D) -> bool\n\nCheck a point is contained by the curve.\n\nThe point can either lie within the curve or on its boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas.html#missingfaceproblemareas",
        "title": "MissingFaceProblemAreas",
        "section": "MissingFaceProblemAreas",
        "text": "Bases: ProblemArea\nProvides missing face problem area definition.\nServer-defined ID for the problem area.\nActive supporting geometry service instance for design modeling.\nList of edges associated with the design.\nMissingFaceProblemAreas\nMissingFaceProblemAreas\nProblemArea\npython:str\nGrpcClient\npython:list\nEdge"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas.html#ansys.geometry.core.tools.problem_areas.MissingFaceProblemAreas",
        "title": "MissingFaceProblemAreas > MissingFaceProblemAreas > MissingFaceProblemAreas",
        "section": "MissingFaceProblemAreas > MissingFaceProblemAreas",
        "text": "class ansys.geometry.core.tools.problem_areas.MissingFaceProblemAreas(id: str, grpc_client: ansys.geometry.core.connection.GrpcClient, edges: list[ansys.geometry.core.designer.edge.Edge])\n\nBases: ProblemArea\n\nProvides missing face problem area definition.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the problem area.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting geometry service instance for design modeling.\n\nedges\n\npython:list[Edge]\n\nList of edges associated with the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas.html#overview",
        "title": "MissingFaceProblemAreas > Overview",
        "section": "Overview",
        "text": "fix\nFix the problem area.\nedges\nThe list of edges connected to this problem area.\nOverview\nfix\nedges"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas.html#import-detail",
        "title": "MissingFaceProblemAreas > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas.html#property-detail",
        "title": "MissingFaceProblemAreas > Property detail",
        "section": "Property detail",
        "text": "The list of edges connected to this problem area.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas.html#MissingFaceProblemAreas.edges",
        "title": "MissingFaceProblemAreas > Property detail > edges",
        "section": "Property detail > edges",
        "text": "property MissingFaceProblemAreas.edges: list[ansys.geometry.core.designer.edge.Edge]\n\nThe list of edges connected to this problem area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas.html#method-detail",
        "title": "MissingFaceProblemAreas > Method detail",
        "section": "Method detail",
        "text": "Fix the problem area.\nMessage containing created and/or modified bodies.\nMethod detail\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/MissingFaceProblemAreas.html#MissingFaceProblemAreas.fix",
        "title": "MissingFaceProblemAreas > Method detail > fix",
        "section": "Method detail > fix",
        "text": "MissingFaceProblemAreas.fix() -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFix the problem area.\n\nReturns\n\nmessage: RepairToolMessage\n\nMessage containing created and/or modified bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/02_sketching/dynamic_sketch_plane",
        "href": "examples/02_sketching/dynamic_sketch_plane.html#sketching-dynamic-sketch-plane",
        "title": "Examples > Sketching: Dynamic sketch plane",
        "section": "Sketching: Dynamic sketch plane",
        "text": "The sketch is a lightweight, two-dimensional modeler driven primarily by client-side execution.\nAt any point, the current state of a sketch can be used for operations such as extruding a body, projecting a profile, or imprinting curves.\nThe sketch is designed as an effective functional-style API with all operations receiving 2D configurations.\nFor easy reuse of sketches across different regions of your design, you can move a sketch around the global coordinate system by modifying the plane defining the current sketch location.\nThis example creates a multi-layer PCB from many extrusions of the same sketch, creating unique design bodies for each layer.\nSketching: Dynamic sketch plane"
    },
    {
        "objectID": "examples/02_sketching/dynamic_sketch_plane",
        "href": "examples/02_sketching/dynamic_sketch_plane.html#perform-required-imports",
        "title": "Examples > Sketching: Dynamic sketch plane > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/02_sketching/dynamic_sketch_plane",
        "href": "examples/02_sketching/dynamic_sketch_plane.html#define-sketch-profile",
        "title": "Examples > Sketching: Dynamic sketch plane > Define sketch profile",
        "section": "Define sketch profile",
        "text": "You can create, modify, and plot Sketch instances independent of supporting Geometry service instances.\nTo define the sketch profile for the PCB, you create a sketch outline of individual Segment and Arc objects with two circular through-hole attachment points added within the profile boundary to maintain a single, closed sketch face.\nCreate a single Sketch instance to use for multiple design operations.\nDefine sketch profile\nSketch\nSegment\nArc\nSketch"
    },
    {
        "objectID": "examples/02_sketching/dynamic_sketch_plane",
        "href": "examples/02_sketching/dynamic_sketch_plane.html#instantiate-the-modeler",
        "title": "Examples > Sketching: Dynamic sketch plane > Instantiate the modeler",
        "section": "Instantiate the modeler",
        "text": "Launch a modeling service and connect to it.\nInstantiate the modeler"
    },
    {
        "objectID": "examples/02_sketching/dynamic_sketch_plane",
        "href": "examples/02_sketching/dynamic_sketch_plane.html#extrude-multiple-bodies",
        "title": "Examples > Sketching: Dynamic sketch plane > Extrude multiple bodies",
        "section": "Extrude multiple bodies",
        "text": "Use the single sketch profile to extrude the board profile at multiple Z-offsets. Create a named selection from the resulting list of layer bodies.\nNote that translating the sketch plane prior to extrusion is more effective (10 server calls) than creating a design body on the supporting server and then translating the body on the server (20 server calls).\nExtrude multiple bodies"
    },
    {
        "objectID": "examples/02_sketching/dynamic_sketch_plane",
        "href": "examples/02_sketching/dynamic_sketch_plane.html#close-the-modeler",
        "title": "Examples > Sketching: Dynamic sketch plane > Close the modeler",
        "section": "Close the modeler",
        "text": "Close the modeler to release the resources.\nClose the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/SharedTopologyType",
        "href": "api/ansys/geometry/core/designer/component/SharedTopologyType.html#sharedtopologytype",
        "title": "SharedTopologyType",
        "section": "SharedTopologyType",
        "text": "Bases: enum.Enum\nShared topologies available.\nSharedTopologyType\nSharedTopologyType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/SharedTopologyType",
        "href": "api/ansys/geometry/core/designer/component/SharedTopologyType.html#ansys.geometry.core.designer.component.SharedTopologyType",
        "title": "SharedTopologyType > SharedTopologyType > SharedTopologyType",
        "section": "SharedTopologyType > SharedTopologyType",
        "text": "class ansys.geometry.core.designer.component.SharedTopologyType(*args, **kwds)\n\nBases: enum.Enum\n\nShared topologies available.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/SharedTopologyType",
        "href": "api/ansys/geometry/core/designer/component/SharedTopologyType.html#overview",
        "title": "SharedTopologyType > Overview",
        "section": "Overview",
        "text": "SHARETYPE_NONE\nSHARETYPE_SHARE\nSHARETYPE_MERGE\nSHARETYPE_GROUPS\nOverview\nSHARETYPE_NONE\nSHARETYPE_SHARE\nSHARETYPE_MERGE\nSHARETYPE_GROUPS"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/SharedTopologyType",
        "href": "api/ansys/geometry/core/designer/component/SharedTopologyType.html#import-detail",
        "title": "SharedTopologyType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/SharedTopologyType",
        "href": "api/ansys/geometry/core/designer/component/SharedTopologyType.html#attribute-detail",
        "title": "SharedTopologyType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/SharedTopologyType",
        "href": "api/ansys/geometry/core/designer/component/SharedTopologyType.html#SharedTopologyType.SHARETYPE_NONE",
        "title": "SharedTopologyType > Attribute detail > SHARETYPE_NONE",
        "section": "Attribute detail > SHARETYPE_NONE",
        "text": "SharedTopologyType.SHARETYPE_NONE = 0\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/SharedTopologyType",
        "href": "api/ansys/geometry/core/designer/component/SharedTopologyType.html#SharedTopologyType.SHARETYPE_SHARE",
        "title": "SharedTopologyType > Attribute detail > SHARETYPE_SHARE",
        "section": "Attribute detail > SHARETYPE_SHARE",
        "text": "SharedTopologyType.SHARETYPE_SHARE = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/SharedTopologyType",
        "href": "api/ansys/geometry/core/designer/component/SharedTopologyType.html#SharedTopologyType.SHARETYPE_MERGE",
        "title": "SharedTopologyType > Attribute detail > SHARETYPE_MERGE",
        "section": "Attribute detail > SHARETYPE_MERGE",
        "text": "SharedTopologyType.SHARETYPE_MERGE = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/component/SharedTopologyType",
        "href": "api/ansys/geometry/core/designer/component/SharedTopologyType.html#SharedTopologyType.SHARETYPE_GROUPS",
        "title": "SharedTopologyType > Attribute detail > SHARETYPE_GROUPS",
        "section": "Attribute detail > SHARETYPE_GROUPS",
        "text": "SharedTopologyType.SHARETYPE_GROUPS = 3\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/errors/GeometryRuntimeError",
        "href": "api/ansys/geometry/core/errors/GeometryRuntimeError.html#geometryruntimeerror",
        "title": "GeometryRuntimeError",
        "section": "GeometryRuntimeError",
        "text": "Bases: RuntimeError\nProvides error message when Geometry service passes a runtime error.\nGeometryRuntimeError\nGeometryRuntimeError\nRuntimeError"
    },
    {
        "objectID": "api/ansys/geometry/core/errors/GeometryRuntimeError",
        "href": "api/ansys/geometry/core/errors/GeometryRuntimeError.html#ansys.geometry.core.errors.GeometryRuntimeError",
        "title": "GeometryRuntimeError > GeometryRuntimeError > GeometryRuntimeError",
        "section": "GeometryRuntimeError > GeometryRuntimeError",
        "text": "exception ansys.geometry.core.errors.GeometryRuntimeError\n\nBases: RuntimeError\n\nProvides error message when Geometry service passes a runtime error.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/errors/GeometryRuntimeError",
        "href": "api/ansys/geometry/core/errors/GeometryRuntimeError.html#import-detail",
        "title": "GeometryRuntimeError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/index",
        "href": "api/ansys/geometry/core/modeler/index.html#the-modelerpy-module",
        "title": "The modeler.py module",
        "section": "The modeler.py module",
        "text": "The modeler.py module\nmodeler.py"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/index",
        "href": "api/ansys/geometry/core/modeler/index.html#summary",
        "title": "The modeler.py module > Summary",
        "section": "Summary",
        "text": "Modeler\nProvides for interacting with an open session of the Geometry service.\nSummary\nModeler"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/index",
        "href": "api/ansys/geometry/core/modeler/index.html#description",
        "title": "The modeler.py module > Description",
        "section": "Description",
        "text": "Provides for interacting with the Geometry service.\nDescription"
    },
    {
        "objectID": "examples/03_modeling/chamfer",
        "href": "examples/03_modeling/chamfer.html#modeling-chamfer-edges-and-faces",
        "title": "Examples > Modeling: Chamfer edges and faces",
        "section": "Modeling: Chamfer edges and faces",
        "text": "A chamfer is an angled cut on an edge. Chamfers can be created using the Modeler.geometry_commands module.\nModeling: Chamfer edges and faces\nModeler.geometry_commands"
    },
    {
        "objectID": "examples/03_modeling/chamfer",
        "href": "examples/03_modeling/chamfer.html#create-a-block",
        "title": "Examples > Modeling: Chamfer edges and faces > Create a block",
        "section": "Create a block",
        "text": "Launch the modeler and create a block.\nCreate a block"
    },
    {
        "objectID": "examples/03_modeling/chamfer",
        "href": "examples/03_modeling/chamfer.html#chamfer-edges",
        "title": "Examples > Modeling: Chamfer edges and faces > Chamfer edges",
        "section": "Chamfer edges",
        "text": "Create a uniform chamfer on all edges of the block.\nChamfer edges"
    },
    {
        "objectID": "examples/03_modeling/chamfer",
        "href": "examples/03_modeling/chamfer.html#chamfer-faces",
        "title": "Examples > Modeling: Chamfer edges and faces > Chamfer faces",
        "section": "Chamfer faces",
        "text": "The chamfer of a face can also be modified. Create a chamfer on a single edge and then modify the chamfer distance value by providing the newly created face that represents the chamfer.\nChamfer faces"
    },
    {
        "objectID": "api/ansys/geometry/core/math/plane/index",
        "href": "api/ansys/geometry/core/math/plane/index.html#the-planepy-module",
        "title": "The plane.py module",
        "section": "The plane.py module",
        "text": "The plane.py module\nplane.py"
    },
    {
        "objectID": "api/ansys/geometry/core/math/plane/index",
        "href": "api/ansys/geometry/core/math/plane/index.html#summary",
        "title": "The plane.py module > Summary",
        "section": "Summary",
        "text": "Plane\nProvides primitive representation of a 2D plane in 3D space.\nSummary\nPlane"
    },
    {
        "objectID": "api/ansys/geometry/core/math/plane/index",
        "href": "api/ansys/geometry/core/math/plane/index.html#description",
        "title": "The plane.py module > Description",
        "section": "Description",
        "text": "Provides primitive representation of a 2D plane in 3D space.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#paramuv",
        "title": "ParamUV",
        "section": "ParamUV",
        "text": "Parameter class containing 2 parameters: (u, v).\nU parameter.\nV parameter.\nLikened to a 2D point in UV space. Used as an argument in parametric\nsurface evaluations. This matches the service implementation for the\nGeometry service.\nParamUV\nParamUV\nReal\nReal"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#ansys.geometry.core.shapes.parameterization.ParamUV",
        "title": "ParamUV > ParamUV > ParamUV",
        "section": "ParamUV > ParamUV",
        "text": "class ansys.geometry.core.shapes.parameterization.ParamUV(u: ansys.geometry.core.typing.Real, v: ansys.geometry.core.typing.Real)\n\nParameter class containing 2 parameters: (u, v).\n\nParameters\n\nu\n\nReal\n\nU parameter.\n\nv\n\nReal\n\nV parameter.\n\nNotes\n\nLikened to a 2D point in UV space. Used as an argument in parametric\nsurface evaluations. This matches the service implementation for the\nGeometry service.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#overview",
        "title": "ParamUV > Overview",
        "section": "Overview",
        "text": "u\nU parameter.\nv\nV parameter.\n__add__\nAdd the u and v components of the other ParamUV to this ParamUV.\n__sub__\nSubtract the u and v components of a ParamUV from this ParamUV.\n__mul__\nMultiplies the u and v components of this ParamUV by a ParamUV.\n__truediv__\nDivides the u and v components of this ParamUV by a ParamUV.\n__iter__\nIterate a ParamUV.\n__repr__\nRepresent the ParamUV as a string.\nOverview\nu\nv\n__add__\n__sub__\n__mul__\n__truediv__\n__iter__\nParamUV\n__repr__\nParamUV"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#import-detail",
        "title": "ParamUV > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#property-detail",
        "title": "ParamUV > Property detail",
        "section": "Property detail",
        "text": "U parameter.\nV parameter.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#ParamUV.u",
        "title": "ParamUV > Property detail > u",
        "section": "Property detail > u",
        "text": "property ParamUV.u: ansys.geometry.core.typing.Real\n\nU parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#ParamUV.v",
        "title": "ParamUV > Property detail > v",
        "section": "Property detail > v",
        "text": "property ParamUV.v: ansys.geometry.core.typing.Real\n\nV parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#method-detail",
        "title": "ParamUV > Method detail",
        "section": "Method detail",
        "text": "Add the u and v components of the other ParamUV to this ParamUV.\nThe parameters to add these parameters.\nThe sum of the parameters.\nSubtract the u and v components of a ParamUV from this ParamUV.\nThe parameters to subtract from these parameters.\nThe difference of the parameters.\nMultiplies the u and v components of this ParamUV by a ParamUV.\nThe parameters to multiply by these parameters.\nThe product of the parameters.\nDivides the u and v components of this ParamUV by a ParamUV.\nThe parameters to divide these parameters by.\nThe quotient of the parameters.\nIterate a ParamUV.\nRepresent the ParamUV as a string.\nMethod detail\nParamUV\nParamUV\nParamUV\nParamUV\nParamUV\nParamUV\nParamUV\nParamUV\nParamUV\nParamUV"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#ParamUV.__add__",
        "title": "ParamUV > Method detail > __add__",
        "section": "Method detail > __add__",
        "text": "ParamUV.__add__(other: ParamUV) -> ParamUV\n\nAdd the u and v components of the other ParamUV to this ParamUV.\n\nParameters\n\nother\n\nParamUV\n\nThe parameters to add these parameters.\n\nReturns\n\nParamUV\n\nThe sum of the parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#ParamUV.__sub__",
        "title": "ParamUV > Method detail > __sub__",
        "section": "Method detail > __sub__",
        "text": "ParamUV.__sub__(other: ParamUV) -> ParamUV\n\nSubtract the u and v components of a ParamUV from this ParamUV.\n\nParameters\n\nother\n\nParamUV\n\nThe parameters to subtract from these parameters.\n\nReturns\n\nParamUV\n\nThe difference of the parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#ParamUV.__mul__",
        "title": "ParamUV > Method detail > __mul__",
        "section": "Method detail > __mul__",
        "text": "ParamUV.__mul__(other: ParamUV) -> ParamUV\n\nMultiplies the u and v components of this ParamUV by a ParamUV.\n\nParameters\n\nother\n\nParamUV\n\nThe parameters to multiply by these parameters.\n\nReturns\n\nParamUV\n\nThe product of the parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#ParamUV.__truediv__",
        "title": "ParamUV > Method detail > __truediv__",
        "section": "Method detail > __truediv__",
        "text": "ParamUV.__truediv__(other: ParamUV) -> ParamUV\n\nDivides the u and v components of this ParamUV by a ParamUV.\n\nParameters\n\nother\n\nParamUV\n\nThe parameters to divide these parameters by.\n\nReturns\n\nParamUV\n\nThe quotient of the parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#ParamUV.__iter__",
        "title": "ParamUV > Method detail > __iter__",
        "section": "Method detail > __iter__",
        "text": "ParamUV.__iter__()\n\nIterate a ParamUV.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/ParamUV",
        "href": "api/ansys/geometry/core/shapes/parameterization/ParamUV.html#ParamUV.__repr__",
        "title": "ParamUV > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "ParamUV.__repr__() -> str\n\nRepresent the ParamUV as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/index",
        "href": "api/ansys/geometry/core/math/index.html#the-math-package",
        "title": "The math package",
        "section": "The math package",
        "text": "The math package\nmath"
    },
    {
        "objectID": "api/ansys/geometry/core/math/index",
        "href": "api/ansys/geometry/core/math/index.html#summary",
        "title": "The math package > Summary",
        "section": "Summary",
        "text": "bbox\nProvides for managing a bounding box.\nconstants\nProvides mathematical constants.\nframe\nProvides for managing a frame.\nmatrix\nProvides matrix primitive representations.\nmisc\nProvides auxiliary math functions for PyAnsys Geometry.\nplane\nProvides primitive representation of a 2D plane in 3D space.\npoint\nProvides geometry primitive representation for 2D and 3D points.\nvector\nProvides for creating and managing 2D and 3D vectors.\nSummary\nbbox\nconstants\nframe\nmatrix\nmisc\nplane\npoint\nvector"
    },
    {
        "objectID": "api/ansys/geometry/core/math/index",
        "href": "api/ansys/geometry/core/math/index.html#description",
        "title": "The math package > Description",
        "section": "Description",
        "text": "PyAnsys Geometry math subpackage.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/Box",
        "href": "api/ansys/geometry/core/sketch/box/Box.html#box",
        "title": "Box",
        "section": "Box",
        "text": "Bases: ansys.geometry.core.sketch.face.SketchFace\nProvides for modeling a box.\nCenter point of the box.\nWidth of the box.\nHeight of the box.\nPlacement angle for orientation alignment.\nBox\nBox\nansys.geometry.core.sketch.face.SketchFace\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\nQuantity\nAngle\nReal"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/Box",
        "href": "api/ansys/geometry/core/sketch/box/Box.html#ansys.geometry.core.sketch.box.Box",
        "title": "Box > Box > Box",
        "section": "Box > Box",
        "text": "class ansys.geometry.core.sketch.box.Box(center: ansys.geometry.core.math.point.Point2D, width: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, height: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0)\n\nBases: ansys.geometry.core.sketch.face.SketchFace\n\nProvides for modeling a box.\n\nParameters\n\ncenter: Point2D\n\nCenter point of the box.\n\nwidth\n\nQuantity | Distance | Real\n\nWidth of the box.\n\nheight\n\nQuantity | Distance | Real\n\nHeight of the box.\n\nangle\n\nQuantity | Angle | Real, default: 0\n\nPlacement angle for orientation alignment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/Box",
        "href": "api/ansys/geometry/core/sketch/box/Box.html#overview",
        "title": "Box > Overview",
        "section": "Overview",
        "text": "center\nCenter point of the box.\nwidth\nWidth of the box.\nheight\nHeight of the box.\nperimeter\nPerimeter of the box.\narea\nArea of the box.\nvisualization_polydata\nVTK polydata representation for PyVista visualization.\nOverview\ncenter\nwidth\nheight\nperimeter\narea\nvisualization_polydata"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/Box",
        "href": "api/ansys/geometry/core/sketch/box/Box.html#import-detail",
        "title": "Box > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/Box",
        "href": "api/ansys/geometry/core/sketch/box/Box.html#property-detail",
        "title": "Box > Property detail",
        "section": "Property detail",
        "text": "Center point of the box.\nWidth of the box.\nHeight of the box.\nPerimeter of the box.\nArea of the box.\nVTK polydata representation for PyVista visualization.\nThe representation lies in the X/Y plane within\nthe standard global cartesian coordinate system.\nVTK pyvista.Polydata configuration.\nProperty detail\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/Box",
        "href": "api/ansys/geometry/core/sketch/box/Box.html#Box.center",
        "title": "Box > Property detail > center",
        "section": "Property detail > center",
        "text": "property Box.center: ansys.geometry.core.math.point.Point2D\n\nCenter point of the box.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/Box",
        "href": "api/ansys/geometry/core/sketch/box/Box.html#Box.width",
        "title": "Box > Property detail > width",
        "section": "Property detail > width",
        "text": "property Box.width: pint.Quantity\n\nWidth of the box.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/Box",
        "href": "api/ansys/geometry/core/sketch/box/Box.html#Box.height",
        "title": "Box > Property detail > height",
        "section": "Property detail > height",
        "text": "property Box.height: pint.Quantity\n\nHeight of the box.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/Box",
        "href": "api/ansys/geometry/core/sketch/box/Box.html#Box.perimeter",
        "title": "Box > Property detail > perimeter",
        "section": "Property detail > perimeter",
        "text": "property Box.perimeter: pint.Quantity\n\nPerimeter of the box.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/Box",
        "href": "api/ansys/geometry/core/sketch/box/Box.html#Box.area",
        "title": "Box > Property detail > area",
        "section": "Property detail > area",
        "text": "property Box.area: pint.Quantity\n\nArea of the box.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/box/Box",
        "href": "api/ansys/geometry/core/sketch/box/Box.html#Box.visualization_polydata",
        "title": "Box > Property detail > visualization_polydata",
        "section": "Property detail > visualization_polydata",
        "text": "property Box.visualization_polydata: pyvista.PolyData\n\nVTK polydata representation for PyVista visualization.\n\nThe representation lies in the X/Y plane within\nthe standard global cartesian coordinate system.\n\nReturns\n\npyvista.PolyData\n\nVTK pyvista.Polydata configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/DummyGear",
        "href": "api/ansys/geometry/core/sketch/gears/DummyGear.html#dummygear",
        "title": "DummyGear",
        "section": "DummyGear",
        "text": "Bases: Gear\nProvides the dummy class for sketching gears.\nOrigin of the gear.\nOuter radius of the gear.\nInner radius of the gear.\nNumber of teeth of the gear.\nDummyGear\nDummyGear\nGear\nPoint2D\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\npython:int"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/DummyGear",
        "href": "api/ansys/geometry/core/sketch/gears/DummyGear.html#ansys.geometry.core.sketch.gears.DummyGear",
        "title": "DummyGear > DummyGear > DummyGear",
        "section": "DummyGear > DummyGear",
        "text": "class ansys.geometry.core.sketch.gears.DummyGear(origin: ansys.geometry.core.math.point.Point2D, outer_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, inner_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, n_teeth: int)\n\nBases: Gear\n\nProvides the dummy class for sketching gears.\n\nParameters\n\norigin\n\nPoint2D\n\nOrigin of the gear.\n\nouter_radius\n\nQuantity | Distance | Real\n\nOuter radius of the gear.\n\ninner_radius\n\nQuantity | Distance | Real\n\nInner radius of the gear.\n\nn_teeth\n\npython:int\n\nNumber of teeth of the gear.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/gears/DummyGear",
        "href": "api/ansys/geometry/core/sketch/gears/DummyGear.html#import-detail",
        "title": "DummyGear > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/index",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/index.html#the-nurbspy-module",
        "title": "The nurbs.py module",
        "section": "The nurbs.py module",
        "text": "The nurbs.py module\nnurbs.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/index",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/index.html#summary",
        "title": "The nurbs.py module > Summary",
        "section": "Summary",
        "text": "NURBSCurve\nRepresents a NURBS curve.\nNURBSCurveEvaluation\nProvides evaluation of a NURBS curve at a given parameter.\nSummary\nNURBSCurve\nNURBSCurveEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/index",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/index.html#description",
        "title": "The nurbs.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a NURBS curve.\nDescription"
    },
    {
        "objectID": "examples/03_modeling/boolean_operations",
        "href": "examples/03_modeling/boolean_operations.html#modeling-boolean-operations",
        "title": "Examples > Modeling: Boolean operations",
        "section": "Modeling: Boolean operations",
        "text": "This example shows how to use Boolean operations for geometry manipulation.\nModeling: Boolean operations"
    },
    {
        "objectID": "examples/03_modeling/boolean_operations",
        "href": "examples/03_modeling/boolean_operations.html#perform-required-imports",
        "title": "Examples > Modeling: Boolean operations > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/03_modeling/boolean_operations",
        "href": "examples/03_modeling/boolean_operations.html#launch-local-modeler",
        "title": "Examples > Modeling: Boolean operations > Launch local modeler",
        "section": "Launch local modeler",
        "text": "Launch the local modeler. If you are not familiar with how to launch the local modeler, see the “Launch a modeling service” section in the PyAnsys Geometry 101: Modeling example.\nLaunch local modeler"
    },
    {
        "objectID": "examples/03_modeling/boolean_operations",
        "href": "examples/03_modeling/boolean_operations.html#define-bodies",
        "title": "Examples > Modeling: Boolean operations > Define bodies",
        "section": "Define bodies",
        "text": "This section defines the bodies to use the Boolean operations on. First you create sketches of a box and a circle, and then you extrude these sketches to create 3D objects.\nDefine bodies"
    },
    {
        "objectID": "examples/03_modeling/boolean_operations",
        "href": "examples/03_modeling/boolean_operations.html#create-sketches",
        "title": "Examples > Modeling: Boolean operations > Create sketches",
        "section": "Create sketches",
        "text": "Create sketches of a box and a circle that serve as the basis for your bodies.\nCreate sketches"
    },
    {
        "objectID": "examples/03_modeling/boolean_operations",
        "href": "examples/03_modeling/boolean_operations.html#extrude-sketches",
        "title": "Examples > Modeling: Boolean operations > Extrude sketches",
        "section": "Extrude sketches",
        "text": "After the sketches are created, extrude them to create 3D objects.\nYou must extrude the sketches each time that you perform an example operation. This is because performing a Boolean operation modifies the underlying design permanently. Thus, you no longer have two bodies. As shown in the Boolean operations themselves, whenever you pass in a body, it is consumed, and so it no longer exists. The remaining body (with the performed Boolean operation) is the one that performed the call to the method.\nExtrude sketches"
    },
    {
        "objectID": "examples/03_modeling/boolean_operations",
        "href": "examples/03_modeling/boolean_operations.html#select-bodies",
        "title": "Examples > Modeling: Boolean operations > Select bodies",
        "section": "Select bodies",
        "text": "You can optionally select bodies in the plotter as described in the “Select objects interactively” section in the PyAnsys Geometry 101: Plotter example. As shown in this example, the plotter preserves the picking order, meaning that the output list is sorted according to the picking order.\nOtherwise, you can select bodies from the design directly.\nSelect bodies"
    },
    {
        "objectID": "examples/03_modeling/boolean_operations",
        "href": "examples/03_modeling/boolean_operations.html#perform-boolean-operations",
        "title": "Examples > Modeling: Boolean operations > Perform Boolean operations",
        "section": "Perform Boolean operations",
        "text": "This section performs Boolean operations on the defined bodies using the PyAnsys Geometry library. It explores intersection, union, and subtraction operations.\nPerform Boolean operations"
    },
    {
        "objectID": "examples/03_modeling/boolean_operations",
        "href": "examples/03_modeling/boolean_operations.html#perform-an-intersection-operation",
        "title": "Examples > Modeling: Boolean operations > Perform an intersection operation",
        "section": "Perform an intersection operation",
        "text": "To perform an intersection operation on the bodies, first set up the bodies.\nPerform the intersection and plot the results.\nThe final remaining body is the prism body because the cylin body has been consumed.\nPerform an intersection operation\nprism\ncylin"
    },
    {
        "objectID": "examples/03_modeling/boolean_operations",
        "href": "examples/03_modeling/boolean_operations.html#perform-a-union-operation",
        "title": "Examples > Modeling: Boolean operations > Perform a union operation",
        "section": "Perform a union operation",
        "text": "To carry out a union operation on the bodies, first set up the bodies.\nPerform the union and plot the results.\nThe final remaining body is the prism body because the cylin body has been consumed.\nPerform a union operation\nprism\ncylin"
    },
    {
        "objectID": "examples/03_modeling/boolean_operations",
        "href": "examples/03_modeling/boolean_operations.html#perform-a-subtraction-operation",
        "title": "Examples > Modeling: Boolean operations > Perform a subtraction operation",
        "section": "Perform a subtraction operation",
        "text": "To perform a subtraction operation on the bodies, first set up the bodies.\nPerform the subtraction and plot the results.\nThe final remaining body is the prism body because the cylin body has been consumed.\nIf you perform this action inverting the order of the bodies (that is, cylin.subtract(prism), you can see the difference in the resulting shape of the body.\nIn this case, the final remaining body is the cylin body because the prism body has been consumed.\nPerform a subtraction operation\nprism\ncylin\ncylin.subtract(prism)\ncylin\nprism"
    },
    {
        "objectID": "examples/03_modeling/boolean_operations",
        "href": "examples/03_modeling/boolean_operations.html#close-the-modeler",
        "title": "Examples > Modeling: Boolean operations > Close the modeler",
        "section": "Close the modeler",
        "text": "Close the modeler to release the resources.\nClose the modeler"
    },
    {
        "objectID": "examples/03_modeling/boolean_operations",
        "href": "examples/03_modeling/boolean_operations.html#summary",
        "title": "Examples > Modeling: Boolean operations > Summary",
        "section": "Summary",
        "text": "These Boolean operations provide powerful tools for creating complex geometries and combining or modifying existing shapes in meaningful ways.\nFeel free to experiment with different shapes, sizes, and arrangements to further enhance your understanding of Boolean operations in PyAnsys Geometry and their applications.\nSummary"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/index",
        "href": "api/ansys/geometry/core/plotting/widgets/index.html#the-widgets-package",
        "title": "The widgets package",
        "section": "The widgets package",
        "text": "The widgets package\nwidgets"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/index",
        "href": "api/ansys/geometry/core/plotting/widgets/index.html#summary",
        "title": "The widgets package > Summary",
        "section": "Summary",
        "text": "show_design_point\nProvides the ruler widget for the PyAnsys Geometry plotter.\nSummary\nshow_design_point"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/index",
        "href": "api/ansys/geometry/core/plotting/widgets/index.html#description",
        "title": "The widgets package > Description",
        "section": "Description",
        "text": "Submodule providing widgets for the PyAnsys Geometry plotter.\nDescription"
    },
    {
        "objectID": "user_guide/designer",
        "href": "user_guide/designer.html#designer",
        "title": "Designer",
        "section": "Designer",
        "text": "The PyAnsys Geometry designer subpackage organizes geometry assemblies\nand synchronizes to a supporting Geometry service instance.\nDesigner\ndesigner"
    },
    {
        "objectID": "user_guide/designer",
        "href": "user_guide/designer.html#create-the-model",
        "title": "Designer > Create the model",
        "section": "Create the model",
        "text": "This code create the Modeler() object which owns the whole designs\ntools and data.\nCreate the model\nModeler()"
    },
    {
        "objectID": "user_guide/designer",
        "href": "user_guide/designer.html#define-the-model",
        "title": "Designer > Define the model",
        "section": "Define the model",
        "text": "The following code define the model by creating a sketch with a circle on the client.\nIt then creates the model on the server.\nDefine the model"
    },
    {
        "objectID": "user_guide/designer",
        "href": "user_guide/designer.html#add-materials-to-model",
        "title": "Designer > Add materials to model",
        "section": "Add materials to model",
        "text": "This code adds the data structure and properties for individual materials:\nAdd materials to model"
    },
    {
        "objectID": "user_guide/designer",
        "href": "user_guide/designer.html#create-bodies-by-extruding-the-sketch",
        "title": "Designer > Create bodies by extruding the sketch",
        "section": "Create bodies by extruding the sketch",
        "text": "Extruding a sketch projects all of the specified geometries onto the body. To create a solid body,\nthis code extrudes the sketch profile by a given distance.\nCreate bodies by extruding the sketch"
    },
    {
        "objectID": "user_guide/designer",
        "href": "user_guide/designer.html#create-bodies-by-extruding-the-face",
        "title": "Designer > Create bodies by extruding the face",
        "section": "Create bodies by extruding the face",
        "text": "The following code shows how you can also extrude a face profile by a given distance to create a solid body.\nThere are no modifications against the body containing the source face.\nYou can also translate and tessellate design bodies and project curves onto them. For\nmore information, see these classes:\nBody()\nComponent()\nCreate bodies by extruding the face\nBody()\nComponent()"
    },
    {
        "objectID": "user_guide/designer",
        "href": "user_guide/designer.html#download-and-save-design",
        "title": "Designer > Download and save design",
        "section": "Download and save design",
        "text": "You can save your design to disk or download the design of the active Geometry server instance.\nThe following code shows how to download and save the design.\nFor more information, see the Design submodule.\nDownload and save design\nDesign"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix44",
        "href": "api/ansys/geometry/core/math/matrix/Matrix44.html#matrix44",
        "title": "Matrix44",
        "section": "Matrix44",
        "text": "Bases: Matrix\nProvides 4x4 matrix representation.\nMatrix arguments as a np.ndarray class.\nMatrix44\nMatrix44\nMatrix\nndarray\nRealSequence\nMatrix\nDEFAULT_MATRIX44\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix44",
        "href": "api/ansys/geometry/core/math/matrix/Matrix44.html#ansys.geometry.core.math.matrix.Matrix44",
        "title": "Matrix44 > Matrix44 > Matrix44",
        "section": "Matrix44 > Matrix44",
        "text": "class ansys.geometry.core.math.matrix.Matrix44(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)\n\nBases: Matrix\n\nProvides 4x4 matrix representation.\n\nParameters\n\ninput\n\nndarray | RealSequence | Matrix, default: DEFAULT_MATRIX44\n\nMatrix arguments as a np.ndarray class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix44",
        "href": "api/ansys/geometry/core/math/matrix/Matrix44.html#overview",
        "title": "Matrix44 > Overview",
        "section": "Overview",
        "text": "create_translation\nCreate a matrix representing the specified translation.\ncreate_rotation\nCreate a matrix representing the specified rotation.\nis_translation\nCheck if the matrix represents a translation.\nOverview\ncreate_translation\ncreate_rotation\nis_translation"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix44",
        "href": "api/ansys/geometry/core/math/matrix/Matrix44.html#import-detail",
        "title": "Matrix44 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix44",
        "href": "api/ansys/geometry/core/math/matrix/Matrix44.html#method-detail",
        "title": "Matrix44 > Method detail",
        "section": "Method detail",
        "text": "Create a matrix representing the specified translation.\nThe translation vector representing the translation. The components of the vector\nshould be in meters.\nA 4x4 matrix representing the translation.\nCheck if the matrix represents a translation.\nThis method checks if the matrix represents a translation transformation.\nA translation matrix has the following form:\n[1 0 0 tx]\n[0 1 0 ty]\n[0 0 1 tz]\n[0 0 0  1]\nIf True, the method will return True for the identity matrix as well.\nIf False, the method will return False for the identity matrix.\nTrue if the matrix represents a translation, False otherwise.\nCreate a matrix representing the specified rotation.\nThe X direction vector.\nThe Y direction vector.\nThe Z direction vector. If not provided, it will be calculated\nas the cross product of direction_x and direction_y.\nA 4x4 matrix representing the rotation.\nMethod detail\nVector3D\nMatrix44\noptional\nTrue\nTrue\nFalse\nFalse\nTrue\nFalse\nVector3D\nVector3D\nVector3D\noptional\nMatrix44"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix44",
        "href": "api/ansys/geometry/core/math/matrix/Matrix44.html#Matrix44.create_translation",
        "title": "Matrix44 > Method detail > create_translation",
        "section": "Method detail > create_translation",
        "text": "classmethod Matrix44.create_translation(translation: ansys.geometry.core.math.vector.Vector3D) -> Matrix44\n\nCreate a matrix representing the specified translation.\n\nParameters\n\ntranslation\n\nVector3D\n\nThe translation vector representing the translation. The components of the vector\nshould be in meters.\n\nReturns\n\nMatrix44\n\nA 4x4 matrix representing the translation.\n\nExamples\n\n>>> translation_vector = Vector3D(1.0, 2.0, 3.0)\n>>> translation_matrix = Matrix44.create_translation(translation_vector)\n>>> print(translation_matrix)\n[[1. 0. 0. 1.]\n [0. 1. 0. 2.]\n [0. 0. 1. 3.]\n [0. 0. 0. 1.]]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix44",
        "href": "api/ansys/geometry/core/math/matrix/Matrix44.html#Matrix44.is_translation",
        "title": "Matrix44 > Method detail > is_translation",
        "section": "Method detail > is_translation",
        "text": "Matrix44.is_translation(including_identity: bool = False) -> bool\n\nCheck if the matrix represents a translation.\n\nThis method checks if the matrix represents a translation transformation.\nA translation matrix has the following form:\n\n[1 0 0 tx]\n[0 1 0 ty]\n[0 0 1 tz]\n[0 0 0  1]\n\nParameters\n\nincluding_identity\n\nbool, optional\n\nIf True, the method will return True for the identity matrix as well.\nIf False, the method will return False for the identity matrix.\n\nReturns\n\nbool\n\nTrue if the matrix represents a translation, False otherwise.\n\nExamples\n\n>>> matrix = Matrix44([[1, 0, 0, 5], [0, 1, 0, 3], [0, 0, 1, 2], [0, 0, 0, 1]])\n>>> matrix.is_translation()\nTrue\n>>> identity_matrix = Matrix44([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])\n>>> identity_matrix.is_translation()\nFalse\n>>> identity_matrix.is_translation(including_identity=True)\nTrue\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/matrix/Matrix44",
        "href": "api/ansys/geometry/core/math/matrix/Matrix44.html#Matrix44.create_rotation",
        "title": "Matrix44 > Method detail > create_rotation",
        "section": "Method detail > create_rotation",
        "text": "classmethod Matrix44.create_rotation(direction_x: ansys.geometry.core.math.vector.Vector3D, direction_y: ansys.geometry.core.math.vector.Vector3D, direction_z: ansys.geometry.core.math.vector.Vector3D = None) -> Matrix44\n\nCreate a matrix representing the specified rotation.\n\nParameters\n\ndirection_x\n\nVector3D\n\nThe X direction vector.\n\ndirection_y\n\nVector3D\n\nThe Y direction vector.\n\ndirection_z\n\nVector3D, optional\n\nThe Z direction vector. If not provided, it will be calculated\nas the cross product of direction_x and direction_y.\n\nReturns\n\nMatrix44\n\nA 4x4 matrix representing the rotation.\n\nExamples\n\n>>> direction_x = Vector3D(1.0, 0.0, 0.0)\n>>> direction_y = Vector3D(0.0, 1.0, 0.0)\n>>> rotation_matrix = Matrix44.create_rotation(direction_x, direction_y)\n>>> print(rotation_matrix)\n[[1. 0. 0. 0.]\n[0. 1. 0. 0.]\n[0. 0. 1. 0.]\n[0. 0. 0. 1.]]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#modeling-scale-map-and-mirror-bodies",
        "title": "Examples > Modeling: Scale, map and mirror bodies",
        "section": "Modeling: Scale, map and mirror bodies",
        "text": "The purpose of this notebook is to demonstrate the map() and scale() functions and their usage for transforming bodies.\nModeling: Scale, map and mirror bodies\nmap()\nscale()"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#initialize-the-modeler",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Initialize the modeler",
        "section": "Initialize the modeler",
        "text": "Initialize the modeler"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#scale-body",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Scale body",
        "section": "Scale body",
        "text": "The scale() function is designed to modify the size of 3D bodies by a specified scale factor. This function is a important part of geometric transformations, allowing for the dynamic resizing of bodies.\nScale body\nscale()"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#usage-of-scale",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Usage of scale()",
        "section": "Usage of scale()",
        "text": "To use the scale() function, you call it on an instance of a geometry body, passing a single argument: the scale value. This value is a real number (Real) that determines the factor by which the body’s size is changed.\nUsage of scale()\nscale()\nscale()\nReal"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#example-making-a-cube",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Example: Making a cube",
        "section": "Example: Making a cube",
        "text": "The following code snippets show how to change the size of a cube using the scale() function in Body objects. The process involves initializing a sketch design for the cube, defining the shape parameters, and then performing a rescaling operation to generate the new shape.\nExample: Making a cube\nscale()\nBody"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#initialize-the-cube-sketch-design",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Initialize the cube sketch design",
        "section": "Initialize the cube sketch design",
        "text": "A new design sketch named “cube” is created.\nInitialize the cube sketch design"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#define-cube-parameters",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Define cube parameters",
        "section": "Define cube parameters",
        "text": "side_length is set to 10 units, representing the side length of the cube.\nDefine cube parameters\nside_length"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#create-the-profile-cube",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Create the profile cube",
        "section": "Create the profile cube",
        "text": "A square box is created centered on the origin using side_length as the side length of the square.\nCreate the profile cube\nside_length"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#create-cube-body",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Create cube body",
        "section": "Create cube body",
        "text": "extrude_sketch on the box_sketch as the base sketch and create the 3D cube with distance being the side_length.\nCreate cube body\nextrude_sketch\nbox_sketch\ndistance\nside_length"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#making-the-cube-twice-as-large",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Making the cube twice as large",
        "section": "Making the cube twice as large",
        "text": "Copy the original cube. Using scale() with a value of 2, double the side lengths of the cube, thereby making the body twice as large, and then offset it to view the difference.\nMaking the cube twice as large\nscale()"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#halfing-the-size-of-the-original-cube",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Halfing the size of the original cube",
        "section": "Halfing the size of the original cube",
        "text": "Copy the original cube. Using scale() with a value of 0.5 effectively halves the side lengths of the cube. Then, offset the new cube to view the difference.\nNote: Because the size of the cube in the previous cell was doubled, using the 0.25 factor translates it to half the size of the original cube.\nHalfing the size of the original cube\nscale()"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#map-body",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Map body",
        "section": "Map body",
        "text": "The map() function enables the reorientation of 3D bodies by mapping them onto a new specified frame. This function is used for adjusting the orientation of geometric bodies within 3D space to match specific reference frames. With this function, you are able to effectively perform translation and rotation operations in a single method by specifying a new frame.\nMap body\nmap()"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#usage-of-map",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Usage of map()",
        "section": "Usage of map()",
        "text": "To use the map() function, invoke it on an instance of a geometry body with a single argument: the new frame to map the body to. The frame is a structure or object that defines the new orientation parameters for the body.\nUsage of map()\nmap()\nmap()"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#example-creating-an-asymmetric-cube",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Example: Creating an asymmetric cube",
        "section": "Example: Creating an asymmetric cube",
        "text": "The following code snippets show how to use the map() function to reframe a cube body in the Body object. The process involves initializing a sketch design for the custom body, extruding the profile by a distance, and then performing the mapping operation to rotate the shape.\nExample: Creating an asymmetric cube\nmap()\nBody"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#initialize-the-shape-sketch-design",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Initialize the shape sketch design",
        "section": "Initialize the shape sketch design",
        "text": "A new design sketch named “asymmetric_cube” is created.\nInitialize the shape sketch design"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#create-an-asymmetric-sketch-profile",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Create an asymmetric sketch profile",
        "section": "Create an asymmetric sketch profile",
        "text": "Make a sketch profile that is basically a cube centered on the origin with a side length of 2 with a cutout.\nCreate an asymmetric sketch profile"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#create-the-asymmetric-body",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Create the asymmetric body",
        "section": "Create the asymmetric body",
        "text": "extrude_sketch on the asymmetric_profile as the base sketch, creating the 3D cube with a cutout, with the distance being 1.\nCreate the asymmetric body\nextrude_sketch\nasymmetric_profile\ndistance"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#apply-map-reframing",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Apply map reframing",
        "section": "Apply map reframing",
        "text": "First make a copy of the shape and translate it in 3D space so that you can view them side by side. Then, apply the reframing to the copied shape.\nNote: The following map uses the default x direction, but the y direction is swapped with the z direction, effectively rotating the original shape so that it is standing vertically.\nApply map reframing"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#mirror-body",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Mirror body",
        "section": "Mirror body",
        "text": "The mirror() function is designed to mirror the geometry of a body across a specified plane. This function plays a role in geometric transformations, enabling the reflection of bodies to create symmetrical designs.\nMirror body\nmirror()"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#usage-of-mirror",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Usage of mirror()",
        "section": "Usage of mirror()",
        "text": "To use the mirror() function, you call it on an instance of a geometry body, passing a single argument: the plane across which to mirror the body. This plane is represented by a Plane object, defining the axis of symmetry for the mirroring operation.\nUsage of mirror()\nmirror()\nmirror()\nPlane"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#example-triangle-body",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Example: Triangle body",
        "section": "Example: Triangle body",
        "text": "The following code snippets show how to use the mirror() function to reframe a cube body in the Body object. The process involves initializing a sketch design for the body profile, extruding the profile by a distance, and then performing the mirroring operation to reflect the shape over the specified axis.\nExample: Triangle body\nmirror()\nBody"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#initialize-the-shape-sketch-design",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Initialize the shape sketch design",
        "section": "Initialize the shape sketch design",
        "text": "A new design sketch named “triangle” is created.\nInitialize the shape sketch design"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#define-parameters",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Define parameters",
        "section": "Define parameters",
        "text": "point1: First vertex of the triangle. point2: Second vertex of the triangle. point3: Third vertex of the triangle.\nDefine parameters\npoint1\npoint2\npoint3"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#create-triangle-sketch-profile",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Create triangle sketch profile",
        "section": "Create triangle sketch profile",
        "text": "Using point1, point2, and point3, define the vertices of the triangle profile using those three points and then create line segments connecting them.\nCreate triangle sketch profile\npoint1\npoint2\npoint3"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#create-triangular-body",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Create triangular body",
        "section": "Create triangular body",
        "text": "Using the sketch profile created in the previous step, use the extrude_sketch method to create a solid body with a depth of 1.\nCreate triangular body\nextrude_sketch"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#mirror-the-triangular-body",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Mirror the triangular body",
        "section": "Mirror the triangular body",
        "text": "First, make a copy of the triangular body. Then, using mirror(), you can mirror the copied body over the ZY plane.\nMirror the triangular body\nmirror()"
    },
    {
        "objectID": "examples/03_modeling/scale_map_mirror_bodies",
        "href": "examples/03_modeling/scale_map_mirror_bodies.html#closing-the-modeler",
        "title": "Examples > Modeling: Scale, map and mirror bodies > Closing the modeler",
        "section": "Closing the modeler",
        "text": "Closing the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/index",
        "href": "api/ansys/geometry/core/parameters/index.html#the-parameters-package",
        "title": "The parameters package",
        "section": "The parameters package",
        "text": "The parameters package\nparameters"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/index",
        "href": "api/ansys/geometry/core/parameters/index.html#summary",
        "title": "The parameters package > Summary",
        "section": "Summary",
        "text": "parameter\nProvides get and set methods for parameters.\nSummary\nparameter"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/index",
        "href": "api/ansys/geometry/core/parameters/index.html#description",
        "title": "The parameters package > Description",
        "section": "Description",
        "text": "PyAnsys Geometry parameters subpackage.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/SingletonMeta",
        "href": "api/ansys/geometry/core/misc/measurements/SingletonMeta.html#singletonmeta",
        "title": "SingletonMeta",
        "section": "SingletonMeta",
        "text": "Bases: type\nProvides a thread-safe implementation of a singleton design pattern.\nSingletonMeta\nSingletonMeta\ntype"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/SingletonMeta",
        "href": "api/ansys/geometry/core/misc/measurements/SingletonMeta.html#ansys.geometry.core.misc.measurements.SingletonMeta",
        "title": "SingletonMeta > SingletonMeta > SingletonMeta",
        "section": "SingletonMeta > SingletonMeta",
        "text": "class ansys.geometry.core.misc.measurements.SingletonMeta\n\nBases: type\n\nProvides a thread-safe implementation of a singleton design pattern.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/SingletonMeta",
        "href": "api/ansys/geometry/core/misc/measurements/SingletonMeta.html#overview",
        "title": "SingletonMeta > Overview",
        "section": "Overview",
        "text": "__call__\nReturn a single instance of the class.\nOverview\n__call__"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/SingletonMeta",
        "href": "api/ansys/geometry/core/misc/measurements/SingletonMeta.html#import-detail",
        "title": "SingletonMeta > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/SingletonMeta",
        "href": "api/ansys/geometry/core/misc/measurements/SingletonMeta.html#method-detail",
        "title": "SingletonMeta > Method detail",
        "section": "Method detail",
        "text": "Return a single instance of the class.\nPossible changes to the value of the __init__ argument do not affect the\nreturned instance.\nMethod detail\n__init__"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/SingletonMeta",
        "href": "api/ansys/geometry/core/misc/measurements/SingletonMeta.html#SingletonMeta.__call__",
        "title": "SingletonMeta > Method detail > __call__",
        "section": "Method detail > __call__",
        "text": "SingletonMeta.__call__(*args, **kwargs)\n\nReturn a single instance of the class.\n\nPossible changes to the value of the __init__ argument do not affect the\nreturned instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/CurveType",
        "href": "api/ansys/geometry/core/designer/edge/CurveType.html#curvetype",
        "title": "CurveType",
        "section": "CurveType",
        "text": "Bases: enum.Enum\nProvides values for the curve types supported.\nCurveType\nCurveType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/CurveType",
        "href": "api/ansys/geometry/core/designer/edge/CurveType.html#ansys.geometry.core.designer.edge.CurveType",
        "title": "CurveType > CurveType > CurveType",
        "section": "CurveType > CurveType",
        "text": "class ansys.geometry.core.designer.edge.CurveType(*args, **kwds)\n\nBases: enum.Enum\n\nProvides values for the curve types supported.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/CurveType",
        "href": "api/ansys/geometry/core/designer/edge/CurveType.html#overview",
        "title": "CurveType > Overview",
        "section": "Overview",
        "text": "CURVETYPE_UNKNOWN\nCURVETYPE_LINE\nCURVETYPE_CIRCLE\nCURVETYPE_ELLIPSE\nCURVETYPE_NURBS\nCURVETYPE_PROCEDURAL\nOverview\nCURVETYPE_UNKNOWN\nCURVETYPE_LINE\nCURVETYPE_CIRCLE\nCURVETYPE_ELLIPSE\nCURVETYPE_NURBS\nCURVETYPE_PROCEDURAL"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/CurveType",
        "href": "api/ansys/geometry/core/designer/edge/CurveType.html#import-detail",
        "title": "CurveType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/CurveType",
        "href": "api/ansys/geometry/core/designer/edge/CurveType.html#attribute-detail",
        "title": "CurveType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/CurveType",
        "href": "api/ansys/geometry/core/designer/edge/CurveType.html#CurveType.CURVETYPE_UNKNOWN",
        "title": "CurveType > Attribute detail > CURVETYPE_UNKNOWN",
        "section": "Attribute detail > CURVETYPE_UNKNOWN",
        "text": "CurveType.CURVETYPE_UNKNOWN = 0\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/CurveType",
        "href": "api/ansys/geometry/core/designer/edge/CurveType.html#CurveType.CURVETYPE_LINE",
        "title": "CurveType > Attribute detail > CURVETYPE_LINE",
        "section": "Attribute detail > CURVETYPE_LINE",
        "text": "CurveType.CURVETYPE_LINE = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/CurveType",
        "href": "api/ansys/geometry/core/designer/edge/CurveType.html#CurveType.CURVETYPE_CIRCLE",
        "title": "CurveType > Attribute detail > CURVETYPE_CIRCLE",
        "section": "Attribute detail > CURVETYPE_CIRCLE",
        "text": "CurveType.CURVETYPE_CIRCLE = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/CurveType",
        "href": "api/ansys/geometry/core/designer/edge/CurveType.html#CurveType.CURVETYPE_ELLIPSE",
        "title": "CurveType > Attribute detail > CURVETYPE_ELLIPSE",
        "section": "Attribute detail > CURVETYPE_ELLIPSE",
        "text": "CurveType.CURVETYPE_ELLIPSE = 3\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/CurveType",
        "href": "api/ansys/geometry/core/designer/edge/CurveType.html#CurveType.CURVETYPE_NURBS",
        "title": "CurveType > Attribute detail > CURVETYPE_NURBS",
        "section": "Attribute detail > CURVETYPE_NURBS",
        "text": "CurveType.CURVETYPE_NURBS = 4\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/CurveType",
        "href": "api/ansys/geometry/core/designer/edge/CurveType.html#CurveType.CURVETYPE_PROCEDURAL",
        "title": "CurveType > Attribute detail > CURVETYPE_PROCEDURAL",
        "section": "Attribute detail > CURVETYPE_PROCEDURAL",
        "text": "CurveType.CURVETYPE_PROCEDURAL = 5\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#coneevaluation",
        "title": "ConeEvaluation",
        "section": "ConeEvaluation",
        "text": "Bases: ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\nEvaluate the cone at given parameters.\nCone to evaluate.\nPparameters (u, v) to evaluate the cone at.\nConeEvaluation\nConeEvaluation\nansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ansys.geometry.core.shapes.surfaces.cone.ConeEvaluation",
        "title": "ConeEvaluation > ConeEvaluation > ConeEvaluation",
        "section": "ConeEvaluation > ConeEvaluation",
        "text": "class ansys.geometry.core.shapes.surfaces.cone.ConeEvaluation(cone: Cone, parameter: ansys.geometry.core.shapes.parameterization.ParamUV)\n\nBases: ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\n\nEvaluate the cone at given parameters.\n\nParameters\n\ncone: ~ansys.geometry.core.shapes.surfaces.cone.Cone\n\nCone to evaluate.\n\nparameter: ParamUV\n\nPparameters (u, v) to evaluate the cone at.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#overview",
        "title": "ConeEvaluation > Overview",
        "section": "Overview",
        "text": "cone\nCone being evaluated.\nparameter\nParameter that the evaluation is based upon.\nposition\nPosition of the evaluation.\nnormal\nNormal to the surface.\nu_derivative\nFirst derivative with respect to the U parameter.\nv_derivative\nFirst derivative with respect to the V parameter.\nuu_derivative\nSecond derivative with respect to the U parameter.\nuv_derivative\nSecond derivative with respect to the U and V parameters.\nvv_derivative\nSecond derivative with respect to the V parameter.\nmin_curvature\nMinimum curvature of the cone.\nmin_curvature_direction\nMinimum curvature direction.\nmax_curvature\nMaximum curvature of the cone.\nmax_curvature_direction\nMaximum curvature direction.\nOverview\ncone\nparameter\nposition\nnormal\nu_derivative\nv_derivative\nuu_derivative\nuv_derivative\nvv_derivative\nmin_curvature\nmin_curvature_direction\nmax_curvature\nmax_curvature_direction"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#import-detail",
        "title": "ConeEvaluation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#property-detail",
        "title": "ConeEvaluation > Property detail",
        "section": "Property detail",
        "text": "Cone being evaluated.\nParameter that the evaluation is based upon.\nPosition of the evaluation.\nPoint that lies on the cone at this evaluation.\nNormal to the surface.\nNormal unit vector to the cone at this evaluation.\nFirst derivative with respect to the U parameter.\nFirst derivative with respect to the U parameter.\nFirst derivative with respect to the V parameter.\nFirst derivative with respect to the V parameter.\nSecond derivative with respect to the U parameter.\nSecond derivative with respect to the U parameter.\nSecond derivative with respect to the U and V parameters.\nSecond derivative with respect to U and V parameters.\nSecond derivative with respect to the V parameter.\nSecond derivative with respect to the V parameter.\nMinimum curvature of the cone.\nMinimum curvature of the cone.\nMinimum curvature direction.\nMinimum curvature direction.\nMaximum curvature of the cone.\nMaximum curvature of the cone.\nMaximum curvature direction.\nMaximum curvature direction.\nProperty detail\nPoint3D\nUnitVector3D\nVector3D\nVector3D\nVector3D\nVector3D\nVector3D\nReal\nUnitVector3D\nReal\nUnitVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ConeEvaluation.cone",
        "title": "ConeEvaluation > Property detail > cone",
        "section": "Property detail > cone",
        "text": "property ConeEvaluation.cone: Cone\n\nCone being evaluated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ConeEvaluation.parameter",
        "title": "ConeEvaluation > Property detail > parameter",
        "section": "Property detail > parameter",
        "text": "property ConeEvaluation.parameter: ansys.geometry.core.shapes.parameterization.ParamUV\n\nParameter that the evaluation is based upon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ConeEvaluation.position",
        "title": "ConeEvaluation > Property detail > position",
        "section": "Property detail > position",
        "text": "property ConeEvaluation.position: ansys.geometry.core.math.point.Point3D\n\nPosition of the evaluation.\n\nReturns\n\nPoint3D\n\nPoint that lies on the cone at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ConeEvaluation.normal",
        "title": "ConeEvaluation > Property detail > normal",
        "section": "Property detail > normal",
        "text": "property ConeEvaluation.normal: ansys.geometry.core.math.vector.UnitVector3D\n\nNormal to the surface.\n\nReturns\n\nUnitVector3D\n\nNormal unit vector to the cone at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ConeEvaluation.u_derivative",
        "title": "ConeEvaluation > Property detail > u_derivative",
        "section": "Property detail > u_derivative",
        "text": "property ConeEvaluation.u_derivative: ansys.geometry.core.math.vector.Vector3D\n\nFirst derivative with respect to the U parameter.\n\nReturns\n\nVector3D\n\nFirst derivative with respect to the U parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ConeEvaluation.v_derivative",
        "title": "ConeEvaluation > Property detail > v_derivative",
        "section": "Property detail > v_derivative",
        "text": "property ConeEvaluation.v_derivative: ansys.geometry.core.math.vector.Vector3D\n\nFirst derivative with respect to the V parameter.\n\nReturns\n\nVector3D\n\nFirst derivative with respect to the V parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ConeEvaluation.uu_derivative",
        "title": "ConeEvaluation > Property detail > uu_derivative",
        "section": "Property detail > uu_derivative",
        "text": "property ConeEvaluation.uu_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to the U parameter.\n\nReturns\n\nVector3D\n\nSecond derivative with respect to the U parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ConeEvaluation.uv_derivative",
        "title": "ConeEvaluation > Property detail > uv_derivative",
        "section": "Property detail > uv_derivative",
        "text": "property ConeEvaluation.uv_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to the U and V parameters.\n\nReturns\n\nVector3D\n\nSecond derivative with respect to U and V parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ConeEvaluation.vv_derivative",
        "title": "ConeEvaluation > Property detail > vv_derivative",
        "section": "Property detail > vv_derivative",
        "text": "property ConeEvaluation.vv_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to the V parameter.\n\nReturns\n\nVector3D\n\nSecond derivative with respect to the V parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ConeEvaluation.min_curvature",
        "title": "ConeEvaluation > Property detail > min_curvature",
        "section": "Property detail > min_curvature",
        "text": "property ConeEvaluation.min_curvature: ansys.geometry.core.typing.Real\n\nMinimum curvature of the cone.\n\nReturns\n\nReal\n\nMinimum curvature of the cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ConeEvaluation.min_curvature_direction",
        "title": "ConeEvaluation > Property detail > min_curvature_direction",
        "section": "Property detail > min_curvature_direction",
        "text": "property ConeEvaluation.min_curvature_direction: ansys.geometry.core.math.vector.UnitVector3D\n\nMinimum curvature direction.\n\nReturns\n\nUnitVector3D\n\nMinimum curvature direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ConeEvaluation.max_curvature",
        "title": "ConeEvaluation > Property detail > max_curvature",
        "section": "Property detail > max_curvature",
        "text": "property ConeEvaluation.max_curvature: ansys.geometry.core.typing.Real\n\nMaximum curvature of the cone.\n\nReturns\n\nReal\n\nMaximum curvature of the cone.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cone/ConeEvaluation.html#ConeEvaluation.max_curvature_direction",
        "title": "ConeEvaluation > Property detail > max_curvature_direction",
        "section": "Property detail > max_curvature_direction",
        "text": "property ConeEvaluation.max_curvature_direction: ansys.geometry.core.math.vector.UnitVector3D\n\nMaximum curvature direction.\n\nReturns\n\nUnitVector3D\n\nMaximum curvature direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/index.html#the-surfacepy-module",
        "title": "The surface.py module",
        "section": "The surface.py module",
        "text": "The surface.py module\nsurface.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/index.html#summary",
        "title": "The surface.py module > Summary",
        "section": "Summary",
        "text": "Surface\nProvides the abstract base class for a 3D surface.\nSummary\nSurface"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/index.html#description",
        "title": "The surface.py module > Description",
        "section": "Description",
        "text": "Provides the Surface class.\nDescription\nSurface"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/index",
        "href": "api/ansys/geometry/core/sketch/ellipse/index.html#the-ellipsepy-module",
        "title": "The ellipse.py module",
        "section": "The ellipse.py module",
        "text": "The ellipse.py module\nellipse.py"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/index",
        "href": "api/ansys/geometry/core/sketch/ellipse/index.html#summary",
        "title": "The ellipse.py module > Summary",
        "section": "Summary",
        "text": "SketchEllipse\nProvides for modeling an ellipse.\nSummary\nSketchEllipse"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/index",
        "href": "api/ansys/geometry/core/sketch/ellipse/index.html#description",
        "title": "The ellipse.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing an ellipse.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#the-checkspy-module",
        "title": "The checks.py module",
        "section": "The checks.py module",
        "text": "The checks.py module\nchecks.py"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#summary",
        "title": "The checks.py module > Summary",
        "section": "Summary",
        "text": "ensure_design_is_active\nMake sure that the design is active before executing a method.\ncheck_is_float_int\nCheck if a parameter has a float or integer value.\ncheck_ndarray_is_float_int\nCheck if a numpy.ndarray has float/integer types.\ncheck_ndarray_is_not_none\nCheck if a numpy.ndarray is all None.\ncheck_ndarray_is_all_nan\nCheck if a numpy.ndarray is all nan-valued.\ncheck_ndarray_is_non_zero\nCheck if a numpy.ndarray is zero-valued.\ncheck_pint_unit_compatibility\nCheck if input pint.Unit is compatible with the expected input.\ncheck_type_equivalence\nCheck if an input object is of the same class as an expected object.\ncheck_type\nCheck if an input object is of the same type as expected types.\ncheck_type_all_elements_in_iterable\nCheck if all elements in an iterable are of the same type as expected.\nmin_backend_version\nCompare a minimum required version to the current backend version.\ndeprecated_method\nDecorate a method as deprecated.\ndeprecated_argument\nDecorate a method argument as deprecated.\nrun_if_graphics_required\nCheck if graphics are available.\ngraphics_required\nDecorate a method as requiring graphics.\nERROR_GRAPHICS_REQUIRED\nMessage to display when graphics are required for a method.\nSummary\nensure_design_is_active\ncheck_is_float_int\ncheck_ndarray_is_float_int\nnumpy.ndarray\ncheck_ndarray_is_not_none\nnumpy.ndarray\nNone\ncheck_ndarray_is_all_nan\nnumpy.ndarray\ncheck_ndarray_is_non_zero\nnumpy.ndarray\ncheck_pint_unit_compatibility\npint.Unit\ncheck_type_equivalence\ncheck_type\ncheck_type_all_elements_in_iterable\nmin_backend_version\ndeprecated_method\ndeprecated_argument\nrun_if_graphics_required\ngraphics_required\nERROR_GRAPHICS_REQUIRED"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#description",
        "title": "The checks.py module > Description",
        "section": "Description",
        "text": "Provides functions for performing common checks.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#module-detail",
        "title": "The checks.py module > Module detail",
        "section": "Module detail",
        "text": "Make sure that the design is active before executing a method.\nThis function is necessary to be called whenever we do any operation\non the design. If we are just accessing information of the class, it\nis not necessary to call this.\nCheck if a parameter has a float or integer value.\nObject instance to check.\nParameter name (if any).\nIf the parameter does not have a float or integer value.\nCheck if a numpy.ndarray has float/integer types.\nnumpy.ndarray instance to check.\nnumpy.ndarray instance name (if any).\nIf the numpy.ndarray instance does not\nhave float or integer values.\nCheck if a numpy.ndarray is all None.\nnumpy.ndarray instance to check.\nnumpy.ndarray instance name (if any).\nIf the numpy.ndarray instance has a value\nof None for all parameters.\nCheck if a numpy.ndarray is all nan-valued.\nnumpy.ndarray instance to check.\nnumpy.ndarray instance name (if any).\nIf the numpy.ndarray instance is all nan-valued.\nCheck if a numpy.ndarray is zero-valued.\nnumpy.ndarray instance to check.\nnumpy.ndarray instance name (if any).\nIf the numpy.ndarray instance is zero-valued.\nCheck if input pint.Unit is compatible with the expected input.\npint.Unit input.\npint.Unit expected dimensionality.\nIf the input is not compatible with the pint.Unit class.\nCheck if an input object is of the same class as an expected object.\nInput object.\nExpected object.\nIf the objects are not of the same class.\nCheck if an input object is of the same type as expected types.\nInput object.\nOne or more types to compare the input object against.\nIf the object does not match the one or more expected types.\nCheck if all elements in an iterable are of the same type as expected.\nInput iterable.\nOne or more types to compare the input object against.\nIf one of the elements in the iterable does not match the one or more expected types.\nCompare a minimum required version to the current backend version.\nMinimum major version required by the method.\nMinimum minor version required by the method.\nMinimum service pack version required by the method.\nIf the method version is higher than the backend version.\nIf the client is not available.\nDecorate a method as deprecated.\nAlternative method to use. If provided, the warning message will\ninclude the alternative method.\nAdditional information to include in the warning message.\nVersion where the method was deprecated.\nVersion where the method will be removed.\nDecorate a method argument as deprecated.\nArgument to mark as deprecated.\nAlternative argument to use. If provided, the warning message will\ninclude the alternative argument.\nAdditional information to include in the warning message.\nVersion where the method was deprecated.\nVersion where the method will be removed.\nCheck if graphics are available.\nDecorate a method as requiring graphics.\nMethod to decorate.\nDecorated method.\nMessage to display when graphics are required for a method.\nModule detail\nobject\npython:str\npython:None\nTypeError\nnumpy.ndarray\nndarray\nnumpy.ndarray\npython:str\npython:None\nnumpy.ndarray\nTypeError\nnumpy.ndarray\nnumpy.ndarray\nNone\nndarray\nnumpy.ndarray\npython:str\npython:None\nnumpy.ndarray\nValueError\nnumpy.ndarray\nNone\nnumpy.ndarray\nndarray\nnumpy.ndarray\npython:str\npython:None\npython:None\nnumpy.ndarray\nValueError\nnumpy.ndarray\nnumpy.ndarray\nndarray\nnumpy.ndarray\npython:str\npython:None\nnumpy.ndarray\nValueError\nnumpy.ndarray\npint.Unit\nUnit\npint.Unit\nUnit\npint.Unit\nTypeError\npint.Unit\nobject\nobject\nTypeError\nobject\ntype\npython:tuple\ntype\nTypeError\nIterable\ntype\npython:tuple\ntype\nTypeError\npython:int\npython:int\npython:int\nGeometryRuntimeError\nGeometryRuntimeError\npython:str\npython:None\npython:str\npython:None\npython:str\npython:None\npython:str\npython:None\npython:str\npython:str\npython:None\npython:str\npython:None\npython:str\npython:None\npython:str\npython:None\npython:callable()\npython:callable()"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.ensure_design_is_active",
        "title": "The checks.py module > Module detail > ensure_design_is_active",
        "section": "Module detail > ensure_design_is_active",
        "text": "checks.ensure_design_is_active(method)\n\nMake sure that the design is active before executing a method.\n\nThis function is necessary to be called whenever we do any operation\non the design. If we are just accessing information of the class, it\nis not necessary to call this.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.check_is_float_int",
        "title": "The checks.py module > Module detail > check_is_float_int",
        "section": "Module detail > check_is_float_int",
        "text": "checks.check_is_float_int(param: object, param_name: str | None = None) -> None\n\nCheck if a parameter has a float or integer value.\n\nParameters\n\nparam\n\nobject\n\nObject instance to check.\n\nparam_name\n\npython:str, default: python:None\n\nParameter name (if any).\n\nRaises\n\nTypeError\n\nIf the parameter does not have a float or integer value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.check_ndarray_is_float_int",
        "title": "The checks.py module > Module detail > check_ndarray_is_float_int",
        "section": "Module detail > check_ndarray_is_float_int",
        "text": "checks.check_ndarray_is_float_int(param: numpy.ndarray, param_name: str | None = None) -> None\n\nCheck if a numpy.ndarray has float/integer types.\n\nParameters\n\nparam\n\nndarray\n\nnumpy.ndarray instance to check.\n\nparam_name\n\npython:str, default: python:None\n\nnumpy.ndarray instance name (if any).\n\nRaises\n\nTypeError\n\nIf the numpy.ndarray instance does not\nhave float or integer values.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.check_ndarray_is_not_none",
        "title": "The checks.py module > Module detail > check_ndarray_is_not_none",
        "section": "Module detail > check_ndarray_is_not_none",
        "text": "checks.check_ndarray_is_not_none(param: numpy.ndarray, param_name: str | None = None) -> None\n\nCheck if a numpy.ndarray is all None.\n\nParameters\n\nparam\n\nndarray\n\nnumpy.ndarray instance to check.\n\nparam_name\n\npython:str, default: python:None\n\nnumpy.ndarray instance name (if any).\n\nRaises\n\nValueError\n\nIf the numpy.ndarray instance has a value\nof None for all parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.check_ndarray_is_all_nan",
        "title": "The checks.py module > Module detail > check_ndarray_is_all_nan",
        "section": "Module detail > check_ndarray_is_all_nan",
        "text": "checks.check_ndarray_is_all_nan(param: numpy.ndarray, param_name: str | None = None) -> None\n\nCheck if a numpy.ndarray is all nan-valued.\n\nParameters\n\nparam\n\nndarray\n\nnumpy.ndarray instance to check.\n\nparam_name\n\npython:str or python:None, default: python:None\n\nnumpy.ndarray instance name (if any).\n\nRaises\n\nValueError\n\nIf the numpy.ndarray instance is all nan-valued.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.check_ndarray_is_non_zero",
        "title": "The checks.py module > Module detail > check_ndarray_is_non_zero",
        "section": "Module detail > check_ndarray_is_non_zero",
        "text": "checks.check_ndarray_is_non_zero(param: numpy.ndarray, param_name: str | None = None) -> None\n\nCheck if a numpy.ndarray is zero-valued.\n\nParameters\n\nparam\n\nndarray\n\nnumpy.ndarray instance to check.\n\nparam_name\n\npython:str, default: python:None\n\nnumpy.ndarray instance name (if any).\n\nRaises\n\nValueError\n\nIf the numpy.ndarray instance is zero-valued.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.check_pint_unit_compatibility",
        "title": "The checks.py module > Module detail > check_pint_unit_compatibility",
        "section": "Module detail > check_pint_unit_compatibility",
        "text": "checks.check_pint_unit_compatibility(input: pint.Unit, expected: pint.Unit) -> None\n\nCheck if input pint.Unit is compatible with the expected input.\n\nParameters\n\ninput\n\nUnit\n\npint.Unit input.\n\nexpected\n\nUnit\n\npint.Unit expected dimensionality.\n\nRaises\n\nTypeError\n\nIf the input is not compatible with the pint.Unit class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.check_type_equivalence",
        "title": "The checks.py module > Module detail > check_type_equivalence",
        "section": "Module detail > check_type_equivalence",
        "text": "checks.check_type_equivalence(input: object, expected: object) -> None\n\nCheck if an input object is of the same class as an expected object.\n\nParameters\n\ninput\n\nobject\n\nInput object.\n\nexpected\n\nobject\n\nExpected object.\n\nRaises\n\nTypeError\n\nIf the objects are not of the same class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.check_type",
        "title": "The checks.py module > Module detail > check_type",
        "section": "Module detail > check_type",
        "text": "checks.check_type(input: object, expected_type: type | tuple[type, Ellipsis]) -> None\n\nCheck if an input object is of the same type as expected types.\n\nParameters\n\ninput\n\nobject\n\nInput object.\n\nexpected_type\n\ntype | python:tuple[type, …]\n\nOne or more types to compare the input object against.\n\nRaises\n\nTypeError\n\nIf the object does not match the one or more expected types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.check_type_all_elements_in_iterable",
        "title": "The checks.py module > Module detail > check_type_all_elements_in_iterable",
        "section": "Module detail > check_type_all_elements_in_iterable",
        "text": "checks.check_type_all_elements_in_iterable(input: collections.abc.Iterable, expected_type: type | tuple[type, Ellipsis]) -> None\n\nCheck if all elements in an iterable are of the same type as expected.\n\nParameters\n\ninput\n\nIterable\n\nInput iterable.\n\nexpected_type\n\ntype | python:tuple[type, …]\n\nOne or more types to compare the input object against.\n\nRaises\n\nTypeError\n\nIf one of the elements in the iterable does not match the one or more expected types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.min_backend_version",
        "title": "The checks.py module > Module detail > min_backend_version",
        "section": "Module detail > min_backend_version",
        "text": "checks.min_backend_version(major: int, minor: int, service_pack: int)\n\nCompare a minimum required version to the current backend version.\n\nParameters\n\nmajor\n\npython:int\n\nMinimum major version required by the method.\n\nminor\n\npython:int\n\nMinimum minor version required by the method.\n\nservice_pack\n\npython:int\n\nMinimum service pack version required by the method.\n\nRaises\n\nGeometryRuntimeError\n\nIf the method version is higher than the backend version.\n\nGeometryRuntimeError\n\nIf the client is not available.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.deprecated_method",
        "title": "The checks.py module > Module detail > deprecated_method",
        "section": "Module detail > deprecated_method",
        "text": "checks.deprecated_method(alternative: str | None = None, info: str | None = None, version: str | None = None, remove: str | None = None)\n\nDecorate a method as deprecated.\n\nParameters\n\nalternative\n\npython:str, default: python:None\n\nAlternative method to use. If provided, the warning message will\ninclude the alternative method.\n\ninfo\n\npython:str, default: python:None\n\nAdditional information to include in the warning message.\n\nversion\n\npython:str, default: python:None\n\nVersion where the method was deprecated.\n\nremove\n\npython:str, default: python:None\n\nVersion where the method will be removed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.deprecated_argument",
        "title": "The checks.py module > Module detail > deprecated_argument",
        "section": "Module detail > deprecated_argument",
        "text": "checks.deprecated_argument(arg: str, alternative: str | None = None, info: str | None = None, version: str | None = None, remove: str | None = None)\n\nDecorate a method argument as deprecated.\n\nParameters\n\narg\n\npython:str\n\nArgument to mark as deprecated.\n\nalternative\n\npython:str, default: python:None\n\nAlternative argument to use. If provided, the warning message will\ninclude the alternative argument.\n\ninfo\n\npython:str, default: python:None\n\nAdditional information to include in the warning message.\n\nversion\n\npython:str, default: python:None\n\nVersion where the method was deprecated.\n\nremove\n\npython:str, default: python:None\n\nVersion where the method will be removed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.run_if_graphics_required",
        "title": "The checks.py module > Module detail > run_if_graphics_required",
        "section": "Module detail > run_if_graphics_required",
        "text": "checks.run_if_graphics_required()\n\nCheck if graphics are available.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.graphics_required",
        "title": "The checks.py module > Module detail > graphics_required",
        "section": "Module detail > graphics_required",
        "text": "checks.graphics_required(method)\n\nDecorate a method as requiring graphics.\n\nParameters\n\nmethod\n\npython:callable()\n\nMethod to decorate.\n\nReturns\n\npython:callable()\n\nDecorated method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/checks/index",
        "href": "api/ansys/geometry/core/misc/checks/index.html#checks.ERROR_GRAPHICS_REQUIRED",
        "title": "The checks.py module > Module detail > ERROR_GRAPHICS_REQUIRED",
        "section": "Module detail > ERROR_GRAPHICS_REQUIRED",
        "text": "checks.ERROR_GRAPHICS_REQUIRED = 'Graphics are required for this method. Please install the ``graphics`` target  to use this...\n\nMessage to display when graphics are required for a method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/SurfaceType",
        "href": "api/ansys/geometry/core/designer/face/SurfaceType.html#surfacetype",
        "title": "SurfaceType",
        "section": "SurfaceType",
        "text": "Bases: enum.Enum\nProvides values for the surface types supported.\nSurfaceType\nSurfaceType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/SurfaceType",
        "href": "api/ansys/geometry/core/designer/face/SurfaceType.html#ansys.geometry.core.designer.face.SurfaceType",
        "title": "SurfaceType > SurfaceType > SurfaceType",
        "section": "SurfaceType > SurfaceType",
        "text": "class ansys.geometry.core.designer.face.SurfaceType(*args, **kwds)\n\nBases: enum.Enum\n\nProvides values for the surface types supported.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/SurfaceType",
        "href": "api/ansys/geometry/core/designer/face/SurfaceType.html#overview",
        "title": "SurfaceType > Overview",
        "section": "Overview",
        "text": "SURFACETYPE_UNKNOWN\nSURFACETYPE_PLANE\nSURFACETYPE_CYLINDER\nSURFACETYPE_CONE\nSURFACETYPE_TORUS\nSURFACETYPE_SPHERE\nSURFACETYPE_NURBS\nSURFACETYPE_PROCEDURAL\nOverview\nSURFACETYPE_UNKNOWN\nSURFACETYPE_PLANE\nSURFACETYPE_CYLINDER\nSURFACETYPE_CONE\nSURFACETYPE_TORUS\nSURFACETYPE_SPHERE\nSURFACETYPE_NURBS\nSURFACETYPE_PROCEDURAL"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/SurfaceType",
        "href": "api/ansys/geometry/core/designer/face/SurfaceType.html#import-detail",
        "title": "SurfaceType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/SurfaceType",
        "href": "api/ansys/geometry/core/designer/face/SurfaceType.html#attribute-detail",
        "title": "SurfaceType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/SurfaceType",
        "href": "api/ansys/geometry/core/designer/face/SurfaceType.html#SurfaceType.SURFACETYPE_UNKNOWN",
        "title": "SurfaceType > Attribute detail > SURFACETYPE_UNKNOWN",
        "section": "Attribute detail > SURFACETYPE_UNKNOWN",
        "text": "SurfaceType.SURFACETYPE_UNKNOWN = 0\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/SurfaceType",
        "href": "api/ansys/geometry/core/designer/face/SurfaceType.html#SurfaceType.SURFACETYPE_PLANE",
        "title": "SurfaceType > Attribute detail > SURFACETYPE_PLANE",
        "section": "Attribute detail > SURFACETYPE_PLANE",
        "text": "SurfaceType.SURFACETYPE_PLANE = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/SurfaceType",
        "href": "api/ansys/geometry/core/designer/face/SurfaceType.html#SurfaceType.SURFACETYPE_CYLINDER",
        "title": "SurfaceType > Attribute detail > SURFACETYPE_CYLINDER",
        "section": "Attribute detail > SURFACETYPE_CYLINDER",
        "text": "SurfaceType.SURFACETYPE_CYLINDER = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/SurfaceType",
        "href": "api/ansys/geometry/core/designer/face/SurfaceType.html#SurfaceType.SURFACETYPE_CONE",
        "title": "SurfaceType > Attribute detail > SURFACETYPE_CONE",
        "section": "Attribute detail > SURFACETYPE_CONE",
        "text": "SurfaceType.SURFACETYPE_CONE = 3\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/SurfaceType",
        "href": "api/ansys/geometry/core/designer/face/SurfaceType.html#SurfaceType.SURFACETYPE_TORUS",
        "title": "SurfaceType > Attribute detail > SURFACETYPE_TORUS",
        "section": "Attribute detail > SURFACETYPE_TORUS",
        "text": "SurfaceType.SURFACETYPE_TORUS = 4\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/SurfaceType",
        "href": "api/ansys/geometry/core/designer/face/SurfaceType.html#SurfaceType.SURFACETYPE_SPHERE",
        "title": "SurfaceType > Attribute detail > SURFACETYPE_SPHERE",
        "section": "Attribute detail > SURFACETYPE_SPHERE",
        "text": "SurfaceType.SURFACETYPE_SPHERE = 5\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/SurfaceType",
        "href": "api/ansys/geometry/core/designer/face/SurfaceType.html#SurfaceType.SURFACETYPE_NURBS",
        "title": "SurfaceType > Attribute detail > SURFACETYPE_NURBS",
        "section": "Attribute detail > SURFACETYPE_NURBS",
        "text": "SurfaceType.SURFACETYPE_NURBS = 6\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/SurfaceType",
        "href": "api/ansys/geometry/core/designer/face/SurfaceType.html#SurfaceType.SURFACETYPE_PROCEDURAL",
        "title": "SurfaceType > Attribute detail > SURFACETYPE_PROCEDURAL",
        "section": "Attribute detail > SURFACETYPE_PROCEDURAL",
        "text": "SurfaceType.SURFACETYPE_PROCEDURAL = 7\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/index",
        "href": "api/ansys/geometry/core/connection/index.html#the-connection-package",
        "title": "The connection package",
        "section": "The connection package",
        "text": "The connection package\nconnection"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/index",
        "href": "api/ansys/geometry/core/connection/index.html#summary",
        "title": "The connection package > Summary",
        "section": "Summary",
        "text": "backend\nModule providing definitions for the backend types.\nclient\nModule providing a wrapped abstraction of the gRPC stubs.\nconversions\nModule providing for conversions.\ndefaults\nModule providing default connection parameters.\ndocker_instance\nModule for connecting to a local Geometry Service Docker container.\nlauncher\nModule for connecting to instances of the Geometry service.\nproduct_instance\nModule containing the ProductInstance class.\nvalidate\nModule to perform a connection validation check.\nSummary\nbackend\nclient\nconversions\ndefaults\ndocker_instance\nlauncher\nproduct_instance\nProductInstance\nvalidate"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/index",
        "href": "api/ansys/geometry/core/connection/index.html#description",
        "title": "The connection package > Description",
        "section": "Description",
        "text": "PyAnsys Geometry connection subpackage.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/SketchEdge",
        "href": "api/ansys/geometry/core/sketch/edge/SketchEdge.html#sketchedge",
        "title": "SketchEdge",
        "section": "SketchEdge",
        "text": "Provides for modeling edges forming sketched shapes.\nSketchEdge\nSketchEdge"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/SketchEdge",
        "href": "api/ansys/geometry/core/sketch/edge/SketchEdge.html#ansys.geometry.core.sketch.edge.SketchEdge",
        "title": "SketchEdge > SketchEdge > SketchEdge",
        "section": "SketchEdge > SketchEdge",
        "text": "class ansys.geometry.core.sketch.edge.SketchEdge\n\nProvides for modeling edges forming sketched shapes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/SketchEdge",
        "href": "api/ansys/geometry/core/sketch/edge/SketchEdge.html#overview",
        "title": "SketchEdge > Overview",
        "section": "Overview",
        "text": "plane_change\nRedefine the plane containing SketchEdge objects.\nstart\nStarting point of the edge.\nend\nEnding point of the edge.\nlength\nLength of the edge.\nvisualization_polydata\nVTK polydata representation for PyVista visualization.\nOverview\nplane_change\nSketchEdge\nstart\nend\nlength\nvisualization_polydata"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/SketchEdge",
        "href": "api/ansys/geometry/core/sketch/edge/SketchEdge.html#import-detail",
        "title": "SketchEdge > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/SketchEdge",
        "href": "api/ansys/geometry/core/sketch/edge/SketchEdge.html#property-detail",
        "title": "SketchEdge > Property detail",
        "section": "Property detail",
        "text": "Starting point of the edge.\nEnding point of the edge.\nLength of the edge.\nVTK polydata representation for PyVista visualization.\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\nVTK pyvista.Polydata configuration.\nProperty detail\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/SketchEdge",
        "href": "api/ansys/geometry/core/sketch/edge/SketchEdge.html#SketchEdge.start",
        "title": "SketchEdge > Property detail > start",
        "section": "Property detail > start",
        "text": "property SketchEdge.start: ansys.geometry.core.math.point.Point2D\n\nAbstractmethod\n\n\n\nStarting point of the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/SketchEdge",
        "href": "api/ansys/geometry/core/sketch/edge/SketchEdge.html#SketchEdge.end",
        "title": "SketchEdge > Property detail > end",
        "section": "Property detail > end",
        "text": "property SketchEdge.end: ansys.geometry.core.math.point.Point2D\n\nAbstractmethod\n\n\n\nEnding point of the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/SketchEdge",
        "href": "api/ansys/geometry/core/sketch/edge/SketchEdge.html#SketchEdge.length",
        "title": "SketchEdge > Property detail > length",
        "section": "Property detail > length",
        "text": "property SketchEdge.length: pint.Quantity\n\nAbstractmethod\n\n\n\nLength of the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/SketchEdge",
        "href": "api/ansys/geometry/core/sketch/edge/SketchEdge.html#SketchEdge.visualization_polydata",
        "title": "SketchEdge > Property detail > visualization_polydata",
        "section": "Property detail > visualization_polydata",
        "text": "property SketchEdge.visualization_polydata: pyvista.PolyData\n\nAbstractmethod\n\n\n\nVTK polydata representation for PyVista visualization.\n\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\n\nReturns\n\npyvista.PolyData\n\nVTK pyvista.Polydata configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/SketchEdge",
        "href": "api/ansys/geometry/core/sketch/edge/SketchEdge.html#method-detail",
        "title": "SketchEdge > Method detail",
        "section": "Method detail",
        "text": "Redefine the plane containing SketchEdge objects.\nDesired new plane that is to contain the sketched edge.\nThis implies that their 3D definition might suffer changes. By default, this\nmetho does nothing. It is required to be implemented in child SketchEdge\nclasses.\nMethod detail\nSketchEdge\nPlane\nSketchEdge"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/edge/SketchEdge",
        "href": "api/ansys/geometry/core/sketch/edge/SketchEdge.html#SketchEdge.plane_change",
        "title": "SketchEdge > Method detail > plane_change",
        "section": "Method detail > plane_change",
        "text": "SketchEdge.plane_change(plane: ansys.geometry.core.math.plane.Plane) -> None\n\nRedefine the plane containing SketchEdge objects.\n\nParameters\n\nplane\n\nPlane\n\nDesired new plane that is to contain the sketched edge.\n\nNotes\n\nThis implies that their 3D definition might suffer changes. By default, this\nmetho does nothing. It is required to be implemented in child SketchEdge\nclasses.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoop",
        "href": "api/ansys/geometry/core/designer/face/FaceLoop.html#faceloop",
        "title": "FaceLoop",
        "section": "FaceLoop",
        "text": "Provides an internal class holding the face loops defined.\nType of loop.\nLength of the loop.\nMinimum point of the bounding box containing the loop.\nMaximum point of the bounding box containing the loop.\nEdges contained in the loop.\nThis class is to be used only when parsing server side results. It is not\nintended to be instantiated by a user.\nFaceLoop\nFaceLoop\nFaceLoopType\nQuantity\nPoint3D\nPoint3D\npython:list\nEdge"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoop",
        "href": "api/ansys/geometry/core/designer/face/FaceLoop.html#ansys.geometry.core.designer.face.FaceLoop",
        "title": "FaceLoop > FaceLoop > FaceLoop",
        "section": "FaceLoop > FaceLoop",
        "text": "class ansys.geometry.core.designer.face.FaceLoop(type: FaceLoopType, length: pint.Quantity, min_bbox: ansys.geometry.core.math.point.Point3D, max_bbox: ansys.geometry.core.math.point.Point3D, edges: list[ansys.geometry.core.designer.edge.Edge])\n\nProvides an internal class holding the face loops defined.\n\nParameters\n\ntype\n\nFaceLoopType\n\nType of loop.\n\nlength\n\nQuantity\n\nLength of the loop.\n\nmin_bbox\n\nPoint3D\n\nMinimum point of the bounding box containing the loop.\n\nmax_bbox\n\nPoint3D\n\nMaximum point of the bounding box containing the loop.\n\nedges\n\npython:list[Edge]\n\nEdges contained in the loop.\n\nNotes\n\nThis class is to be used only when parsing server side results. It is not\nintended to be instantiated by a user.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoop",
        "href": "api/ansys/geometry/core/designer/face/FaceLoop.html#overview",
        "title": "FaceLoop > Overview",
        "section": "Overview",
        "text": "type\nType of the loop.\nlength\nLength of the loop.\nmin_bbox\nMinimum point of the bounding box containing the loop.\nmax_bbox\nMaximum point of the bounding box containing the loop.\nedges\nEdges contained in the loop.\nOverview\ntype\nlength\nmin_bbox\nmax_bbox\nedges"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoop",
        "href": "api/ansys/geometry/core/designer/face/FaceLoop.html#import-detail",
        "title": "FaceLoop > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoop",
        "href": "api/ansys/geometry/core/designer/face/FaceLoop.html#property-detail",
        "title": "FaceLoop > Property detail",
        "section": "Property detail",
        "text": "Type of the loop.\nLength of the loop.\nMinimum point of the bounding box containing the loop.\nMaximum point of the bounding box containing the loop.\nEdges contained in the loop.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoop",
        "href": "api/ansys/geometry/core/designer/face/FaceLoop.html#FaceLoop.type",
        "title": "FaceLoop > Property detail > type",
        "section": "Property detail > type",
        "text": "property FaceLoop.type: FaceLoopType\n\nType of the loop.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoop",
        "href": "api/ansys/geometry/core/designer/face/FaceLoop.html#FaceLoop.length",
        "title": "FaceLoop > Property detail > length",
        "section": "Property detail > length",
        "text": "property FaceLoop.length: pint.Quantity\n\nLength of the loop.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoop",
        "href": "api/ansys/geometry/core/designer/face/FaceLoop.html#FaceLoop.min_bbox",
        "title": "FaceLoop > Property detail > min_bbox",
        "section": "Property detail > min_bbox",
        "text": "property FaceLoop.min_bbox: ansys.geometry.core.math.point.Point3D\n\nMinimum point of the bounding box containing the loop.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoop",
        "href": "api/ansys/geometry/core/designer/face/FaceLoop.html#FaceLoop.max_bbox",
        "title": "FaceLoop > Property detail > max_bbox",
        "section": "Property detail > max_bbox",
        "text": "property FaceLoop.max_bbox: ansys.geometry.core.math.point.Point3D\n\nMaximum point of the bounding box containing the loop.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoop",
        "href": "api/ansys/geometry/core/designer/face/FaceLoop.html#FaceLoop.edges",
        "title": "FaceLoop > Property detail > edges",
        "section": "Property detail > edges",
        "text": "property FaceLoop.edges: list[ansys.geometry.core.designer.edge.Edge]\n\nEdges contained in the loop.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/03_modeling/design_parameters",
        "href": "examples/03_modeling/design_parameters.html#modeling-using-design-parameters",
        "title": "Examples > Modeling: Using design parameters",
        "section": "Modeling: Using design parameters",
        "text": "You can read and update parameters that are part of the design. The simple design in this example has two associated parameters.\nModeling: Using design parameters"
    },
    {
        "objectID": "examples/03_modeling/design_parameters",
        "href": "examples/03_modeling/design_parameters.html#perform-required-imports",
        "title": "Examples > Modeling: Using design parameters > Perform required imports",
        "section": "Perform required imports",
        "text": "The file for this example is in the integration tests folder and can be downloaded.\nPerform required imports"
    },
    {
        "objectID": "examples/03_modeling/design_parameters",
        "href": "examples/03_modeling/design_parameters.html#download-the-example-file",
        "title": "Examples > Modeling: Using design parameters > Download the example file",
        "section": "Download the example file",
        "text": "Download the file for this example from the integration tests folder in the PyAnsys Geometry repository.\nDownload the example file"
    },
    {
        "objectID": "examples/03_modeling/design_parameters",
        "href": "examples/03_modeling/design_parameters.html#import-a-design-with-parameters",
        "title": "Examples > Modeling: Using design parameters > Import a design with parameters",
        "section": "Import a design with parameters",
        "text": "Import the model using the open_file() method of the modeler.\nImport a design with parameters\nopen_file()"
    },
    {
        "objectID": "examples/03_modeling/design_parameters",
        "href": "examples/03_modeling/design_parameters.html#read-existing-parameters-of-the-design",
        "title": "Examples > Modeling: Using design parameters > Read existing parameters of the design",
        "section": "Read existing parameters of the design",
        "text": "You can get all the parameters of the design as a list of parameters. Because this example has two parameters, you see two items in the list.\nA parameter object has a name, value, and unit.\nParameter values are returned in the default unit for each dimension type. Since default length unit is meter and default area unit is meter square, the value is returned in square meters.\nRead existing parameters of the design"
    },
    {
        "objectID": "examples/03_modeling/design_parameters",
        "href": "examples/03_modeling/design_parameters.html#edit-a-parameter-value",
        "title": "Examples > Modeling: Using design parameters > Edit a parameter value",
        "section": "Edit a parameter value",
        "text": "You can edit the parameter’s name or value by simply setting these fields. Set the second parameter (p2 value to 350 mm).\nAfter a successful parameter update, the design is updated. If we request the design plot again, we see the updated design.\nThe set_parameter() method returns a Success status message if the parameter is updated or a “FAILURE” status message if the update fails. If the p2 parameter depends on the p1 parameter, updating the p1 parameter might also change the p2 parameter. In such cases, the method returns CONSTRAINED_PARAMETERS, which indicates other parameters were also updated.\nTo get the updated list, query the parameters once again.\nEdit a parameter value\nset_parameter()\nSuccess\np2\np1\np1\np2\nCONSTRAINED_PARAMETERS"
    },
    {
        "objectID": "examples/03_modeling/design_parameters",
        "href": "examples/03_modeling/design_parameters.html#close-the-modeler",
        "title": "Examples > Modeling: Using design parameters > Close the modeler",
        "section": "Close the modeler",
        "text": "Close the modeler to free up resources and release the connection.\nClose the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/material/Material",
        "href": "api/ansys/geometry/core/materials/material/Material.html#material",
        "title": "Material",
        "section": "Material",
        "text": "Provides the data structure for a material.\nMaterial name.\nMaterial density.\nAdditional material properties.\nMaterial\nMaterial"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/material/Material",
        "href": "api/ansys/geometry/core/materials/material/Material.html#ansys.geometry.core.materials.material.Material",
        "title": "Material > Material > Material",
        "section": "Material > Material",
        "text": "class ansys.geometry.core.materials.material.Material(name: str, density: pint.Quantity, additional_properties: collections.abc.Sequence[ansys.geometry.core.materials.property.MaterialProperty] | None = None)\n\nProvides the data structure for a material.\n\nParameters\n\nname: str\n\nMaterial name.\n\ndensity: ~pint.Quantity\n\nMaterial density.\n\nadditional_properties: Sequence[MaterialProperty], default: None\n\nAdditional material properties.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/material/Material",
        "href": "api/ansys/geometry/core/materials/material/Material.html#overview",
        "title": "Material > Overview",
        "section": "Overview",
        "text": "add_property\nAdd a material property to the Material class.\nproperties\nDictionary of the material property type and material properties.\nname\nMaterial name.\nOverview\nadd_property\nMaterial\nproperties\nname"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/material/Material",
        "href": "api/ansys/geometry/core/materials/material/Material.html#import-detail",
        "title": "Material > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/material/Material",
        "href": "api/ansys/geometry/core/materials/material/Material.html#property-detail",
        "title": "Material > Property detail",
        "section": "Property detail",
        "text": "Dictionary of the material property type and material properties.\nMaterial name.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/material/Material",
        "href": "api/ansys/geometry/core/materials/material/Material.html#Material.properties",
        "title": "Material > Property detail > properties",
        "section": "Property detail > properties",
        "text": "property Material.properties: dict[ansys.geometry.core.materials.property.MaterialPropertyType, ansys.geometry.core.materials.property.MaterialProperty]\n\nDictionary of the material property type and material properties.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/material/Material",
        "href": "api/ansys/geometry/core/materials/material/Material.html#Material.name",
        "title": "Material > Property detail > name",
        "section": "Property detail > name",
        "text": "property Material.name: str\n\nMaterial name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/material/Material",
        "href": "api/ansys/geometry/core/materials/material/Material.html#method-detail",
        "title": "Material > Method detail",
        "section": "Method detail",
        "text": "Add a material property to the Material class.\nMaterial property type.\nMaterial name.\nMaterial value and unit.\nMethod detail\nMaterial\nMaterialPropertyType"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/material/Material",
        "href": "api/ansys/geometry/core/materials/material/Material.html#Material.add_property",
        "title": "Material > Method detail > add_property",
        "section": "Method detail > add_property",
        "text": "Material.add_property(type: ansys.geometry.core.materials.property.MaterialPropertyType, name: str, quantity: pint.Quantity) -> None\n\nAdd a material property to the Material class.\n\nParameters\n\ntype\n\nMaterialPropertyType\n\nMaterial property type.\n\nname: str\n\nMaterial name.\n\nquantity: ~pint.Quantity\n\nMaterial value and unit.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/index",
        "href": "api/ansys/geometry/core/math/point/index.html#the-pointpy-module",
        "title": "The point.py module",
        "section": "The point.py module",
        "text": "The point.py module\npoint.py"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/index",
        "href": "api/ansys/geometry/core/math/point/index.html#summary",
        "title": "The point.py module > Summary",
        "section": "Summary",
        "text": "Point2D\nProvides geometry primitive representation for a 2D point.\nPoint3D\nProvides geometry primitive representation for a 3D point.\nDEFAULT_POINT2D_VALUES\nDefault values for a 2D point.\nDEFAULT_POINT3D_VALUES\nDefault values for a 3D point.\nBASE_UNIT_LENGTH\nDefault value for the length of the base unit.\nSummary\nPoint2D\nPoint3D\nDEFAULT_POINT2D_VALUES\nDEFAULT_POINT3D_VALUES\nBASE_UNIT_LENGTH"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/index",
        "href": "api/ansys/geometry/core/math/point/index.html#description",
        "title": "The point.py module > Description",
        "section": "Description",
        "text": "Provides geometry primitive representation for 2D and 3D points.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/index",
        "href": "api/ansys/geometry/core/math/point/index.html#module-detail",
        "title": "The point.py module > Module detail",
        "section": "Module detail",
        "text": "Default values for a 2D point.\nDefault values for a 3D point.\nDefault value for the length of the base unit.\nModule detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/index",
        "href": "api/ansys/geometry/core/math/point/index.html#point.DEFAULT_POINT2D_VALUES",
        "title": "The point.py module > Module detail > DEFAULT_POINT2D_VALUES",
        "section": "Module detail > DEFAULT_POINT2D_VALUES",
        "text": "point.DEFAULT_POINT2D_VALUES\n\nDefault values for a 2D point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/index",
        "href": "api/ansys/geometry/core/math/point/index.html#point.DEFAULT_POINT3D_VALUES",
        "title": "The point.py module > Module detail > DEFAULT_POINT3D_VALUES",
        "section": "Module detail > DEFAULT_POINT3D_VALUES",
        "text": "point.DEFAULT_POINT3D_VALUES\n\nDefault values for a 3D point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/index",
        "href": "api/ansys/geometry/core/math/point/index.html#point.BASE_UNIT_LENGTH",
        "title": "The point.py module > Module detail > BASE_UNIT_LENGTH",
        "section": "Module detail > BASE_UNIT_LENGTH",
        "text": "point.BASE_UNIT_LENGTH\n\nDefault value for the length of the base unit.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/triangle/Triangle",
        "href": "api/ansys/geometry/core/sketch/triangle/Triangle.html#triangle",
        "title": "Triangle",
        "section": "Triangle",
        "text": "Bases: ansys.geometry.core.sketch.face.SketchFace\nProvides for modeling 2D triangles.\nPoint that represents a triangle vertex.\nPoint that represents a triangle vertex.\nPoint that represents a triangle vertex.\nTriangle\nTriangle\nansys.geometry.core.sketch.face.SketchFace"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/triangle/Triangle",
        "href": "api/ansys/geometry/core/sketch/triangle/Triangle.html#ansys.geometry.core.sketch.triangle.Triangle",
        "title": "Triangle > Triangle > Triangle",
        "section": "Triangle > Triangle",
        "text": "class ansys.geometry.core.sketch.triangle.Triangle(point1: ansys.geometry.core.math.point.Point2D, point2: ansys.geometry.core.math.point.Point2D, point3: ansys.geometry.core.math.point.Point2D)\n\nBases: ansys.geometry.core.sketch.face.SketchFace\n\nProvides for modeling 2D triangles.\n\nParameters\n\npoint1: Point2D\n\nPoint that represents a triangle vertex.\n\npoint2: Point2D\n\nPoint that represents a triangle vertex.\n\npoint3: Point2D\n\nPoint that represents a triangle vertex.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/triangle/Triangle",
        "href": "api/ansys/geometry/core/sketch/triangle/Triangle.html#overview",
        "title": "Triangle > Overview",
        "section": "Overview",
        "text": "point1\nTriangle vertex 1.\npoint2\nTriangle vertex 2.\npoint3\nTriangle vertex 3.\nvisualization_polydata\nVTK polydata representation for PyVista visualization.\nOverview\npoint1\npoint2\npoint3\nvisualization_polydata"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/triangle/Triangle",
        "href": "api/ansys/geometry/core/sketch/triangle/Triangle.html#import-detail",
        "title": "Triangle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/triangle/Triangle",
        "href": "api/ansys/geometry/core/sketch/triangle/Triangle.html#property-detail",
        "title": "Triangle > Property detail",
        "section": "Property detail",
        "text": "Triangle vertex 1.\nTriangle vertex 2.\nTriangle vertex 3.\nVTK polydata representation for PyVista visualization.\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\nVTK pyvista.Polydata configuration.\nProperty detail\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/triangle/Triangle",
        "href": "api/ansys/geometry/core/sketch/triangle/Triangle.html#Triangle.point1",
        "title": "Triangle > Property detail > point1",
        "section": "Property detail > point1",
        "text": "property Triangle.point1: ansys.geometry.core.math.point.Point2D\n\nTriangle vertex 1.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/triangle/Triangle",
        "href": "api/ansys/geometry/core/sketch/triangle/Triangle.html#Triangle.point2",
        "title": "Triangle > Property detail > point2",
        "section": "Property detail > point2",
        "text": "property Triangle.point2: ansys.geometry.core.math.point.Point2D\n\nTriangle vertex 2.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/triangle/Triangle",
        "href": "api/ansys/geometry/core/sketch/triangle/Triangle.html#Triangle.point3",
        "title": "Triangle > Property detail > point3",
        "section": "Property detail > point3",
        "text": "property Triangle.point3: ansys.geometry.core.math.point.Point2D\n\nTriangle vertex 3.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/triangle/Triangle",
        "href": "api/ansys/geometry/core/sketch/triangle/Triangle.html#Triangle.visualization_polydata",
        "title": "Triangle > Property detail > visualization_polydata",
        "section": "Property detail > visualization_polydata",
        "text": "property Triangle.visualization_polydata: pyvista.PolyData\n\nVTK polydata representation for PyVista visualization.\n\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\n\nReturns\n\npyvista.PolyData\n\nVTK pyvista.Polydata configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/trapezoid/index",
        "href": "api/ansys/geometry/core/sketch/trapezoid/index.html#the-trapezoidpy-module",
        "title": "The trapezoid.py module",
        "section": "The trapezoid.py module",
        "text": "The trapezoid.py module\ntrapezoid.py"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/trapezoid/index",
        "href": "api/ansys/geometry/core/sketch/trapezoid/index.html#summary",
        "title": "The trapezoid.py module > Summary",
        "section": "Summary",
        "text": "Trapezoid\nProvides for modeling a 2D trapezoid.\nSummary\nTrapezoid"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/trapezoid/index",
        "href": "api/ansys/geometry/core/sketch/trapezoid/index.html#description",
        "title": "The trapezoid.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a trapezoid.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#ellipse",
        "title": "Ellipse",
        "section": "Ellipse",
        "text": "Bases: ansys.geometry.core.shapes.curves.curve.Curve\nProvides 3D ellipse representation.\nOrigin of the ellipse.\nMajor radius of the ellipse.\nMinor radius of the ellipse.\nX-axis direction.\nZ-axis direction.\nEllipse\nEllipse\nansys.geometry.core.shapes.curves.curve.Curve\nndarray\nRealSequence\nPoint3D\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\nndarray\nRealSequence\nUnitVector3D\nVector3D\nndarray\nRealSequence\nUnitVector3D\nVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#ansys.geometry.core.shapes.curves.ellipse.Ellipse",
        "title": "Ellipse > Ellipse > Ellipse",
        "section": "Ellipse > Ellipse",
        "text": "class ansys.geometry.core.shapes.curves.ellipse.Ellipse(origin: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D, major_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, minor_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, reference: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_X, axis: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_Z)\n\nBases: ansys.geometry.core.shapes.curves.curve.Curve\n\nProvides 3D ellipse representation.\n\nParameters\n\norigin\n\nndarray | RealSequence | Point3D\n\nOrigin of the ellipse.\n\nmajor_radius\n\nQuantity | Distance | Real\n\nMajor radius of the ellipse.\n\nminor_radius\n\nQuantity | Distance | Real\n\nMinor radius of the ellipse.\n\nreference\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nX-axis direction.\n\naxis\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nZ-axis direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#overview",
        "title": "Ellipse > Overview",
        "section": "Overview",
        "text": "contains_param\nCheck a parameter is within the parametric range of the curve.\ncontains_point\nCheck a point is contained by the curve.\nmirrored_copy\nCreate a mirrored copy of the ellipse along the y-axis.\nevaluate\nEvaluate the ellipse at the given parameter.\nproject_point\nProject a point onto the ellipse and evaluate the ellipse.\nis_coincident_ellipse\nDetermine if this ellipse is coincident with another.\ntransformed_copy\nCreate a transformed copy of the ellipse from a transformation matrix.\nparameterization\nGet the parametrization of the ellipse.\norigin\nOrigin of the ellipse.\nmajor_radius\nMajor radius of the ellipse.\nminor_radius\nMinor radius of the ellipse.\ndir_x\nX-direction of the ellipse.\ndir_y\nY-direction of the ellipse.\ndir_z\nZ-direction of the ellipse.\neccentricity\nEccentricity of the ellipse.\nlinear_eccentricity\nLinear eccentricity of the ellipse.\nsemi_latus_rectum\nSemi-latus rectum of the ellipse.\nperimeter\nPerimeter of the ellipse.\narea\nArea of the ellipse.\n__eq__\nEquals operator for the Ellipse class.\nOverview\ncontains_param\ncontains_point\nmirrored_copy\nevaluate\nproject_point\nis_coincident_ellipse\ntransformed_copy\nparameterization\norigin\nmajor_radius\nminor_radius\ndir_x\ndir_y\ndir_z\neccentricity\nlinear_eccentricity\nsemi_latus_rectum\nperimeter\narea\n__eq__\nEllipse"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#import-detail",
        "title": "Ellipse > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#property-detail",
        "title": "Ellipse > Property detail",
        "section": "Property detail",
        "text": "Origin of the ellipse.\nMajor radius of the ellipse.\nMinor radius of the ellipse.\nX-direction of the ellipse.\nY-direction of the ellipse.\nZ-direction of the ellipse.\nEccentricity of the ellipse.\nLinear eccentricity of the ellipse.\nThe linear eccentricity is the distance from the center to the focus.\nSemi-latus rectum of the ellipse.\nPerimeter of the ellipse.\nArea of the ellipse.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.origin",
        "title": "Ellipse > Property detail > origin",
        "section": "Property detail > origin",
        "text": "property Ellipse.origin: ansys.geometry.core.math.point.Point3D\n\nOrigin of the ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.major_radius",
        "title": "Ellipse > Property detail > major_radius",
        "section": "Property detail > major_radius",
        "text": "property Ellipse.major_radius: pint.Quantity\n\nMajor radius of the ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.minor_radius",
        "title": "Ellipse > Property detail > minor_radius",
        "section": "Property detail > minor_radius",
        "text": "property Ellipse.minor_radius: pint.Quantity\n\nMinor radius of the ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.dir_x",
        "title": "Ellipse > Property detail > dir_x",
        "section": "Property detail > dir_x",
        "text": "property Ellipse.dir_x: ansys.geometry.core.math.vector.UnitVector3D\n\nX-direction of the ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.dir_y",
        "title": "Ellipse > Property detail > dir_y",
        "section": "Property detail > dir_y",
        "text": "property Ellipse.dir_y: ansys.geometry.core.math.vector.UnitVector3D\n\nY-direction of the ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.dir_z",
        "title": "Ellipse > Property detail > dir_z",
        "section": "Property detail > dir_z",
        "text": "property Ellipse.dir_z: ansys.geometry.core.math.vector.UnitVector3D\n\nZ-direction of the ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.eccentricity",
        "title": "Ellipse > Property detail > eccentricity",
        "section": "Property detail > eccentricity",
        "text": "property Ellipse.eccentricity: ansys.geometry.core.typing.Real\n\nEccentricity of the ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.linear_eccentricity",
        "title": "Ellipse > Property detail > linear_eccentricity",
        "section": "Property detail > linear_eccentricity",
        "text": "property Ellipse.linear_eccentricity: pint.Quantity\n\nLinear eccentricity of the ellipse.\n\nNotes\n\nThe linear eccentricity is the distance from the center to the focus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.semi_latus_rectum",
        "title": "Ellipse > Property detail > semi_latus_rectum",
        "section": "Property detail > semi_latus_rectum",
        "text": "property Ellipse.semi_latus_rectum: pint.Quantity\n\nSemi-latus rectum of the ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.perimeter",
        "title": "Ellipse > Property detail > perimeter",
        "section": "Property detail > perimeter",
        "text": "property Ellipse.perimeter: pint.Quantity\n\nPerimeter of the ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.area",
        "title": "Ellipse > Property detail > area",
        "section": "Property detail > area",
        "text": "property Ellipse.area: pint.Quantity\n\nArea of the ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#method-detail",
        "title": "Ellipse > Method detail",
        "section": "Method detail",
        "text": "Equals operator for the Ellipse class.\nCreate a mirrored copy of the ellipse along the y-axis.\nNew ellipse that is a mirrored copy of the original ellipse.\nEvaluate the ellipse at the given parameter.\nParameter to evaluate the ellipse at.\nResulting evaluation.\nProject a point onto the ellipse and evaluate the ellipse.\nPoint to project onto the ellipse.\nResulting evaluation.\nDetermine if this ellipse is coincident with another.\nEllipse to determine coincidence with.\nTrue if this ellipse is coincident with the other, False otherwise.\nCreate a transformed copy of the ellipse from a transformation matrix.\n4x4 transformation matrix to apply to the ellipse.\nNew ellipse that is the transformed copy of the original ellipse.\nGet the parametrization of the ellipse.\nThe parameter of an ellipse specifies the clockwise angle around the axis\n(right-hand corkscrew law), with a zero parameter at dir_x and a period of 2*pi.\nInformation about how the ellipse is parameterized.\nCheck a parameter is within the parametric range of the curve.\nCheck a point is contained by the curve.\nThe point can either lie within the curve or on its boundary.\nMethod detail\nEllipse\nEllipse\nReal\nEllipseEvaluation\nPoint3D\nEllipseEvaluation\nEllipse\nTrue\nFalse\nMatrix44\nEllipse\ndir_x\nParameterization"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.__eq__",
        "title": "Ellipse > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Ellipse.__eq__(other: Ellipse) -> bool\n\nEquals operator for the Ellipse class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.mirrored_copy",
        "title": "Ellipse > Method detail > mirrored_copy",
        "section": "Method detail > mirrored_copy",
        "text": "Ellipse.mirrored_copy() -> Ellipse\n\nCreate a mirrored copy of the ellipse along the y-axis.\n\nReturns\n\nEllipse\n\nNew ellipse that is a mirrored copy of the original ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.evaluate",
        "title": "Ellipse > Method detail > evaluate",
        "section": "Method detail > evaluate",
        "text": "Ellipse.evaluate(parameter: ansys.geometry.core.typing.Real) -> EllipseEvaluation\n\nEvaluate the ellipse at the given parameter.\n\nParameters\n\nparameter\n\nReal\n\nParameter to evaluate the ellipse at.\n\nReturns\n\nEllipseEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.project_point",
        "title": "Ellipse > Method detail > project_point",
        "section": "Method detail > project_point",
        "text": "Ellipse.project_point(point: ansys.geometry.core.math.point.Point3D) -> EllipseEvaluation\n\nProject a point onto the ellipse and evaluate the ellipse.\n\nParameters\n\npoint\n\nPoint3D\n\nPoint to project onto the ellipse.\n\nReturns\n\nEllipseEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.is_coincident_ellipse",
        "title": "Ellipse > Method detail > is_coincident_ellipse",
        "section": "Method detail > is_coincident_ellipse",
        "text": "Ellipse.is_coincident_ellipse(other: Ellipse) -> bool\n\nDetermine if this ellipse is coincident with another.\n\nParameters\n\nother\n\nEllipse\n\nEllipse to determine coincidence with.\n\nReturns\n\nbool\n\nTrue if this ellipse is coincident with the other, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.transformed_copy",
        "title": "Ellipse > Method detail > transformed_copy",
        "section": "Method detail > transformed_copy",
        "text": "Ellipse.transformed_copy(matrix: ansys.geometry.core.math.matrix.Matrix44) -> Ellipse\n\nCreate a transformed copy of the ellipse from a transformation matrix.\n\nParameters\n\nmatrix\n\nMatrix44\n\n4x4 transformation matrix to apply to the ellipse.\n\nReturns\n\nEllipse\n\nNew ellipse that is the transformed copy of the original ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.parameterization",
        "title": "Ellipse > Method detail > parameterization",
        "section": "Method detail > parameterization",
        "text": "Ellipse.parameterization() -> ansys.geometry.core.shapes.parameterization.Parameterization\n\nGet the parametrization of the ellipse.\n\nThe parameter of an ellipse specifies the clockwise angle around the axis\n(right-hand corkscrew law), with a zero parameter at dir_x and a period of 2*pi.\n\nReturns\n\nParameterization\n\nInformation about how the ellipse is parameterized.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.contains_param",
        "title": "Ellipse > Method detail > contains_param",
        "section": "Method detail > contains_param",
        "text": "abstractmethod Ellipse.contains_param(param: ansys.geometry.core.typing.Real) -> bool\n\nCheck a parameter is within the parametric range of the curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/Ellipse.html#Ellipse.contains_point",
        "title": "Ellipse > Method detail > contains_point",
        "section": "Method detail > contains_point",
        "text": "abstractmethod Ellipse.contains_point(point: ansys.geometry.core.math.point.Point3D) -> bool\n\nCheck a point is contained by the curve.\n\nThe point can either lie within the curve or on its boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#backendtype",
        "title": "BackendType",
        "section": "BackendType",
        "text": "Bases: enum.Enum\nProvides an enum holding the available backend types.\nBackendType\nBackendType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#ansys.geometry.core.connection.backend.BackendType",
        "title": "BackendType > BackendType > BackendType",
        "section": "BackendType > BackendType",
        "text": "class ansys.geometry.core.connection.backend.BackendType(*args, **kwds)\n\nBases: enum.Enum\n\nProvides an enum holding the available backend types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#overview",
        "title": "BackendType > Overview",
        "section": "Overview",
        "text": "DISCOVERY\nSPACECLAIM\nWINDOWS_SERVICE\nLINUX_SERVICE\nCORE_WINDOWS\nCORE_LINUX\nDISCOVERY_HEADLESS\nis_core_service\nDetermine whether the backend is CoreService based or not.\nOverview\nDISCOVERY\nSPACECLAIM\nWINDOWS_SERVICE\nLINUX_SERVICE\nCORE_WINDOWS\nCORE_LINUX\nDISCOVERY_HEADLESS\nis_core_service"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#import-detail",
        "title": "BackendType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#attribute-detail",
        "title": "BackendType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#BackendType.DISCOVERY",
        "title": "BackendType > Attribute detail > DISCOVERY",
        "section": "Attribute detail > DISCOVERY",
        "text": "BackendType.DISCOVERY = 0\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#BackendType.SPACECLAIM",
        "title": "BackendType > Attribute detail > SPACECLAIM",
        "section": "Attribute detail > SPACECLAIM",
        "text": "BackendType.SPACECLAIM = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#BackendType.WINDOWS_SERVICE",
        "title": "BackendType > Attribute detail > WINDOWS_SERVICE",
        "section": "Attribute detail > WINDOWS_SERVICE",
        "text": "BackendType.WINDOWS_SERVICE = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#BackendType.LINUX_SERVICE",
        "title": "BackendType > Attribute detail > LINUX_SERVICE",
        "section": "Attribute detail > LINUX_SERVICE",
        "text": "BackendType.LINUX_SERVICE = 3\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#BackendType.CORE_WINDOWS",
        "title": "BackendType > Attribute detail > CORE_WINDOWS",
        "section": "Attribute detail > CORE_WINDOWS",
        "text": "BackendType.CORE_WINDOWS = 4\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#BackendType.CORE_LINUX",
        "title": "BackendType > Attribute detail > CORE_LINUX",
        "section": "Attribute detail > CORE_LINUX",
        "text": "BackendType.CORE_LINUX = 5\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#BackendType.DISCOVERY_HEADLESS",
        "title": "BackendType > Attribute detail > DISCOVERY_HEADLESS",
        "section": "Attribute detail > DISCOVERY_HEADLESS",
        "text": "BackendType.DISCOVERY_HEADLESS = 6\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#method-detail",
        "title": "BackendType > Method detail",
        "section": "Method detail",
        "text": "Determine whether the backend is CoreService based or not.\nThe backend type to check whether or not it’s a CoreService type.\nTrue if the backend is CoreService based, False otherwise.\nMethod detail\nBackendType"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/BackendType",
        "href": "api/ansys/geometry/core/connection/backend/BackendType.html#BackendType.is_core_service",
        "title": "BackendType > Method detail > is_core_service",
        "section": "Method detail > is_core_service",
        "text": "static BackendType.is_core_service(backend_type: BackendType) -> bool\n\nDetermine whether the backend is CoreService based or not.\n\nParameters\n\nbackend_type\n\nBackendType\n\nThe backend type to check whether or not it’s a CoreService type.\n\nReturns\n\nbool\n\nTrue if the backend is CoreService based, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/index",
        "href": "api/ansys/geometry/core/sketch/arc/index.html#the-arcpy-module",
        "title": "The arc.py module",
        "section": "The arc.py module",
        "text": "The arc.py module\narc.py"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/index",
        "href": "api/ansys/geometry/core/sketch/arc/index.html#summary",
        "title": "The arc.py module > Summary",
        "section": "Summary",
        "text": "Arc\nProvides for modeling an arc.\nSummary\nArc"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/arc/index",
        "href": "api/ansys/geometry/core/sketch/arc/index.html#description",
        "title": "The arc.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing an arc.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/InspectResult",
        "href": "api/ansys/geometry/core/tools/check_geometry/InspectResult.html#inspectresult",
        "title": "InspectResult",
        "section": "InspectResult",
        "text": "Provides the result of the inspect geometry operation.\nInspectResult\nInspectResult"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/InspectResult",
        "href": "api/ansys/geometry/core/tools/check_geometry/InspectResult.html#ansys.geometry.core.tools.check_geometry.InspectResult",
        "title": "InspectResult > InspectResult > InspectResult",
        "section": "InspectResult > InspectResult",
        "text": "class ansys.geometry.core.tools.check_geometry.InspectResult(grpc_client: ansys.geometry.core.connection.client.GrpcClient, body: ansys.geometry.core.designer.body.Body, issues: list[GeometryIssue])\n\nProvides the result of the inspect geometry operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/InspectResult",
        "href": "api/ansys/geometry/core/tools/check_geometry/InspectResult.html#overview",
        "title": "InspectResult > Overview",
        "section": "Overview",
        "text": "repair\nRepair the problem area.\nbody\nThe body for which issues are found.\nissues\nThe list of issues for the body.\nOverview\nrepair\nbody\nissues"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/InspectResult",
        "href": "api/ansys/geometry/core/tools/check_geometry/InspectResult.html#import-detail",
        "title": "InspectResult > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/InspectResult",
        "href": "api/ansys/geometry/core/tools/check_geometry/InspectResult.html#property-detail",
        "title": "InspectResult > Property detail",
        "section": "Property detail",
        "text": "The body for which issues are found.\nThe list of issues for the body.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/InspectResult",
        "href": "api/ansys/geometry/core/tools/check_geometry/InspectResult.html#InspectResult.body",
        "title": "InspectResult > Property detail > body",
        "section": "Property detail > body",
        "text": "property InspectResult.body: ansys.geometry.core.designer.body.Body\n\nThe body for which issues are found.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/InspectResult",
        "href": "api/ansys/geometry/core/tools/check_geometry/InspectResult.html#InspectResult.issues",
        "title": "InspectResult > Property detail > issues",
        "section": "Property detail > issues",
        "text": "property InspectResult.issues: list[GeometryIssue]\n\nThe list of issues for the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/InspectResult",
        "href": "api/ansys/geometry/core/tools/check_geometry/InspectResult.html#method-detail",
        "title": "InspectResult > Method detail",
        "section": "Method detail",
        "text": "Repair the problem area.\nMessage containing created and/or modified bodies.\nMethod detail\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/InspectResult",
        "href": "api/ansys/geometry/core/tools/check_geometry/InspectResult.html#InspectResult.repair",
        "title": "InspectResult > Method detail > repair",
        "section": "Method detail > repair",
        "text": "InspectResult.repair() -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nRepair the problem area.\n\nReturns\n\nRepairToolMessage\n\nMessage containing created and/or modified bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas.html#interferenceproblemareas",
        "title": "InterferenceProblemAreas",
        "section": "InterferenceProblemAreas",
        "text": "Bases: ProblemArea\nRepresents an interference problem area with a unique identifier and associated bodies.\nServer-defined ID for the problem area.\nActive supporting geometry service instance for design modeling.\nList of bodies in the problem area.\nInterferenceProblemAreas\nInterferenceProblemAreas\nProblemArea\npython:str\nGrpcClient\npython:list\nBody"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas.html#ansys.geometry.core.tools.problem_areas.InterferenceProblemAreas",
        "title": "InterferenceProblemAreas > InterferenceProblemAreas > InterferenceProblemAreas",
        "section": "InterferenceProblemAreas > InterferenceProblemAreas",
        "text": "class ansys.geometry.core.tools.problem_areas.InterferenceProblemAreas(id: str, grpc_client: ansys.geometry.core.connection.GrpcClient, bodies: list[ansys.geometry.core.designer.body.Body])\n\nBases: ProblemArea\n\nRepresents an interference problem area with a unique identifier and associated bodies.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the problem area.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting geometry service instance for design modeling.\n\nbodies\n\npython:list[Body]\n\nList of bodies in the problem area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas.html#overview",
        "title": "InterferenceProblemAreas > Overview",
        "section": "Overview",
        "text": "fix\nFix the problem area.\nbodies\nThe list of the bodies connected to this problem area.\nOverview\nfix\nbodies"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas.html#import-detail",
        "title": "InterferenceProblemAreas > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas.html#property-detail",
        "title": "InterferenceProblemAreas > Property detail",
        "section": "Property detail",
        "text": "The list of the bodies connected to this problem area.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas.html#InterferenceProblemAreas.bodies",
        "title": "InterferenceProblemAreas > Property detail > bodies",
        "section": "Property detail > bodies",
        "text": "property InterferenceProblemAreas.bodies: list[ansys.geometry.core.designer.body.Body]\n\nThe list of the bodies connected to this problem area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas.html#method-detail",
        "title": "InterferenceProblemAreas > Method detail",
        "section": "Method detail",
        "text": "Fix the problem area.\nMessage containing created and/or modified bodies.\nThe current implementation does not properly track changes.\nThe list of created and modified bodies are empty.\nMethod detail\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InterferenceProblemAreas.html#InterferenceProblemAreas.fix",
        "title": "InterferenceProblemAreas > Method detail > fix",
        "section": "Method detail > fix",
        "text": "InterferenceProblemAreas.fix() -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFix the problem area.\n\nReturns\n\nmessage: RepairToolMessage\n\nMessage containing created and/or modified bodies.\n\nNotes\n\nThe current implementation does not properly track changes.\nThe list of created and modified bodies are empty.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#release-notes",
        "title": "Release notes",
        "section": "Release notes",
        "text": "This document contains the release notes for the PyAnsys Geometry project.\nRelease notes"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#091---2025-02-28",
        "title": "Release notes > 0.9.1 - 2025-02-28",
        "section": "0.9.1 - 2025-02-28",
        "text": "0.9.1 - 2025-02-28"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "offset faces set radius implementation + testing #1769\nseparate graphics target #1782\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "bump the docs-deps group with 2 updates #1762\nbump ansys-api-geometry from 0.4.38 to 0.4.40 #1763\nbump ansys-sphinx-theme[autoapi] from 1.3.1 to 1.3.2 in the docs-deps group #1766\nbump ansys-tools-visualization-interface from 0.8.1 to 0.8.3 #1767\nbump sphinx from 8.2.0 to 8.2.1 in the docs-deps group #1772\nbump ansys-api-geometry from 0.4.40 to 0.4.42 #1773\ntemporary workaround for using trusted publisher approach #1783\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "allow setting max message length for send operations #1775\ntypo in labeler.yml file #1776\ndocker build process failing on helper script #1785\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "bump dev version to 0.10.dev0 #1752\nupdate CHANGELOG for v0.9.0 #1760\npre-commit automatic update #1770\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#090---2025-02-18",
        "title": "Release notes > 0.9.0 - 2025-02-18",
        "section": "0.9.0 - 2025-02-18",
        "text": "0.9.0 - 2025-02-18"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "design activation changes #1707\nadd contributors #1708\nImplementation of inspect & repair geometry #1712\nlaunch core service from envar #1716\nworkflow enhancements for better tool results #1723\nadd face color, round info, bring measure tools to linux #1732\nconservative approach to single design per modeler #1740\nexport glb #1741\nallow plotting of individual faces #1757\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "bump ansys-api-geometry from 0.4.33 to 0.4.34 #1709\nbump ansys-sphinx-theme[autoapi] from 1.2.6 to 1.2.7 in the docs-deps group #1719\nbump ansys-api-geometry from 0.4.34 to 0.4.35 #1720\nbump ansys-sphinx-theme[autoapi] from 1.2.7 to 1.3.0 in the docs-deps group #1726\nbump ansys-sphinx-theme[autoapi] from 1.3.0 to 1.3.1 in the docs-deps group #1728\nbump ansys-api-geometry from 0.4.35 to 0.4.36 #1729\nbump trame-vtk from 2.8.14 to 2.8.15 #1736\nbump jupytext from 1.16.6 to 1.16.7 in the docs-deps group #1742\nbump ansys-api-geometry from 0.4.36 to 0.4.37 #1743\nbump myst-parser from 4.0.0 to 4.0.1 in the docs-deps group #1744\nbump ansys-api-geometry from 0.4.37 to 0.4.38 #1746\nbump numpy from 2.2.2 to 2.2.3 #1747\nbump panel from 1.6.0 to 1.6.1 #1749\nbump scipy from 1.15.1 to 1.15.2 #1756\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "update CONTRIBUTING.md #1730\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "re enable fmd tests #1711\nsupport body mirror on linux #1714\nuse sketch plane for imprint/project curves #1715\nrevert boolean ops logic and hold-off on commands-based implementation (temporarily) #1725\nLinux Core Service docker file was missing a dependency #1758\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.8.2 #1706\npre-commit automatic update #1717, #1737\nupdate SECURITY.md versions supported #1722\nkeep simba-plugin-geometry tag #1739\nenhancements to GLB export and object plot() methods #1750\nclean up deprecation warning for trapezoid class and add more info on deprecation #1754\nMaintenance\nplot()"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#test",
        "title": "Release notes > Test",
        "section": "Test",
        "text": "verifying issue with empty intersect and temporal body creation #1258\nExpand pattern tests #1713\nset body name #1727\nactivate 8 linux tests #1745\nTest"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#082---2025-01-29",
        "title": "Release notes > 0.8.2 - 2025-01-29",
        "section": "0.8.2 - 2025-01-29",
        "text": "0.8.2 - 2025-01-29"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "create a fillet on an edge/face #1621\ncreate a full fillet between multiple faces #1623\nextrude existing faces, setup face offset relationships #1628\ninterference repair tool #1633\nextrude existing edges to create surface bodies #1638\ncreate and modify linear patterns #1641\nbody suppression state #1643\nparameters refurbished #1647\nrename object #1648\nsurface body from trimmed curves #1650\ncreate circular and fill patterns #1653\nfind fix simplify #1661\nreplace face #1664\ncommands for merge and intersect #1665\nrevolve faces a set distance, up to another object, or by a helix #1666\nadd split body and tests #1669\nenable get/set persistent ids for stride import/export #1671\nfind and fix edge methods #1672\nshell methods #1673\nimplementation of NURBS curves #1675\nget assigned material #1684\nmatrix rotation and translation #1689\nis_core_service BackendType static method #1692\nexport and download stride format #1698\nblitz development #1701\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "bump ansys-tools-visualization-interface from 0.7.0 to 0.8.1 #1640\nbump ansys-api-geometry from 0.4.27 to 0.4.28 #1644\nbump sphinx-autodoc-typehints from 3.0.0 to 3.0.1 in the docs-deps group #1651\nbump ansys-api-geometry from 0.4.28 to 0.4.30 #1652\nbump protobuf from 5.28.3 to 5.29.3 in the grpc-deps group across 1 directory #1656\nbump numpy from 2.2.1 to 2.2.2 #1662\nbump ansys-api-geometry from 0.4.30 to 0.4.31 #1663\nbump ansys api geometry from 0.4.30 to 0.4.32 #1677\nbump ansys-api-geometry from 0.4.31 to 0.4.32 #1681\nbump panel from 1.5.5 to 1.6.0 #1682\nbump semver from 3.0.2 to 3.0.4 #1687\nbump ansys-api-geometry from 0.4.32 to 0.4.33 #1695\nbump nbconvert from 7.16.5 to 7.16.6 in the docs-deps group #1700\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "reactivate test on failing extra edges test #1396\nfilter set export id to only CoreService based backends #1685\ncleanup unsupported module #1690\ndisable unimplemented tests #1691\ntech review fixes for blitz branch #1703\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.8.1 #1639\nwhitelist semver package temporarily #1657\nreverting semver package whitelist since problematic version is yanked #1659\npre-commit automatic update #1667, #1696\nensure design is closed on test exit #1680\nuse dedicate pygeometry-ci-2 runner #1693\nremove towncrier info duplicates #1702\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#test",
        "title": "Release notes > Test",
        "section": "Test",
        "text": "add more find and fix tests for repair tools #1645\nAdd some new tests #1670\nadd unit tests for 3 repair tools #1683\nTest"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#081---2025-01-15",
        "title": "Release notes > 0.8.1 - 2025-01-15",
        "section": "0.8.1 - 2025-01-15",
        "text": "0.8.1 - 2025-01-15"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "bump ansys-api-geometry from 0.4.26 to 0.4.27 #1634\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "release issues encountered #1637\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.8.0 #1636\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#080---2025-01-15",
        "title": "Release notes > 0.8.0 - 2025-01-15",
        "section": "0.8.0 - 2025-01-15",
        "text": "0.8.0 - 2025-01-15"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "active support for Python 3.13 #1481\nadd chamfer tool #1495\nallow version input to automatically consider the nuances for the Ansys Student version #1548\nadapt health check timeout algorithm #1559\nadd core service support #1571\nenable (partially) prepare and repair tools in Core Service #1580\ncreate launcher for core services #1587\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "bump ansys-api-geometry from 0.4.16 to 0.4.17 #1547\nbump ansys-sphinx-theme[autoapi] from 1.2.1 to 1.2.2 in the docs-deps group #1549\nbump ansys-api-geometry from 0.4.17 to 0.4.18 #1550\nbump ansys-tools-visualization-interface from 0.5.0 to 0.6.0 #1554\nbump pytest from 8.3.3 to 8.3.4 #1562\nbump six from 1.16.0 to 1.17.0 #1568\nbump the docs-deps group across 1 directory with 2 updates #1570\nbump ansys-api-geometry from 0.4.18 to 0.4.20 #1574\nbump numpy from 2.1.3 to 2.2.0 #1575\nbump ansys-api-geometry from 0.4.20 to 0.4.23 #1581\nbump ansys-api-geometry from 0.4.23 to 0.4.24 #1582\nbump ansys-tools-visualization-interface from 0.6.0 to 0.6.1 #1583\nbump ansys-tools-visualization-interface from 0.6.1 to 0.6.2 #1586\navoid the usage of attrs 24.3.0 (temporary) #1589\nbump jupytext from 1.16.4 to 1.16.5 in the docs-deps group #1590\nbump jupytext from 1.16.5 to 1.16.6 in the docs-deps group #1593\nbump panel from 1.5.4 to 1.5.5 #1595\nbump ansys-sphinx-theme[autoapi] from 1.2.3 to 1.2.4 in the docs-deps group #1597\nbump notebook from 7.3.1 to 7.3.2 in the docs-deps group #1598\nbump numpy from 2.2.0 to 2.2.1 #1599\nbump ansys-tools-path from 0.7.0 to 0.7.1 #1600\nbump nbsphinx from 0.9.5 to 0.9.6 in the docs-deps group #1602\nbump nbconvert from 7.16.4 to 7.16.5 in the docs-deps group #1609\nbump ansys-api-geometry from 0.4.24 to 0.4.25 #1610\nbump sphinx-autodoc-typehints from 2.5.0 to 3.0.0 in the docs-deps group #1611\nbump scipy from 1.14.1 to 1.15.0 #1612\nbump trame-vtk from 2.8.12 to 2.8.13 #1616\nbump trame-vtk from 2.8.13 to 2.8.14 #1617\nbump ansys-tools-visualization-interface from 0.6.2 to 0.7.0 #1619\nbump ansys-sphinx-theme[autoapi] from 1.2.4 to 1.2.6 in the docs-deps group #1624\nbump scipy from 1.15.0 to 1.15.1 #1625\nbump ansys-api-geometry from 0.4.25 to 0.4.26 #1626\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "Explain how to report a security issue. #1605\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "numpydoc warnings #1556\nvtk/pyvista issues #1584\nmake_child_logger only takes 2 args. #1603\nFAQ on install #1631\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "pre-commit automatic update #1366, #1552, #1561, #1588, #1601, #1615, #1630\nupdate CHANGELOG for v0.7.6 #1545\nchange release artifacts self-hosted runner #1546\nautomerge pre-commit.ci PRs #1553\nbump pyvista/setup-headless-display-action to v3 #1555\ndecouple unstable image promotion #1591\nskip unnecessary stages when containers are the same #1592\nNumpy is already imported at the top of the module. #1604\nupdate license year using pre-commit hook #1608\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#076---2024-11-19",
        "title": "Release notes > 0.7.6 - 2024-11-19",
        "section": "0.7.6 - 2024-11-19",
        "text": "0.7.6 - 2024-11-19"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "allow for some additional extrusion direction names #1534\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "bump ansys-sphinx-theme[autoapi] from 1.1.7 to 1.2.0 in the docs-deps group #1520\nbump ansys-tools-visualization-interface from 0.4.7 to 0.5.0 #1521\nbump numpy from 2.1.2 to 2.1.3 #1522\nbump ansys-api-geometry from 0.4.13 to 0.4.14 #1525\nbump ansys-api-geometry from 0.4.14 to 0.4.15 #1529\nbump pint from 0.24.3 to 0.24.4 #1530\nbump trame-vtk from 2.8.11 to 2.8.12 #1531\nbump ansys-sphinx-theme[autoapi] from 1.2.0 to 1.2.1 in the docs-deps group #1535\nbump panel from 1.5.3 to 1.5.4 #1536\nbump ansys-tools-path from 0.6.0 to 0.7.0 #1537\nbump ansys-api-geometry from 0.4.15 to 0.4.16 #1538\nlimit upper version on grpcio & grpcio-health-checking to 1.68 #1544\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "typo with the docstrings #1524\nchange max header links before more dropdown #1527\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.7.5 #1519\npre-commit automatic update #1523, #1532, #1543\nbump codecov/codecov-action from 4 to 5 in the actions group #1541\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#075---2024-10-31",
        "title": "Release notes > 0.7.5 - 2024-10-31",
        "section": "0.7.5 - 2024-10-31",
        "text": "0.7.5 - 2024-10-31"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "create body from surface #1454\nperformance enhancements to plotter #1496\nallow picking from easy access methods #1499\nimplement cut operation in extrude sketch #1510\ncaching bodies to avoid unnecessary object creation #1513\nenable retrieval of service logs (via API) #1515\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "bump sphinx from 8.1.0 to 8.1.3 in the docs-deps group #1479\nbump ansys-sphinx-theme[autoapi] from 1.1.4 to 1.1.5 in the docs-deps group #1482\nbump the grpc-deps group across 1 directory with 3 updates #1487\nbump ansys-sphinx-theme[autoapi] from 1.1.5 to 1.1.6 in the docs-deps group #1493\nbump trame-vtk from 2.8.10 to 2.8.11 #1494\nbump ansys-api-geometry from 0.4.11 to 0.4.12 #1502\nbump protobuf from 5.28.2 to 5.28.3 in the grpc-deps group #1505\nbump ansys-sphinx-theme[autoapi] from 1.1.6 to 1.1.7 in the docs-deps group #1506\nbump ansys-tools-visualization-interface from 0.4.6 to 0.4.7 #1507\nbump panel from 1.5.2 to 1.5.3 #1508\nbump ansys-api-geometry from 0.4.12 to 0.4.13 #1512\nbump the grpc-deps group with 2 updates #1517\nbump pytest-cov from 5.0.0 to 6.0.0 #1518\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "avoid having a drop down in the top navigation bar #1485\nprovide information on how to build a single example #1490\nadd example file to download in the test #1501\nrevisit examples to make sure they are properly styled #1509\nalign landing page layout with UI/UX requirements #1511\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "static search options #1478\nrespect product_version when launching geometry service #1486\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.7.4 #1476\npre-commit automatic update #1480, #1516\navoid linkcheck on changelog (unnecessary) #1489\nupdate CONTRIBUTORS #1492\nallowing new tags for Windows Core Service #1497\nsimplify vulnerabilities check #1504\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#074---2024-10-11",
        "title": "Release notes > 0.7.4 - 2024-10-11",
        "section": "0.7.4 - 2024-10-11",
        "text": "0.7.4 - 2024-10-11"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "bump sphinx from 8.0.2 to 8.1.0 in the docs-deps group #1470\nbump ansys-api-geometry from 0.4.10 to 0.4.11 #1473\nbump ansys-sphinx-theme to v1.1.3 #1475\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "solving intersphinx warnings on paths #1469\ncheck_input_types not working with forward refs #1471\nshare_topology is available on 24R2 #1472\nFixed\ncheck_input_types\nshare_topology"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.7.3 #1466\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#073---2024-10-09",
        "title": "Release notes > 0.7.3 - 2024-10-09",
        "section": "0.7.3 - 2024-10-09",
        "text": "0.7.3 - 2024-10-09"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "use service colors in plotter (upon request) #1376\ncapability to close designs (also on modeler.exit()) #1409\nprioritize user-defined SPACECLAIM_MODE env var #1440\nverifying Linux service also accepts colors #1451\nAdded\nmodeler.exit()"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "bump protobuf from 5.28.0 to 5.28.1 in the grpc-deps group #1424\nbump the docs-deps group with 2 updates #1425, #1436\nbump ansys-tools-visualization-interface from 0.4.3 to 0.4.4 #1426\nbump pytest from 8.3.2 to 8.3.3 #1427\nbump panel from 1.4.5 to 1.5.0 #1428\nbump protobuf from 5.28.1 to 5.28.2 in the grpc-deps group #1435\nbump the grpc-deps group with 3 updates #1442\nbump beartype from 0.18.5 to 0.19.0 #1443\nbump panel from 1.5.0 to 1.5.1 #1444\nbump ansys-sphinx-theme[autoapi] from 1.1.1 to 1.1.2 in the docs-deps group #1456\nbump ansys-api-geometry from 0.4.8 to 0.4.9 #1457\nbump numpy from 2.1.1 to 2.1.2 #1458\nbump panel from 1.5.1 to 1.5.2 #1459\nbump ansys-api-geometry from 0.4.9 to 0.4.10 #1461\nbump ansys-tools-visualization-interface from 0.4.4 to 0.4.5 #1462\nupdate protobuf from 5.27.2 to 5.27.5 #1464\nbump sphinx-autodoc-typehints from 2.4.4 to 2.5.0 in the docs-deps group #1465\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "adding cheat sheet on documentation #1433\nadd captions in examples toctrees #1434\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "ci/cd issues on documentation build #1441\nadapt tessellate tests to new core service #1449\nrename folders on Linux docker image according to new version #1450\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.7.2 #1422\ncheckout LFS files from previous version to ensure upload #1423\npre-commit automatic update #1431, #1437, #1445, #1460\nupdate to ansys actions v8 and docs theme (static search) #1446\npyvista/setup-headless-display started failing #1447\ncheck method implemented in Ansys actions #1448\nunstable image promotion and dependabot daily updates #1463\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#072---2024-09-11",
        "title": "Release notes > 0.7.2 - 2024-09-11",
        "section": "0.7.2 - 2024-09-11",
        "text": "0.7.2 - 2024-09-11"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "allow for platform input when using Ansys Lab #1416\nensure GrpcClient class closure upon deletion #1417\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "bump sphinx-autodoc-typehints from 2.3.0 to 2.4.0 in the docs-deps group #1411\nbump numpy from 2.1.0 to 2.1.1 #1412\nbump ansys-tools-visualization-interface from 0.4.1 to 0.4.3 #1413\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "remove title from landing page #1408\nadapt examples to use launch_modeler instead of Modeler obj connection #1410\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "handle properly np.cross() - 2d ops deprecated in Numpy 2.X #1419\nchange logo link so that it renders properly on PyPI #1420\nwrong path on logo image #1421\nFixed\nnp.cross()"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.7.1 #1407\npre-commit automatic update #1418\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#071---2024-09-06",
        "title": "Release notes > 0.7.1 - 2024-09-06",
        "section": "0.7.1 - 2024-09-06",
        "text": "0.7.1 - 2024-09-06"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "get and set body color #1357\nadd modeler.exit() method #1375\nsetting instance name during component creation #1382\naccept pathlib.Path as input in missing methods #1385\ndefault logs folder on Geometry Service started by Python at PUBLIC (Windows) #1386\nallowing users to specify API version when running script against SpaceClaim or Discovery #1395\nexpose modeler.designs attribute #1401\npretty print components #1403\nAdded\nmodeler.exit()\nmodeler.designs"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "bump the grpc-deps group with 2 updates #1363, #1369\nbump the docs-deps group with 2 updates #1364, #1392\nbump numpy from 2.0.1 to 2.1.0 #1365\nbump ansys-sphinx-theme[autoapi] from 1.0.5 to 1.0.7 in the docs-deps group #1370\nbump ansys-api-geometry from 0.4.7 to 0.4.8 #1371\nbump scipy from 1.14.0 to 1.14.1 #1372\nbump the grpc-deps group with 3 updates #1391\nbump ansys-tools-visualization-interface from 0.4.0 to 0.4.1 #1393\nbump ansys-sphinx-theme[autoapi] from 1.0.7 to 1.0.8 in the docs-deps group #1397\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "add project logo #1405\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "remove server_logs_folder argument for Discovery and SpaceClaim #1387\nFixed\nserver_logs_folder"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.7.0 #1360\nbump dev branch to v0.8.dev0 #1361\nsolving various warnings #1368\npre-commit automatic update #1373, #1394\nupload coverage artifacts properly with upload-artifact@v4.4.0 #1406\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#070---2024-08-13",
        "title": "Release notes > 0.7.0 - 2024-08-13",
        "section": "0.7.0 - 2024-08-13",
        "text": "0.7.0 - 2024-08-13"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "build: drop support for Python 3.9 #1341\nfeat: adapting beartype typehints to +Python 3.10 standard #1347\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build: bump the grpc-deps group with 3 updates #1342\nbuild: bump panel from 1.4.4 to 1.4.5 #1344\nbump the docs-deps group across 1 directory with 4 updates #1353\nbump trame-vtk from 2.8.9 to 2.8.10 #1355\nbump ansys-api-geometry from 0.4.6 to 0.4.7 #1356\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "feat: update conf for version 1.x of ansys-sphinx-theme #1351\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "trapezoid signature change and internal checks #1354\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "updating Ansys actions to v7 - changelog related #1348\nci: bump ansys/actions from 6 to 7 in the actions group #1352\npre-commit automatic update #1358\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "chore: pre-commit automatic update #1345\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#066---2024-08-01",
        "title": "Release notes > 0.6.6 - 2024-08-01",
        "section": "0.6.6 - 2024-08-01",
        "text": "0.6.6 - 2024-08-01"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: Add misc. repair and prepare tool methods #1293\nfeat: name setter and fill style getter setters #1299\nfeat: extract fluid volume from solid #1306\nfeat: keep “other” bodies when performing bool operations #1311\nfeat: revolve_sketch rotation definition enhancement #1336\nAdded\nrevolve_sketch"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.6.5 #1290\nchore: enable ruff formatter on pre-commit #1312\nchore: updating dependabot groups #1313\nchore: adding issue links to TODOs #1320\nfeat: adapt to new ansys-tools-visualization-interface v0.4.0 #1338\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "test: create sphere bug raised after box creation #1291\nci: docker cleanup #1294\nfix: default length units not being used properly on arc creation #1310\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build: bump ansys-api-geometry from 0.4.4 to 0.4.5 #1292\nbuild: bump pyvista[jupyter] from 0.43.10 to 0.44.0 in the docs-deps group #1296\nbuild: bump jupytext from 1.16.2 to 1.16.3 in the docs-deps group #1300\nbuild: bump ansys-api-geometry from 0.4.5 to 0.4.6 #1301\nbuild: bump pint from 0.24.1 to 0.24.3 #1307\nbuild: bump grpcio-health-checking from 1.60.0 to 1.64.1 in the grpc-deps group #1315\nbuild: bump the docs-deps group across 1 directory with 2 updates #1316\nbuild: bump the grpc-deps group with 2 updates #1322\nbuild: bump the docs-deps group with 2 updates #1323\nbuild: bump pyvista[jupyter] from 0.44.0 to 0.44.1 #1324\nbuild: bump ansys-tools-visualization-interface from 0.2.6 to 0.3.0 #1325\nbuild: bump pytest from 8.2.2 to 8.3.1 #1326\nbuild: bump pytest from 8.3.1 to 8.3.2 #1331\nbuild: bump numpy from 2.0.0 to 2.0.1 #1332\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "chore: pre-commit automatic update #1327, #1333\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#065---2024-07-02",
        "title": "Release notes > 0.6.5 - 2024-07-02",
        "section": "0.6.5 - 2024-07-02",
        "text": "0.6.5 - 2024-07-02"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.6.4 #1278\nbuild: update sphinx-autodoc-typehints version #1280\nchore: update SECURITY.md #1286\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: manifest path should render as posix rather than uri #1289\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build: bump protobuf from 5.27.1 to 5.27.2 in the grpc-deps group #1283\nbuild: bump scipy from 1.13.1 to 1.14.0 #1284\nbuild: bump vtk from 9.3.0 to 9.3.1 #1287\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "chore: pre-commit automatic update #1281, #1288\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#064---2024-06-24",
        "title": "Release notes > 0.6.4 - 2024-06-24",
        "section": "0.6.4 - 2024-06-24",
        "text": "0.6.4 - 2024-06-24"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: using ruff as the main linter/formatter #1274\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.6.3 #1273\nchore: bump pre-commit-hook version #1276\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: backticks breaking doc build after ruff linter #1275\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build: bump pint from 0.24 to 0.24.1 #1277\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#063---2024-06-18",
        "title": "Release notes > 0.6.3 - 2024-06-18",
        "section": "0.6.3 - 2024-06-18",
        "text": "0.6.3 - 2024-06-18"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.6.2 #1263\nbuild: adapting to numpy 2.x #1265\ndocs: using ansys actions (again) to build docs #1270\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: unnecessary Point3D comparison #1264\ndocs: examples are not being uploaded as assets (.py/.ipynb) #1268\nfix: change action order #1269\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build: bump numpy from 1.26.4 to 2.0.0 #1266\nbuild: bump the docs-deps group with 2 updates #1271\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "chore: pre-commit automatic update #1267\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#062---2024-06-17",
        "title": "Release notes > 0.6.2 - 2024-06-17",
        "section": "0.6.2 - 2024-06-17",
        "text": "0.6.2 - 2024-06-17"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: deprecating log_level and logs_folder + adding client log control #1260\nfeat: adding deprecation support for args and methods #1261\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.6.1 #1256\nci: simplify doc build using ansys/actions #1262\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: Rename built in shadowing variables #1257\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#061---2024-06-12",
        "title": "Release notes > 0.6.1 - 2024-06-12",
        "section": "0.6.1 - 2024-06-12",
        "text": "0.6.1 - 2024-06-12"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: revolve a sketch given an axis and an origin #1248\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.6.0 #1245\nchore: update dev version to 0.8.dev0 #1246\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: Bug in show function #1255\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build: bump protobuf from 5.27.0 to 5.27.1 in the grpc-deps group #1250\nbuild: bump the docs-deps group with 2 updates #1251\nbuild: bump trame-vtk from 2.8.8 to 2.8.9 #1252\nbuild: bump pint from 0.23 to 0.24 #1253\nbuild: bump ansys-tools-visualization-interface from 0.2.2 to 0.2.3 #1254\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "docs: add conda information for package #1247\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#060---2024-06-07",
        "title": "Release notes > 0.6.0 - 2024-06-07",
        "section": "0.6.0 - 2024-06-07",
        "text": "0.6.0 - 2024-06-07"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: Adapt to ansys-visualizer #959\nfix: rename GeomPlotter to GeometryPlotter #1227\nrefactor: use ansys-tools-visualization-interface global vars rather than env vars #1230\nfeat: bump to use v251 as default #1242\nAdded\nGeomPlotter\nGeometryPlotter"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.5.6 #1213\nchore: update SECURITY.md #1214\nci: use Trusted Publisher for releasing package #1216\nci: remove pygeometry-ci-1 specific logic #1221\nci: only run doc build on runners outside the ansys network #1223\nchore: pre-commit automatic update #1224\nci: announce nightly workflows failing #1237\nci: failing notifications improvement #1243\nfix: broken interactive docs and improved tests paths #1244\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: Interactive documentation #1226\nfix: only notify on failure and fill with data #1238\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build: bump protobuf from 5.26.1 to 5.27.0 in the grpc-deps group #1217\nbuild: bump panel from 1.4.2 to 1.4.3 in the docs-deps group #1218\nbuild: bump ansys-api-geometry from 0.4.1 to 0.4.2 #1219\nbuild: bump ansys-sphinx-theme[autoapi] from 0.16.2 to 0.16.5 in the docs-deps group #1231\nbuild: bump requests from 2.32.2 to 2.32.3 #1232\nbuild: bump ansys-api-geometry from 0.4.2 to 0.4.3 #1233\nbuild: bump ansys-tools-visualization-interface from 0.2.1 to 0.2.2 #1234\nbuild: bump panel from 1.4.3 to 1.4.4 in the docs-deps group #1235\nbuild: bump ansys-tools-path from 0.5.2 to 0.6.0 #1236\nbuild: bump grpcio from 1.64.0 to 1.64.1 in the grpc-deps group #1239\nbuild: bump ansys-api-geometry from 0.4.3 to 0.4.4 #1240\nbuild: bump pytest from 8.2.1 to 8.2.2 #1241\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "docs: update AUTHORS #1222\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#056---2024-05-23",
        "title": "Release notes > 0.5.6 - 2024-05-23",
        "section": "0.5.6 - 2024-05-23",
        "text": "0.5.6 - 2024-05-23"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: add new arc constructors #1208\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.5.5 #1205\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build: bump requests from 2.31.0 to 2.32.2 #1204\nbuild: bump ansys-sphinx-theme[autoapi] from 0.16.0 to 0.16.2 in the docs-deps group #1210\nbuild: bump docker from 7.0.0 to 7.1.0 #1211\nbuild: bump scipy from 1.13.0 to 1.13.1 #1212\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#055---2024-05-21",
        "title": "Release notes > 0.5.5 - 2024-05-21",
        "section": "0.5.5 - 2024-05-21",
        "text": "0.5.5 - 2024-05-21"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "docs: adapt ansys_sphinx_theme_autoapi extension for autoapi #1135\nchore: update CHANGELOG for v0.5.4 #1194\nChanged\nansys_sphinx_theme_autoapi\nautoapi"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: adapting Arc class constructor order to (start, end, center) #1196\nchore: limit requests library version under 2.32 #1203\nFixed\nArc"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build: bump grpcio from 1.63.0 to 1.64.0 in the grpc-deps group #1198\nbuild: bump the docs-deps group with 2 updates #1199\nbuild: bump pytest from 8.2.0 to 8.2.1 #1200\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "chore: pre-commit automatic update #1202\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#054---2024-05-15",
        "title": "Release notes > 0.5.4 - 2024-05-15",
        "section": "0.5.4 - 2024-05-15",
        "text": "0.5.4 - 2024-05-15"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: allow for product_version on geometry service launcher function #1182\nAdded\nproduct_version"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.5.3 #1177\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build: bump the docs-deps group with 4 updates #1178\nbuild: bump pytest from 8.1.1 to 8.2.0 #1179\nbuild: bump grpcio from 1.62.2 to 1.63.0 in the grpc-deps group #1186\nbuild: bump the docs-deps group with 2 updates #1187\nbuild: bump trame-vtk from 2.8.6 to 2.8.7 #1188\nbuild: bump nbsphinx from 0.9.3 to 0.9.4 in the docs-deps group #1189\nbuild: bump trame-vtk from 2.8.7 to 2.8.8 #1190\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "chore: pre-commit automatic update #1180, #1193\ndocs: add geometry preparation for Fluent simulation #1183\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#053---2024-04-29",
        "title": "Release notes > 0.5.3 - 2024-04-29",
        "section": "0.5.3 - 2024-04-29",
        "text": "0.5.3 - 2024-04-29"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: semver intersphinx mapping not resolved properly #1175\nfix: start and end points for edge #1176\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#052---2024-04-29",
        "title": "Release notes > 0.5.2 - 2024-04-29",
        "section": "0.5.2 - 2024-04-29",
        "text": "0.5.2 - 2024-04-29"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: add semver to intersphinx #1173\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.5.1 #1165\nchore: bump version to v0.6.dev0 #1166\nchore: update CHANGELOG for v0.5.2 #1172\nfix: allow to reuse last release binaries (if requested) #1174\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: GetSurface and GetCurve not available prior to 24R2 #1171\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "docs: creating a NACA airfoil example #1167\ndocs: simplify README example #1169\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#051---2024-04-24",
        "title": "Release notes > 0.5.1 - 2024-04-24",
        "section": "0.5.1 - 2024-04-24",
        "text": "0.5.1 - 2024-04-24"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: security updates dropped for v0.3 or earlier #1126\nfeat: add export_to functions #1147\nAdded\nexport_to"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "ci: adapt to vale v3 #1129\nci: bump ansys/actions from 5 to 6 in the actions group #1133\ndocs: add release notes in our documentation #1138\nchore: bump ansys pre-commit hook to v0.3.0 #1139\nchore: use default vale version #1140\ndocs: add user_agent to Sphinx build #1142\nci: enabling Linux tests missing #1152\nci: perform minimal requirements tests #1153\nChanged\nv3\nv0.3.0\nuser_agent"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: docs link in example #1137\nfix: update backend version message #1145\nfix: Trame issues #1148\nfix: Interactive documentation #1160\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build: bump ansys-tools-path from 0.5.1 to 0.5.2 #1131\nbuild: bump the grpc-deps group across 1 directory with 3 updates #1156\nbuild: bump notebook from 7.1.2 to 7.1.3 in the docs-deps group #1157\nbuild: bump beartype from 0.18.2 to 0.18.5 #1158\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "docs: add example on exporting designs #1149\ndocs: fix link in CHANGELOG.md #1154\nchore: pre-commit automatic update #1159\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#050---2024-04-17",
        "title": "Release notes > 0.5.0 - 2024-04-17",
        "section": "0.5.0 - 2024-04-17",
        "text": "0.5.0 - 2024-04-17"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: inserting document into existing design #930\nfeat: add changelog action #1023\nfeat: create a sphere body on the backend #1035\nfeat: mirror a body #1055\nfeat: sweeping chains and profiles #1056\nfeat: vulnerability checks #1071\nfeat: loft profiles #1075\nfeat: accept bandit advisories in-line for subprocess #1077\nfeat: adding containers to automatic launcher #1090\nfeat: minor changes to Linux Dockerfile #1111\nfeat: avoid error if folder exists #1125\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "build: changing sphinx-autoapi from 3.1.a2 to 3.1.a4 #1038\nchore: add pre-commit.ci configuration #1065\nchore: dependabot PR automatic approval #1067\nci: bump the actions group with 1 update #1082\nchore: update docker tags to be kept #1085\nchore: update pre-commit versions #1094\nbuild: use ansys-sphinx-theme autoapi target #1097\nfix: removing @PipKat from *.md files - changelog fragments #1098\nci: dashboard upload does not apply anymore #1099\nchore: pre-commit.ci not working properly #1108\nchore: update and adding pre-commit.ci config hook #1109\nci: main Python version update to 3.12 #1112\nci: skip Linux tests with common approach #1113\nci: build changelog on release #1118\nchore: update CHANGELOG for v0.5.0 #1119\nChanged\n*.md"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "feat: re-enable open file on Linux #817\nfix: adapt export and download tests to new hoops #1057\nfix: linux Dockerfile - replace .NET6.0 references by .NET8.0 #1069\nfix: misleading docstring for sweep_chain() #1070\nfix: prepare_and_start_backend is only available on Windows #1076\nfix: unit tests failing after dms update #1087\nbuild: beartype upper limit on v0.18 #1095\nfix: improper types being passed for Face and Edge ctor. #1096\nfix: return type should be dict and not ScalarMapContainer (grpc type) #1103\nfix: env version for Dockerfile Windows #1120\nfix: changelog description ill-formatted #1121\nfix: solve issues with intersphinx when releasing #1123\nFixed\nScalarMapContainer"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "build: bump the docs-deps group with 2 updates #1062, #1093, #1105\nbuild: bump ansys-api-geometry from 0.3.13 to 0.4.0 #1066\nbuild: bump the docs-deps group with 1 update #1080\nbuild: bump pytest-cov from 4.1.0 to 5.0.0 #1081\nbuild: bump ansys-api-geometry from 0.4.0 to 0.4.1 #1092\nbuild: bump beartype from 0.17.2 to 0.18.2 #1106\nbuild: bump ansys-tools-path from 0.4.1 to 0.5.1 #1107\nbuild: bump panel from 1.4.0 to 1.4.1 in the docs-deps group #1114\nbuild: bump scipy from 1.12.0 to 1.13.0 #1115\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "[pre-commit.ci] pre-commit autoupdate #1063\ndocs: add examples on new methods #1089\nchore: pre-commit automatic update #1116\nMiscellaneous"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem",
        "href": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem.html#coordinatesystem",
        "title": "CoordinateSystem",
        "section": "CoordinateSystem",
        "text": "Represents a user-defined coordinate system within the design assembly.\nThis class synchronizes to a design within a supporting Geometry\nservice instance.\nUser-defined label for the coordinate system.\nFrame defining the coordinate system bounds.\nParent component the coordinate system is assigned against.\nActive supporting Geometry service instance for design modeling.\nCoordinateSystem\nCoordinateSystem\npython:str\nFrame\nComponent\nComponent\nGrpcClient"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem",
        "href": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem.html#ansys.geometry.core.designer.coordinate_system.CoordinateSystem",
        "title": "CoordinateSystem > CoordinateSystem > CoordinateSystem",
        "section": "CoordinateSystem > CoordinateSystem",
        "text": "class ansys.geometry.core.designer.coordinate_system.CoordinateSystem(name: str, frame: ansys.geometry.core.math.frame.Frame, parent_component: ansys.geometry.core.designer.component.Component, grpc_client: ansys.geometry.core.connection.client.GrpcClient, preexisting_id: str | None = None)\n\nRepresents a user-defined coordinate system within the design assembly.\n\nThis class synchronizes to a design within a supporting Geometry\nservice instance.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the coordinate system.\n\nframe\n\nFrame\n\nFrame defining the coordinate system bounds.\n\nparent_component\n\nComponent, default: Component\n\nParent component the coordinate system is assigned against.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting Geometry service instance for design modeling.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem",
        "href": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem.html#overview",
        "title": "CoordinateSystem > Overview",
        "section": "Overview",
        "text": "id\nID of the coordinate system.\nname\nName of the coordinate system.\nframe\nFrame of the coordinate system.\nparent_component\nParent component of the coordinate system.\nis_alive\nFlag indicating if coordinate system is still alive on the server.\n__repr__\nRepresent the coordinate system as a string.\nOverview\nid\nname\nframe\nparent_component\nis_alive\n__repr__"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem",
        "href": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem.html#import-detail",
        "title": "CoordinateSystem > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem",
        "href": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem.html#property-detail",
        "title": "CoordinateSystem > Property detail",
        "section": "Property detail",
        "text": "ID of the coordinate system.\nName of the coordinate system.\nFrame of the coordinate system.\nParent component of the coordinate system.\nFlag indicating if coordinate system is still alive on the server.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem",
        "href": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem.html#CoordinateSystem.id",
        "title": "CoordinateSystem > Property detail > id",
        "section": "Property detail > id",
        "text": "property CoordinateSystem.id: str\n\nID of the coordinate system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem",
        "href": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem.html#CoordinateSystem.name",
        "title": "CoordinateSystem > Property detail > name",
        "section": "Property detail > name",
        "text": "property CoordinateSystem.name: str\n\nName of the coordinate system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem",
        "href": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem.html#CoordinateSystem.frame",
        "title": "CoordinateSystem > Property detail > frame",
        "section": "Property detail > frame",
        "text": "property CoordinateSystem.frame: ansys.geometry.core.math.frame.Frame\n\nFrame of the coordinate system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem",
        "href": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem.html#CoordinateSystem.parent_component",
        "title": "CoordinateSystem > Property detail > parent_component",
        "section": "Property detail > parent_component",
        "text": "property CoordinateSystem.parent_component: ansys.geometry.core.designer.component.Component\n\nParent component of the coordinate system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem",
        "href": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem.html#CoordinateSystem.is_alive",
        "title": "CoordinateSystem > Property detail > is_alive",
        "section": "Property detail > is_alive",
        "text": "property CoordinateSystem.is_alive: bool\n\nFlag indicating if coordinate system is still alive on the server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem",
        "href": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem.html#method-detail",
        "title": "CoordinateSystem > Method detail",
        "section": "Method detail",
        "text": "Represent the coordinate system as a string.\nMethod detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem",
        "href": "api/ansys/geometry/core/designer/coordinate_system/CoordinateSystem.html#CoordinateSystem.__repr__",
        "title": "CoordinateSystem > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "CoordinateSystem.__repr__() -> str\n\nRepresent the coordinate system as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#repairtools",
        "title": "RepairTools",
        "section": "RepairTools",
        "text": "Repair tools for PyAnsys Geometry.\nRepairTools\nRepairTools"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#ansys.geometry.core.tools.repair_tools.RepairTools",
        "title": "RepairTools > RepairTools > RepairTools",
        "section": "RepairTools > RepairTools",
        "text": "class ansys.geometry.core.tools.repair_tools.RepairTools(grpc_client: ansys.geometry.core.connection.GrpcClient, modeler: ansys.geometry.core.modeler.Modeler)\n\nRepair tools for PyAnsys Geometry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#overview",
        "title": "RepairTools > Overview",
        "section": "Overview",
        "text": "find_split_edges\nFind split edges in the given list of bodies.\nfind_extra_edges\nFind the extra edges in the given list of bodies.\nfind_inexact_edges\nFind inexact edges in the given list of bodies.\nfind_short_edges\nFind the short edge problem areas.\nfind_duplicate_faces\nFind the duplicate face problem areas.\nfind_missing_faces\nFind the missing faces.\nfind_small_faces\nFind the small face problem areas.\nfind_stitch_faces\nReturn the list of stitch face problem areas.\nfind_simplify\nDetect faces in a body that can be simplified.\nfind_interferences\nFind the interference problem areas.\nfind_and_fix_short_edges\nFind and fix the short edge problem areas.\nfind_and_fix_extra_edges\nFind and fix the extra edge problem areas.\nfind_and_fix_split_edges\nFind and fix the split edge problem areas.\nfind_and_fix_simplify\nFind and simplify the provided geometry.\ninspect_geometry\nReturn a list of geometry issues organized by body.\nrepair_geometry\nAttempt to repair the geometry for the given bodies.\nOverview\nfind_split_edges\nfind_extra_edges\nfind_inexact_edges\nfind_short_edges\nfind_duplicate_faces\nfind_missing_faces\nfind_small_faces\nfind_stitch_faces\nfind_simplify\nfind_interferences\nfind_and_fix_short_edges\nfind_and_fix_extra_edges\nfind_and_fix_split_edges\nfind_and_fix_simplify\ninspect_geometry\nrepair_geometry"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#import-detail",
        "title": "RepairTools > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#method-detail",
        "title": "RepairTools > Method detail",
        "section": "Method detail",
        "text": "Find split edges in the given list of bodies.\nThis method finds the split edge problem areas and returns a list of split edge\nproblem areas objects.\nList of bodies that split edges are investigated on.\nThe maximum angle between edges.\nThe maximum length of the edges.\nList of objects representing split edge problem areas.\nFind the extra edges in the given list of bodies.\nThis method find the extra edge problem areas and returns a list of extra edge\nproblem areas objects.\nList of bodies that extra edges are investigated on.\nList of objects representing extra edge problem areas.\nFind inexact edges in the given list of bodies.\nThis method find the inexact edge problem areas and returns a list of inexact\nedge problem areas objects.\nList of bodies that inexact edges are investigated on.\nList of objects representing inexact edge problem areas.\nFind the short edge problem areas.\nThis method finds the short edge problem areas and returns a list of\nthese objects.\nList of bodies that short edges are investigated on.\nList of objects representing short edge problem areas.\nFind the duplicate face problem areas.\nThis method finds the duplicate face problem areas and returns a list of\nduplicate face problem areas objects.\nList of bodies that duplicate faces are investigated on.\nList of objects representing duplicate face problem areas.\nFind the missing faces.\nThis method find the missing face problem areas and returns a list of missing\nface problem areas objects.\nList of bodies that missing faces are investigated on.\nList of objects representing missing face problem areas.\nFind the small face problem areas.\nThis method finds and returns a list of ids of small face problem areas\nobjects.\nList of bodies that small faces are investigated on.\nList of objects representing small face problem areas.\nReturn the list of stitch face problem areas.\nThis method find the stitch face problem areas and returns a list of ids of stitch face\nproblem areas objects.\nList of bodies that stitchable faces are investigated on.\nList of objects representing stitch face problem areas.\nDetect faces in a body that can be simplified.\nList of bodies to search.\nList of objects representing unsimplified face problem areas.\nFind the interference problem areas.\nList of bodies that small faces are investigated on.\nWhether to cut the smaller body if an intererference is found.\nBy default, False.\nList of objects representing interference problem areas.\nThis method finds and returns a list of ids of interference problem areas\nobjects.\nFind and fix the short edge problem areas.\nList of bodies that short edges are investigated on.\nThe maximum length of the edges. By default, 0.0.\nWhether to fix all problem areas individually.\nBy default, False.\nMessage containing number of problem areas found/fixed, created and/or modified bodies.\nThis method finds the short edges in the bodies and fixes them.\nFind and fix the extra edge problem areas.\nList of bodies that short edges are investigated on.\nThe maximum length of the edges.\nWhether to fix all problem areas individually.\nBy default, False.\nMessage containing number of problem areas found/fixed, created and/or modified bodies.\nThis method finds the extra edges in the bodies and fixes them.\nFind and fix the split edge problem areas.\nList of bodies that split edges are investigated on.\nThe maximum angle between edges. By default, 0.0.\nThe maximum length of the edges. By default, 0.0.\nWhether to fix all problem areas individually.\nBy default, False.\nMessage containing number of problem areas found/fixed, created and/or modified bodies.\nThis method finds the extra edges in the bodies and fixes them.\nFind and simplify the provided geometry.\nList of bodies to be simplified.\nWhether to fix all problem areas individually.\nBy default, False.\nMessage containing number of problem areas found/fixed, created and/or modified bodies.\nThis method simplifies the provided geometry.\nReturn a list of geometry issues organized by body.\nThis method inspects the geometry and returns a list of the issues grouped by\nthe body where they are found.\nList of bodies to inspect the geometry for.\nAll bodies are inspected if the argument is not given.\nList of objects representing geometry issues and the bodies where issues are found.\nAttempt to repair the geometry for the given bodies.\nThis method inspects the geometry for the given bodies and attempts to repair them.\nList of bodies where to attempt to repair the geometry.\nAll bodies are repaired if the argument is not given.\nMessage containing success of the operation.\nMethod detail\npython:list\nBody\nReal\nReal\npython:list\nSplitEdgeProblemAreas\npython:list\nBody\npython:list\nExtraEdgeProblemArea\npython:list\nBody\npython:list\nInExactEdgeProblemArea\npython:list\nBody\npython:list\nShortEdgeProblemAreas\npython:list\nBody\npython:list\nDuplicateFaceProblemAreas\npython:list\nBody\npython:list\nMissingFaceProblemAreas\npython:list\nBody\npython:list\nSmallFaceProblemAreas\npython:list\nBody\npython:list\nStitchFaceProblemAreas\npython:list\nBody\npython:list\nUnsimplifiedFaceProblemAreas\npython:list\nBody\noptional\npython:list\nInterfenceProblemAreas\npython:list\nBody\nReal\noptional\noptional\nRepairToolMessage\npython:list\nBody\nReal\noptional\nRepairToolMessage\npython:list\nBody\nReal\noptional\nReal\noptional\noptional\nRepairToolMessage\npython:list\nBody\noptional\nRepairToolMessage\npython:list\nBody\npython:list\nIssuesByBody\npython:list\nBody\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_split_edges",
        "title": "RepairTools > Method detail > find_split_edges",
        "section": "Method detail > find_split_edges",
        "text": "RepairTools.find_split_edges(bodies: list[ansys.geometry.core.designer.body.Body], angle: ansys.geometry.core.typing.Real = 0.0, length: ansys.geometry.core.typing.Real = 0.0) -> list[ansys.geometry.core.tools.problem_areas.SplitEdgeProblemAreas]\n\nFind split edges in the given list of bodies.\n\nThis method finds the split edge problem areas and returns a list of split edge\nproblem areas objects.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies that split edges are investigated on.\n\nangle\n\nReal\n\nThe maximum angle between edges.\n\nlength\n\nReal\n\nThe maximum length of the edges.\n\nReturns\n\npython:list[SplitEdgeProblemAreas]\n\nList of objects representing split edge problem areas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_extra_edges",
        "title": "RepairTools > Method detail > find_extra_edges",
        "section": "Method detail > find_extra_edges",
        "text": "RepairTools.find_extra_edges(bodies: list[ansys.geometry.core.designer.body.Body]) -> list[ansys.geometry.core.tools.problem_areas.ExtraEdgeProblemAreas]\n\nFind the extra edges in the given list of bodies.\n\nThis method find the extra edge problem areas and returns a list of extra edge\nproblem areas objects.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies that extra edges are investigated on.\n\nReturns\n\npython:list[ExtraEdgeProblemArea]\n\nList of objects representing extra edge problem areas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_inexact_edges",
        "title": "RepairTools > Method detail > find_inexact_edges",
        "section": "Method detail > find_inexact_edges",
        "text": "RepairTools.find_inexact_edges(bodies: list[ansys.geometry.core.designer.body.Body]) -> list[ansys.geometry.core.tools.problem_areas.InexactEdgeProblemAreas]\n\nFind inexact edges in the given list of bodies.\n\nThis method find the inexact edge problem areas and returns a list of inexact\nedge problem areas objects.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies that inexact edges are investigated on.\n\nReturns\n\npython:list[InExactEdgeProblemArea]\n\nList of objects representing inexact edge problem areas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_short_edges",
        "title": "RepairTools > Method detail > find_short_edges",
        "section": "Method detail > find_short_edges",
        "text": "RepairTools.find_short_edges(bodies: list[ansys.geometry.core.designer.body.Body], length: ansys.geometry.core.typing.Real = 0.0) -> list[ansys.geometry.core.tools.problem_areas.ShortEdgeProblemAreas]\n\nFind the short edge problem areas.\n\nThis method finds the short edge problem areas and returns a list of\nthese objects.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies that short edges are investigated on.\n\nReturns\n\npython:list[ShortEdgeProblemAreas]\n\nList of objects representing short edge problem areas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_duplicate_faces",
        "title": "RepairTools > Method detail > find_duplicate_faces",
        "section": "Method detail > find_duplicate_faces",
        "text": "RepairTools.find_duplicate_faces(bodies: list[ansys.geometry.core.designer.body.Body]) -> list[ansys.geometry.core.tools.problem_areas.DuplicateFaceProblemAreas]\n\nFind the duplicate face problem areas.\n\nThis method finds the duplicate face problem areas and returns a list of\nduplicate face problem areas objects.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies that duplicate faces are investigated on.\n\nReturns\n\npython:list[DuplicateFaceProblemAreas]\n\nList of objects representing duplicate face problem areas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_missing_faces",
        "title": "RepairTools > Method detail > find_missing_faces",
        "section": "Method detail > find_missing_faces",
        "text": "RepairTools.find_missing_faces(bodies: list[ansys.geometry.core.designer.body.Body]) -> list[ansys.geometry.core.tools.problem_areas.MissingFaceProblemAreas]\n\nFind the missing faces.\n\nThis method find the missing face problem areas and returns a list of missing\nface problem areas objects.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies that missing faces are investigated on.\n\nReturns\n\npython:list[MissingFaceProblemAreas]\n\nList of objects representing missing face problem areas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_small_faces",
        "title": "RepairTools > Method detail > find_small_faces",
        "section": "Method detail > find_small_faces",
        "text": "RepairTools.find_small_faces(bodies: list[ansys.geometry.core.designer.body.Body]) -> list[ansys.geometry.core.tools.problem_areas.SmallFaceProblemAreas]\n\nFind the small face problem areas.\n\nThis method finds and returns a list of ids of small face problem areas\nobjects.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies that small faces are investigated on.\n\nReturns\n\npython:list[SmallFaceProblemAreas]\n\nList of objects representing small face problem areas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_stitch_faces",
        "title": "RepairTools > Method detail > find_stitch_faces",
        "section": "Method detail > find_stitch_faces",
        "text": "RepairTools.find_stitch_faces(bodies: list[ansys.geometry.core.designer.body.Body]) -> list[ansys.geometry.core.tools.problem_areas.StitchFaceProblemAreas]\n\nReturn the list of stitch face problem areas.\n\nThis method find the stitch face problem areas and returns a list of ids of stitch face\nproblem areas objects.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies that stitchable faces are investigated on.\n\nReturns\n\npython:list[StitchFaceProblemAreas]\n\nList of objects representing stitch face problem areas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_simplify",
        "title": "RepairTools > Method detail > find_simplify",
        "section": "Method detail > find_simplify",
        "text": "RepairTools.find_simplify(bodies: list[ansys.geometry.core.designer.body.Body]) -> list[ansys.geometry.core.tools.problem_areas.UnsimplifiedFaceProblemAreas]\n\nDetect faces in a body that can be simplified.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies to search.\n\nReturns\n\npython:list[UnsimplifiedFaceProblemAreas]\n\nList of objects representing unsimplified face problem areas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_interferences",
        "title": "RepairTools > Method detail > find_interferences",
        "section": "Method detail > find_interferences",
        "text": "RepairTools.find_interferences(bodies: list[ansys.geometry.core.designer.body.Body], cut_smaller_body: bool = False) -> list[ansys.geometry.core.tools.problem_areas.InterferenceProblemAreas]\n\nFind the interference problem areas.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies that small faces are investigated on.\n\ncut_smaller_body\n\nbool, optional\n\nWhether to cut the smaller body if an intererference is found.\nBy default, False.\n\nReturns\n\npython:list[InterfenceProblemAreas]\n\nList of objects representing interference problem areas.\n\nNotes\n\nThis method finds and returns a list of ids of interference problem areas\nobjects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_and_fix_short_edges",
        "title": "RepairTools > Method detail > find_and_fix_short_edges",
        "section": "Method detail > find_and_fix_short_edges",
        "text": "RepairTools.find_and_fix_short_edges(bodies: list[ansys.geometry.core.designer.body.Body], length: ansys.geometry.core.typing.Real = 0.0, comprehensive_result: bool = False) -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFind and fix the short edge problem areas.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies that short edges are investigated on.\n\nlength\n\nReal, optional\n\nThe maximum length of the edges. By default, 0.0.\n\ncomprehensive_result\n\nbool, optional\n\nWhether to fix all problem areas individually.\nBy default, False.\n\nReturns\n\nRepairToolMessage\n\nMessage containing number of problem areas found/fixed, created and/or modified bodies.\n\nNotes\n\nThis method finds the short edges in the bodies and fixes them.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_and_fix_extra_edges",
        "title": "RepairTools > Method detail > find_and_fix_extra_edges",
        "section": "Method detail > find_and_fix_extra_edges",
        "text": "RepairTools.find_and_fix_extra_edges(bodies: list[ansys.geometry.core.designer.body.Body], comprehensive_result: bool = False) -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFind and fix the extra edge problem areas.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies that short edges are investigated on.\n\nlength\n\nReal\n\nThe maximum length of the edges.\n\ncomprehensive_result\n\nbool, optional\n\nWhether to fix all problem areas individually.\nBy default, False.\n\nReturns\n\nRepairToolMessage\n\nMessage containing number of problem areas found/fixed, created and/or modified bodies.\n\nNotes\n\nThis method finds the extra edges in the bodies and fixes them.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_and_fix_split_edges",
        "title": "RepairTools > Method detail > find_and_fix_split_edges",
        "section": "Method detail > find_and_fix_split_edges",
        "text": "RepairTools.find_and_fix_split_edges(bodies: list[ansys.geometry.core.designer.body.Body], angle: ansys.geometry.core.typing.Real = 0.0, length: ansys.geometry.core.typing.Real = 0.0, comprehensive_result: bool = False) -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFind and fix the split edge problem areas.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies that split edges are investigated on.\n\nangle\n\nReal, optional\n\nThe maximum angle between edges. By default, 0.0.\n\nlength\n\nReal, optional\n\nThe maximum length of the edges. By default, 0.0.\n\ncomprehensive_result\n\nbool, optional\n\nWhether to fix all problem areas individually.\nBy default, False.\n\nReturns\n\nRepairToolMessage\n\nMessage containing number of problem areas found/fixed, created and/or modified bodies.\n\nNotes\n\nThis method finds the extra edges in the bodies and fixes them.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.find_and_fix_simplify",
        "title": "RepairTools > Method detail > find_and_fix_simplify",
        "section": "Method detail > find_and_fix_simplify",
        "text": "RepairTools.find_and_fix_simplify(bodies: list[ansys.geometry.core.designer.body.Body], comprehensive_result: bool = False) -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFind and simplify the provided geometry.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies to be simplified.\n\ncomprehensive_result\n\nbool, optional\n\nWhether to fix all problem areas individually.\nBy default, False.\n\nReturns\n\nRepairToolMessage\n\nMessage containing number of problem areas found/fixed, created and/or modified bodies.\n\nNotes\n\nThis method simplifies the provided geometry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.inspect_geometry",
        "title": "RepairTools > Method detail > inspect_geometry",
        "section": "Method detail > inspect_geometry",
        "text": "RepairTools.inspect_geometry(bodies: list[ansys.geometry.core.designer.body.Body] = None) -> list[ansys.geometry.core.tools.check_geometry.InspectResult]\n\nReturn a list of geometry issues organized by body.\n\nThis method inspects the geometry and returns a list of the issues grouped by\nthe body where they are found.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies to inspect the geometry for.\nAll bodies are inspected if the argument is not given.\n\nReturns\n\npython:list[IssuesByBody]\n\nList of objects representing geometry issues and the bodies where issues are found.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/RepairTools",
        "href": "api/ansys/geometry/core/tools/repair_tools/RepairTools.html#RepairTools.repair_geometry",
        "title": "RepairTools > Method detail > repair_geometry",
        "section": "Method detail > repair_geometry",
        "text": "RepairTools.repair_geometry(bodies: list[ansys.geometry.core.designer.body.Body] = None) -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nAttempt to repair the geometry for the given bodies.\n\nThis method inspects the geometry for the given bodies and attempts to repair them.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nList of bodies where to attempt to repair the geometry.\nAll bodies are repaired if the argument is not given.\n\nReturns\n\nRepairToolMessage\n\nMessage containing success of the operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands",
        "href": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands.html#unsupportedcommands",
        "title": "UnsupportedCommands",
        "section": "UnsupportedCommands",
        "text": "Provides unsupported commands for PyAnsys Geometry.\ngRPC client to use for the geometry commands.\nModeler instance to use for the geometry commands.\nUnsupportedCommands\nUnsupportedCommands\nGrpcClient\nModeler"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands",
        "href": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands.html#ansys.geometry.core.tools.unsupported.UnsupportedCommands",
        "title": "UnsupportedCommands > UnsupportedCommands > UnsupportedCommands",
        "section": "UnsupportedCommands > UnsupportedCommands",
        "text": "class ansys.geometry.core.tools.unsupported.UnsupportedCommands(grpc_client: ansys.geometry.core.connection.GrpcClient, modeler: ansys.geometry.core.modeler.Modeler)\n\nProvides unsupported commands for PyAnsys Geometry.\n\nParameters\n\ngrpc_client\n\nGrpcClient\n\ngRPC client to use for the geometry commands.\n\nmodeler\n\nModeler\n\nModeler instance to use for the geometry commands.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands",
        "href": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands.html#overview",
        "title": "UnsupportedCommands > Overview",
        "section": "Overview",
        "text": "set_export_id\nSet the persistent id for the moniker.\nget_body_occurrences_from_import_id\nGet all body occurrences whose master has the given import id.\nget_face_occurrences_from_import_id\nGet all face occurrences whose master has the given import id.\nget_edge_occurrences_from_import_id\nGet all edge occurrences whose master has the given import id.\nOverview\nset_export_id\nget_body_occurrences_from_import_id\nget_face_occurrences_from_import_id\nget_edge_occurrences_from_import_id"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands",
        "href": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands.html#import-detail",
        "title": "UnsupportedCommands > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands",
        "href": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands.html#method-detail",
        "title": "UnsupportedCommands > Method detail",
        "section": "Method detail",
        "text": "Set the persistent id for the moniker.\nMoniker to set the id for.\nType of id.\nId to set.\nGet all body occurrences whose master has the given import id.\nPersistent id\nType of id\nList of body occurrences.\nGet all face occurrences whose master has the given import id.\nPersistent id.\nType of id.\nList of face occurrences.\nGet all edge occurrences whose master has the given import id.\nPersistent id.\nType of id.\nList of edge occurrences.\nMethod detail\npython:str\nPersistentIdType\npython:str\npython:str\nPersistentIdType\npython:list\nBody\npython:str\nPersistentIdType\npython:list\nFace\npython:str\nPersistentIdType\npython:list\nEdge"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands",
        "href": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands.html#UnsupportedCommands.set_export_id",
        "title": "UnsupportedCommands > Method detail > set_export_id",
        "section": "Method detail > set_export_id",
        "text": "UnsupportedCommands.set_export_id(moniker: str, id_type: PersistentIdType, value: str) -> None\n\nSet the persistent id for the moniker.\n\nParameters\n\nmoniker\n\npython:str\n\nMoniker to set the id for.\n\nid_type\n\nPersistentIdType\n\nType of id.\n\nvalue\n\npython:str\n\nId to set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands",
        "href": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands.html#UnsupportedCommands.get_body_occurrences_from_import_id",
        "title": "UnsupportedCommands > Method detail > get_body_occurrences_from_import_id",
        "section": "Method detail > get_body_occurrences_from_import_id",
        "text": "UnsupportedCommands.get_body_occurrences_from_import_id(import_id: str, id_type: PersistentIdType) -> list[ansys.geometry.core.designer.body.Body]\n\nGet all body occurrences whose master has the given import id.\n\nParameters\n\nimport_id\n\npython:str\n\nPersistent id\n\nid_type\n\nPersistentIdType\n\nType of id\n\nReturns\n\npython:list[Body]\n\nList of body occurrences.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands",
        "href": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands.html#UnsupportedCommands.get_face_occurrences_from_import_id",
        "title": "UnsupportedCommands > Method detail > get_face_occurrences_from_import_id",
        "section": "Method detail > get_face_occurrences_from_import_id",
        "text": "UnsupportedCommands.get_face_occurrences_from_import_id(import_id: str, id_type: PersistentIdType) -> list[ansys.geometry.core.designer.face.Face]\n\nGet all face occurrences whose master has the given import id.\n\nParameters\n\nimport_id\n\npython:str\n\nPersistent id.\n\nid_type\n\nPersistentIdType\n\nType of id.\n\nReturns\n\npython:list[Face]\n\nList of face occurrences.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands",
        "href": "api/ansys/geometry/core/tools/unsupported/UnsupportedCommands.html#UnsupportedCommands.get_edge_occurrences_from_import_id",
        "title": "UnsupportedCommands > Method detail > get_edge_occurrences_from_import_id",
        "section": "Method detail > get_edge_occurrences_from_import_id",
        "text": "UnsupportedCommands.get_edge_occurrences_from_import_id(import_id: str, id_type: PersistentIdType) -> list[ansys.geometry.core.designer.edge.Edge]\n\nGet all edge occurrences whose master has the given import id.\n\nParameters\n\nimport_id\n\npython:str\n\nPersistent id.\n\nid_type\n\nPersistentIdType\n\nType of id.\n\nReturns\n\npython:list[Edge]\n\nList of edge occurrences.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#the-launcherpy-module",
        "title": "The launcher.py module",
        "section": "The launcher.py module",
        "text": "The launcher.py module\nlauncher.py"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#summary",
        "title": "The launcher.py module > Summary",
        "section": "Summary",
        "text": "launch_modeler\nStart the Modeler interface for PyAnsys Geometry.\nlaunch_remote_modeler\nStart the Geometry service remotely using the PIM API.\nlaunch_docker_modeler\nStart the Geometry service locally using Docker.\nlaunch_modeler_with_discovery_and_pimlight\nStart Ansys Discovery remotely using the PIM API.\nlaunch_modeler_with_geometry_service_and_pimlight\nStart the Geometry service remotely using the PIM API.\nlaunch_modeler_with_spaceclaim_and_pimlight\nStart Ansys SpaceClaim remotely using the PIM API.\nlaunch_modeler_with_geometry_service\nStart the Geometry service locally using the ProductInstance class.\nlaunch_modeler_with_discovery\nStart Ansys Discovery locally using the ProductInstance class.\nlaunch_modeler_with_spaceclaim\nStart Ansys SpaceClaim locally using the ProductInstance class.\nlaunch_modeler_with_core_service\nStart the Geometry Core service locally using the ProductInstance class.\nSummary\nlaunch_modeler\nModeler\nlaunch_remote_modeler\nlaunch_docker_modeler\nlaunch_modeler_with_discovery_and_pimlight\nlaunch_modeler_with_geometry_service_and_pimlight\nlaunch_modeler_with_spaceclaim_and_pimlight\nlaunch_modeler_with_geometry_service\nProductInstance\nlaunch_modeler_with_discovery\nProductInstance\nlaunch_modeler_with_spaceclaim\nProductInstance\nlaunch_modeler_with_core_service\nProductInstance"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#description",
        "title": "The launcher.py module > Description",
        "section": "Description",
        "text": "Module for connecting to instances of the Geometry service.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#module-detail",
        "title": "The launcher.py module > Module detail",
        "section": "Module detail",
        "text": "Start the Modeler interface for PyAnsys Geometry.\nMode in which to launch the Modeler service. The default is None,\nin which case the method tries to determine the mode automatically. The\npossible values are:\n\"pypim\": Launches the Modeler service remotely using the PIM API.\n\"docker\": Launches the Modeler service locally using Docker.\n\"geometry_service\": Launches the Modeler service locally using the\nAnsys Geometry Service.\n\"spaceclaim\": Launches the Modeler service locally using Ansys SpaceClaim.\n\"discovery\": Launches the Modeler service locally using Ansys Discovery.\nKeyword arguments for the launching methods. For allowable keyword arguments, see the\ncorresponding methods for each mode:\nFor \"pypim\" mode, see the launch_remote_modeler() method.\nFor \"docker\" mode, see the launch_docker_modeler() method.\nFor \"geometry_service\" mode, see the\nlaunch_modeler_with_geometry_service() method.\nFor \"core_service\" mode, see the launch_modeler_with_core_service() method.\nFor \"spaceclaim\" mode, see the launch_modeler_with_spaceclaim() method.\nFor \"discovery\" mode, see the launch_modeler_with_discovery() method.\nPythonic interface for geometry modeling.\nLaunch the Geometry service.\nStart the Geometry service remotely using the PIM API.\nWhen calling this method, you must ensure that you are in an\nenvironment where PyPIM is\nconfigured. You can use the\npypim.is_configured\nmethod to check if it is configured.\nSpecific for Ansys Lab. The platform option for the Geometry service.\nThe default is \"windows\".\nThis parameter is used to specify the operating system on which the\nGeometry service will run. The possible values are:\n\"windows\": The Geometry service runs on a Windows machine.\n\"linux\": The Geometry service runs on a Linux machine.\nVersion of the Geometry service to run in the three-digit format.\nFor example, “241”. If you do not specify the version, the server\nchooses the version.\nLog level for the client. The default is logging.INFO.\nPath to the log file for the client. The default is None,\nin which case the client logs to the console.\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\nInstance of the Geometry service.\nStart the Geometry service locally using Docker.\nWhen calling this method, a Geometry service (as a local Docker container)\nis started. By default, if a container with the Geometry service already exists\nat the given port, it connects to it. Otherwise, it tries to launch its own\nservice.\nLocalhost port to deploy the Geometry service on or the\nthe Modeler interface to connect to (if it is already deployed). By default,\nthe value is the one for the DEFAULT_PORT connection parameter.\nWhether the Modeler interface should connect to a Geometry\nservice already deployed at the specified port.\nWhether the Geometry service (which is already running)\nshould be restarted when attempting connection.\nName of the Docker container to deploy. The default is None,\nin which case Docker assigns it a random name.\nThe Geometry service Docker image to deploy. The default is None,\nin which case the LocalDockerInstance class identifies the OS of your\nDocker engine and deploys the latest version of the Geometry service for\nthat OS.\nLog level for the client. The default is logging.INFO.\nPath to the log file for the client. The default is None,\nin which case the client logs to the console.\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\nInstance of the Geometry service.\nStart Ansys Discovery remotely using the PIM API.\nWhen calling this method, you must ensure that you are in an\nenvironment where PyPIM is configured.\nYou can use the pypim.is_configured\nmethod to check if it is configured.\nVersion of Discovery to run in the three-digit format.\nFor example, “241”. If you do not specify the version, the server\nchooses the version.\nLog level for the client. The default is logging.INFO.\nPath to the log file for the client. The default is None,\nin which case the client logs to the console.\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\nInstance of Modeler.\nStart the Geometry service remotely using the PIM API.\nWhen calling this method, you must ensure that you are in an\nenvironment where PyPIM is configured.\nYou can use the pypim.is_configured\nmethod to check if it is configured.\nVersion of the Geometry service to run in the three-digit format.\nFor example, “241”. If you do not specify the version, the server\nchooses the version.\nLog level for the client. The default is logging.INFO.\nPath to the log file for the client. The default is None,\nin which case the client logs to the console.\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\nInstance of Modeler.\nStart Ansys SpaceClaim remotely using the PIM API.\nWhen calling this method, you must ensure that you are in an\nenvironment where PyPIM is configured.\nYou can use the pypim.is_configured\nmethod to check if it is configured.\nVersion of SpaceClaim to run in the three-digit format.\nFor example, “241”. If you do not specify the version, the server\nchooses the version.\nLog level for the client. The default is logging.INFO.\nPath to the log file for the client. The default is None,\nin which case the client logs to the console.\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\nInstance of Modeler.\nStart the Geometry service locally using the ProductInstance class.\nWhen calling this method, a standalone Geometry service is started.\nBy default, if an endpoint is specified (by defining host and port parameters)\nbut the endpoint is not available, the startup will fail. Otherwise, it will try to\nlaunch its own service.\nThe product version to be started. Goes from v24.1 to\nthe latest. Default is None.\nIf a specific product version is requested but not installed locally,\na SystemError will be raised.\nAnsys products versions and their corresponding int values:\n241 : Ansys 24R1\n242 : Ansys 24R2\nIP address at which the Geometry service will be deployed. By default,\nits value will be localhost.\nPort at which the Geometry service will be deployed. By default, its\nvalue will be None.\nBoolean enabling the logs trace on the Geometry service console window.\nBy default its value is False.\nTimeout for starting the backend startup process. The default is 60.\n0: Chatterbox\n1: Debug\n2: Warning\n3: Error\nThe default is 2 (Warning).\nLogging level to apply to the client. By default, INFO level is used.\nUse the logging module’s levels: DEBUG, INFO, WARNING, ERROR, CRITICAL.\nSets the backend’s logs folder path. If nothing is defined,\nthe backend will use its default path.\nSets the client’s log file path. If nothing is defined,\nthe client will log to the console.\nDEPRECATED. Use server_log_level instead.\nDEPRECATED. Use server_logs_folder instead.\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\nInstance of the Geometry service.\nIf the specified endpoint is already in use, a connection\nerror will be raised.\nIf there is not an Ansys product 24.1 version or later installed\na SystemError will be raised.\nStarting a geometry service with the default parameters and getting back a Modeler\nobject:\nStarting a geometry service, on address 10.171.22.44, port 5001, with chatty\nlogs, traces enabled and a 300 seconds timeout:\nStart Ansys Discovery locally using the ProductInstance class.\nWhen calling this method, a standalone Discovery session is started.\nBy default, if an endpoint is specified (by defining host and port parameters)\nbut the endpoint is not available, the startup will fail. Otherwise, it will try to\nlaunch its own service.\nThe product version to be started. Goes from v24.1 to\nthe latest. Default is None.\nIf a specific product version is requested but not installed locally,\na SystemError will be raised.\nAnsys products versions and their corresponding int values:\n241 : Ansys 24R1\n242 : Ansys 24R2\nIP address at which the Discovery session will be deployed. By default,\nits value will be localhost.\nPort at which the Geometry service will be deployed. By default, its\nvalue will be None.\nThe backend’s API version to be used at runtime. Goes from API v21 to\nthe latest. Default is ApiVersions.LATEST.\nTimeout for starting the backend startup process. The default is 150.\nUsed to specify a manifest file path for the ApiServerAddin. This way,\nit is possible to run an ApiServerAddin from a version an older product\nversion.\n0: Chatterbox\n1: Debug\n2: Warning\n3: Error\nThe default is 2 (Warning).\nLogging level to apply to the client. By default, INFO level is used.\nUse the logging module’s levels: DEBUG, INFO, WARNING, ERROR, CRITICAL.\nSets the client’s log file path. If nothing is defined,\nthe client will log to the console.\nDEPRECATED. Use server_log_level instead.\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\nInstance of the Geometry service.\nIf the specified endpoint is already in use, a connection error will be raised.\nIf there is not an Ansys product 24.1 version or later installed\nor if a specific product’s version is requested but not installed locally then\na SystemError will be raised.\nStarting an Ansys Discovery session with the default parameters and getting back a Modeler\nobject:\nStarting an Ansys Discovery V 24.1 session, on address 10.171.22.44, port 5001,\nwith chatty logs, using API v231 and a 300 seconds timeout:\nStart Ansys SpaceClaim locally using the ProductInstance class.\nWhen calling this method, a standalone SpaceClaim session is started.\nBy default, if an endpoint is specified (by defining host and port parameters)\nbut the endpoint is not available, the startup will fail. Otherwise, it will try to\nlaunch its own service.\nThe product version to be started. Goes from v24.1 to\nthe latest. Default is None.\nIf a specific product version is requested but not installed locally,\na SystemError will be raised.\nAnsys products versions and their corresponding int values:\n241 : Ansys 24R1\n242 : Ansys 24R2\nIP address at which the SpaceClaim session will be deployed. By default,\nits value will be localhost.\nPort at which the Geometry service will be deployed. By default, its\nvalue will be None.\nThe backend’s API version to be used at runtime. Goes from API v21 to\nthe latest. Default is ApiVersions.LATEST.\nTimeout for starting the backend startup process. The default is 150.\nUsed to specify a manifest file path for the ApiServerAddin. This way,\nit is possible to run an ApiServerAddin from a version an older product\nversion.\n0: Chatterbox\n1: Debug\n2: Warning\n3: Error\nThe default is 2 (Warning).\nLogging level to apply to the client. By default, INFO level is used.\nUse the logging module’s levels: DEBUG, INFO, WARNING, ERROR, CRITICAL.\nSets the client’s log file path. If nothing is defined,\nthe client will log to the console.\nDEPRECATED. Use server_log_level instead.\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\nInstance of the Geometry service.\nIf the specified endpoint is already in use, a connection error will be raised.\nIf there is not an Ansys product 24.1 version or later installed\nor if a specific product’s version is requested but not installed locally then\na SystemError will be raised.\nStarting an Ansys SpaceClaim session with the default parameters and get back a Modeler\nobject:\nStarting an Ansys SpaceClaim V 24.1 session, on address 10.171.22.44, port 5001,\nwith chatty logs, using API v231 and a 300 seconds timeout:\nStart the Geometry Core service locally using the ProductInstance class.\nWhen calling this method, a standalone Geometry Core service is started.\nBy default, if an endpoint is specified (by defining host and port parameters)\nbut the endpoint is not available, the startup will fail. Otherwise, it will try to\nlaunch its own service.\nThe product version to be started. Goes from v25.2 to\nthe latest. Default is None.\nIf a specific product version is requested but not installed locally,\na SystemError will be raised.\nAnsys products versions and their corresponding int values:\n252 : Ansys 25R2\n261 : Ansys 26R1\nIP address at which the service will be deployed. By default,\nits value will be localhost.\nPort at which the service will be deployed. By default, its\nvalue will be None.\nBoolean enabling the logs trace on the service console window.\nBy default its value is False.\nTimeout for starting the backend startup process. The default is 60.\n0: Chatterbox\n1: Debug\n2: Warning\n3: Error\nThe default is 2 (Warning).\nLogging level to apply to the client. By default, INFO level is used.\nUse the logging module’s levels: DEBUG, INFO, WARNING, ERROR, CRITICAL.\nSets the backend’s logs folder path. If nothing is defined,\nthe backend will use its default path.\nSets the client’s log file path. If nothing is defined,\nthe client will log to the console.\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\nInstance of the Geometry Core service.\nIf the specified endpoint is already in use, a connection\nerror will be raised.\nIf there is not an Ansys product 25.2 version or later installed\na SystemError will be raised.\nStarting a geometry core service with the default parameters and getting back a Modeler\nobject:\nStarting a geometry service, on address 10.171.22.44, port 5001, with chatty\nlogs, traces enabled and a 300 seconds timeout:\nModule detail\nModeler\npython:str\npython:None\nModeler\nNone\n\"pypim\"\nModeler\n\"docker\"\nModeler\n\"geometry_service\"\nModeler\n\"spaceclaim\"\nModeler\n\"discovery\"\nModeler\npython:dict\npython:None\n\"pypim\"\nlaunch_remote_modeler()\n\"docker\"\nlaunch_docker_modeler()\n\"geometry_service\"\nlaunch_modeler_with_geometry_service()\n\"core_service\"\nlaunch_modeler_with_core_service()\n\"spaceclaim\"\nlaunch_modeler_with_spaceclaim()\n\"discovery\"\nlaunch_modeler_with_discovery()\nansys.geometry.core.modeler.Modeler\npypim.is_configured\npython:str\npython:None\n\"windows\"\n\"windows\"\n\"linux\"\npython:str\npython:None\npython:int\nlogging.INFO\nlogging.INFO\npython:str\npython:None\nNone\npython:dict\npython:None\nansys.geometry.core.modeler.Modeler\npython:int\noptional\nModeler\nDEFAULT_PORT\npython:True\nModeler\npython:False\npython:str\npython:None\nNone\nGeometryContainers\npython:None\nNone\nLocalDockerInstance\npython:int\nlogging.INFO\nlogging.INFO\npython:str\npython:None\nNone\npython:dict\npython:None\nModeler\npypim.is_configured\npython:str\npython:None\npython:int\nlogging.INFO\nlogging.INFO\npython:str\npython:None\nNone\npython:dict\npython:None\nansys.geometry.core.modeler.Modeler\npypim.is_configured\npython:str\npython:None\npython:int\nlogging.INFO\nlogging.INFO\npython:str\npython:None\nNone\npython:dict\npython:None\nansys.geometry.core.modeler.Modeler\npypim.is_configured\npython:str\npython:None\npython:int\nlogging.INFO\nlogging.INFO\npython:str\npython:None\nNone\npython:dict\npython:None\nansys.geometry.core.modeler.Modeler\nProductInstance\nNone\n241\n242\nlocalhost\npython:int\noptional\nNone\noptional\nFalse\npython:int\noptional\npython:int\noptional\n2\npython:int\noptional\npython:str\noptional\npython:str\noptional\npython:int\noptional\nserver_log_level\npython:str\noptional\nserver_logs_folder\npython:dict\npython:None\nModeler\nConnectionError\nSystemError\nModeler\n10.171.22.44\n5001\n300\nProductInstance\nNone\n241\n242\nlocalhost\npython:int\noptional\nNone\nApiVersions.LATEST\npython:int\noptional\npython:str\noptional\nstarts\nthe\nproduct\nhiding\nits\nDefault\nis\nFalse\npython:int\noptional\n2\npython:int\noptional\npython:str\noptional\npython:int\noptional\nserver_log_level\npython:dict\npython:None\nModeler\nConnectionError\nModeler\n10.171.22.44\n5001\n300\nProductInstance\nNone\n241\n242\nlocalhost\npython:int\noptional\nNone\nApiVersions.LATEST\npython:int\noptional\npython:str\noptional\nstarts\nthe\nproduct\nhiding\nits\nDefault\nis\nFalse\npython:int\noptional\n2\npython:int\noptional\npython:str\noptional\npython:int\noptional\nserver_log_level\npython:dict\npython:None\nModeler\nConnectionError\nSystemError\nModeler\n10.171.22.44\n5001\n300\nProductInstance\nNone\n252\n261\nlocalhost\npython:int\noptional\nNone\noptional\nFalse\npython:int\noptional\npython:int\noptional\n2\npython:int\noptional\npython:str\noptional\npython:str\noptional\npython:dict\npython:None\nModeler\nConnectionError\nSystemError\nModeler\n10.171.22.44\n5001\n300"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#launcher.launch_modeler",
        "title": "The launcher.py module > Module detail > launch_modeler",
        "section": "Module detail > launch_modeler",
        "text": "launcher.launch_modeler(mode: str = None, **kwargs: dict | None) -> ansys.geometry.core.modeler.Modeler\n\nStart the Modeler interface for PyAnsys Geometry.\n\nParameters\n\nmode\n\npython:str, default: python:None\n\nMode in which to launch the Modeler service. The default is None,\nin which case the method tries to determine the mode automatically. The\npossible values are:\n\n\"pypim\": Launches the Modeler service remotely using the PIM API.\n\n\"docker\": Launches the Modeler service locally using Docker.\n\n\"geometry_service\": Launches the Modeler service locally using the\nAnsys Geometry Service.\n\n\"spaceclaim\": Launches the Modeler service locally using Ansys SpaceClaim.\n\n\"discovery\": Launches the Modeler service locally using Ansys Discovery.\n\n**kwargs\n\npython:dict, default: python:None\n\nKeyword arguments for the launching methods. For allowable keyword arguments, see the\ncorresponding methods for each mode:\n\nFor \"pypim\" mode, see the launch_remote_modeler() method.\n\nFor \"docker\" mode, see the launch_docker_modeler() method.\n\nFor \"geometry_service\" mode, see the\nlaunch_modeler_with_geometry_service() method.\n\nFor \"core_service\" mode, see the launch_modeler_with_core_service() method.\n\nFor \"spaceclaim\" mode, see the launch_modeler_with_spaceclaim() method.\n\nFor \"discovery\" mode, see the launch_modeler_with_discovery() method.\n\nReturns\n\nansys.geometry.core.modeler.Modeler\n\nPythonic interface for geometry modeling.\n\nExamples\n\nLaunch the Geometry service.\n\n>>> from ansys.geometry.core import launch_modeler\n>>> modeler = launch_modeler()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#launcher.launch_remote_modeler",
        "title": "The launcher.py module > Module detail > launch_remote_modeler",
        "section": "Module detail > launch_remote_modeler",
        "text": "launcher.launch_remote_modeler(platform: str = 'windows', version: str | None = None, client_log_level: int = logging.INFO, client_log_file: str | None = None, **kwargs: dict | None) -> ansys.geometry.core.modeler.Modeler\n\nStart the Geometry service remotely using the PIM API.\n\nWhen calling this method, you must ensure that you are in an\nenvironment where PyPIM is\nconfigured. You can use the\npypim.is_configured\nmethod to check if it is configured.\n\nParameters\n\nplatform\n\npython:str, default: python:None\n\nSpecific for Ansys Lab. The platform option for the Geometry service.\nThe default is \"windows\".\nThis parameter is used to specify the operating system on which the\nGeometry service will run. The possible values are:\n\n\"windows\": The Geometry service runs on a Windows machine.\n\n\"linux\": The Geometry service runs on a Linux machine.\n\nversion\n\npython:str, default: python:None\n\nVersion of the Geometry service to run in the three-digit format.\nFor example, “241”. If you do not specify the version, the server\nchooses the version.\n\nclient_log_level\n\npython:int, default: logging.INFO\n\nLog level for the client. The default is logging.INFO.\n\nclient_log_file\n\npython:str, default: python:None\n\nPath to the log file for the client. The default is None,\nin which case the client logs to the console.\n\n**kwargs\n\npython:dict, default: python:None\n\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\n\nReturns\n\nansys.geometry.core.modeler.Modeler\n\nInstance of the Geometry service.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#launcher.launch_docker_modeler",
        "title": "The launcher.py module > Module detail > launch_docker_modeler",
        "section": "Module detail > launch_docker_modeler",
        "text": "launcher.launch_docker_modeler(port: int = DEFAULT_PORT, connect_to_existing_service: bool = True, restart_if_existing_service: bool = False, name: str | None = None, image: ansys.geometry.core.connection.docker_instance.GeometryContainers | None = None, client_log_level: int = logging.INFO, client_log_file: str | None = None, **kwargs: dict | None) -> ansys.geometry.core.modeler.Modeler\n\nStart the Geometry service locally using Docker.\n\nWhen calling this method, a Geometry service (as a local Docker container)\nis started. By default, if a container with the Geometry service already exists\nat the given port, it connects to it. Otherwise, it tries to launch its own\nservice.\n\nParameters\n\nport\n\npython:int, optional\n\nLocalhost port to deploy the Geometry service on or the\nthe Modeler interface to connect to (if it is already deployed). By default,\nthe value is the one for the DEFAULT_PORT connection parameter.\n\nconnect_to_existing_service\n\nbool, default: python:True\n\nWhether the Modeler interface should connect to a Geometry\nservice already deployed at the specified port.\n\nrestart_if_existing_service\n\nbool, default: python:False\n\nWhether the Geometry service (which is already running)\nshould be restarted when attempting connection.\n\nname\n\npython:str, default: python:None\n\nName of the Docker container to deploy. The default is None,\nin which case Docker assigns it a random name.\n\nimage\n\nGeometryContainers, default: python:None\n\nThe Geometry service Docker image to deploy. The default is None,\nin which case the LocalDockerInstance class identifies the OS of your\nDocker engine and deploys the latest version of the Geometry service for\nthat OS.\n\nclient_log_level\n\npython:int, default: logging.INFO\n\nLog level for the client. The default is logging.INFO.\n\nclient_log_file\n\npython:str, default: python:None\n\nPath to the log file for the client. The default is None,\nin which case the client logs to the console.\n\n**kwargs\n\npython:dict, default: python:None\n\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\n\nReturns\n\nModeler\n\nInstance of the Geometry service.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#launcher.launch_modeler_with_discovery_and_pimlight",
        "title": "The launcher.py module > Module detail > launch_modeler_with_discovery_and_pimlight",
        "section": "Module detail > launch_modeler_with_discovery_and_pimlight",
        "text": "launcher.launch_modeler_with_discovery_and_pimlight(version: str | None = None, client_log_level: int = logging.INFO, client_log_file: str | None = None, **kwargs: dict | None) -> ansys.geometry.core.modeler.Modeler\n\nStart Ansys Discovery remotely using the PIM API.\n\nWhen calling this method, you must ensure that you are in an\nenvironment where PyPIM is configured.\nYou can use the pypim.is_configured\nmethod to check if it is configured.\n\nParameters\n\nversion\n\npython:str, default: python:None\n\nVersion of Discovery to run in the three-digit format.\nFor example, “241”. If you do not specify the version, the server\nchooses the version.\n\nclient_log_level\n\npython:int, default: logging.INFO\n\nLog level for the client. The default is logging.INFO.\n\nclient_log_file\n\npython:str, default: python:None\n\nPath to the log file for the client. The default is None,\nin which case the client logs to the console.\n\n**kwargs\n\npython:dict, default: python:None\n\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\n\nReturns\n\nansys.geometry.core.modeler.Modeler\n\nInstance of Modeler.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#launcher.launch_modeler_with_geometry_service_and_pimlight",
        "title": "The launcher.py module > Module detail > launch_modeler_with_geometry_service_and_pimlight",
        "section": "Module detail > launch_modeler_with_geometry_service_and_pimlight",
        "text": "launcher.launch_modeler_with_geometry_service_and_pimlight(version: str | None = None, client_log_level: int = logging.INFO, client_log_file: str | None = None, **kwargs: dict | None) -> ansys.geometry.core.modeler.Modeler\n\nStart the Geometry service remotely using the PIM API.\n\nWhen calling this method, you must ensure that you are in an\nenvironment where PyPIM is configured.\nYou can use the pypim.is_configured\nmethod to check if it is configured.\n\nParameters\n\nversion\n\npython:str, default: python:None\n\nVersion of the Geometry service to run in the three-digit format.\nFor example, “241”. If you do not specify the version, the server\nchooses the version.\n\nclient_log_level\n\npython:int, default: logging.INFO\n\nLog level for the client. The default is logging.INFO.\n\nclient_log_file\n\npython:str, default: python:None\n\nPath to the log file for the client. The default is None,\nin which case the client logs to the console.\n\n**kwargs\n\npython:dict, default: python:None\n\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\n\nReturns\n\nansys.geometry.core.modeler.Modeler\n\nInstance of Modeler.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#launcher.launch_modeler_with_spaceclaim_and_pimlight",
        "title": "The launcher.py module > Module detail > launch_modeler_with_spaceclaim_and_pimlight",
        "section": "Module detail > launch_modeler_with_spaceclaim_and_pimlight",
        "text": "launcher.launch_modeler_with_spaceclaim_and_pimlight(version: str | None = None, client_log_level: int = logging.INFO, client_log_file: str | None = None, **kwargs: dict | None) -> ansys.geometry.core.modeler.Modeler\n\nStart Ansys SpaceClaim remotely using the PIM API.\n\nWhen calling this method, you must ensure that you are in an\nenvironment where PyPIM is configured.\nYou can use the pypim.is_configured\nmethod to check if it is configured.\n\nParameters\n\nversion\n\npython:str, default: python:None\n\nVersion of SpaceClaim to run in the three-digit format.\nFor example, “241”. If you do not specify the version, the server\nchooses the version.\n\nclient_log_level\n\npython:int, default: logging.INFO\n\nLog level for the client. The default is logging.INFO.\n\nclient_log_file\n\npython:str, default: python:None\n\nPath to the log file for the client. The default is None,\nin which case the client logs to the console.\n\n**kwargs\n\npython:dict, default: python:None\n\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\n\nReturns\n\nansys.geometry.core.modeler.Modeler\n\nInstance of Modeler.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#launcher.launch_modeler_with_geometry_service",
        "title": "The launcher.py module > Module detail > launch_modeler_with_geometry_service",
        "section": "Module detail > launch_modeler_with_geometry_service",
        "text": "launcher.launch_modeler_with_geometry_service(product_version: int = None, host: str = 'localhost', port: int = None, enable_trace: bool = False, timeout: int = 60, server_log_level: int = 2, client_log_level: int = logging.INFO, server_logs_folder: str = None, client_log_file: str = None, log_level: int = None, logs_folder: str = None, **kwargs: dict | None) -> ansys.geometry.core.modeler.Modeler\n\nStart the Geometry service locally using the ProductInstance class.\n\nWhen calling this method, a standalone Geometry service is started.\nBy default, if an endpoint is specified (by defining host and port parameters)\nbut the endpoint is not available, the startup will fail. Otherwise, it will try to\nlaunch its own service.\n\nParameters\n\nproduct_version: int, optional\n\nThe product version to be started. Goes from v24.1 to\nthe latest. Default is None.\nIf a specific product version is requested but not installed locally,\na SystemError will be raised.\n\nAnsys products versions and their corresponding int values:\n\n241 : Ansys 24R1\n\n242 : Ansys 24R2\n\nhost: str, optional\n\nIP address at which the Geometry service will be deployed. By default,\nits value will be localhost.\n\nport\n\npython:int, optional\n\nPort at which the Geometry service will be deployed. By default, its\nvalue will be None.\n\nenable_trace\n\nbool, optional\n\nBoolean enabling the logs trace on the Geometry service console window.\nBy default its value is False.\n\ntimeout\n\npython:int, optional\n\nTimeout for starting the backend startup process. The default is 60.\n\nserver_log_level\n\npython:int, optional\n\nBackend’s log level from 0 to 3:\n\n0: Chatterbox\n1: Debug\n2: Warning\n3: Error\n\nThe default is 2 (Warning).\n\nclient_log_level\n\npython:int, optional\n\nLogging level to apply to the client. By default, INFO level is used.\nUse the logging module’s levels: DEBUG, INFO, WARNING, ERROR, CRITICAL.\n\nserver_logs_folder\n\npython:str, optional\n\nSets the backend’s logs folder path. If nothing is defined,\nthe backend will use its default path.\n\nclient_log_file\n\npython:str, optional\n\nSets the client’s log file path. If nothing is defined,\nthe client will log to the console.\n\nlog_level\n\npython:int, optional\n\nDEPRECATED. Use server_log_level instead.\n\nlogs_folder\n\npython:str, optional\n\nDEPRECATED. Use server_logs_folder instead.\n\n**kwargs\n\npython:dict, default: python:None\n\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\n\nReturns\n\nModeler\n\nInstance of the Geometry service.\n\nRaises\n\nConnectionError\n\nIf the specified endpoint is already in use, a connection\nerror will be raised.\n\nSystemError\n\nIf there is not an Ansys product 24.1 version or later installed\na SystemError will be raised.\n\nExamples\n\nStarting a geometry service with the default parameters and getting back a Modeler\nobject:\n\n>>> from ansys.geometry.core import launch_modeler_with_geometry_service\n>>> modeler = launch_modeler_with_geometry_service()\n\nStarting a geometry service, on address 10.171.22.44, port 5001, with chatty\nlogs, traces enabled and a 300 seconds timeout:\n\n>>> from ansys.geometry.core import launch_modeler_with_geometry_service\n>>> modeler = launch_modeler_with_geometry_service(host=\"10.171.22.44\",\n    port=5001,\n    enable_trace= True,\n    timeout=300,\n    server_log_level=0)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#launcher.launch_modeler_with_discovery",
        "title": "The launcher.py module > Module detail > launch_modeler_with_discovery",
        "section": "Module detail > launch_modeler_with_discovery",
        "text": "launcher.launch_modeler_with_discovery(product_version: int = None, host: str = 'localhost', port: int = None, api_version: ansys.geometry.core.connection.backend.ApiVersions = ApiVersions.LATEST, timeout: int = 150, manifest_path: str = None, hidden: bool = False, server_log_level: int = 2, client_log_level: int = logging.INFO, client_log_file: str = None, log_level: int = None, **kwargs: dict | None)\n\nStart Ansys Discovery locally using the ProductInstance class.\n\nWhen calling this method, a standalone Discovery session is started.\nBy default, if an endpoint is specified (by defining host and port parameters)\nbut the endpoint is not available, the startup will fail. Otherwise, it will try to\nlaunch its own service.\n\nParameters\n\nproduct_version: int, optional\n\nThe product version to be started. Goes from v24.1 to\nthe latest. Default is None.\nIf a specific product version is requested but not installed locally,\na SystemError will be raised.\n\nAnsys products versions and their corresponding int values:\n\n241 : Ansys 24R1\n\n242 : Ansys 24R2\n\nhost: str, optional\n\nIP address at which the Discovery session will be deployed. By default,\nits value will be localhost.\n\nport\n\npython:int, optional\n\nPort at which the Geometry service will be deployed. By default, its\nvalue will be None.\n\napi_version: ApiVersions, optional\n\nThe backend’s API version to be used at runtime. Goes from API v21 to\nthe latest. Default is ApiVersions.LATEST.\n\ntimeout\n\npython:int, optional\n\nTimeout for starting the backend startup process. The default is 150.\n\nmanifest_path\n\npython:str, optional\n\nUsed to specify a manifest file path for the ApiServerAddin. This way,\nit is possible to run an ApiServerAddin from a version an older product\nversion.\n\nhidden\n\nstarts the product hiding its UI. Default is False.\n\n\n\nserver_log_level\n\npython:int, optional\n\nBackend’s log level from 0 to 3:\n\n0: Chatterbox\n1: Debug\n2: Warning\n3: Error\n\nThe default is 2 (Warning).\n\nclient_log_level\n\npython:int, optional\n\nLogging level to apply to the client. By default, INFO level is used.\nUse the logging module’s levels: DEBUG, INFO, WARNING, ERROR, CRITICAL.\n\nclient_log_file\n\npython:str, optional\n\nSets the client’s log file path. If nothing is defined,\nthe client will log to the console.\n\nlog_level\n\npython:int, optional\n\nDEPRECATED. Use server_log_level instead.\n\n**kwargs\n\npython:dict, default: python:None\n\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\n\nReturns\n\nModeler\n\nInstance of the Geometry service.\n\nRaises\n\nConnectionError\n\nIf the specified endpoint is already in use, a connection error will be raised.\n\nSystemError:\n\nIf there is not an Ansys product 24.1 version or later installed\nor if a specific product’s version is requested but not installed locally then\na SystemError will be raised.\n\nExamples\n\nStarting an Ansys Discovery session with the default parameters and getting back a Modeler\nobject:\n\n>>> from ansys.geometry.core import launch_modeler_with_discovery\n>>> modeler = launch_modeler_with_discovery()\n\nStarting an Ansys Discovery V 24.1 session, on address 10.171.22.44, port 5001,\nwith chatty logs, using API v231 and a 300 seconds timeout:\n\n>>> from ansys.geometry.core import launch_modeler_with_discovery\n>>> modeler = launch_modeler_with_discovery(product_version = 241,\n    host=\"10.171.22.44\",\n    port=5001,\n    api_version= 231,\n    timeout=300,\n    server_log_level=0)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#launcher.launch_modeler_with_spaceclaim",
        "title": "The launcher.py module > Module detail > launch_modeler_with_spaceclaim",
        "section": "Module detail > launch_modeler_with_spaceclaim",
        "text": "launcher.launch_modeler_with_spaceclaim(product_version: int = None, host: str = 'localhost', port: int = None, api_version: ansys.geometry.core.connection.backend.ApiVersions = ApiVersions.LATEST, timeout: int = 150, manifest_path: str = None, hidden: bool = False, server_log_level: int = 2, client_log_level: int = logging.INFO, client_log_file: str = None, log_level: int = None, **kwargs: dict | None)\n\nStart Ansys SpaceClaim locally using the ProductInstance class.\n\nWhen calling this method, a standalone SpaceClaim session is started.\nBy default, if an endpoint is specified (by defining host and port parameters)\nbut the endpoint is not available, the startup will fail. Otherwise, it will try to\nlaunch its own service.\n\nParameters\n\nproduct_version: int, optional\n\nThe product version to be started. Goes from v24.1 to\nthe latest. Default is None.\nIf a specific product version is requested but not installed locally,\na SystemError will be raised.\n\nAnsys products versions and their corresponding int values:\n\n241 : Ansys 24R1\n\n242 : Ansys 24R2\n\nhost: str, optional\n\nIP address at which the SpaceClaim session will be deployed. By default,\nits value will be localhost.\n\nport\n\npython:int, optional\n\nPort at which the Geometry service will be deployed. By default, its\nvalue will be None.\n\napi_version: ApiVersions, optional\n\nThe backend’s API version to be used at runtime. Goes from API v21 to\nthe latest. Default is ApiVersions.LATEST.\n\ntimeout\n\npython:int, optional\n\nTimeout for starting the backend startup process. The default is 150.\n\nmanifest_path\n\npython:str, optional\n\nUsed to specify a manifest file path for the ApiServerAddin. This way,\nit is possible to run an ApiServerAddin from a version an older product\nversion.\n\nhidden\n\nstarts the product hiding its UI. Default is False.\n\n\n\nserver_log_level\n\npython:int, optional\n\nBackend’s log level from 0 to 3:\n\n0: Chatterbox\n1: Debug\n2: Warning\n3: Error\n\nThe default is 2 (Warning).\n\nclient_log_level\n\npython:int, optional\n\nLogging level to apply to the client. By default, INFO level is used.\nUse the logging module’s levels: DEBUG, INFO, WARNING, ERROR, CRITICAL.\n\nclient_log_file\n\npython:str, optional\n\nSets the client’s log file path. If nothing is defined,\nthe client will log to the console.\n\nlog_level\n\npython:int, optional\n\nDEPRECATED. Use server_log_level instead.\n\n**kwargs\n\npython:dict, default: python:None\n\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\n\nReturns\n\nModeler\n\nInstance of the Geometry service.\n\nRaises\n\nConnectionError\n\nIf the specified endpoint is already in use, a connection error will be raised.\n\nSystemError\n\nIf there is not an Ansys product 24.1 version or later installed\nor if a specific product’s version is requested but not installed locally then\na SystemError will be raised.\n\nExamples\n\nStarting an Ansys SpaceClaim session with the default parameters and get back a Modeler\nobject:\n\n>>> from ansys.geometry.core import launch_modeler_with_spaceclaim\n>>> modeler = launch_modeler_with_spaceclaim()\n\nStarting an Ansys SpaceClaim V 24.1 session, on address 10.171.22.44, port 5001,\nwith chatty logs, using API v231 and a 300 seconds timeout:\n\n>>> from ansys.geometry.core import launch_modeler_with_spaceclaim\n>>> modeler = launch_modeler_with_spaceclaim(product_version = 241,\n    host=\"10.171.22.44\",\n    port=5001,\n    api_version= 231,\n    timeout=300,\n    server_log_level=0)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/launcher/index",
        "href": "api/ansys/geometry/core/connection/launcher/index.html#launcher.launch_modeler_with_core_service",
        "title": "The launcher.py module > Module detail > launch_modeler_with_core_service",
        "section": "Module detail > launch_modeler_with_core_service",
        "text": "launcher.launch_modeler_with_core_service(product_version: int = None, host: str = 'localhost', port: int = None, enable_trace: bool = False, timeout: int = 60, server_log_level: int = 2, client_log_level: int = logging.INFO, server_logs_folder: str = None, client_log_file: str = None, **kwargs: dict | None) -> ansys.geometry.core.modeler.Modeler\n\nStart the Geometry Core service locally using the ProductInstance class.\n\nWhen calling this method, a standalone Geometry Core service is started.\nBy default, if an endpoint is specified (by defining host and port parameters)\nbut the endpoint is not available, the startup will fail. Otherwise, it will try to\nlaunch its own service.\n\nParameters\n\nproduct_version: int, optional\n\nThe product version to be started. Goes from v25.2 to\nthe latest. Default is None.\nIf a specific product version is requested but not installed locally,\na SystemError will be raised.\n\nAnsys products versions and their corresponding int values:\n\n252 : Ansys 25R2\n\n261 : Ansys 26R1\n\nhost: str, optional\n\nIP address at which the service will be deployed. By default,\nits value will be localhost.\n\nport\n\npython:int, optional\n\nPort at which the service will be deployed. By default, its\nvalue will be None.\n\nenable_trace\n\nbool, optional\n\nBoolean enabling the logs trace on the service console window.\nBy default its value is False.\n\ntimeout\n\npython:int, optional\n\nTimeout for starting the backend startup process. The default is 60.\n\nserver_log_level\n\npython:int, optional\n\nBackend’s log level from 0 to 3:\n\n0: Chatterbox\n1: Debug\n2: Warning\n3: Error\n\nThe default is 2 (Warning).\n\nclient_log_level\n\npython:int, optional\n\nLogging level to apply to the client. By default, INFO level is used.\nUse the logging module’s levels: DEBUG, INFO, WARNING, ERROR, CRITICAL.\n\nserver_logs_folder\n\npython:str, optional\n\nSets the backend’s logs folder path. If nothing is defined,\nthe backend will use its default path.\n\nclient_log_file\n\npython:str, optional\n\nSets the client’s log file path. If nothing is defined,\nthe client will log to the console.\n\n**kwargs\n\npython:dict, default: python:None\n\nPlaceholder to prevent errors when passing additional arguments that\nare not compatible with this method.\n\nReturns\n\nModeler\n\nInstance of the Geometry Core service.\n\nRaises\n\nConnectionError\n\nIf the specified endpoint is already in use, a connection\nerror will be raised.\n\nSystemError\n\nIf there is not an Ansys product 25.2 version or later installed\na SystemError will be raised.\n\nExamples\n\nStarting a geometry core service with the default parameters and getting back a Modeler\nobject:\n\n>>> from ansys.geometry.core import launch_modeler_with_core_service\n>>> modeler = launch_modeler_with_core_service()\n\nStarting a geometry service, on address 10.171.22.44, port 5001, with chatty\nlogs, traces enabled and a 300 seconds timeout:\n\n>>> from ansys.geometry.core import launch_modeler_with_core_service\n>>> modeler = launch_modeler_with_core_service(host=\"10.171.22.44\",\n    port=5001,\n    enable_trace= True,\n    timeout=300,\n    server_log_level=0)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas.html#splitedgeproblemareas",
        "title": "SplitEdgeProblemAreas",
        "section": "SplitEdgeProblemAreas",
        "text": "Bases: ProblemArea\nRepresents a split edge problem area with unique identifier and associated edges.\nServer-defined ID for the problem area.\nActive supporting geometry service instance for design modeling.\nList of edges associated with the design.\nSplitEdgeProblemAreas\nSplitEdgeProblemAreas\nProblemArea\npython:str\nGrpcClient\npython:list\nEdge"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas.html#ansys.geometry.core.tools.problem_areas.SplitEdgeProblemAreas",
        "title": "SplitEdgeProblemAreas > SplitEdgeProblemAreas > SplitEdgeProblemAreas",
        "section": "SplitEdgeProblemAreas > SplitEdgeProblemAreas",
        "text": "class ansys.geometry.core.tools.problem_areas.SplitEdgeProblemAreas(id: str, grpc_client: ansys.geometry.core.connection.GrpcClient, edges: list[ansys.geometry.core.designer.edge.Edge])\n\nBases: ProblemArea\n\nRepresents a split edge problem area with unique identifier and associated edges.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the problem area.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting geometry service instance for design modeling.\n\nedges\n\npython:list[Edge]\n\nList of edges associated with the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas.html#overview",
        "title": "SplitEdgeProblemAreas > Overview",
        "section": "Overview",
        "text": "fix\nFix the problem area.\nedges\nThe list of edges connected to this problem area.\nOverview\nfix\nedges"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas.html#import-detail",
        "title": "SplitEdgeProblemAreas > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas.html#property-detail",
        "title": "SplitEdgeProblemAreas > Property detail",
        "section": "Property detail",
        "text": "The list of edges connected to this problem area.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas.html#SplitEdgeProblemAreas.edges",
        "title": "SplitEdgeProblemAreas > Property detail > edges",
        "section": "Property detail > edges",
        "text": "property SplitEdgeProblemAreas.edges: list[ansys.geometry.core.designer.edge.Edge]\n\nThe list of edges connected to this problem area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas.html#method-detail",
        "title": "SplitEdgeProblemAreas > Method detail",
        "section": "Method detail",
        "text": "Fix the problem area.\nMessage containing created and/or modified bodies.\nMethod detail\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/SplitEdgeProblemAreas.html#SplitEdgeProblemAreas.fix",
        "title": "SplitEdgeProblemAreas > Method detail > fix",
        "section": "Method detail > fix",
        "text": "SplitEdgeProblemAreas.fix() -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFix the problem area.\n\nReturns\n\nmessage: RepairToolMessage\n\nMessage containing created and/or modified bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#edge",
        "title": "Edge",
        "section": "Edge",
        "text": "Represents a single edge of a body within the design assembly.\nThis class synchronizes to a design within a supporting Geometry service instance.\nServer-defined ID for the body.\nType of curve that the edge forms.\nParent body that the edge constructs.\nActive supporting Geometry service instance for design modeling.\nDirection of the edge.\nEdge\nEdge\npython:str\nCurveType\nBody\nGrpcClient"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#ansys.geometry.core.designer.edge.Edge",
        "title": "Edge > Edge > Edge",
        "section": "Edge > Edge",
        "text": "class ansys.geometry.core.designer.edge.Edge(id: str, curve_type: CurveType, body: ansys.geometry.core.designer.body.Body, grpc_client: ansys.geometry.core.connection.client.GrpcClient, is_reversed: bool = False)\n\nRepresents a single edge of a body within the design assembly.\n\nThis class synchronizes to a design within a supporting Geometry service instance.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the body.\n\ncurve_type\n\nCurveType\n\nType of curve that the edge forms.\n\nbody\n\nBody\n\nParent body that the edge constructs.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting Geometry service instance for design modeling.\n\nis_reversed\n\nbool\n\nDirection of the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#overview",
        "title": "Edge > Overview",
        "section": "Overview",
        "text": "id\nID of the edge.\nbody\nBody of the edge.\nis_reversed\nFlag indicating if the edge is reversed.\nshape\nUnderlying trimmed curve of the edge.\nlength\nCalculated length of the edge.\ncurve_type\nCurve type of the edge.\nfaces\nFaces that contain the edge.\nstart\nStart point of the edge.\nend\nEnd point of the edge.\nOverview\nid\nbody\nis_reversed\nshape\nlength\ncurve_type\nfaces\nstart\nend"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#import-detail",
        "title": "Edge > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#property-detail",
        "title": "Edge > Property detail",
        "section": "Property detail",
        "text": "ID of the edge.\nBody of the edge.\nFlag indicating if the edge is reversed.\nUnderlying trimmed curve of the edge.\nIf the edge is reversed, its shape is the ReversedTrimmedCurve type, which swaps the\nstart and end points of the curve and handles parameters to allow evaluation as if the\ncurve is not reversed.\nCalculated length of the edge.\nCurve type of the edge.\nFaces that contain the edge.\nStart point of the edge.\nEnd point of the edge.\nProperty detail\nReversedTrimmedCurve"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#Edge.id",
        "title": "Edge > Property detail > id",
        "section": "Property detail > id",
        "text": "property Edge.id: str\n\nID of the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#Edge.body",
        "title": "Edge > Property detail > body",
        "section": "Property detail > body",
        "text": "property Edge.body: ansys.geometry.core.designer.body.Body\n\nBody of the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#Edge.is_reversed",
        "title": "Edge > Property detail > is_reversed",
        "section": "Property detail > is_reversed",
        "text": "property Edge.is_reversed: bool\n\nFlag indicating if the edge is reversed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#Edge.shape",
        "title": "Edge > Property detail > shape",
        "section": "Property detail > shape",
        "text": "property Edge.shape: ansys.geometry.core.shapes.curves.trimmed_curve.TrimmedCurve\n\nUnderlying trimmed curve of the edge.\n\nIf the edge is reversed, its shape is the ReversedTrimmedCurve type, which swaps the\nstart and end points of the curve and handles parameters to allow evaluation as if the\ncurve is not reversed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#Edge.length",
        "title": "Edge > Property detail > length",
        "section": "Property detail > length",
        "text": "property Edge.length: pint.Quantity\n\nCalculated length of the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#Edge.curve_type",
        "title": "Edge > Property detail > curve_type",
        "section": "Property detail > curve_type",
        "text": "property Edge.curve_type: CurveType\n\nCurve type of the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#Edge.faces",
        "title": "Edge > Property detail > faces",
        "section": "Property detail > faces",
        "text": "property Edge.faces: list[ansys.geometry.core.designer.face.Face]\n\nFaces that contain the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#Edge.start",
        "title": "Edge > Property detail > start",
        "section": "Property detail > start",
        "text": "property Edge.start: ansys.geometry.core.math.point.Point3D\n\nStart point of the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/edge/Edge",
        "href": "api/ansys/geometry/core/designer/edge/Edge.html#Edge.end",
        "title": "Edge > Property detail > end",
        "section": "Property detail > end",
        "text": "property Edge.end: ansys.geometry.core.math.point.Point3D\n\nEnd point of the edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/03_modeling/plate_with_hole",
        "href": "examples/03_modeling/plate_with_hole.html#modeling-rectangular-plate-with-multiple-bodies",
        "title": "Examples > Modeling: Rectangular plate with multiple bodies",
        "section": "Modeling: Rectangular plate with multiple bodies",
        "text": "You can create multiple bodies from a single sketch by extruding the same sketch in different planes.\nThe sketch is designed as an effective functional-style API with all operations receiving 2D configurations. For more information, see the Sketch user guide.\nIn this example, a box is located in the center of the plate, with the default origin of a sketch plane (origin at (0, 0, 0)). Four holes of equal radius are sketched at the corners of the plate. The plate is then extruded, leading to the generation of the requested body. The projection is at the center of the face. The default projection depth is through the entire part.\nModeling: Rectangular plate with multiple bodies\n(0, 0, 0)"
    },
    {
        "objectID": "examples/03_modeling/plate_with_hole",
        "href": "examples/03_modeling/plate_with_hole.html#perform-required-imports",
        "title": "Examples > Modeling: Rectangular plate with multiple bodies > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/03_modeling/plate_with_hole",
        "href": "examples/03_modeling/plate_with_hole.html#define-sketch-profile",
        "title": "Examples > Modeling: Rectangular plate with multiple bodies > Define sketch profile",
        "section": "Define sketch profile",
        "text": "The sketch profile for the proposed design requires four segments that constitute the outer limits of the design, a box on the center, and a circle at its four corners.\nYou can use a single sketch instance for multiple design operations, including extruding a body, projecting a profile, and imprinting curves.\nDefine the sketch profle for the rectangular plate with multiple bodies.\nDefine sketch profile\nsketch"
    },
    {
        "objectID": "examples/03_modeling/plate_with_hole",
        "href": "examples/03_modeling/plate_with_hole.html#extrude-sketch-to-create-design",
        "title": "Examples > Modeling: Rectangular plate with multiple bodies > Extrude sketch to create design",
        "section": "Extrude sketch to create design",
        "text": "Establish a server connection and use the single sketch profile to extrude the base component at the Z axis. Create a named selection from the resulting list of bodies. In only three server calls, the design extrudes the four segments with the desired thickness.\nExtrude sketch to create design"
    },
    {
        "objectID": "examples/03_modeling/plate_with_hole",
        "href": "examples/03_modeling/plate_with_hole.html#add-component-with-a-planar-surface",
        "title": "Examples > Modeling: Rectangular plate with multiple bodies > Add component with a planar surface",
        "section": "Add component with a planar surface",
        "text": "After creating a plate as a base component, you might want to add a component with a planar surface to it.\nCreate a sketch instance and then create a surface in the design with this sketch. For the sketch, it creates an ellipse, keeping the origin of the plane as its center.\nAdd component with a planar surface\nsketch"
    },
    {
        "objectID": "examples/03_modeling/plate_with_hole",
        "href": "examples/03_modeling/plate_with_hole.html#extrude-from-face-to-create-body",
        "title": "Examples > Modeling: Rectangular plate with multiple bodies > Extrude from face to create body",
        "section": "Extrude from face to create body",
        "text": "Extrude a face profile by a given distance to create a solid body. There are no modifications against the body containing the source face.\nExtrude from face to create body"
    },
    {
        "objectID": "examples/03_modeling/plate_with_hole",
        "href": "examples/03_modeling/plate_with_hole.html#translate-body-within-plane",
        "title": "Examples > Modeling: Rectangular plate with multiple bodies > Translate body within plane",
        "section": "Translate body within plane",
        "text": "Use the :func:translate() <ansys.geometry.core.designer.body.Body.translate> method to move the body in a specified direction by a given distance. You can also move a sketch around the global coordinate system. For more information, see the Dynamic Sketch Plane example.\nTranslate body within plane\ntranslate() <ansys.geometry.core.designer.body.Body.translate>"
    },
    {
        "objectID": "examples/03_modeling/plate_with_hole",
        "href": "examples/03_modeling/plate_with_hole.html#close-the-modeler",
        "title": "Examples > Modeling: Rectangular plate with multiple bodies > Close the modeler",
        "section": "Close the modeler",
        "text": "Close the modeler to free up resources and release the connection.\nClose the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/index",
        "href": "api/ansys/geometry/core/designer/face/index.html#the-facepy-module",
        "title": "The face.py module",
        "section": "The face.py module",
        "text": "The face.py module\nface.py"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/index",
        "href": "api/ansys/geometry/core/designer/face/index.html#summary",
        "title": "The face.py module > Summary",
        "section": "Summary",
        "text": "FaceLoop\nProvides an internal class holding the face loops defined.\nFace\nRepresents a single face of a body within the design assembly.\nSurfaceType\nProvides values for the surface types supported.\nFaceLoopType\nProvides values for the face loop types supported.\nSummary\nFaceLoop\nFace\nSurfaceType\nFaceLoopType"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/index",
        "href": "api/ansys/geometry/core/designer/face/index.html#description",
        "title": "The face.py module > Description",
        "section": "Description",
        "text": "Module for managing a face.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/index",
        "href": "api/ansys/geometry/core/tools/measurement_tools/index.html#the-measurement_toolspy-module",
        "title": "The measurement_tools.py module",
        "section": "The measurement_tools.py module",
        "text": "The measurement_tools.py module\nmeasurement_tools.py"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/index",
        "href": "api/ansys/geometry/core/tools/measurement_tools/index.html#summary",
        "title": "The measurement_tools.py module > Summary",
        "section": "Summary",
        "text": "Gap\nRepresents a gap between two bodies.\nMeasurementTools\nMeasurement tools for PyAnsys Geometry.\nSummary\nGap\nMeasurementTools"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/measurement_tools/index",
        "href": "api/ansys/geometry/core/tools/measurement_tools/index.html#description",
        "title": "The measurement_tools.py module > Description",
        "section": "Description",
        "text": "Provides tools for measurement.\nDescription"
    },
    {
        "objectID": "examples/03_modeling/surface_bodies",
        "href": "examples/03_modeling/surface_bodies.html#modeling-surface-bodies-and-trimmed-surfaces",
        "title": "Examples > Modeling: Surface bodies and trimmed surfaces",
        "section": "Modeling: Surface bodies and trimmed surfaces",
        "text": "This example shows how to trim different surfaces, and how to use those surfaces to create surface bodies.\nModeling: Surface bodies and trimmed surfaces"
    },
    {
        "objectID": "examples/03_modeling/surface_bodies",
        "href": "examples/03_modeling/surface_bodies.html#create-a-surface",
        "title": "Examples > Modeling: Surface bodies and trimmed surfaces > Create a surface",
        "section": "Create a surface",
        "text": "Create a sphere surface. This can be done without launching the modeler.\nNow get information on how the surface is defined and parameterized.\nCreate a surface"
    },
    {
        "objectID": "examples/03_modeling/surface_bodies",
        "href": "examples/03_modeling/surface_bodies.html#trim-the-surface",
        "title": "Examples > Modeling: Surface bodies and trimmed surfaces > Trim the surface",
        "section": "Trim the surface",
        "text": "For a sphere, its parametization is (u: [0, 2*pi], v:[-pi/2, pi/2]), where u corresponds to longitude and v corresponds to latitude. You can trim a surface by providing new parameters.\nFrom a TrimmedSurface, you can always refer back to the underlying Surface if needed.\nTrim the surface\nu: [0, 2*pi]\nv:[-pi/2, pi/2]\nTrimmedSurface\nSurface"
    },
    {
        "objectID": "examples/03_modeling/surface_bodies",
        "href": "examples/03_modeling/surface_bodies.html#create-a-surface-body",
        "title": "Examples > Modeling: Surface bodies and trimmed surfaces > Create a surface body",
        "section": "Create a surface body",
        "text": "Now create a surface body by launching the modeler session and providing the trimmed surface. Then plot the body to see how you created a quarter of a sphere as a surface body.\nIf the sphere was left untrimmed, it would create a solid body since the surface is fully closed. In this case, since the surface was open, it created a surface body.\nThis same process can be used with other surfaces including:\nCone\nCylinder\nPlane\nTorus\nEach surface has its own unique parameterization, which must be understood before trying to trim it.\nCreate a surface body\nCone\nCylinder\nPlane\nTorus"
    },
    {
        "objectID": "examples/03_modeling/surface_bodies",
        "href": "examples/03_modeling/surface_bodies.html#close-session",
        "title": "Examples > Modeling: Surface bodies and trimmed surfaces > Close session",
        "section": "Close session",
        "text": "When you finish interacting with your modeling service, you should close the active server session. This frees resources wherever the service is running.\nClose the server session.\nClose session"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#apiversions",
        "title": "ApiVersions",
        "section": "ApiVersions",
        "text": "Bases: enum.Enum\nProvides an enum for all the compatibles API versions.\nApiVersions\nApiVersions\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#ansys.geometry.core.connection.backend.ApiVersions",
        "title": "ApiVersions > ApiVersions > ApiVersions",
        "section": "ApiVersions > ApiVersions",
        "text": "class ansys.geometry.core.connection.backend.ApiVersions(*args, **kwds)\n\nBases: enum.Enum\n\nProvides an enum for all the compatibles API versions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#overview",
        "title": "ApiVersions > Overview",
        "section": "Overview",
        "text": "V_21\nV_22\nV_231\nV_232\nV_241\nV_242\nV_251\nparse_input\nConvert an input to an ApiVersions enum.\nOverview\nV_21\nV_22\nV_231\nV_232\nV_241\nV_242\nV_251\nparse_input"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#import-detail",
        "title": "ApiVersions > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#attribute-detail",
        "title": "ApiVersions > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#ApiVersions.V_21",
        "title": "ApiVersions > Attribute detail > V_21",
        "section": "Attribute detail > V_21",
        "text": "ApiVersions.V_21 = 21\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#ApiVersions.V_22",
        "title": "ApiVersions > Attribute detail > V_22",
        "section": "Attribute detail > V_22",
        "text": "ApiVersions.V_22 = 22\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#ApiVersions.V_231",
        "title": "ApiVersions > Attribute detail > V_231",
        "section": "Attribute detail > V_231",
        "text": "ApiVersions.V_231 = 231\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#ApiVersions.V_232",
        "title": "ApiVersions > Attribute detail > V_232",
        "section": "Attribute detail > V_232",
        "text": "ApiVersions.V_232 = 232\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#ApiVersions.V_241",
        "title": "ApiVersions > Attribute detail > V_241",
        "section": "Attribute detail > V_241",
        "text": "ApiVersions.V_241 = 241\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#ApiVersions.V_242",
        "title": "ApiVersions > Attribute detail > V_242",
        "section": "Attribute detail > V_242",
        "text": "ApiVersions.V_242 = 242\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#ApiVersions.V_251",
        "title": "ApiVersions > Attribute detail > V_251",
        "section": "Attribute detail > V_251",
        "text": "ApiVersions.V_251 = 251\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#method-detail",
        "title": "ApiVersions > Method detail",
        "section": "Method detail",
        "text": "Convert an input to an ApiVersions enum.\nThe version to convert to an ApiVersions enum.\nThe version as an ApiVersions enum.\nMethod detail\npython:int\npython:str\nApiVersions\nApiVersions"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/backend/ApiVersions",
        "href": "api/ansys/geometry/core/connection/backend/ApiVersions.html#ApiVersions.parse_input",
        "title": "ApiVersions > Method detail > parse_input",
        "section": "Method detail > parse_input",
        "text": "static ApiVersions.parse_input(version: int | str | ApiVersions) -> ApiVersions\n\nConvert an input to an ApiVersions enum.\n\nParameters\n\nversion\n\npython:int | python:str | ApiVersions\n\nThe version to convert to an ApiVersions enum.\n\nReturns\n\nApiVersions\n\nThe version as an ApiVersions enum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/index",
        "href": "api/ansys/geometry/core/tools/repair_tools/index.html#the-repair_toolspy-module",
        "title": "The repair_tools.py module",
        "section": "The repair_tools.py module",
        "text": "The repair_tools.py module\nrepair_tools.py"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/index",
        "href": "api/ansys/geometry/core/tools/repair_tools/index.html#summary",
        "title": "The repair_tools.py module > Summary",
        "section": "Summary",
        "text": "RepairTools\nRepair tools for PyAnsys Geometry.\nSummary\nRepairTools"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tools/index",
        "href": "api/ansys/geometry/core/tools/repair_tools/index.html#description",
        "title": "The repair_tools.py module > Description",
        "section": "Description",
        "text": "Provides tools for repairing bodies.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#designfileformat",
        "title": "DesignFileFormat",
        "section": "DesignFileFormat",
        "text": "Bases: enum.Enum\nProvides supported file formats that can be downloaded for designs.\nDesignFileFormat\nDesignFileFormat\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#ansys.geometry.core.designer.design.DesignFileFormat",
        "title": "DesignFileFormat > DesignFileFormat > DesignFileFormat",
        "section": "DesignFileFormat > DesignFileFormat",
        "text": "class ansys.geometry.core.designer.design.DesignFileFormat(*args, **kwds)\n\nBases: enum.Enum\n\nProvides supported file formats that can be downloaded for designs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#overview",
        "title": "DesignFileFormat > Overview",
        "section": "Overview",
        "text": "SCDOCX\nPARASOLID_TEXT\nPARASOLID_BIN\nFMD\nSTEP\nIGES\nPMDB\nSTRIDE\nDISCO\nINVALID\nOverview\nSCDOCX\nPARASOLID_TEXT\nPARASOLID_BIN\nFMD\nSTEP\nIGES\nPMDB\nSTRIDE\nDISCO\nINVALID"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#import-detail",
        "title": "DesignFileFormat > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#attribute-detail",
        "title": "DesignFileFormat > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#DesignFileFormat.SCDOCX",
        "title": "DesignFileFormat > Attribute detail > SCDOCX",
        "section": "Attribute detail > SCDOCX",
        "text": "DesignFileFormat.SCDOCX\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#DesignFileFormat.PARASOLID_TEXT",
        "title": "DesignFileFormat > Attribute detail > PARASOLID_TEXT",
        "section": "Attribute detail > PARASOLID_TEXT",
        "text": "DesignFileFormat.PARASOLID_TEXT\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#DesignFileFormat.PARASOLID_BIN",
        "title": "DesignFileFormat > Attribute detail > PARASOLID_BIN",
        "section": "Attribute detail > PARASOLID_BIN",
        "text": "DesignFileFormat.PARASOLID_BIN\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#DesignFileFormat.FMD",
        "title": "DesignFileFormat > Attribute detail > FMD",
        "section": "Attribute detail > FMD",
        "text": "DesignFileFormat.FMD\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#DesignFileFormat.STEP",
        "title": "DesignFileFormat > Attribute detail > STEP",
        "section": "Attribute detail > STEP",
        "text": "DesignFileFormat.STEP\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#DesignFileFormat.IGES",
        "title": "DesignFileFormat > Attribute detail > IGES",
        "section": "Attribute detail > IGES",
        "text": "DesignFileFormat.IGES\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#DesignFileFormat.PMDB",
        "title": "DesignFileFormat > Attribute detail > PMDB",
        "section": "Attribute detail > PMDB",
        "text": "DesignFileFormat.PMDB\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#DesignFileFormat.STRIDE",
        "title": "DesignFileFormat > Attribute detail > STRIDE",
        "section": "Attribute detail > STRIDE",
        "text": "DesignFileFormat.STRIDE\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#DesignFileFormat.DISCO",
        "title": "DesignFileFormat > Attribute detail > DISCO",
        "section": "Attribute detail > DISCO",
        "text": "DesignFileFormat.DISCO\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/DesignFileFormat",
        "href": "api/ansys/geometry/core/designer/design/DesignFileFormat.html#DesignFileFormat.INVALID",
        "title": "DesignFileFormat > Attribute detail > INVALID",
        "section": "Attribute detail > INVALID",
        "text": "DesignFileFormat.INVALID = ('INVALID', None)\n\n"
    },
    {
        "objectID": "examples/03_modeling/export_design",
        "href": "examples/03_modeling/export_design.html#modeling-exporting-designs",
        "title": "Examples > Modeling: Exporting designs",
        "section": "Modeling: Exporting designs",
        "text": "After creating a design, you typically want to bring it into a CAD tool for further development. This notebook demonstrates how to export a design to the various supported CAD formats.\nModeling: Exporting designs"
    },
    {
        "objectID": "examples/03_modeling/export_design",
        "href": "examples/03_modeling/export_design.html#create-a-design",
        "title": "Examples > Modeling: Exporting designs > Create a design",
        "section": "Create a design",
        "text": "The code creates a simple design for demonstration purposes. The design consists of a set of rectangular pads with a circular hole in the center.\nCreate a design"
    },
    {
        "objectID": "examples/03_modeling/export_design",
        "href": "examples/03_modeling/export_design.html#export-the-design",
        "title": "Examples > Modeling: Exporting designs > Export the design",
        "section": "Export the design",
        "text": "You can export the design to various CAD formats. For the formats supported see the DesignFileFormat class, which is part of the the design module documentation.\nNonetheless, there are a set of convenience methods that you can use to export the design to the supported formats. The following code snippets demonstrate how to do it. You can decide whether to export the design to a file in a certain directory or in the current working directory.\nExport the design\ndesign"
    },
    {
        "objectID": "examples/03_modeling/export_design",
        "href": "examples/03_modeling/export_design.html#export-to-a-file-in-the-current-working-directory",
        "title": "Examples > Modeling: Exporting designs > Export to a file in the current working directory",
        "section": "Export to a file in the current working directory",
        "text": "Export to a file in the current working directory"
    },
    {
        "objectID": "examples/03_modeling/export_design",
        "href": "examples/03_modeling/export_design.html#export-to-a-file-in-a-certain-directory",
        "title": "Examples > Modeling: Exporting designs > Export to a file in a certain directory",
        "section": "Export to a file in a certain directory",
        "text": "Export to a file in a certain directory"
    },
    {
        "objectID": "examples/03_modeling/export_design",
        "href": "examples/03_modeling/export_design.html#export-to-scdocx-format",
        "title": "Examples > Modeling: Exporting designs > Export to SCDOCX format",
        "section": "Export to SCDOCX format",
        "text": "Export to SCDOCX format"
    },
    {
        "objectID": "examples/03_modeling/export_design",
        "href": "examples/03_modeling/export_design.html#export-to-parasolid-text-format",
        "title": "Examples > Modeling: Exporting designs > Export to Parasolid text format",
        "section": "Export to Parasolid text format",
        "text": "Export to Parasolid text format"
    },
    {
        "objectID": "examples/03_modeling/export_design",
        "href": "examples/03_modeling/export_design.html#export-to-parasolid-binary-format",
        "title": "Examples > Modeling: Exporting designs > Export to Parasolid binary format",
        "section": "Export to Parasolid binary format",
        "text": "Export to Parasolid binary format"
    },
    {
        "objectID": "examples/03_modeling/export_design",
        "href": "examples/03_modeling/export_design.html#export-to-step-format",
        "title": "Examples > Modeling: Exporting designs > Export to STEP format",
        "section": "Export to STEP format",
        "text": "Export to STEP format"
    },
    {
        "objectID": "examples/03_modeling/export_design",
        "href": "examples/03_modeling/export_design.html#export-to-iges-format",
        "title": "Examples > Modeling: Exporting designs > Export to IGES format",
        "section": "Export to IGES format",
        "text": "Export to IGES format"
    },
    {
        "objectID": "examples/03_modeling/export_design",
        "href": "examples/03_modeling/export_design.html#export-to-fmd-format",
        "title": "Examples > Modeling: Exporting designs > Export to FMD format",
        "section": "Export to FMD format",
        "text": "Export to FMD format"
    },
    {
        "objectID": "examples/03_modeling/export_design",
        "href": "examples/03_modeling/export_design.html#export-to-pmdb-format",
        "title": "Examples > Modeling: Exporting designs > Export to PMDB format",
        "section": "Export to PMDB format",
        "text": "Export to PMDB format"
    },
    {
        "objectID": "examples/03_modeling/export_design",
        "href": "examples/03_modeling/export_design.html#close-the-modeler",
        "title": "Examples > Modeling: Exporting designs > Close the modeler",
        "section": "Close the modeler",
        "text": "Close the modeler after exporting the design.\nClose the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/index",
        "href": "api/ansys/geometry/core/connection/docker_instance/index.html#the-docker_instancepy-module",
        "title": "The docker_instance.py module",
        "section": "The docker_instance.py module",
        "text": "The docker_instance.py module\ndocker_instance.py"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/index",
        "href": "api/ansys/geometry/core/connection/docker_instance/index.html#summary",
        "title": "The docker_instance.py module > Summary",
        "section": "Summary",
        "text": "LocalDockerInstance\nInstantiates a Geometry service as a local Docker container.\nGeometryContainers\nProvides an enum holding the available Geometry services.\nget_geometry_container_type\nProvide back the GeometryContainers value.\nSummary\nLocalDockerInstance\nGeometryContainers\nget_geometry_container_type\nGeometryContainers"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/index",
        "href": "api/ansys/geometry/core/connection/docker_instance/index.html#description",
        "title": "The docker_instance.py module > Description",
        "section": "Description",
        "text": "Module for connecting to a local Geometry Service Docker container.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/index",
        "href": "api/ansys/geometry/core/connection/docker_instance/index.html#module-detail",
        "title": "The docker_instance.py module > Module detail",
        "section": "Module detail",
        "text": "Provide back the GeometryContainers value.\nThe LocalDockerInstance object.\nThe GeometryContainer value corresponding to the previous image or None\nif not match.\nThis method returns the first hit on the available tags.\nModule detail\nGeometryContainers\nLocalDockerInstance\nGeometryContainers\npython:None"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/docker_instance/index",
        "href": "api/ansys/geometry/core/connection/docker_instance/index.html#docker_instance.get_geometry_container_type",
        "title": "The docker_instance.py module > Module detail > get_geometry_container_type",
        "section": "Module detail > get_geometry_container_type",
        "text": "docker_instance.get_geometry_container_type(instance: LocalDockerInstance) -> GeometryContainers | None\n\nProvide back the GeometryContainers value.\n\nParameters\n\ninstance\n\nLocalDockerInstance\n\nThe LocalDockerInstance object.\n\nReturns\n\nGeometryContainers or python:None\n\nThe GeometryContainer value corresponding to the previous image or None\nif not match.\n\nNotes\n\nThis method returns the first hit on the available tags.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Angle",
        "href": "api/ansys/geometry/core/misc/measurements/Angle.html#angle",
        "title": "Angle",
        "section": "Angle",
        "text": "Bases: Measurement\nProvides the Measurement subclass for holding an angle.\nValue of the angle.\nUnits for the distance.\nAngle\nAngle\nMeasurement\nMeasurement\nReal\nQuantity\nUnit\nDEFAULT_UNITS.ANGLE"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Angle",
        "href": "api/ansys/geometry/core/misc/measurements/Angle.html#ansys.geometry.core.misc.measurements.Angle",
        "title": "Angle > Angle > Angle",
        "section": "Angle > Angle",
        "text": "class ansys.geometry.core.misc.measurements.Angle(value: ansys.geometry.core.typing.Real | pint.Quantity, unit: pint.Unit | None = None)\n\nBases: Measurement\n\nProvides the Measurement subclass for holding an angle.\n\nParameters\n\nvalue\n\nReal | Quantity\n\nValue of the angle.\n\nunit\n\nUnit, default: DEFAULT_UNITS.ANGLE\n\nUnits for the distance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/measurements/Angle",
        "href": "api/ansys/geometry/core/misc/measurements/Angle.html#import-detail",
        "title": "Angle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#boundingbox2d",
        "title": "BoundingBox2D",
        "section": "BoundingBox2D",
        "text": "Maintains the X and Y dimensions.\nMinimum value for the x-dimensional bounds.\nMaximum value for the x-dimensional bounds.\nMinimum value for the y-dimensional bounds.\nMaximum value for the y-dimensional bounds.\nBoundingBox2D\nBoundingBox2D\nReal\nReal\nReal\nReal"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#ansys.geometry.core.math.bbox.BoundingBox2D",
        "title": "BoundingBox2D > BoundingBox2D > BoundingBox2D",
        "section": "BoundingBox2D > BoundingBox2D",
        "text": "class ansys.geometry.core.math.bbox.BoundingBox2D(x_min: ansys.geometry.core.typing.Real = sys.float_info.max, x_max: ansys.geometry.core.typing.Real = sys.float_info.min, y_min: ansys.geometry.core.typing.Real = sys.float_info.max, y_max: ansys.geometry.core.typing.Real = sys.float_info.min)\n\nMaintains the X and Y dimensions.\n\nParameters\n\nx_min\n\nReal\n\nMinimum value for the x-dimensional bounds.\n\nx_max\n\nReal\n\nMaximum value for the x-dimensional bounds.\n\ny_min\n\nReal\n\nMinimum value for the y-dimensional bounds.\n\ny_max\n\nReal\n\nMaximum value for the y-dimensional bounds.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#overview",
        "title": "BoundingBox2D > Overview",
        "section": "Overview",
        "text": "add_point\nExtend the ranges of the bounding box to include a point.\nadd_point_components\nExtend the ranges of the bounding box to include the X and Y values.\nadd_points\nExtend the ranges of the bounding box to include given points.\ncontains_point\nEvaluate whether a point lies within the X and Y range bounds.\ncontains_point_components\nCheck if point components are within the X and Y range bounds.\nx_min\nMinimum value of X-dimensional bounds.\nx_max\nMaximum value of the X-dimensional bounds.\ny_min\nMinimum value of Y-dimensional bounds.\ny_max\nMaximum value of Y-dimensional bounds.\nintersect_bboxes\nFind the intersection of 2 BoundingBox2D objects.\n__eq__\nEquals operator for the BoundingBox2D class.\n__ne__\nNot equals operator for the BoundingBox2D class.\nOverview\nadd_point\nadd_point_components\nadd_points\ncontains_point\ncontains_point_components\nx_min\nx_max\ny_min\ny_max\nintersect_bboxes\n__eq__\nBoundingBox2D\n__ne__\nBoundingBox2D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#import-detail",
        "title": "BoundingBox2D > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#property-detail",
        "title": "BoundingBox2D > Property detail",
        "section": "Property detail",
        "text": "Minimum value of X-dimensional bounds.\nMinimum value of the X-dimensional bounds.\nMaximum value of the X-dimensional bounds.\nMaximum value of the X-dimensional bounds.\nMinimum value of Y-dimensional bounds.\nMinimum value of Y-dimensional bounds.\nMaximum value of Y-dimensional bounds.\nMaximum value of Y-dimensional bounds.\nProperty detail\nReal\nReal\nReal\nReal"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#BoundingBox2D.x_min",
        "title": "BoundingBox2D > Property detail > x_min",
        "section": "Property detail > x_min",
        "text": "property BoundingBox2D.x_min: ansys.geometry.core.typing.Real\n\nMinimum value of X-dimensional bounds.\n\nReturns\n\nReal\n\nMinimum value of the X-dimensional bounds.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#BoundingBox2D.x_max",
        "title": "BoundingBox2D > Property detail > x_max",
        "section": "Property detail > x_max",
        "text": "property BoundingBox2D.x_max: ansys.geometry.core.typing.Real\n\nMaximum value of the X-dimensional bounds.\n\nReturns\n\nReal\n\nMaximum value of the X-dimensional bounds.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#BoundingBox2D.y_min",
        "title": "BoundingBox2D > Property detail > y_min",
        "section": "Property detail > y_min",
        "text": "property BoundingBox2D.y_min: ansys.geometry.core.typing.Real\n\nMinimum value of Y-dimensional bounds.\n\nReturns\n\nReal\n\nMinimum value of Y-dimensional bounds.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#BoundingBox2D.y_max",
        "title": "BoundingBox2D > Property detail > y_max",
        "section": "Property detail > y_max",
        "text": "property BoundingBox2D.y_max: ansys.geometry.core.typing.Real\n\nMaximum value of Y-dimensional bounds.\n\nReturns\n\nReal\n\nMaximum value of Y-dimensional bounds.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#method-detail",
        "title": "BoundingBox2D > Method detail",
        "section": "Method detail",
        "text": "Extend the ranges of the bounding box to include a point.\nPoint to include within the bounds.\nThis method is only applicable if the point components are outside\nthe current bounds.\nExtend the ranges of the bounding box to include the X and Y values.\nPoint X component to include within the bounds.\nPoint Y component to include within the bounds.\nThis method is only applicable if the point components are outside\nthe current bounds.\nExtend the ranges of the bounding box to include given points.\nList of points to include within the bounds.\nEvaluate whether a point lies within the X and Y range bounds.\nPoint to compare against the bounds.\nTrue if the point is contained in the bounding box. Otherwise, False.\nCheck if point components are within the X and Y range bounds.\nPoint X component to compare against the bounds.\nPoint Y component to compare against the bounds.\nTrue if the components are contained in the bounding box. Otherwise, False.\nEquals operator for the BoundingBox2D class.\nNot equals operator for the BoundingBox2D class.\nFind the intersection of 2 BoundingBox2D objects.\nThe box to consider the intersection of with respect to box_2.\nThe box to consider the intersection of with respect to box_1.\nThe box representing the intersection of the two passed in boxes.\nMethod detail\nPoint2D\nReal\nReal\npython:list\nPoint2D\nPoint2D\nTrue\nFalse\nReal\nReal\nTrue\nFalse\nBoundingBox2D\nBoundingBox2D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#BoundingBox2D.add_point",
        "title": "BoundingBox2D > Method detail > add_point",
        "section": "Method detail > add_point",
        "text": "BoundingBox2D.add_point(point: ansys.geometry.core.math.point.Point2D) -> None\n\nExtend the ranges of the bounding box to include a point.\n\nParameters\n\npoint\n\nPoint2D\n\nPoint to include within the bounds.\n\nNotes\n\nThis method is only applicable if the point components are outside\nthe current bounds.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#BoundingBox2D.add_point_components",
        "title": "BoundingBox2D > Method detail > add_point_components",
        "section": "Method detail > add_point_components",
        "text": "BoundingBox2D.add_point_components(x: ansys.geometry.core.typing.Real, y: ansys.geometry.core.typing.Real) -> None\n\nExtend the ranges of the bounding box to include the X and Y values.\n\nParameters\n\nx\n\nReal\n\nPoint X component to include within the bounds.\n\ny\n\nReal\n\nPoint Y component to include within the bounds.\n\nNotes\n\nThis method is only applicable if the point components are outside\nthe current bounds.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#BoundingBox2D.add_points",
        "title": "BoundingBox2D > Method detail > add_points",
        "section": "Method detail > add_points",
        "text": "BoundingBox2D.add_points(points: list[ansys.geometry.core.math.point.Point2D]) -> None\n\nExtend the ranges of the bounding box to include given points.\n\nParameters\n\npoints\n\npython:list[Point2D]\n\nList of points to include within the bounds.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#BoundingBox2D.contains_point",
        "title": "BoundingBox2D > Method detail > contains_point",
        "section": "Method detail > contains_point",
        "text": "BoundingBox2D.contains_point(point: ansys.geometry.core.math.point.Point2D) -> bool\n\nEvaluate whether a point lies within the X and Y range bounds.\n\nParameters\n\npoint\n\nPoint2D\n\nPoint to compare against the bounds.\n\nReturns\n\nbool\n\nTrue if the point is contained in the bounding box. Otherwise, False.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#BoundingBox2D.contains_point_components",
        "title": "BoundingBox2D > Method detail > contains_point_components",
        "section": "Method detail > contains_point_components",
        "text": "BoundingBox2D.contains_point_components(x: ansys.geometry.core.typing.Real, y: ansys.geometry.core.typing.Real) -> bool\n\nCheck if point components are within the X and Y range bounds.\n\nParameters\n\nx\n\nReal\n\nPoint X component to compare against the bounds.\n\ny\n\nReal\n\nPoint Y component to compare against the bounds.\n\nReturns\n\nbool\n\nTrue if the components are contained in the bounding box. Otherwise, False.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#BoundingBox2D.__eq__",
        "title": "BoundingBox2D > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "BoundingBox2D.__eq__(other: BoundingBox2D) -> bool\n\nEquals operator for the BoundingBox2D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#BoundingBox2D.__ne__",
        "title": "BoundingBox2D > Method detail > __ne__",
        "section": "Method detail > __ne__",
        "text": "BoundingBox2D.__ne__(other: BoundingBox2D) -> bool\n\nNot equals operator for the BoundingBox2D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/BoundingBox2D",
        "href": "api/ansys/geometry/core/math/bbox/BoundingBox2D.html#BoundingBox2D.intersect_bboxes",
        "title": "BoundingBox2D > Method detail > intersect_bboxes",
        "section": "Method detail > intersect_bboxes",
        "text": "static BoundingBox2D.intersect_bboxes(box_1: BoundingBox2D, box_2: BoundingBox2D) -> None | BoundingBox2D\n\nFind the intersection of 2 BoundingBox2D objects.\n\nParameters\n\nbox_1: BoundingBox2D\n\nThe box to consider the intersection of with respect to box_2.\n\nbox_2: BoundingBox2D\n\nThe box to consider the intersection of with respect to box_1.\n\nReturns\n\nBoundingBox2D:\n\nThe box representing the intersection of the two passed in boxes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/index",
        "href": "api/ansys/geometry/core/index.html#the-ansysgeometrycore-library",
        "title": "The ansys.geometry.core library",
        "section": "The ansys.geometry.core library",
        "text": "The ansys.geometry.core library\nansys.geometry.core"
    },
    {
        "objectID": "api/ansys/geometry/core/index",
        "href": "api/ansys/geometry/core/index.html#summary",
        "title": "The ansys.geometry.core library > Summary",
        "section": "Summary",
        "text": "connection\nPyAnsys Geometry connection subpackage.\ndesigner\nPyAnsys Geometry designer subpackage.\nmaterials\nPyAnsys Geometry materials subpackage.\nmath\nPyAnsys Geometry math subpackage.\nmisc\nProvides the PyAnsys Geometry miscellaneous subpackage.\nparameters\nPyAnsys Geometry parameters subpackage.\nplotting\nProvides the PyAnsys Geometry plotting subpackage.\nshapes\nProvides the PyAnsys Geometry geometry subpackage.\nsketch\nPyAnsys Geometry sketch subpackage.\ntools\nPyAnsys Geometry tools subpackage.\nerrors\nProvides PyAnsys Geometry-specific errors.\nlogger\nProvides a general framework for logging in PyAnsys Geometry.\nmodeler\nProvides for interacting with the Geometry service.\ntyping\nProvides typing of values for PyAnsys Geometry.\n__version__\nPyAnsys Geometry version.\nUSE_SERVICE_COLORS\nGlobal constant for checking whether to use service colors for plotting\nDISABLE_MULTIPLE_DESIGN_CHECK\nDeprecated constant. Use DISABLE_ACTIVE_DESIGN_CHECK instead.\nDISABLE_ACTIVE_DESIGN_CHECK\nGlobal constant for disabling the ensure_design_is_active check.\nDOCUMENTATION_BUILD\nGlobal flag for the documentation to use the proper PyVista Jupyter backend.\nSummary\nconnection\ndesigner\nmaterials\nmath\nmisc\nparameters\nplotting\nshapes\ngeometry\nsketch\ntools\nerrors\nlogger\nmodeler\ntyping\n__version__\nUSE_SERVICE_COLORS\nDISABLE_MULTIPLE_DESIGN_CHECK\nDISABLE_ACTIVE_DESIGN_CHECK\nDISABLE_ACTIVE_DESIGN_CHECK\nensure_design_is_active\nDOCUMENTATION_BUILD"
    },
    {
        "objectID": "api/ansys/geometry/core/index",
        "href": "api/ansys/geometry/core/index.html#description",
        "title": "The ansys.geometry.core library > Description",
        "section": "Description",
        "text": "PyAnsys Geometry is a Python wrapper for the Ansys Geometry service.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/index",
        "href": "api/ansys/geometry/core/index.html#module-detail",
        "title": "The ansys.geometry.core library > Module detail",
        "section": "Module detail",
        "text": "Global constant for checking whether to use service colors for plotting\npurposes. If set to False, the default colors will be used (speed gain).\nDeprecated constant. Use DISABLE_ACTIVE_DESIGN_CHECK instead.\nGlobal constant for disabling the ensure_design_is_active check.\nOnly set this to false if you are sure you want to disable this check\nand your objects will always exist on the server side.\nGlobal flag for the documentation to use the proper PyVista Jupyter backend.\nPyAnsys Geometry version.\nModule detail\nDISABLE_ACTIVE_DESIGN_CHECK\nensure_design_is_active"
    },
    {
        "objectID": "api/ansys/geometry/core/index",
        "href": "api/ansys/geometry/core/index.html#core.USE_SERVICE_COLORS",
        "title": "The ansys.geometry.core library > Module detail > USE_SERVICE_COLORS",
        "section": "Module detail > USE_SERVICE_COLORS",
        "text": "core.USE_SERVICE_COLORS: bool = False\n\nGlobal constant for checking whether to use service colors for plotting\npurposes. If set to False, the default colors will be used (speed gain).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/index",
        "href": "api/ansys/geometry/core/index.html#core.DISABLE_MULTIPLE_DESIGN_CHECK",
        "title": "The ansys.geometry.core library > Module detail > DISABLE_MULTIPLE_DESIGN_CHECK",
        "section": "Module detail > DISABLE_MULTIPLE_DESIGN_CHECK",
        "text": "core.DISABLE_MULTIPLE_DESIGN_CHECK: bool = True\n\nDeprecated constant. Use DISABLE_ACTIVE_DESIGN_CHECK instead.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/index",
        "href": "api/ansys/geometry/core/index.html#core.DISABLE_ACTIVE_DESIGN_CHECK",
        "title": "The ansys.geometry.core library > Module detail > DISABLE_ACTIVE_DESIGN_CHECK",
        "section": "Module detail > DISABLE_ACTIVE_DESIGN_CHECK",
        "text": "core.DISABLE_ACTIVE_DESIGN_CHECK: bool = False\n\nGlobal constant for disabling the ensure_design_is_active check.\n\nOnly set this to false if you are sure you want to disable this check\nand your objects will always exist on the server side.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/index",
        "href": "api/ansys/geometry/core/index.html#core.DOCUMENTATION_BUILD",
        "title": "The ansys.geometry.core library > Module detail > DOCUMENTATION_BUILD",
        "section": "Module detail > DOCUMENTATION_BUILD",
        "text": "core.DOCUMENTATION_BUILD: bool\n\nGlobal flag for the documentation to use the proper PyVista Jupyter backend.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/index",
        "href": "api/ansys/geometry/core/index.html#core.__version__",
        "title": "The ansys.geometry.core library > Module detail > __version__",
        "section": "Module detail > __version__",
        "text": "core.__version__\n\nPyAnsys Geometry version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/Part",
        "href": "api/ansys/geometry/core/designer/part/Part.html#part",
        "title": "Part",
        "section": "Part",
        "text": "Represents a part master.\nThis class should not be accessed by users. The Part class holds fundamental\ndata of an assembly.\nUnique identifier for the part.\nName of the part.\nlist of MasterComponent children that the part contains.\nlist of MasterBody children that the part contains. These are master bodies.\nPart\nPart\nPart\npython:str\npython:str\npython:list\nMasterComponent\nMasterComponent\npython:list\nMasterBody\nMasterBody"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/Part",
        "href": "api/ansys/geometry/core/designer/part/Part.html#ansys.geometry.core.designer.part.Part",
        "title": "Part > Part > Part",
        "section": "Part > Part",
        "text": "class ansys.geometry.core.designer.part.Part(id: str, name: str, components: list[MasterComponent], bodies: list[ansys.geometry.core.designer.body.MasterBody])\n\nRepresents a part master.\n\nThis class should not be accessed by users. The Part class holds fundamental\ndata of an assembly.\n\nParameters\n\nid\n\npython:str\n\nUnique identifier for the part.\n\nname\n\npython:str\n\nName of the part.\n\ncomponents\n\npython:list[MasterComponent]\n\nlist of MasterComponent children that the part contains.\n\nbodies\n\npython:list[MasterBody]\n\nlist of MasterBody children that the part contains. These are master bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/Part",
        "href": "api/ansys/geometry/core/designer/part/Part.html#overview",
        "title": "Part > Overview",
        "section": "Overview",
        "text": "id\nID of the part.\nname\nName of the part.\ncomponents\nMasterComponent children that the part contains.\nbodies\nMasterBody children that the part contains.\n__repr__\nRepresent the part as a string.\nOverview\nid\nname\ncomponents\nMasterComponent\nbodies\nMasterBody\n__repr__"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/Part",
        "href": "api/ansys/geometry/core/designer/part/Part.html#import-detail",
        "title": "Part > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/Part",
        "href": "api/ansys/geometry/core/designer/part/Part.html#property-detail",
        "title": "Part > Property detail",
        "section": "Property detail",
        "text": "ID of the part.\nName of the part.\nMasterComponent children that the part contains.\nMasterBody children that the part contains.\nThese are master bodies.\nProperty detail\nMasterComponent\nMasterBody"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/Part",
        "href": "api/ansys/geometry/core/designer/part/Part.html#Part.id",
        "title": "Part > Property detail > id",
        "section": "Property detail > id",
        "text": "property Part.id: str\n\nID of the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/Part",
        "href": "api/ansys/geometry/core/designer/part/Part.html#Part.name",
        "title": "Part > Property detail > name",
        "section": "Property detail > name",
        "text": "property Part.name: str\n\nName of the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/Part",
        "href": "api/ansys/geometry/core/designer/part/Part.html#Part.components",
        "title": "Part > Property detail > components",
        "section": "Property detail > components",
        "text": "property Part.components: list[MasterComponent]\n\nMasterComponent children that the part contains.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/Part",
        "href": "api/ansys/geometry/core/designer/part/Part.html#Part.bodies",
        "title": "Part > Property detail > bodies",
        "section": "Property detail > bodies",
        "text": "property Part.bodies: list[ansys.geometry.core.designer.body.MasterBody]\n\nMasterBody children that the part contains.\n\nThese are master bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/Part",
        "href": "api/ansys/geometry/core/designer/part/Part.html#method-detail",
        "title": "Part > Method detail",
        "section": "Method detail",
        "text": "Represent the part as a string.\nMethod detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/part/Part",
        "href": "api/ansys/geometry/core/designer/part/Part.html#Part.__repr__",
        "title": "Part > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Part.__repr__() -> str\n\nRepresent the part as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/ProductInstance",
        "href": "api/ansys/geometry/core/connection/product_instance/ProductInstance.html#productinstance",
        "title": "ProductInstance",
        "section": "ProductInstance",
        "text": "ProductInstance class.\nThis class is used as a handle for a local session of Ansys Product’s backend: Discovery,\nWindows Geometry Service or SpaceClaim.\nThe local instance’s process identifier. This allows to keep track of the process\nand close it if need be.\nProductInstance\nProductInstance\nProductInstance\npython:int"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/ProductInstance",
        "href": "api/ansys/geometry/core/connection/product_instance/ProductInstance.html#ansys.geometry.core.connection.product_instance.ProductInstance",
        "title": "ProductInstance > ProductInstance > ProductInstance",
        "section": "ProductInstance > ProductInstance",
        "text": "class ansys.geometry.core.connection.product_instance.ProductInstance(pid: int)\n\nProductInstance class.\n\nThis class is used as a handle for a local session of Ansys Product’s backend: Discovery,\nWindows Geometry Service or SpaceClaim.\n\nParameters\n\npid\n\npython:int\n\nThe local instance’s process identifier. This allows to keep track of the process\nand close it if need be.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/ProductInstance",
        "href": "api/ansys/geometry/core/connection/product_instance/ProductInstance.html#overview",
        "title": "ProductInstance > Overview",
        "section": "Overview",
        "text": "close\nClose the process associated to the pid.\nOverview\nclose"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/ProductInstance",
        "href": "api/ansys/geometry/core/connection/product_instance/ProductInstance.html#import-detail",
        "title": "ProductInstance > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/ProductInstance",
        "href": "api/ansys/geometry/core/connection/product_instance/ProductInstance.html#method-detail",
        "title": "ProductInstance > Method detail",
        "section": "Method detail",
        "text": "Close the process associated to the pid.\nMethod detail"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/ProductInstance",
        "href": "api/ansys/geometry/core/connection/product_instance/ProductInstance.html#ProductInstance.close",
        "title": "ProductInstance > Method detail > close",
        "section": "Method detail > close",
        "text": "ProductInstance.close() -> bool\n\nClose the process associated to the pid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#the-product_instancepy-module",
        "title": "The product_instance.py module",
        "section": "The product_instance.py module",
        "text": "The product_instance.py module\nproduct_instance.py"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#summary",
        "title": "The product_instance.py module > Summary",
        "section": "Summary",
        "text": "ProductInstance\nProductInstance class.\nprepare_and_start_backend\nStart the requested service locally using the ProductInstance class.\nget_available_port\nReturn an available port to be used.\nWINDOWS_GEOMETRY_SERVICE_FOLDER\nDefault Geometry Service’s folder name into the unified installer (DMS).\nCORE_GEOMETRY_SERVICE_FOLDER\nDefault Geometry Service’s folder name into the unified installer (Core Service).\nDISCOVERY_FOLDER\nDefault Discovery’s folder name into the unified installer.\nSPACECLAIM_FOLDER\nDefault SpaceClaim’s folder name into the unified installer.\nADDINS_SUBFOLDER\nDefault global Addins’s folder name into the unified installer.\nBACKEND_SUBFOLDER\nDefault backend’s folder name into the ADDINS_SUBFOLDER folder.\nMANIFEST_FILENAME\nDefault backend’s add-in filename.\nGEOMETRY_SERVICE_EXE\nThe Windows Geometry Service’s filename (DMS).\nCORE_GEOMETRY_SERVICE_EXE\nThe Windows Geometry Service’s filename (Core Service).\nDISCOVERY_EXE\nThe Ansys Discovery’s filename.\nSPACECLAIM_EXE\nThe Ansys SpaceClaim’s filename.\nBACKEND_LOG_LEVEL_VARIABLE\nThe backend’s log level environment variable for local start.\nBACKEND_TRACE_VARIABLE\nThe backend’s enable trace environment variable for local start.\nBACKEND_HOST_VARIABLE\nThe backend’s ip address environment variable for local start.\nBACKEND_PORT_VARIABLE\nThe backend’s port number environment variable for local start.\nBACKEND_LOGS_FOLDER_VARIABLE\nThe backend’s logs folder path to be used.\nBACKEND_API_VERSION_VARIABLE\nThe backend’s api version environment variable for local start.\nBACKEND_SPACECLAIM_OPTIONS\nThe additional argument for local Ansys Discovery start.\nBACKEND_ADDIN_MANIFEST_ARGUMENT\nThe argument to specify the backend’s add-in manifest file’s path.\nBACKEND_SPACECLAIM_HIDDEN\nThe argument to hide SpaceClaim’s UI on the backend.\nBACKEND_SPACECLAIM_HIDDEN_ENVVAR_KEY\nSpaceClaim hidden backend’s environment variable key.\nBACKEND_SPACECLAIM_HIDDEN_ENVVAR_VALUE\nSpaceClaim hidden backend’s environment variable value.\nBACKEND_DISCOVERY_HIDDEN\nThe argument to hide Discovery’s UI on the backend.\nBACKEND_SPLASH_OFF\nThe argument to specify the backend’s add-in manifest file’s path.\nANSYS_GEOMETRY_SERVICE_ROOT\nLocal Geometry Service install location. This is for GeometryService and CoreGeometryService.\nSummary\nProductInstance\nProductInstance\nprepare_and_start_backend\nProductInstance\nget_available_port\nWINDOWS_GEOMETRY_SERVICE_FOLDER\nCORE_GEOMETRY_SERVICE_FOLDER\nDISCOVERY_FOLDER\nSPACECLAIM_FOLDER\nADDINS_SUBFOLDER\nBACKEND_SUBFOLDER\nADDINS_SUBFOLDER\nMANIFEST_FILENAME\nGEOMETRY_SERVICE_EXE\nCORE_GEOMETRY_SERVICE_EXE\nDISCOVERY_EXE\nSPACECLAIM_EXE\nBACKEND_LOG_LEVEL_VARIABLE\nBACKEND_TRACE_VARIABLE\nBACKEND_HOST_VARIABLE\nBACKEND_PORT_VARIABLE\nBACKEND_LOGS_FOLDER_VARIABLE\nBACKEND_API_VERSION_VARIABLE\nBACKEND_SPACECLAIM_OPTIONS\nBACKEND_ADDIN_MANIFEST_ARGUMENT\nBACKEND_SPACECLAIM_HIDDEN\nBACKEND_SPACECLAIM_HIDDEN_ENVVAR_KEY\nBACKEND_SPACECLAIM_HIDDEN_ENVVAR_VALUE\nBACKEND_DISCOVERY_HIDDEN\nBACKEND_SPLASH_OFF\nANSYS_GEOMETRY_SERVICE_ROOT"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#description",
        "title": "The product_instance.py module > Description",
        "section": "Description",
        "text": "Module containing the ProductInstance class.\nDescription\nProductInstance"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#module-detail",
        "title": "The product_instance.py module > Module detail",
        "section": "Module detail",
        "text": "Start the requested service locally using the ProductInstance class.\nWhen calling this method, a standalone service or product session is started.\nBy default, if an endpoint is specified (by defining host and port parameters)\nbut the endpoint is not available, the startup will fail. Otherwise, it will try to\nlaunch its own service.\nThe product version to be started. Goes from v24.1 to\nthe latest. Default is None.\nIf a specific product version is requested but not installed locally,\na SystemError will be raised.\nIP address at which the Geometry service will be deployed. By default,\nits value will be localhost.\nPort at which the Geometry service will be deployed. By default, its\nvalue will be None.\nBoolean enabling the logs trace on the Geometry service console window.\nBy default its value is False.\nThe backend’s API version to be used at runtime. Goes from API v21 to\nthe latest. Default is ApiVersions.LATEST.\nTimeout for starting the backend startup process. The default is 150.\nUsed to specify a manifest file path for the ApiServerAddin. This way,\nit is possible to run an ApiServerAddin from a version an older product\nversion. Only applicable for Ansys Discovery and Ansys SpaceClaim.\n0: Chatterbox\n1: Debug\n2: Warning\n3: Error\nThe default is 2 (Warning).\nLogging level to apply to the client. By default, INFO level is used.\nUse the logging module’s levels: DEBUG, INFO, WARNING, ERROR, CRITICAL.\nSets the backend’s logs folder path. If nothing is defined,\nthe backend will use its default path.\nSets the client’s log file path. If nothing is defined,\nthe client will log to the console.\nSets a specific minimum version to be checked. If this is not defined,\nthe minimum version will be set to 24.1.0.\nDEPRECATED. Use server_log_level instead.\nDEPRECATED. Use server_logs_folder instead.\nInstance of the Geometry service.\nIf the specified endpoint is already in use, a connection error will be raised.\nIf there is not an Ansys product 24.1 version or later installed\nor if a specific product’s version is requested but not installed locally then\na SystemError will be raised.\nReturn an available port to be used.\nThe available port.\nDefault Geometry Service’s folder name into the unified installer (DMS).\nDefault Geometry Service’s folder name into the unified installer (Core Service).\nDefault Discovery’s folder name into the unified installer.\nDefault SpaceClaim’s folder name into the unified installer.\nDefault global Addins’s folder name into the unified installer.\nDefault backend’s folder name into the ADDINS_SUBFOLDER folder.\nDefault backend’s add-in filename.\nTo be used only for local start of Ansys Discovery or Ansys SpaceClaim.\nThe Windows Geometry Service’s filename (DMS).\nThe Windows Geometry Service’s filename (Core Service).\nThe Ansys Discovery’s filename.\nThe Ansys SpaceClaim’s filename.\nThe backend’s log level environment variable for local start.\nThe backend’s enable trace environment variable for local start.\nThe backend’s ip address environment variable for local start.\nThe backend’s port number environment variable for local start.\nThe backend’s logs folder path to be used.\nOnly applicable to the Ansys Geometry Service.\nThe backend’s api version environment variable for local start.\nTo be used only with Ansys Discovery and Ansys SpaceClaim.\nThe additional argument for local Ansys Discovery start.\nTo be used only with Ansys Discovery.\nThe argument to specify the backend’s add-in manifest file’s path.\nTo be used only with Ansys Discovery and Ansys SpaceClaim.\nThe argument to hide SpaceClaim’s UI on the backend.\nTo be used only with Ansys SpaceClaim.\nSpaceClaim hidden backend’s environment variable key.\nTo be used only with Ansys SpaceClaim.\nSpaceClaim hidden backend’s environment variable value.\nTo be used only with Ansys SpaceClaim.\nThe argument to hide Discovery’s UI on the backend.\nTo be used only with Ansys Discovery.\nThe argument to specify the backend’s add-in manifest file’s path.\nTo be used only with Ansys Discovery and Ansys SpaceClaim.\nLocal Geometry Service install location. This is for GeometryService and CoreGeometryService.\nModule detail\nProductInstance\nNone\nlocalhost\npython:int\noptional\nNone\noptional\nFalse\nApiVersions.LATEST\npython:int\noptional\npython:str\noptional\nstarts\nthe\nproduct\nhiding\nits\nDefault\nis\nFalse\npython:int\noptional\n2\npython:int\noptional\npython:str\noptional\npython:str\noptional\npython:int\noptional\npython:int\noptional\nserver_log_level\npython:str\noptional\nserver_logs_folder\nModeler\nConnectionError\nSystemError\npython:int\nADDINS_SUBFOLDER"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.prepare_and_start_backend",
        "title": "The product_instance.py module > Module detail > prepare_and_start_backend",
        "section": "Module detail > prepare_and_start_backend",
        "text": "product_instance.prepare_and_start_backend(backend_type: ansys.geometry.core.connection.backend.BackendType, product_version: int = None, host: str = 'localhost', port: int = None, enable_trace: bool = False, api_version: ansys.geometry.core.connection.backend.ApiVersions = ApiVersions.LATEST, timeout: int = 150, manifest_path: str = None, hidden: bool = False, server_log_level: int = 2, client_log_level: int = logging.INFO, server_logs_folder: str = None, client_log_file: str = None, specific_minimum_version: int = None, log_level: int = None, logs_folder: str = None) -> ansys.geometry.core.modeler.Modeler\n\nStart the requested service locally using the ProductInstance class.\n\nWhen calling this method, a standalone service or product session is started.\nBy default, if an endpoint is specified (by defining host and port parameters)\nbut the endpoint is not available, the startup will fail. Otherwise, it will try to\nlaunch its own service.\n\nParameters\n\nproduct_version: ``int``, optional\n\nThe product version to be started. Goes from v24.1 to\nthe latest. Default is None.\nIf a specific product version is requested but not installed locally,\na SystemError will be raised.\n\nhost: str, optional\n\nIP address at which the Geometry service will be deployed. By default,\nits value will be localhost.\n\nport\n\npython:int, optional\n\nPort at which the Geometry service will be deployed. By default, its\nvalue will be None.\n\nenable_trace\n\nbool, optional\n\nBoolean enabling the logs trace on the Geometry service console window.\nBy default its value is False.\n\napi_version: ``ApiVersions``, optional\n\nThe backend’s API version to be used at runtime. Goes from API v21 to\nthe latest. Default is ApiVersions.LATEST.\n\ntimeout\n\npython:int, optional\n\nTimeout for starting the backend startup process. The default is 150.\n\nmanifest_path\n\npython:str, optional\n\nUsed to specify a manifest file path for the ApiServerAddin. This way,\nit is possible to run an ApiServerAddin from a version an older product\nversion. Only applicable for Ansys Discovery and Ansys SpaceClaim.\n\nhidden\n\nstarts the product hiding its UI. Default is False.\n\n\n\nserver_log_level\n\npython:int, optional\n\nBackend’s log level from 0 to 3:\n\n0: Chatterbox\n1: Debug\n2: Warning\n3: Error\n\nThe default is 2 (Warning).\n\nclient_log_level\n\npython:int, optional\n\nLogging level to apply to the client. By default, INFO level is used.\nUse the logging module’s levels: DEBUG, INFO, WARNING, ERROR, CRITICAL.\n\nserver_logs_folder\n\npython:str, optional\n\nSets the backend’s logs folder path. If nothing is defined,\nthe backend will use its default path.\n\nclient_log_file\n\npython:str, optional\n\nSets the client’s log file path. If nothing is defined,\nthe client will log to the console.\n\nspecific_minimum_version\n\npython:int, optional\n\nSets a specific minimum version to be checked. If this is not defined,\nthe minimum version will be set to 24.1.0.\n\nlog_level\n\npython:int, optional\n\nDEPRECATED. Use server_log_level instead.\n\nlogs_folder\n\npython:str, optional\n\nDEPRECATED. Use server_logs_folder instead.\n\nReturns\n\nModeler\n\nInstance of the Geometry service.\n\nRaises\n\nConnectionError\n\nIf the specified endpoint is already in use, a connection error will be raised.\n\nSystemError\n\nIf there is not an Ansys product 24.1 version or later installed\nor if a specific product’s version is requested but not installed locally then\na SystemError will be raised.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.get_available_port",
        "title": "The product_instance.py module > Module detail > get_available_port",
        "section": "Module detail > get_available_port",
        "text": "product_instance.get_available_port() -> int\n\nReturn an available port to be used.\n\nReturns\n\npython:int\n\nThe available port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.WINDOWS_GEOMETRY_SERVICE_FOLDER",
        "title": "The product_instance.py module > Module detail > WINDOWS_GEOMETRY_SERVICE_FOLDER",
        "section": "Module detail > WINDOWS_GEOMETRY_SERVICE_FOLDER",
        "text": "product_instance.WINDOWS_GEOMETRY_SERVICE_FOLDER = 'GeometryService'\n\nDefault Geometry Service’s folder name into the unified installer (DMS).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.CORE_GEOMETRY_SERVICE_FOLDER",
        "title": "The product_instance.py module > Module detail > CORE_GEOMETRY_SERVICE_FOLDER",
        "section": "Module detail > CORE_GEOMETRY_SERVICE_FOLDER",
        "text": "product_instance.CORE_GEOMETRY_SERVICE_FOLDER = 'CoreGeometryService'\n\nDefault Geometry Service’s folder name into the unified installer (Core Service).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.DISCOVERY_FOLDER",
        "title": "The product_instance.py module > Module detail > DISCOVERY_FOLDER",
        "section": "Module detail > DISCOVERY_FOLDER",
        "text": "product_instance.DISCOVERY_FOLDER = 'Discovery'\n\nDefault Discovery’s folder name into the unified installer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.SPACECLAIM_FOLDER",
        "title": "The product_instance.py module > Module detail > SPACECLAIM_FOLDER",
        "section": "Module detail > SPACECLAIM_FOLDER",
        "text": "product_instance.SPACECLAIM_FOLDER = 'scdm'\n\nDefault SpaceClaim’s folder name into the unified installer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.ADDINS_SUBFOLDER",
        "title": "The product_instance.py module > Module detail > ADDINS_SUBFOLDER",
        "section": "Module detail > ADDINS_SUBFOLDER",
        "text": "product_instance.ADDINS_SUBFOLDER = 'Addins'\n\nDefault global Addins’s folder name into the unified installer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_SUBFOLDER",
        "title": "The product_instance.py module > Module detail > BACKEND_SUBFOLDER",
        "section": "Module detail > BACKEND_SUBFOLDER",
        "text": "product_instance.BACKEND_SUBFOLDER = 'ApiServer'\n\nDefault backend’s folder name into the ADDINS_SUBFOLDER folder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.MANIFEST_FILENAME",
        "title": "The product_instance.py module > Module detail > MANIFEST_FILENAME",
        "section": "Module detail > MANIFEST_FILENAME",
        "text": "product_instance.MANIFEST_FILENAME = 'Presentation.ApiServerAddIn.Manifest.xml'\n\nDefault backend’s add-in filename.\n\nTo be used only for local start of Ansys Discovery or Ansys SpaceClaim.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.GEOMETRY_SERVICE_EXE",
        "title": "The product_instance.py module > Module detail > GEOMETRY_SERVICE_EXE",
        "section": "Module detail > GEOMETRY_SERVICE_EXE",
        "text": "product_instance.GEOMETRY_SERVICE_EXE = 'Presentation.ApiServerDMS.exe'\n\nThe Windows Geometry Service’s filename (DMS).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.CORE_GEOMETRY_SERVICE_EXE",
        "title": "The product_instance.py module > Module detail > CORE_GEOMETRY_SERVICE_EXE",
        "section": "Module detail > CORE_GEOMETRY_SERVICE_EXE",
        "text": "product_instance.CORE_GEOMETRY_SERVICE_EXE = 'Presentation.ApiServerLinux.exe'\n\nThe Windows Geometry Service’s filename (Core Service).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.DISCOVERY_EXE",
        "title": "The product_instance.py module > Module detail > DISCOVERY_EXE",
        "section": "Module detail > DISCOVERY_EXE",
        "text": "product_instance.DISCOVERY_EXE = 'Discovery.exe'\n\nThe Ansys Discovery’s filename.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.SPACECLAIM_EXE",
        "title": "The product_instance.py module > Module detail > SPACECLAIM_EXE",
        "section": "Module detail > SPACECLAIM_EXE",
        "text": "product_instance.SPACECLAIM_EXE = 'SpaceClaim.exe'\n\nThe Ansys SpaceClaim’s filename.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_LOG_LEVEL_VARIABLE",
        "title": "The product_instance.py module > Module detail > BACKEND_LOG_LEVEL_VARIABLE",
        "section": "Module detail > BACKEND_LOG_LEVEL_VARIABLE",
        "text": "product_instance.BACKEND_LOG_LEVEL_VARIABLE = 'LOG_LEVEL'\n\nThe backend’s log level environment variable for local start.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_TRACE_VARIABLE",
        "title": "The product_instance.py module > Module detail > BACKEND_TRACE_VARIABLE",
        "section": "Module detail > BACKEND_TRACE_VARIABLE",
        "text": "product_instance.BACKEND_TRACE_VARIABLE = 'ENABLE_TRACE'\n\nThe backend’s enable trace environment variable for local start.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_HOST_VARIABLE",
        "title": "The product_instance.py module > Module detail > BACKEND_HOST_VARIABLE",
        "section": "Module detail > BACKEND_HOST_VARIABLE",
        "text": "product_instance.BACKEND_HOST_VARIABLE = 'API_ADDRESS'\n\nThe backend’s ip address environment variable for local start.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_PORT_VARIABLE",
        "title": "The product_instance.py module > Module detail > BACKEND_PORT_VARIABLE",
        "section": "Module detail > BACKEND_PORT_VARIABLE",
        "text": "product_instance.BACKEND_PORT_VARIABLE = 'API_PORT'\n\nThe backend’s port number environment variable for local start.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_LOGS_FOLDER_VARIABLE",
        "title": "The product_instance.py module > Module detail > BACKEND_LOGS_FOLDER_VARIABLE",
        "section": "Module detail > BACKEND_LOGS_FOLDER_VARIABLE",
        "text": "product_instance.BACKEND_LOGS_FOLDER_VARIABLE = 'ANS_DSCO_REMOTE_LOGS_FOLDER'\n\nThe backend’s logs folder path to be used.\n\nOnly applicable to the Ansys Geometry Service.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_API_VERSION_VARIABLE",
        "title": "The product_instance.py module > Module detail > BACKEND_API_VERSION_VARIABLE",
        "section": "Module detail > BACKEND_API_VERSION_VARIABLE",
        "text": "product_instance.BACKEND_API_VERSION_VARIABLE = 'API_VERSION'\n\nThe backend’s api version environment variable for local start.\n\nTo be used only with Ansys Discovery and Ansys SpaceClaim.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_SPACECLAIM_OPTIONS",
        "title": "The product_instance.py module > Module detail > BACKEND_SPACECLAIM_OPTIONS",
        "section": "Module detail > BACKEND_SPACECLAIM_OPTIONS",
        "text": "product_instance.BACKEND_SPACECLAIM_OPTIONS = '--spaceclaim-options'\n\nThe additional argument for local Ansys Discovery start.\n\nTo be used only with Ansys Discovery.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_ADDIN_MANIFEST_ARGUMENT",
        "title": "The product_instance.py module > Module detail > BACKEND_ADDIN_MANIFEST_ARGUMENT",
        "section": "Module detail > BACKEND_ADDIN_MANIFEST_ARGUMENT",
        "text": "product_instance.BACKEND_ADDIN_MANIFEST_ARGUMENT = '/ADDINMANIFESTFILE='\n\nThe argument to specify the backend’s add-in manifest file’s path.\n\nTo be used only with Ansys Discovery and Ansys SpaceClaim.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_SPACECLAIM_HIDDEN",
        "title": "The product_instance.py module > Module detail > BACKEND_SPACECLAIM_HIDDEN",
        "section": "Module detail > BACKEND_SPACECLAIM_HIDDEN",
        "text": "product_instance.BACKEND_SPACECLAIM_HIDDEN = '/Headless=True'\n\nThe argument to hide SpaceClaim’s UI on the backend.\n\nTo be used only with Ansys SpaceClaim.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_SPACECLAIM_HIDDEN_ENVVAR_KEY",
        "title": "The product_instance.py module > Module detail > BACKEND_SPACECLAIM_HIDDEN_ENVVAR_KEY",
        "section": "Module detail > BACKEND_SPACECLAIM_HIDDEN_ENVVAR_KEY",
        "text": "product_instance.BACKEND_SPACECLAIM_HIDDEN_ENVVAR_KEY = 'SPACECLAIM_MODE'\n\nSpaceClaim hidden backend’s environment variable key.\n\nTo be used only with Ansys SpaceClaim.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_SPACECLAIM_HIDDEN_ENVVAR_VALUE",
        "title": "The product_instance.py module > Module detail > BACKEND_SPACECLAIM_HIDDEN_ENVVAR_VALUE",
        "section": "Module detail > BACKEND_SPACECLAIM_HIDDEN_ENVVAR_VALUE",
        "text": "product_instance.BACKEND_SPACECLAIM_HIDDEN_ENVVAR_VALUE = '2'\n\nSpaceClaim hidden backend’s environment variable value.\n\nTo be used only with Ansys SpaceClaim.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_DISCOVERY_HIDDEN",
        "title": "The product_instance.py module > Module detail > BACKEND_DISCOVERY_HIDDEN",
        "section": "Module detail > BACKEND_DISCOVERY_HIDDEN",
        "text": "product_instance.BACKEND_DISCOVERY_HIDDEN = '--hidden'\n\nThe argument to hide Discovery’s UI on the backend.\n\nTo be used only with Ansys Discovery.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.BACKEND_SPLASH_OFF",
        "title": "The product_instance.py module > Module detail > BACKEND_SPLASH_OFF",
        "section": "Module detail > BACKEND_SPLASH_OFF",
        "text": "product_instance.BACKEND_SPLASH_OFF = '/Splash=False'\n\nThe argument to specify the backend’s add-in manifest file’s path.\n\nTo be used only with Ansys Discovery and Ansys SpaceClaim.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/product_instance/index",
        "href": "api/ansys/geometry/core/connection/product_instance/index.html#product_instance.ANSYS_GEOMETRY_SERVICE_ROOT",
        "title": "The product_instance.py module > Module detail > ANSYS_GEOMETRY_SERVICE_ROOT",
        "section": "Module detail > ANSYS_GEOMETRY_SERVICE_ROOT",
        "text": "product_instance.ANSYS_GEOMETRY_SERVICE_ROOT = 'ANSYS_GEOMETRY_SERVICE_ROOT'\n\nLocal Geometry Service install location. This is for GeometryService and CoreGeometryService.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/index",
        "href": "api/ansys/geometry/core/math/frame/index.html#the-framepy-module",
        "title": "The frame.py module",
        "section": "The frame.py module",
        "text": "The frame.py module\nframe.py"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/index",
        "href": "api/ansys/geometry/core/math/frame/index.html#summary",
        "title": "The frame.py module > Summary",
        "section": "Summary",
        "text": "Frame\nRepresentation of a frame.\nSummary\nFrame"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/index",
        "href": "api/ansys/geometry/core/math/frame/index.html#description",
        "title": "The frame.py module > Description",
        "section": "Description",
        "text": "Provides for managing a frame.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#cylinder",
        "title": "Cylinder",
        "section": "Cylinder",
        "text": "Bases: ansys.geometry.core.shapes.surfaces.surface.Surface\nProvides 3D cylinder representation.\nOrigin of the cylinder.\nRadius of the cylinder.\nX-axis direction.\nZ-axis direction.\nCylinder\nCylinder\nansys.geometry.core.shapes.surfaces.surface.Surface\nndarray\nRealSequence\nPoint3D\nQuantity\nDistance\nReal\nndarray\nRealSequence\nUnitVector3D\nVector3D\nndarray\nRealSequence\nUnitVector3D\nVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#ansys.geometry.core.shapes.surfaces.cylinder.Cylinder",
        "title": "Cylinder > Cylinder > Cylinder",
        "section": "Cylinder > Cylinder",
        "text": "class ansys.geometry.core.shapes.surfaces.cylinder.Cylinder(origin: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D, radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, reference: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_X, axis: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_Z)\n\nBases: ansys.geometry.core.shapes.surfaces.surface.Surface\n\nProvides 3D cylinder representation.\n\nParameters\n\norigin\n\nndarray | RealSequence | Point3D\n\nOrigin of the cylinder.\n\nradius\n\nQuantity | Distance | Real\n\nRadius of the cylinder.\n\nreference\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nX-axis direction.\n\naxis\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nZ-axis direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#overview",
        "title": "Cylinder > Overview",
        "section": "Overview",
        "text": "contains_param\nCheck a parameter is within the parametric range of the surface.\ncontains_point\nCheck a point is contained by the surface.\nsurface_area\nGet the surface area of the cylinder.\nvolume\nGet the volume of the cylinder.\ntransformed_copy\nCreate a transformed copy of the cylinder from a transformation matrix.\nmirrored_copy\nCreate a mirrored copy of the cylinder along the y-axis.\nevaluate\nEvaluate the cylinder at the given parameters.\nproject_point\nProject a point onto the cylinder and evaluate the cylinder.\nparameterization\nParameterize the cylinder surface as a tuple (U and V respectively).\norigin\nOrigin of the cylinder.\nradius\nRadius of the cylinder.\ndir_x\nX-direction of the cylinder.\ndir_y\nY-direction of the cylinder.\ndir_z\nZ-direction of the cylinder.\n__eq__\nEquals operator for the Cylinder class.\nOverview\ncontains_param\ncontains_point\nsurface_area\nvolume\ntransformed_copy\nmirrored_copy\nevaluate\nproject_point\nparameterization\norigin\nradius\ndir_x\ndir_y\ndir_z\n__eq__\nCylinder"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#import-detail",
        "title": "Cylinder > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#property-detail",
        "title": "Cylinder > Property detail",
        "section": "Property detail",
        "text": "Origin of the cylinder.\nRadius of the cylinder.\nX-direction of the cylinder.\nY-direction of the cylinder.\nZ-direction of the cylinder.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.origin",
        "title": "Cylinder > Property detail > origin",
        "section": "Property detail > origin",
        "text": "property Cylinder.origin: ansys.geometry.core.math.point.Point3D\n\nOrigin of the cylinder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.radius",
        "title": "Cylinder > Property detail > radius",
        "section": "Property detail > radius",
        "text": "property Cylinder.radius: pint.Quantity\n\nRadius of the cylinder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.dir_x",
        "title": "Cylinder > Property detail > dir_x",
        "section": "Property detail > dir_x",
        "text": "property Cylinder.dir_x: ansys.geometry.core.math.vector.UnitVector3D\n\nX-direction of the cylinder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.dir_y",
        "title": "Cylinder > Property detail > dir_y",
        "section": "Property detail > dir_y",
        "text": "property Cylinder.dir_y: ansys.geometry.core.math.vector.UnitVector3D\n\nY-direction of the cylinder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.dir_z",
        "title": "Cylinder > Property detail > dir_z",
        "section": "Property detail > dir_z",
        "text": "property Cylinder.dir_z: ansys.geometry.core.math.vector.UnitVector3D\n\nZ-direction of the cylinder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#method-detail",
        "title": "Cylinder > Method detail",
        "section": "Method detail",
        "text": "Get the surface area of the cylinder.\nHeight to bound the cylinder at.\nSurface area of the temporarily bounded cylinder.\nBy nature, a cylinder is infinite. If you want to get the surface area,\nyou must bound it by a height. Normally a cylinder surface is not closed\n(does not have “caps” on the ends). This method assumes that the cylinder\nis closed for the purpose of getting the surface area.\nGet the volume of the cylinder.\nHeight to bound the cylinder at.\nVolume of the temporarily bounded cylinder.\nBy nature, a cylinder is infinite. If you want to get the surface area,\nyou must bound it by a height. Normally a cylinder surface is not closed\n(does not have “caps” on the ends). This method assumes that the cylinder\nis closed for the purpose of getting the surface area.\nCreate a transformed copy of the cylinder from a transformation matrix.\n4X4 transformation matrix to apply to the cylinder.\nNew cylinder that is the transformed copy of the original cylinder.\nCreate a mirrored copy of the cylinder along the y-axis.\nNew cylinder that is a mirrored copy of the original cylinder.\nEquals operator for the Cylinder class.\nEvaluate the cylinder at the given parameters.\nParameters (u,v) to evaluate the cylinder at.\nResulting evaluation.\nProject a point onto the cylinder and evaluate the cylinder.\nPoint to project onto the cylinder.\nResulting evaluation.\nParameterize the cylinder surface as a tuple (U and V respectively).\nThe U parameter specifies the clockwise angle around the axis (right-hand\ncorkscrew law), with a zero parameter at dir_x and a period of 2*pi.\nThe V parameter specifies the distance along the axis, with a zero parameter at\nthe XY plane of the cylinder.\nInformation about how a cylinder’s u and v parameters are parameterized, respectively.\nCheck a parameter is within the parametric range of the surface.\nCheck a point is contained by the surface.\nThe point can either lie within the surface or on its boundary.\nMethod detail\nQuantity\nDistance\nReal\nQuantity\nQuantity\nDistance\nReal\nQuantity\nMatrix44\nCylinder\nCylinder\nCylinder\nParamUV\nCylinderEvaluation\nPoint3D\nCylinderEvaluation\ndir_x\npython:tuple\nParameterization\nParameterization"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.surface_area",
        "title": "Cylinder > Method detail > surface_area",
        "section": "Method detail > surface_area",
        "text": "Cylinder.surface_area(height: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real) -> pint.Quantity\n\nGet the surface area of the cylinder.\n\nParameters\n\nheight\n\nQuantity | Distance | Real\n\nHeight to bound the cylinder at.\n\nReturns\n\nQuantity\n\nSurface area of the temporarily bounded cylinder.\n\nNotes\n\nBy nature, a cylinder is infinite. If you want to get the surface area,\nyou must bound it by a height. Normally a cylinder surface is not closed\n(does not have “caps” on the ends). This method assumes that the cylinder\nis closed for the purpose of getting the surface area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.volume",
        "title": "Cylinder > Method detail > volume",
        "section": "Method detail > volume",
        "text": "Cylinder.volume(height: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real) -> pint.Quantity\n\nGet the volume of the cylinder.\n\nParameters\n\nheight\n\nQuantity | Distance | Real\n\nHeight to bound the cylinder at.\n\nReturns\n\nQuantity\n\nVolume of the temporarily bounded cylinder.\n\nNotes\n\nBy nature, a cylinder is infinite. If you want to get the surface area,\nyou must bound it by a height. Normally a cylinder surface is not closed\n(does not have “caps” on the ends). This method assumes that the cylinder\nis closed for the purpose of getting the surface area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.transformed_copy",
        "title": "Cylinder > Method detail > transformed_copy",
        "section": "Method detail > transformed_copy",
        "text": "Cylinder.transformed_copy(matrix: ansys.geometry.core.math.matrix.Matrix44) -> Cylinder\n\nCreate a transformed copy of the cylinder from a transformation matrix.\n\nParameters\n\nmatrix\n\nMatrix44\n\n4X4 transformation matrix to apply to the cylinder.\n\nReturns\n\nCylinder\n\nNew cylinder that is the transformed copy of the original cylinder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.mirrored_copy",
        "title": "Cylinder > Method detail > mirrored_copy",
        "section": "Method detail > mirrored_copy",
        "text": "Cylinder.mirrored_copy() -> Cylinder\n\nCreate a mirrored copy of the cylinder along the y-axis.\n\nReturns\n\nCylinder\n\nNew cylinder that is a mirrored copy of the original cylinder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.__eq__",
        "title": "Cylinder > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Cylinder.__eq__(other: Cylinder) -> bool\n\nEquals operator for the Cylinder class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.evaluate",
        "title": "Cylinder > Method detail > evaluate",
        "section": "Method detail > evaluate",
        "text": "Cylinder.evaluate(parameter: ansys.geometry.core.shapes.parameterization.ParamUV) -> CylinderEvaluation\n\nEvaluate the cylinder at the given parameters.\n\nParameters\n\nparameter\n\nParamUV\n\nParameters (u,v) to evaluate the cylinder at.\n\nReturns\n\nCylinderEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.project_point",
        "title": "Cylinder > Method detail > project_point",
        "section": "Method detail > project_point",
        "text": "Cylinder.project_point(point: ansys.geometry.core.math.point.Point3D) -> CylinderEvaluation\n\nProject a point onto the cylinder and evaluate the cylinder.\n\nParameters\n\npoint\n\nPoint3D\n\nPoint to project onto the cylinder.\n\nReturns\n\nCylinderEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.parameterization",
        "title": "Cylinder > Method detail > parameterization",
        "section": "Method detail > parameterization",
        "text": "Cylinder.parameterization() -> tuple[ansys.geometry.core.shapes.parameterization.Parameterization, ansys.geometry.core.shapes.parameterization.Parameterization]\n\nParameterize the cylinder surface as a tuple (U and V respectively).\n\nThe U parameter specifies the clockwise angle around the axis (right-hand\ncorkscrew law), with a zero parameter at dir_x and a period of 2*pi.\n\nThe V parameter specifies the distance along the axis, with a zero parameter at\nthe XY plane of the cylinder.\n\nReturns\n\npython:tuple[Parameterization, Parameterization]\n\nInformation about how a cylinder’s u and v parameters are parameterized, respectively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.contains_param",
        "title": "Cylinder > Method detail > contains_param",
        "section": "Method detail > contains_param",
        "text": "abstractmethod Cylinder.contains_param(param_uv: ansys.geometry.core.shapes.parameterization.ParamUV) -> bool\n\nCheck a parameter is within the parametric range of the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/Cylinder.html#Cylinder.contains_point",
        "title": "Cylinder > Method detail > contains_point",
        "section": "Method detail > contains_point",
        "text": "abstractmethod Cylinder.contains_point(point: ansys.geometry.core.math.point.Point3D) -> bool\n\nCheck a point is contained by the surface.\n\nThe point can either lie within the surface or on its boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#importoptions",
        "title": "ImportOptions",
        "section": "ImportOptions",
        "text": "Import options when opening a file.\nSimplify geometry and clean up topology.\nImport coordinate systems.\nImport curves.\nImport hidden components and geometry.\nImport names of bodies and curves.\nImport planes.\nImport points.\nImportOptions\nImportOptions\npython:False\npython:False\npython:False\npython:False\npython:False\npython:False\npython:False"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#ansys.geometry.core.misc.options.ImportOptions",
        "title": "ImportOptions > ImportOptions > ImportOptions",
        "section": "ImportOptions > ImportOptions",
        "text": "class ansys.geometry.core.misc.options.ImportOptions\n\nImport options when opening a file.\n\nParameters\n\ncleanup_bodies\n\nbool = python:False\n\nSimplify geometry and clean up topology.\n\nimport_coordinate_systems\n\nbool = python:False\n\nImport coordinate systems.\n\nimport_curves\n\nbool = python:False\n\nImport curves.\n\nimport_hidden_components_and_geometry\n\nbool = python:False\n\nImport hidden components and geometry.\n\nimport_names\n\nbool = python:False\n\nImport names of bodies and curves.\n\nimport_planes\n\nbool = python:False\n\nImport planes.\n\nimport_points\n\nbool = python:False\n\nImport points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#overview",
        "title": "ImportOptions > Overview",
        "section": "Overview",
        "text": "to_dict\nProvide the dictionary representation of the ImportOptions class.\ncleanup_bodies\nimport_coordinate_systems\nimport_curves\nimport_hidden_components_and_geometry\nimport_names\nimport_planes\nimport_points\nOverview\nto_dict\ncleanup_bodies\nimport_coordinate_systems\nimport_curves\nimport_hidden_components_and_geometry\nimport_names\nimport_planes\nimport_points"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#import-detail",
        "title": "ImportOptions > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#attribute-detail",
        "title": "ImportOptions > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#ImportOptions.cleanup_bodies",
        "title": "ImportOptions > Attribute detail > cleanup_bodies",
        "section": "Attribute detail > cleanup_bodies",
        "text": "ImportOptions.cleanup_bodies: bool = False\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#ImportOptions.import_coordinate_systems",
        "title": "ImportOptions > Attribute detail > import_coordinate_systems",
        "section": "Attribute detail > import_coordinate_systems",
        "text": "ImportOptions.import_coordinate_systems: bool = False\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#ImportOptions.import_curves",
        "title": "ImportOptions > Attribute detail > import_curves",
        "section": "Attribute detail > import_curves",
        "text": "ImportOptions.import_curves: bool = False\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#ImportOptions.import_hidden_components_and_geometry",
        "title": "ImportOptions > Attribute detail > import_hidden_components_and_geometry",
        "section": "Attribute detail > import_hidden_components_and_geometry",
        "text": "ImportOptions.import_hidden_components_and_geometry: bool = False\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#ImportOptions.import_names",
        "title": "ImportOptions > Attribute detail > import_names",
        "section": "Attribute detail > import_names",
        "text": "ImportOptions.import_names: bool = False\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#ImportOptions.import_planes",
        "title": "ImportOptions > Attribute detail > import_planes",
        "section": "Attribute detail > import_planes",
        "text": "ImportOptions.import_planes: bool = False\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#ImportOptions.import_points",
        "title": "ImportOptions > Attribute detail > import_points",
        "section": "Attribute detail > import_points",
        "text": "ImportOptions.import_points: bool = False\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#method-detail",
        "title": "ImportOptions > Method detail",
        "section": "Method detail",
        "text": "Provide the dictionary representation of the ImportOptions class.\nMethod detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/options/ImportOptions",
        "href": "api/ansys/geometry/core/misc/options/ImportOptions.html#ImportOptions.to_dict",
        "title": "ImportOptions > Method detail > to_dict",
        "section": "Method detail > to_dict",
        "text": "ImportOptions.to_dict()\n\nProvide the dictionary representation of the ImportOptions class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/04_applied/02_naca_fluent",
        "href": "examples/04_applied/02_naca_fluent.html#applied-prepare-a-naca-airfoil-for-a-fluent-simulation",
        "title": "Examples > Applied: Prepare a NACA airfoil for a Fluent simulation",
        "section": "Applied: Prepare a NACA airfoil for a Fluent simulation",
        "text": "Once a NACA airfoil is designed, it is necessary to prepare the geometry for a CFD simulation. This notebook demonstrates how to prepare a NACA 6412 airfoil for a Fluent simulation. The starting point of this example is the previously designed NACA 6412 airfoil. The airfoil was saved in an SCDOCX file, which is now imported into the notebook. The geometry is then prepared for the simulation.\nIn case you want to run this notebook, make sure that you have run the previous notebook to design the NACA 6412 airfoil.\nApplied: Prepare a NACA airfoil for a Fluent simulation"
    },
    {
        "objectID": "examples/04_applied/02_naca_fluent",
        "href": "examples/04_applied/02_naca_fluent.html#import-the-naca-6412-airfoil",
        "title": "Examples > Applied: Prepare a NACA airfoil for a Fluent simulation > Import the NACA 6412 airfoil",
        "section": "Import the NACA 6412 airfoil",
        "text": "The following code starts up the Geometry Service and imports the NACA 6412 airfoil. The airfoil is then displayed in the notebook.\nImport the NACA 6412 airfoil"
    },
    {
        "objectID": "examples/04_applied/02_naca_fluent",
        "href": "examples/04_applied/02_naca_fluent.html#prepare-the-geometry-for-the-simulation",
        "title": "Examples > Applied: Prepare a NACA airfoil for a Fluent simulation > Prepare the geometry for the simulation",
        "section": "Prepare the geometry for the simulation",
        "text": "The current design is only composed of the airfoil. To prepare the geometry for the simulation, you must define the domain around the airfoil. The following code creates a rectangular fluid domain around the airfoil.\nThe airfoil has the following dimensions:\nChord length: 1 (X-axis)\nThickness: Depends on NACA value (Y-axis)\nDefine the fluid domain as a large box with these dimensions:\nLength (X-axis) - 10 times the chord length\nWidth (Z-axis) - 5 times the chord length\nHeight (Y-axis) - 4 times the chord length\nPlace the airfoil at the center of the fluid domain.\nPrepare the geometry for the simulation"
    },
    {
        "objectID": "examples/04_applied/02_naca_fluent",
        "href": "examples/04_applied/02_naca_fluent.html#create-named-selections",
        "title": "Examples > Applied: Prepare a NACA airfoil for a Fluent simulation > Create named selections",
        "section": "Create named selections",
        "text": "Named selections are used to define boundary conditions in Fluent. The following code creates named selections for the inlet, outlet, and walls of the fluid domain. The airfoil is also assigned a named selection.\nThe airfoil is aligned with the X axis. The inlet is located at the left side of the airfoil, the outlet is located at the right side of the airfoil, and the walls are located at the top and bottom of the airfoil. The inlet face has therefore a negative X-axis normal vector, and the outlet face has a positive X-axis normal vector. The rest of the faces, therefore, constitute the walls.\nCreate named selections"
    },
    {
        "objectID": "examples/04_applied/02_naca_fluent",
        "href": "examples/04_applied/02_naca_fluent.html#display-the-geometry",
        "title": "Examples > Applied: Prepare a NACA airfoil for a Fluent simulation > Display the geometry",
        "section": "Display the geometry",
        "text": "The geometry is now ready for the simulation. The following code displays the geometry in the notebook. This example uses the GeometryPlotter class to display the geometry for the airfoil and fluid domain in different colors with a specified opacity level.\nThe airfoil is displayed in green, and the fluid domain is displayed in blue with an opacity of 0.25.\nDisplay the geometry\nGeometryPlotter"
    },
    {
        "objectID": "examples/04_applied/02_naca_fluent",
        "href": "examples/04_applied/02_naca_fluent.html#export-the-geometry",
        "title": "Examples > Applied: Prepare a NACA airfoil for a Fluent simulation > Export the geometry",
        "section": "Export the geometry",
        "text": "Export the geometry into a Fluent-compatible format. The following code exports the geometry into a PMDB file, which retains the named selections.\nYou can import the exported PMDB file into Fluent to set up the mesh and perform the simulation. For an example of how to set up the mesh and boundary conditions in Fluent, see the Modeling External Compressible Flow example in the Fluent documentation.\nThe main difference between the Fluent example and this geometry is the coordinate system. The Fluent example defines the airfoil in the XY plane, while this geometry defines the airfoil in the XZ plane.\nExport the geometry"
    },
    {
        "objectID": "examples/04_applied/02_naca_fluent",
        "href": "examples/04_applied/02_naca_fluent.html#close-the-modeler",
        "title": "Examples > Applied: Prepare a NACA airfoil for a Fluent simulation > Close the modeler",
        "section": "Close the modeler",
        "text": "Close the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/index.html#the-toruspy-module",
        "title": "The torus.py module",
        "section": "The torus.py module",
        "text": "The torus.py module\ntorus.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/index.html#summary",
        "title": "The torus.py module > Summary",
        "section": "Summary",
        "text": "Torus\nProvides 3D torus representation.\nTorusEvaluation\nEvaluate the torus`` at given parameters.\nSummary\nTorus\nTorusEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/torus/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/torus/index.html#description",
        "title": "The torus.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a torus.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#body",
        "title": "Body",
        "section": "Body",
        "text": "Bases: IBody\nRepresents solids and surfaces organized within the design assembly.\nSolids and surfaces synchronize to a design within a supporting Geometry service instance.\nServer-defined ID for the body.\nUser-defined label for the body.\nParent component to place the new component under within the design assembly.\nMaster body that this body is an occurrence of.\nBody\nBody\nIBody\npython:str\npython:str\nComponent\nMasterBody"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#ansys.geometry.core.designer.body.Body",
        "title": "Body > Body > Body",
        "section": "Body > Body",
        "text": "class ansys.geometry.core.designer.body.Body(id, name, parent_component: ansys.geometry.core.designer.component.Component, template: MasterBody)\n\nBases: IBody\n\nRepresents solids and surfaces organized within the design assembly.\n\nSolids and surfaces synchronize to a design within a supporting Geometry service instance.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the body.\n\nname\n\npython:str\n\nUser-defined label for the body.\n\nparent_component\n\nComponent\n\nParent component to place the new component under within the design assembly.\n\ntemplate\n\nMasterBody\n\nMaster body that this body is an occurrence of.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#overview",
        "title": "Body > Overview",
        "section": "Overview",
        "text": "reset_tessellation_cache\nDecorate Body methods that require a tessellation cache update.\nassign_material\nAssign a material against the active design.\nget_assigned_material\nGet the assigned material of the body.\nadd_midsurface_thickness\nAdd a mid-surface thickness to a surface body.\nadd_midsurface_offset\nAdd a mid-surface offset to a surface body.\nimprint_curves\nImprint all specified geometries onto specified faces of the body.\nproject_curves\nProject all specified geometries onto the body.\nimprint_projected_curves\nProject and imprint specified geometries onto the body.\nset_name\nSet the name of the body.\nset_fill_style\nSet the fill style of the body.\nset_suppressed\nSet the body suppression state.\nset_color\nSet the color of the body.\ntranslate\nTranslate the body in a specified direction and distance.\nrotate\nRotate the geometry body around the specified axis by a given angle.\nscale\nScale the geometry body by the given value.\nmap\nMap the geometry body to the new specified frame.\nmirror\nMirror the geometry body across the specified plane.\nget_collision\nGet the collision state between bodies.\ncopy\nCreate a copy of the body under the specified parent.\ntessellate\nTessellate the body and return the geometry as triangles.\nshell_body\nShell the body to the thickness specified.\nremove_faces\nShell by removing a given set of faces.\nplot\nPlot the body.\nintersect\nIntersect two (or more) bodies.\nsubtract\nSubtract two (or more) bodies.\nunite\nUnite two (or more) bodies.\nid\nGet the ID of the body as a string.\nname\nGet the name of the body.\nfill_style\nGet the fill style of the body.\nis_suppressed\nGet the body suppression state.\ncolor\nGet the color of the body.\nparent_component\nfaces\nGet a list of all faces within the body.\nedges\nGet a list of all edges within the body.\nis_alive\nCheck if the body is still alive and has not been deleted.\nis_surface\nCheck if the body is a planar body.\nsurface_thickness\nGet the surface thickness of a surface body.\nsurface_offset\nGet the surface offset type of a surface body.\nvolume\nCalculate the volume of the body.\nmaterial\nGet the assigned material of the body.\n__repr__\nRepresent the Body as a string.\nOverview\nreset_tessellation_cache\nBody\nassign_material\nget_assigned_material\nadd_midsurface_thickness\nadd_midsurface_offset\nimprint_curves\nproject_curves\nimprint_projected_curves\nset_name\nset_fill_style\nset_suppressed\nset_color\ntranslate\nrotate\nscale\nmap\nmirror\nget_collision\ncopy\ntessellate\nshell_body\nremove_faces\nplot\nintersect\nsubtract\nunite\nid\nname\nfill_style\nis_suppressed\ncolor\nparent_component\nfaces\nedges\nis_alive\nis_surface\nsurface_thickness\nsurface_offset\nvolume\nmaterial\n__repr__\nBody"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#import-detail",
        "title": "Body > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#property-detail",
        "title": "Body > Property detail",
        "section": "Property detail",
        "text": "Get the ID of the body as a string.\nGet the name of the body.\nGet the fill style of the body.\nGet the body suppression state.\nGet the color of the body.\nGet a list of all faces within the body.\nGet a list of all edges within the body.\nCheck if the body is still alive and has not been deleted.\nCheck if the body is a planar body.\nGet the surface thickness of a surface body.\nThis method is only for surface-type bodies that have been assigned a surface thickness.\nGet the surface offset type of a surface body.\nThis method is only for surface-type bodies that have been assigned a surface offset.\nCalculate the volume of the body.\nWhen dealing with a planar surface, a value of 0 is returned as a volume.\nGet the assigned material of the body.\nMaterial assigned to the body.\nProperty detail\npython:list\nFace\npython:list\nEdge\n0\nMaterial"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.id",
        "title": "Body > Property detail > id",
        "section": "Property detail > id",
        "text": "property Body.id: str\n\nGet the ID of the body as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.name",
        "title": "Body > Property detail > name",
        "section": "Property detail > name",
        "text": "property Body.name: str\n\nGet the name of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.fill_style",
        "title": "Body > Property detail > fill_style",
        "section": "Property detail > fill_style",
        "text": "property Body.fill_style: str\n\nGet the fill style of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.is_suppressed",
        "title": "Body > Property detail > is_suppressed",
        "section": "Property detail > is_suppressed",
        "text": "property Body.is_suppressed: bool\n\nGet the body suppression state.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.color",
        "title": "Body > Property detail > color",
        "section": "Property detail > color",
        "text": "property Body.color: str\n\nGet the color of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.parent_component",
        "title": "Body > Property detail > parent_component",
        "section": "Property detail > parent_component",
        "text": "property Body.parent_component: ansys.geometry.core.designer.component.Component\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.faces",
        "title": "Body > Property detail > faces",
        "section": "Property detail > faces",
        "text": "property Body.faces: list[ansys.geometry.core.designer.face.Face]\n\nGet a list of all faces within the body.\n\nReturns\n\npython:list[Face]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.edges",
        "title": "Body > Property detail > edges",
        "section": "Property detail > edges",
        "text": "property Body.edges: list[ansys.geometry.core.designer.edge.Edge]\n\nGet a list of all edges within the body.\n\nReturns\n\npython:list[Edge]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.is_alive",
        "title": "Body > Property detail > is_alive",
        "section": "Property detail > is_alive",
        "text": "property Body.is_alive: bool\n\nCheck if the body is still alive and has not been deleted.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.is_surface",
        "title": "Body > Property detail > is_surface",
        "section": "Property detail > is_surface",
        "text": "property Body.is_surface: bool\n\nCheck if the body is a planar body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.surface_thickness",
        "title": "Body > Property detail > surface_thickness",
        "section": "Property detail > surface_thickness",
        "text": "property Body.surface_thickness: pint.Quantity | None\n\nGet the surface thickness of a surface body.\n\nNotes\n\nThis method is only for surface-type bodies that have been assigned a surface thickness.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.surface_offset",
        "title": "Body > Property detail > surface_offset",
        "section": "Property detail > surface_offset",
        "text": "property Body.surface_offset: MidSurfaceOffsetType | None\n\nGet the surface offset type of a surface body.\n\nNotes\n\nThis method is only for surface-type bodies that have been assigned a surface offset.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.volume",
        "title": "Body > Property detail > volume",
        "section": "Property detail > volume",
        "text": "property Body.volume: pint.Quantity\n\nCalculate the volume of the body.\n\nNotes\n\nWhen dealing with a planar surface, a value of 0 is returned as a volume.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.material",
        "title": "Body > Property detail > material",
        "section": "Property detail > material",
        "text": "property Body.material: ansys.geometry.core.materials.material.Material\n\nGet the assigned material of the body.\n\nReturns\n\nMaterial\n\nMaterial assigned to the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#method-detail",
        "title": "Body > Method detail",
        "section": "Method detail",
        "text": "Decorate Body methods that require a tessellation cache update.\nMethod to call.\nOutput of the method, if any.\nAssign a material against the active design.\nSource material data.\nGet the assigned material of the body.\nMaterial assigned to the body.\nAdd a mid-surface thickness to a surface body.\nThickness to assign.\nOnly surface bodies are eligible for mid-surface thickness assignment.\nAdd a mid-surface offset to a surface body.\nSurface offset to assign.\nOnly surface bodies are eligible for mid-surface offset assignment.\nImprint all specified geometries onto specified faces of the body.\nlist of faces to imprint the curves of the sketch onto.\nAll curves to imprint on the faces.\nAll impacted edges and faces from the imprint operation.\nProject all specified geometries onto the body.\nDirection of the projection.\nAll curves to project on the body.\nWhether to target the closest face with the projection.\nWhether to project only one curve of the entire sketch. When\nTrue, only one curve is projected.\nAll faces from the project curves operation.\nThe only_one_curve parameter allows you to optimize the server call because\nprojecting curves is an expensive operation. This reduces the workload on the\nserver side.\nProject and imprint specified geometries onto the body.\nThis method combines the project_curves() and imprint_curves() method into\none method. It has higher performance than calling them back-to-back when dealing\nwith many curves. Because it is a specialized function, this method only returns\nthe faces (and not the edges) from the imprint operation.\nDirection of the projection.\nAll curves to project on the body.\nWhether to target the closest face with the projection.\nWhether to project only one curve of the entire sketch. When\nTrue, only one curve is projected.\nAll imprinted faces from the operation.\nThe only_one_curve parameter allows you to optimize the server call because\nprojecting curves is an expensive operation. This reduces the workload on the\nserver side.\nSet the name of the body.\nSet the fill style of the body.\nSet the body suppression state.\nSet the color of the body.\nColor to set the body to. This can be a string representing a color name\nor a tuple of RGB values in the range [0, 1] (RGBA) or [0, 255] (pure RGB).\nTranslate the body in a specified direction and distance.\nDirection of the translation.\nDistance (magnitude) of the translation.\nRotate the geometry body around the specified axis by a given angle.\nOrigin of the rotational axis.\nThe axis of rotation.\nAngle (magnitude) of the rotation.\nScale the geometry body by the given value.\nValue to scale the body by.\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\nMap the geometry body to the new specified frame.\nStructure defining the orientation of the body.\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\nMirror the geometry body across the specified plane.\nRepresents the mirror.\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\nGet the collision state between bodies.\nObject that the collision state is checked with.\nEnum that defines the collision state between bodies.\nCreate a copy of the body under the specified parent.\nParent component to place the new body under within the design assembly.\nName to give the new body.\nCopy of the body.\nTessellate the body and return the geometry as triangles.\nWhether to merge the body into a single mesh. When False (default), the\nnumber of triangles are preserved and only the topology is merged.\nWhen True, the individual faces of the tessellation are merged.\nMerged pyvista.PolyData if merge=True or a composite dataset.\nExtrude a box centered at the origin to create a rectangular body and\ntessellate it:\nMerge the body:\nShell the body to the thickness specified.\nShell thickness.\nTrue when successful, False when failed.\nShell by removing a given set of faces.\nFace or faces to be removed.\nShell thickness.\nTrue when successful, False when failed.\nPlot the body.\nWhether to merge the body into a single mesh. Performance improved when True.\nWhen True (default), the individual faces of the tessellation are merged.\nWhen False, the number of triangles are preserved and only the topology\nis merged.\nPath for saving a screenshot of the image that is being represented.\nWhether to enable the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\nWhether to use the colors assigned to the body in the service. The default\nis None, in which case the ansys.geometry.core.USE_SERVICE_COLORS\nglobal setting is used.\nKeyword arguments for plotting. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nExtrude a box centered at the origin to create rectangular body and\nplot it:\nPlot the body and color each face individually:\nIntersect two (or more) bodies.\nBody to intersect with.\nWhether to retain the intersected body or not.\nIf the bodies do not intersect.\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe intersected body is retained.\nSubtract two (or more) bodies.\nBody to subtract from the self parameter.\nWhether to retain the subtracted body or not.\nIf the subtraction results in an empty (complete) subtraction.\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe subtracted body is retained.\nUnite two (or more) bodies.\nBody to unite with the self parameter.\nWhether to retain the united body or not.\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe united body is retained.\nRepresent the Body as a string.\nMethod detail\nBody\nmethod\nAny\nMaterial\nMaterial\nQuantity\nMidSurfaceOffsetType\npython:tuple\npython:list\nEdge\npython:list\nFace\nTrue\npython:list\nFace\nonly_one_curve\nproject_curves()\nimprint_curves()\nTrue\npython:list\nFace\nonly_one_curve\npython:str\npython:tuple\npython:float\npython:float\npython:float\npython:None\npython:None\nCollisionType\nBody\npython:False\nFalse\nTrue\nPolyData\nMultiBlock\npyvista.PolyData\nmerge=True\nReal\nTrue\nFalse\nFace\nIterable\nFace\nReal\nTrue\nFalse\npython:True\nTrue\nTrue\nFalse\npython:str\npython:None\npython:None\nNone\nansys.tools.visualization_interface.USE_TRAME\npython:None\nNone\nansys.geometry.core.USE_SERVICE_COLORS\npython:dict\npython:None\nPlotter.add_mesh\nBody\npython:False\nValueError\nself\nother\nkeep_other\nTrue\nBody\nself\npython:False\nValueError\nself\nother\nkeep_other\nTrue\nBody\nself\npython:False\nself\nother\nkeep_other\nTrue\nBody"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.reset_tessellation_cache",
        "title": "Body > Method detail > reset_tessellation_cache",
        "section": "Method detail > reset_tessellation_cache",
        "text": "Body.reset_tessellation_cache()\n\nDecorate Body methods that require a tessellation cache update.\n\nParameters\n\nfunc\n\nmethod\n\nMethod to call.\n\nReturns\n\nAny\n\nOutput of the method, if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.assign_material",
        "title": "Body > Method detail > assign_material",
        "section": "Method detail > assign_material",
        "text": "Body.assign_material(material: ansys.geometry.core.materials.material.Material) -> None\n\nAssign a material against the active design.\n\nParameters\n\nmaterial\n\nMaterial\n\nSource material data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.get_assigned_material",
        "title": "Body > Method detail > get_assigned_material",
        "section": "Method detail > get_assigned_material",
        "text": "Body.get_assigned_material() -> ansys.geometry.core.materials.material.Material\n\nGet the assigned material of the body.\n\nReturns\n\nMaterial\n\nMaterial assigned to the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.add_midsurface_thickness",
        "title": "Body > Method detail > add_midsurface_thickness",
        "section": "Method detail > add_midsurface_thickness",
        "text": "Body.add_midsurface_thickness(thickness: pint.Quantity) -> None\n\nAdd a mid-surface thickness to a surface body.\n\nParameters\n\nthickness\n\nQuantity\n\nThickness to assign.\n\nNotes\n\nOnly surface bodies are eligible for mid-surface thickness assignment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.add_midsurface_offset",
        "title": "Body > Method detail > add_midsurface_offset",
        "section": "Method detail > add_midsurface_offset",
        "text": "Body.add_midsurface_offset(offset: MidSurfaceOffsetType) -> None\n\nAdd a mid-surface offset to a surface body.\n\nParameters\n\noffset_type\n\nMidSurfaceOffsetType\n\nSurface offset to assign.\n\nNotes\n\nOnly surface bodies are eligible for mid-surface offset assignment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.imprint_curves",
        "title": "Body > Method detail > imprint_curves",
        "section": "Method detail > imprint_curves",
        "text": "Body.imprint_curves(faces: list[ansys.geometry.core.designer.face.Face], sketch: ansys.geometry.core.sketch.sketch.Sketch) -> tuple[list[ansys.geometry.core.designer.edge.Edge], list[ansys.geometry.core.designer.face.Face]]\n\nImprint all specified geometries onto specified faces of the body.\n\nParameters\n\nfaces: list[Face]\n\nlist of faces to imprint the curves of the sketch onto.\n\nsketch: Sketch\n\nAll curves to imprint on the faces.\n\nReturns\n\npython:tuple[python:list[Edge], python:list[Face]]\n\nAll impacted edges and faces from the imprint operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.project_curves",
        "title": "Body > Method detail > project_curves",
        "section": "Method detail > project_curves",
        "text": "Body.project_curves(direction: ansys.geometry.core.math.vector.UnitVector3D, sketch: ansys.geometry.core.sketch.sketch.Sketch, closest_face: bool, only_one_curve: bool = False) -> list[ansys.geometry.core.designer.face.Face]\n\nProject all specified geometries onto the body.\n\nParameters\n\ndirection: UnitVector3D\n\nDirection of the projection.\n\nsketch: Sketch\n\nAll curves to project on the body.\n\nclosest_face: bool\n\nWhether to target the closest face with the projection.\n\nonly_one_curve: bool, default: False\n\nWhether to project only one curve of the entire sketch. When\nTrue, only one curve is projected.\n\nReturns\n\npython:list[Face]\n\nAll faces from the project curves operation.\n\nNotes\n\nThe only_one_curve parameter allows you to optimize the server call because\nprojecting curves is an expensive operation. This reduces the workload on the\nserver side.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.imprint_projected_curves",
        "title": "Body > Method detail > imprint_projected_curves",
        "section": "Method detail > imprint_projected_curves",
        "text": "Body.imprint_projected_curves(direction: ansys.geometry.core.math.vector.UnitVector3D, sketch: ansys.geometry.core.sketch.sketch.Sketch, closest_face: bool, only_one_curve: bool = False) -> list[ansys.geometry.core.designer.face.Face]\n\nProject and imprint specified geometries onto the body.\n\nThis method combines the project_curves() and imprint_curves() method into\none method. It has higher performance than calling them back-to-back when dealing\nwith many curves. Because it is a specialized function, this method only returns\nthe faces (and not the edges) from the imprint operation.\n\nParameters\n\ndirection: UnitVector3D\n\nDirection of the projection.\n\nsketch: Sketch\n\nAll curves to project on the body.\n\nclosest_face: bool\n\nWhether to target the closest face with the projection.\n\nonly_one_curve: bool, default: False\n\nWhether to project only one curve of the entire sketch. When\nTrue, only one curve is projected.\n\nReturns\n\npython:list[Face]\n\nAll imprinted faces from the operation.\n\nNotes\n\nThe only_one_curve parameter allows you to optimize the server call because\nprojecting curves is an expensive operation. This reduces the workload on the\nserver side.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.set_name",
        "title": "Body > Method detail > set_name",
        "section": "Method detail > set_name",
        "text": "Body.set_name(name: str) -> None\n\nSet the name of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.set_fill_style",
        "title": "Body > Method detail > set_fill_style",
        "section": "Method detail > set_fill_style",
        "text": "Body.set_fill_style(fill_style: FillStyle) -> None\n\nSet the fill style of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.set_suppressed",
        "title": "Body > Method detail > set_suppressed",
        "section": "Method detail > set_suppressed",
        "text": "Body.set_suppressed(suppressed: bool) -> None\n\nSet the body suppression state.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.set_color",
        "title": "Body > Method detail > set_color",
        "section": "Method detail > set_color",
        "text": "Body.set_color(color: str | tuple[float, float, float]) -> None\n\nSet the color of the body.\n\nParameters\n\ncolor\n\npython:str | python:tuple[python:float, python:float, python:float]\n\nColor to set the body to. This can be a string representing a color name\nor a tuple of RGB values in the range [0, 1] (RGBA) or [0, 255] (pure RGB).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.translate",
        "title": "Body > Method detail > translate",
        "section": "Method detail > translate",
        "text": "Body.translate(direction: ansys.geometry.core.math.vector.UnitVector3D, distance: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real) -> None\n\nTranslate the body in a specified direction and distance.\n\nParameters\n\ndirection: UnitVector3D\n\nDirection of the translation.\n\ndistance: ~pint.Quantity | Distance | Real\n\nDistance (magnitude) of the translation.\n\nReturns\n\npython:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.rotate",
        "title": "Body > Method detail > rotate",
        "section": "Method detail > rotate",
        "text": "Body.rotate(axis_origin: ansys.geometry.core.math.point.Point3D, axis_direction: ansys.geometry.core.math.vector.UnitVector3D, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real) -> None\n\nRotate the geometry body around the specified axis by a given angle.\n\nParameters\n\naxis_origin: Point3D\n\nOrigin of the rotational axis.\n\naxis_direction: UnitVector3D\n\nThe axis of rotation.\n\nangle: ~pint.Quantity | Angle | Real\n\nAngle (magnitude) of the rotation.\n\nReturns\n\npython:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.scale",
        "title": "Body > Method detail > scale",
        "section": "Method detail > scale",
        "text": "Body.scale(value: ansys.geometry.core.typing.Real) -> None\n\nScale the geometry body by the given value.\n\nParameters\n\nvalue: Real\n\nValue to scale the body by.\n\nNotes\n\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.map",
        "title": "Body > Method detail > map",
        "section": "Method detail > map",
        "text": "Body.map(frame: ansys.geometry.core.math.frame.Frame) -> None\n\nMap the geometry body to the new specified frame.\n\nParameters\n\nframe: Frame\n\nStructure defining the orientation of the body.\n\nNotes\n\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.mirror",
        "title": "Body > Method detail > mirror",
        "section": "Method detail > mirror",
        "text": "Body.mirror(plane: ansys.geometry.core.math.plane.Plane) -> None\n\nMirror the geometry body across the specified plane.\n\nParameters\n\nplane: Plane\n\nRepresents the mirror.\n\nNotes\n\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.get_collision",
        "title": "Body > Method detail > get_collision",
        "section": "Method detail > get_collision",
        "text": "Body.get_collision(body: Body) -> CollisionType\n\nGet the collision state between bodies.\n\nParameters\n\nbody: Body\n\nObject that the collision state is checked with.\n\nReturns\n\nCollisionType\n\nEnum that defines the collision state between bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.copy",
        "title": "Body > Method detail > copy",
        "section": "Method detail > copy",
        "text": "Body.copy(parent: ansys.geometry.core.designer.component.Component, name: str = None) -> Body\n\nCreate a copy of the body under the specified parent.\n\nParameters\n\nparent: Component\n\nParent component to place the new body under within the design assembly.\n\nname: str\n\nName to give the new body.\n\nReturns\n\nBody\n\nCopy of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.tessellate",
        "title": "Body > Method detail > tessellate",
        "section": "Method detail > tessellate",
        "text": "Body.tessellate(merge: bool = False) -> pyvista.PolyData | pyvista.MultiBlock\n\nTessellate the body and return the geometry as triangles.\n\nParameters\n\nmerge\n\nbool, default: python:False\n\nWhether to merge the body into a single mesh. When False (default), the\nnumber of triangles are preserved and only the topology is merged.\nWhen True, the individual faces of the tessellation are merged.\n\nReturns\n\nPolyData, MultiBlock\n\nMerged pyvista.PolyData if merge=True or a composite dataset.\n\nExamples\n\nExtrude a box centered at the origin to create a rectangular body and\ntessellate it:\n\n>>> from ansys.geometry.core.misc.units import UNITS as u\n>>> from ansys.geometry.core.sketch import Sketch\n>>> from ansys.geometry.core.math import Plane, Point2D, Point3D, UnitVector3D\n>>> from ansys.geometry.core import Modeler\n>>> modeler = Modeler()\n>>> origin = Point3D([0, 0, 0])\n>>> plane = Plane(origin, direction_x=[1, 0, 0], direction_y=[0, 0, 1])\n>>> sketch = Sketch(plane)\n>>> box = sketch.box(Point2D([2, 0]), 4, 4)\n>>> design = modeler.create_design(\"my-design\")\n>>> my_comp = design.add_component(\"my-comp\")\n>>> body = my_comp.extrude_sketch(\"my-sketch\", sketch, 1 * u.m)\n>>> blocks = body.tessellate()\n>>> blocks\n>>> MultiBlock(0x7F94EC757460)\n     N Blocks:  6\n     X Bounds:  0.000, 4.000\n     Y Bounds:  -1.000, 0.000\n     Z Bounds:  -0.500, 4.500\n\nMerge the body:\n\n>>> mesh = body.tessellate(merge=True)\n>>> mesh\nPolyData (0x7f94ec75f3a0)\n  N Cells:      12\n  N Points:     24\n  X Bounds:     0.000e+00, 4.000e+00\n  Y Bounds:     -1.000e+00, 0.000e+00\n  Z Bounds:     -5.000e-01, 4.500e+00\n  N Arrays:     0\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.shell_body",
        "title": "Body > Method detail > shell_body",
        "section": "Method detail > shell_body",
        "text": "Body.shell_body(offset: ansys.geometry.core.typing.Real) -> bool\n\nShell the body to the thickness specified.\n\nParameters\n\noffset\n\nReal\n\nShell thickness.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.remove_faces",
        "title": "Body > Method detail > remove_faces",
        "section": "Method detail > remove_faces",
        "text": "Body.remove_faces(selection: ansys.geometry.core.designer.face.Face | collections.abc.Iterable[ansys.geometry.core.designer.face.Face], offset: ansys.geometry.core.typing.Real) -> bool\n\nShell by removing a given set of faces.\n\nParameters\n\nselection\n\nFace | Iterable[Face]\n\nFace or faces to be removed.\n\noffset\n\nReal\n\nShell thickness.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.plot",
        "title": "Body > Method detail > plot",
        "section": "Method detail > plot",
        "text": "Body.plot(merge: bool = True, screenshot: str | None = None, use_trame: bool | None = None, use_service_colors: bool | None = None, **plotting_options: dict | None) -> None\n\nPlot the body.\n\nParameters\n\nmerge\n\nbool, default: python:True\n\nWhether to merge the body into a single mesh. Performance improved when True.\nWhen True (default), the individual faces of the tessellation are merged.\nWhen False, the number of triangles are preserved and only the topology\nis merged.\n\nscreenshot\n\npython:str, default: python:None\n\nPath for saving a screenshot of the image that is being represented.\n\nuse_trame\n\nbool, default: python:None\n\nWhether to enable the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\n\nuse_service_colors\n\nbool, default: python:None\n\nWhether to use the colors assigned to the body in the service. The default\nis None, in which case the ansys.geometry.core.USE_SERVICE_COLORS\nglobal setting is used.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments for plotting. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\nExamples\n\nExtrude a box centered at the origin to create rectangular body and\nplot it:\n\n>>> from ansys.geometry.core.misc.units import UNITS as u\n>>> from ansys.geometry.core.sketch import Sketch\n>>> from ansys.geometry.core.math import Plane, Point2D, Point3D, UnitVector3D\n>>> from ansys.geometry.core import Modeler\n>>> modeler = Modeler()\n>>> origin = Point3D([0, 0, 0])\n>>> plane = Plane(origin, direction_x=[1, 0, 0], direction_y=[0, 0, 1])\n>>> sketch = Sketch(plane)\n>>> box = sketch.box(Point2D([2, 0]), 4, 4)\n>>> design = modeler.create_design(\"my-design\")\n>>> mycomp = design.add_component(\"my-comp\")\n>>> body = mycomp.extrude_sketch(\"my-sketch\", sketch, 1 * u.m)\n>>> body.plot()\n\nPlot the body and color each face individually:\n\n>>> body.plot(multi_colors=True)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.intersect",
        "title": "Body > Method detail > intersect",
        "section": "Method detail > intersect",
        "text": "Body.intersect(other: Body | collections.abc.Iterable[Body], keep_other: bool = False) -> None\n\nIntersect two (or more) bodies.\n\nParameters\n\nother\n\nBody\n\nBody to intersect with.\n\nkeep_other\n\nbool, default: python:False\n\nWhether to retain the intersected body or not.\n\nRaises\n\nValueError\n\nIf the bodies do not intersect.\n\nNotes\n\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe intersected body is retained.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.subtract",
        "title": "Body > Method detail > subtract",
        "section": "Method detail > subtract",
        "text": "Body.subtract(other: Body | collections.abc.Iterable[Body], keep_other: bool = False) -> None\n\nSubtract two (or more) bodies.\n\nParameters\n\nother\n\nBody\n\nBody to subtract from the self parameter.\n\nkeep_other\n\nbool, default: python:False\n\nWhether to retain the subtracted body or not.\n\nRaises\n\nValueError\n\nIf the subtraction results in an empty (complete) subtraction.\n\nNotes\n\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe subtracted body is retained.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.unite",
        "title": "Body > Method detail > unite",
        "section": "Method detail > unite",
        "text": "Body.unite(other: Body | collections.abc.Iterable[Body], keep_other: bool = False) -> None\n\nUnite two (or more) bodies.\n\nParameters\n\nother\n\nBody\n\nBody to unite with the self parameter.\n\nkeep_other\n\nbool, default: python:False\n\nWhether to retain the united body or not.\n\nNotes\n\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe united body is retained.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/Body",
        "href": "api/ansys/geometry/core/designer/body/Body.html#Body.__repr__",
        "title": "Body > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Body.__repr__() -> str\n\nRepresent the Body as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/index",
        "href": "api/ansys/geometry/core/sketch/slot/index.html#the-slotpy-module",
        "title": "The slot.py module",
        "section": "The slot.py module",
        "text": "The slot.py module\nslot.py"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/index",
        "href": "api/ansys/geometry/core/sketch/slot/index.html#summary",
        "title": "The slot.py module > Summary",
        "section": "Summary",
        "text": "Slot\nProvides for modeling a 2D slot.\nSummary\nSlot"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/index",
        "href": "api/ansys/geometry/core/sketch/slot/index.html#description",
        "title": "The slot.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a slot.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/index",
        "href": "api/ansys/geometry/core/designer/designpoint/index.html#the-designpointpy-module",
        "title": "The designpoint.py module",
        "section": "The designpoint.py module",
        "text": "The designpoint.py module\ndesignpoint.py"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/index",
        "href": "api/ansys/geometry/core/designer/designpoint/index.html#summary",
        "title": "The designpoint.py module > Summary",
        "section": "Summary",
        "text": "DesignPoint\nProvides for creating design points in components.\nSummary\nDesignPoint"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/designpoint/index",
        "href": "api/ansys/geometry/core/designer/designpoint/index.html#description",
        "title": "The designpoint.py module > Description",
        "section": "Description",
        "text": "Module for creating and managing design points.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/index",
        "href": "api/ansys/geometry/core/designer/geometry_commands/index.html#the-geometry_commandspy-module",
        "title": "The geometry_commands.py module",
        "section": "The geometry_commands.py module",
        "text": "The geometry_commands.py module\ngeometry_commands.py"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/index",
        "href": "api/ansys/geometry/core/designer/geometry_commands/index.html#summary",
        "title": "The geometry_commands.py module > Summary",
        "section": "Summary",
        "text": "GeometryCommands\nProvides geometry commands for PyAnsys Geometry.\nExtrudeType\nProvides values for extrusion types.\nOffsetMode\nProvides values for offset modes during extrusions.\nFillPatternType\nProvides values for types of fill patterns.\nSummary\nGeometryCommands\nExtrudeType\nOffsetMode\nFillPatternType"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/index",
        "href": "api/ansys/geometry/core/designer/geometry_commands/index.html#description",
        "title": "The geometry_commands.py module > Description",
        "section": "Description",
        "text": "Provides tools for pulling geometry.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#modeler",
        "title": "Modeler",
        "section": "Modeler",
        "text": "Provides for interacting with an open session of the Geometry service.\nHost where the server is running.\nPort number where the server is running.\ngRPC channel for server communication.\nCorresponding remote instance when the Geometry service\nis launched using PyPIM. This instance\nis deleted when the GrpcClient.close\nmethod is called.\nCorresponding local Docker instance when the Geometry service is launched using the\nlaunch_docker_modeler\nmethod. This instance is deleted when the\nGrpcClient.close\nmethod is called.\nCorresponding local product instance when the product (Discovery or SpaceClaim)\nis launched through the launch_modeler_with_geometry_service(),\nlaunch_modeler_with_discovery() or the launch_modeler_with_spaceclaim()\ninterface. This instance will be deleted\nwhen the GrpcClient.close\nmethod is called.\nTime in seconds for trying to achieve the connection.\nLogging level to apply to the client.\nFile to output the log to, if requested.\nModeler\nModeler\npython:str\nDEFAULT_HOST\npython:str\npython:int\nDEFAULT_PORT\nChannel\npython:None\nansys.platform.instancemanagement.Instance\npython:None\nGrpcClient.close\nLocalDockerInstance\npython:None\nlaunch_docker_modeler\nGrpcClient.close\nProductInstance\npython:None\nlaunch_modeler_with_geometry_service()\nlaunch_modeler_with_discovery()\nlaunch_modeler_with_spaceclaim()\nGrpcClient.close\nReal\npython:int\nINFO\npython:str\nPath\npython:None"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#ansys.geometry.core.modeler.Modeler",
        "title": "Modeler > Modeler > Modeler",
        "section": "Modeler > Modeler",
        "text": "class ansys.geometry.core.modeler.Modeler(host: str = DEFAULT_HOST, port: str | int = DEFAULT_PORT, channel: grpc.Channel | None = None, remote_instance: ansys.platform.instancemanagement.Instance | None = None, docker_instance: ansys.geometry.core.connection.docker_instance.LocalDockerInstance | None = None, product_instance: ansys.geometry.core.connection.product_instance.ProductInstance | None = None, timeout: ansys.geometry.core.typing.Real = 120, logging_level: int = logging.INFO, logging_file: pathlib.Path | str | None = None, backend_type: ansys.geometry.core.connection.backend.BackendType | None = None)\n\nProvides for interacting with an open session of the Geometry service.\n\nParameters\n\nhost\n\npython:str,  default: DEFAULT_HOST\n\nHost where the server is running.\n\nport\n\npython:str | python:int, default: DEFAULT_PORT\n\nPort number where the server is running.\n\nchannel\n\nChannel, default: python:None\n\ngRPC channel for server communication.\n\nremote_instance\n\nansys.platform.instancemanagement.Instance, default: python:None\n\nCorresponding remote instance when the Geometry service\nis launched using PyPIM. This instance\nis deleted when the GrpcClient.close\nmethod is called.\n\ndocker_instance\n\nLocalDockerInstance, default: python:None\n\nCorresponding local Docker instance when the Geometry service is launched using the\nlaunch_docker_modeler\nmethod. This instance is deleted when the\nGrpcClient.close\nmethod is called.\n\nproduct_instance\n\nProductInstance, default: python:None\n\nCorresponding local product instance when the product (Discovery or SpaceClaim)\nis launched through the launch_modeler_with_geometry_service(),\nlaunch_modeler_with_discovery() or the launch_modeler_with_spaceclaim()\ninterface. This instance will be deleted\nwhen the GrpcClient.close\nmethod is called.\n\ntimeout\n\nReal, default: 120\n\nTime in seconds for trying to achieve the connection.\n\nlogging_level\n\npython:int, default: INFO\n\nLogging level to apply to the client.\n\nlogging_file\n\npython:str, Path, default: python:None\n\nFile to output the log to, if requested.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#overview",
        "title": "Modeler > Overview",
        "section": "Overview",
        "text": "create_design\nInitialize a new design with the connected client.\nget_active_design\nGet the active design on the modeler object.\nread_existing_design\nRead the existing design on the service with the connected client.\nclose\nAccess the client’s close method.\nexit\nAccess the client’s close method.\nopen_file\nOpen a file.\nrun_discovery_script_file\nRun a Discovery script file.\nget_service_logs\nGet the service logs.\nclient\nModeler instance client.\ndesign\nRetrieve the design within the modeler workspace.\ndesigns\nRetrieve the design within the modeler workspace.\nrepair_tools\nAccess to repair tools.\nprepare_tools\nAccess to prepare tools.\nmeasurement_tools\nAccess to measurement tools.\ngeometry_commands\nAccess to geometry commands.\nunsupported\nAccess to unsupported commands.\n__repr__\nRepresent the modeler as a string.\nOverview\ncreate_design\nget_active_design\nread_existing_design\nclose\nexit\nopen_file\nrun_discovery_script_file\nget_service_logs\nclient\nModeler\ndesign\ndesigns\nrepair_tools\nprepare_tools\nmeasurement_tools\ngeometry_commands\nunsupported\n__repr__"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#import-detail",
        "title": "Modeler > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#property-detail",
        "title": "Modeler > Property detail",
        "section": "Property detail",
        "text": "Modeler instance client.\nRetrieve the design within the modeler workspace.\nRetrieve the design within the modeler workspace.\nThis method is deprecated. Use the design() property instead.\nAccess to repair tools.\nAccess to prepare tools.\nAccess to measurement tools.\nAccess to geometry commands.\nAccess to unsupported commands.\nProperty detail\nModeler\ndesign()"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.client",
        "title": "Modeler > Property detail > client",
        "section": "Property detail > client",
        "text": "property Modeler.client: ansys.geometry.core.connection.client.GrpcClient\n\nModeler instance client.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.design",
        "title": "Modeler > Property detail > design",
        "section": "Property detail > design",
        "text": "property Modeler.design: ansys.geometry.core.designer.design.Design\n\nRetrieve the design within the modeler workspace.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.designs",
        "title": "Modeler > Property detail > designs",
        "section": "Property detail > designs",
        "text": "property Modeler.designs: dict[str, ansys.geometry.core.designer.design.Design]\n\nRetrieve the design within the modeler workspace.\n\nNotes\n\nThis method is deprecated. Use the design() property instead.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.repair_tools",
        "title": "Modeler > Property detail > repair_tools",
        "section": "Property detail > repair_tools",
        "text": "property Modeler.repair_tools: ansys.geometry.core.tools.repair_tools.RepairTools\n\nAccess to repair tools.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.prepare_tools",
        "title": "Modeler > Property detail > prepare_tools",
        "section": "Property detail > prepare_tools",
        "text": "property Modeler.prepare_tools: ansys.geometry.core.tools.prepare_tools.PrepareTools\n\nAccess to prepare tools.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.measurement_tools",
        "title": "Modeler > Property detail > measurement_tools",
        "section": "Property detail > measurement_tools",
        "text": "property Modeler.measurement_tools: ansys.geometry.core.tools.measurement_tools.MeasurementTools\n\nAccess to measurement tools.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.geometry_commands",
        "title": "Modeler > Property detail > geometry_commands",
        "section": "Property detail > geometry_commands",
        "text": "property Modeler.geometry_commands: ansys.geometry.core.designer.geometry_commands.GeometryCommands\n\nAccess to geometry commands.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.unsupported",
        "title": "Modeler > Property detail > unsupported",
        "section": "Property detail > unsupported",
        "text": "property Modeler.unsupported: ansys.geometry.core.tools.unsupported.UnsupportedCommands\n\nAccess to unsupported commands.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#method-detail",
        "title": "Modeler > Method detail",
        "section": "Method detail",
        "text": "Initialize a new design with the connected client.\nName for the new design.\nDesign object created on the server.\nGet the active design on the modeler object.\nWhether to sync the active design with the remote service. If set to False,\nthe active design may be out-of-sync with the remote service. This is useful\nwhen the active design is known to be up-to-date.\nDesign object already existing on the modeler.\nRead the existing design on the service with the connected client.\nDesign object already existing on the server.\nAccess the client’s close method.\nWhether to close the design before closing the client.\nAccess the client’s close method.\nWhether to close the design before closing the client.\nThis method is calling the same method as\nclose().\nOpen a file.\nThis method imports a design into the service. On Windows, .scdocx\nand HOOPS Exchange formats are supported. On Linux, only the .scdocx\nformat is supported.\nIf the file is a shattered assembly with external references, the whole containing folder\nwill need to be uploaded. Ensure proper folder structure in order to prevent the uploading\nof unnecessary files.\nPath of the file to open. The extension of the file must be included.\nTrue if the service is running on a remote machine. If service is running on the local\nmachine, set to False, as there is no reason to upload the file.\nImport options that toggle certain features when opening a file.\nNewly imported design.\nRepresent the modeler as a string.\nRun a Discovery script file.\nIf arguments are passed to the script, they must be in the form of a dictionary.\nOn the server side, the script will receive the arguments as a dictionary of strings,\nunder the variable name argsDict. For example, if the script is called with the\narguments run_discovery_script_file(..., script_args = {\"length\": \"20\"}, ...),\nthe script will receive the dictionary argsDict with the key-value pair\n{\"length\": \"20\"}.\nIf an output is expected from the script, it will be returned as a dictionary of\nstrings. The keys and values of the dictionary are the variables and their values\nthat the script returns. However, it is necessary that the script creates a\ndictionary called result with the variables and their values that are expected\nto be returned. For example, if the script is expected to return the number of bodies\nin the design, the script should create a dictionary called result with the\nkey-value pair {\"numBodies\": numBodies}, where numBodies is the number of\nbodies in the design.\nThe implied API version of the script should match the API version of the running\nGeometry Service. DMS API versions 24.1 and later are supported. DMS is a\nWindows-based modeling service that has been containerized to ease distribution,\nexecution, and remotability operations.\nPath of the file. The extension of the file must be included.\nArguments to pass to the script. By default, None.\nWhether to refresh the current design from the service. When the script\nis expected to modify the existing design, set this to True to retrieve\nup-to-date design data. When this is set to False (default) and the\nscript modifies the current design, the design may be out-of-sync. By default,\nFalse.\nThe scripting API version to use. For example, version 24.1 can be passed as\nan integer 241, a string “241” or using the\nansys.geometry.core.connection.backend.ApiVersions enum class.\nBy default, None. When specified, the service will attempt to run the script with\nthe specified API version. If the API version is not supported, the service will raise\nan error. If you are using Discovery or SpaceClaim, the product will determine the API\nversion to use, so there is no need to specify this parameter.\nValues returned from the script.\nUp-to-date current design. This is only returned if import_design=True.\nIf the Discovery script fails to run. Otherwise, assume that the script\nran successfully.\nThe Ansys Geometry Service only supports scripts that are of the\nsame version as the running service. Any api_version input will\nbe ignored.\nGet the service logs.\nFlag indicating whether all logs should be retrieved. By default,\nonly the current logs are retrieved.\nFlag indicating whether the logs should be dumped to a file.\nBy default, the logs are not dumped to a file.\nName of the folder where the logs should be dumped. This parameter\nis only used if the dump_to_file parameter is set to True.\nService logs as a string. This is returned if the dump_to_file parameter\nis set to False.\nDictionary containing the logs. The keys are the logs names,\nand the values are the logs as strings. This is returned if the all_logs\nparameter is set to True and the dump_to_file parameter\nis set to False.\nPath to the folder containing the logs (if the all_logs\nparameter is set to True) or the path to the log file (if only\nthe current logs are retrieved). The dump_to_file parameter\nmust be set to True.\nMethod detail\npython:str\nDesign\npython:True\nDesign\nDesign\npython:True\npython:True\nclose()\n.scdocx\n.scdocx\npython:str\nPath\nImportOptions\nDesign\nargsDict\nrun_discovery_script_file(..., script_args = {\"length\": \"20\"}, ...)\nargsDict\n{\"length\": \"20\"}\nresult\nresult\n{\"numBodies\": numBodies}\nnumBodies\npython:str\nPath\npython:dict\npython:str\npython:str\nNone\nTrue\nFalse\nFalse\npython:int\npython:str\nApiVersions\noptional\nansys.geometry.core.connection.backend.ApiVersions\nNone\npython:dict\npython:str\npython:str\nDesign\noptional\nimport_design=True\nGeometryRuntimeError\napi_version\npython:False\npython:False\npython:str\nPath\npython:None\npython:None\ndump_to_file\nTrue\npython:str\ndump_to_file\nFalse\npython:dict\npython:str\npython:str\nall_logs\nTrue\ndump_to_file\nFalse\nPath\nall_logs\nTrue\ndump_to_file\nTrue"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.create_design",
        "title": "Modeler > Method detail > create_design",
        "section": "Method detail > create_design",
        "text": "Modeler.create_design(name: str) -> ansys.geometry.core.designer.design.Design\n\nInitialize a new design with the connected client.\n\nParameters\n\nname\n\npython:str\n\nName for the new design.\n\nReturns\n\nDesign\n\nDesign object created on the server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.get_active_design",
        "title": "Modeler > Method detail > get_active_design",
        "section": "Method detail > get_active_design",
        "text": "Modeler.get_active_design(sync_with_backend: bool = True) -> ansys.geometry.core.designer.design.Design\n\nGet the active design on the modeler object.\n\nParameters\n\nsync_with_backend\n\nbool, default: python:True\n\nWhether to sync the active design with the remote service. If set to False,\nthe active design may be out-of-sync with the remote service. This is useful\nwhen the active design is known to be up-to-date.\n\nReturns\n\nDesign\n\nDesign object already existing on the modeler.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.read_existing_design",
        "title": "Modeler > Method detail > read_existing_design",
        "section": "Method detail > read_existing_design",
        "text": "Modeler.read_existing_design() -> ansys.geometry.core.designer.design.Design\n\nRead the existing design on the service with the connected client.\n\nReturns\n\nDesign\n\nDesign object already existing on the server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.close",
        "title": "Modeler > Method detail > close",
        "section": "Method detail > close",
        "text": "Modeler.close(close_design: bool = True) -> None\n\nAccess the client’s close method.\n\nParameters\n\nclose_design\n\nbool, default: python:True\n\nWhether to close the design before closing the client.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.exit",
        "title": "Modeler > Method detail > exit",
        "section": "Method detail > exit",
        "text": "Modeler.exit(close_design: bool = True) -> None\n\nAccess the client’s close method.\n\nParameters\n\nclose_design\n\nbool, default: python:True\n\nWhether to close the design before closing the client.\n\nNotes\n\nThis method is calling the same method as\nclose().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.open_file",
        "title": "Modeler > Method detail > open_file",
        "section": "Method detail > open_file",
        "text": "Modeler.open_file(file_path: str | pathlib.Path, upload_to_server: bool = True, import_options: ansys.geometry.core.misc.options.ImportOptions = ImportOptions()) -> ansys.geometry.core.designer.design.Design\n\nOpen a file.\n\nThis method imports a design into the service. On Windows, .scdocx\nand HOOPS Exchange formats are supported. On Linux, only the .scdocx\nformat is supported.\n\nIf the file is a shattered assembly with external references, the whole containing folder\nwill need to be uploaded. Ensure proper folder structure in order to prevent the uploading\nof unnecessary files.\n\nParameters\n\nfile_path\n\npython:str, Path\n\nPath of the file to open. The extension of the file must be included.\n\nupload_to_server\n\nbool\n\nTrue if the service is running on a remote machine. If service is running on the local\nmachine, set to False, as there is no reason to upload the file.\n\nimport_options\n\nImportOptions\n\nImport options that toggle certain features when opening a file.\n\nReturns\n\nDesign\n\nNewly imported design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.__repr__",
        "title": "Modeler > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Modeler.__repr__() -> str\n\nRepresent the modeler as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.run_discovery_script_file",
        "title": "Modeler > Method detail > run_discovery_script_file",
        "section": "Method detail > run_discovery_script_file",
        "text": "Modeler.run_discovery_script_file(file_path: str | pathlib.Path, script_args: dict[str, str] | None = None, import_design: bool = False, api_version: int | str | ansys.geometry.core.connection.backend.ApiVersions = None) -> tuple[dict[str, str], ansys.geometry.core.designer.design.Design | None]\n\nRun a Discovery script file.\n\nIf arguments are passed to the script, they must be in the form of a dictionary.\nOn the server side, the script will receive the arguments as a dictionary of strings,\nunder the variable name argsDict. For example, if the script is called with the\narguments run_discovery_script_file(..., script_args = {\"length\": \"20\"}, ...),\nthe script will receive the dictionary argsDict with the key-value pair\n{\"length\": \"20\"}.\n\nIf an output is expected from the script, it will be returned as a dictionary of\nstrings. The keys and values of the dictionary are the variables and their values\nthat the script returns. However, it is necessary that the script creates a\ndictionary called result with the variables and their values that are expected\nto be returned. For example, if the script is expected to return the number of bodies\nin the design, the script should create a dictionary called result with the\nkey-value pair {\"numBodies\": numBodies}, where numBodies is the number of\nbodies in the design.\n\nThe implied API version of the script should match the API version of the running\nGeometry Service. DMS API versions 24.1 and later are supported. DMS is a\nWindows-based modeling service that has been containerized to ease distribution,\nexecution, and remotability operations.\n\nParameters\n\nfile_path\n\npython:str | Path\n\nPath of the file. The extension of the file must be included.\n\nscript_args\n\npython:dict[python:str, python:str], optional.\n\nArguments to pass to the script. By default, None.\n\nimport_design\n\nbool, optional.\n\nWhether to refresh the current design from the service. When the script\nis expected to modify the existing design, set this to True to retrieve\nup-to-date design data. When this is set to False (default) and the\nscript modifies the current design, the design may be out-of-sync. By default,\nFalse.\n\napi_version\n\npython:int | python:str | ApiVersions, optional\n\nThe scripting API version to use. For example, version 24.1 can be passed as\nan integer 241, a string “241” or using the\nansys.geometry.core.connection.backend.ApiVersions enum class.\nBy default, None. When specified, the service will attempt to run the script with\nthe specified API version. If the API version is not supported, the service will raise\nan error. If you are using Discovery or SpaceClaim, the product will determine the API\nversion to use, so there is no need to specify this parameter.\n\nReturns\n\npython:dict[python:str, python:str]\n\nValues returned from the script.\n\nDesign, optional\n\nUp-to-date current design. This is only returned if import_design=True.\n\nRaises\n\nGeometryRuntimeError\n\nIf the Discovery script fails to run. Otherwise, assume that the script\nran successfully.\n\nNotes\n\nThe Ansys Geometry Service only supports scripts that are of the\nsame version as the running service. Any api_version input will\nbe ignored.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/modeler/Modeler",
        "href": "api/ansys/geometry/core/modeler/Modeler.html#Modeler.get_service_logs",
        "title": "Modeler > Method detail > get_service_logs",
        "section": "Method detail > get_service_logs",
        "text": "Modeler.get_service_logs(all_logs: bool = False, dump_to_file: bool = False, logs_folder: str | pathlib.Path | None = None) -> str | dict[str, str] | pathlib.Path\n\nGet the service logs.\n\nParameters\n\nall_logs\n\nbool, default: python:False\n\nFlag indicating whether all logs should be retrieved. By default,\nonly the current logs are retrieved.\n\ndump_to_file\n\nbool, default: python:False\n\nFlag indicating whether the logs should be dumped to a file.\nBy default, the logs are not dumped to a file.\n\nlogs_folder\n\npython:str,  Path or python:None, default: python:None\n\nName of the folder where the logs should be dumped. This parameter\nis only used if the dump_to_file parameter is set to True.\n\nReturns\n\npython:str\n\nService logs as a string. This is returned if the dump_to_file parameter\nis set to False.\n\npython:dict[python:str, python:str]\n\nDictionary containing the logs. The keys are the logs names,\nand the values are the logs as strings. This is returned if the all_logs\nparameter is set to True and the dump_to_file parameter\nis set to False.\n\nPath\n\nPath to the folder containing the logs (if the all_logs\nparameter is set to True) or the path to the log file (if only\nthe current logs are retrieved). The dump_to_file parameter\nmust be set to True.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/Beam",
        "href": "api/ansys/geometry/core/designer/beam/Beam.html#beam",
        "title": "Beam",
        "section": "Beam",
        "text": "Represents a simplified solid body with an assigned 2D cross-section.\nThis body synchronizes to a design within a supporting Geometry service instance.\nServer-defined ID for the body.\nUser-defined label for the body.\nStart of the beam line segment.\nEnd of the beam line segment.\nBeam profile to use to create the beam.\nParent component to nest the new beam under within the design assembly.\nBeam\nBeam\npython:str\npython:str\nPoint3D\nPoint3D\nBeamProfile\nComponent"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/Beam",
        "href": "api/ansys/geometry/core/designer/beam/Beam.html#ansys.geometry.core.designer.beam.Beam",
        "title": "Beam > Beam > Beam",
        "section": "Beam > Beam",
        "text": "class ansys.geometry.core.designer.beam.Beam(id: str, start: ansys.geometry.core.math.point.Point3D, end: ansys.geometry.core.math.point.Point3D, profile: BeamProfile, parent_component: ansys.geometry.core.designer.component.Component)\n\nRepresents a simplified solid body with an assigned 2D cross-section.\n\nThis body synchronizes to a design within a supporting Geometry service instance.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the body.\n\nname\n\npython:str\n\nUser-defined label for the body.\n\nstart\n\nPoint3D\n\nStart of the beam line segment.\n\nend\n\nPoint3D\n\nEnd of the beam line segment.\n\nprofile\n\nBeamProfile\n\nBeam profile to use to create the beam.\n\nparent_component\n\nComponent\n\nParent component to nest the new beam under within the design assembly.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/Beam",
        "href": "api/ansys/geometry/core/designer/beam/Beam.html#overview",
        "title": "Beam > Overview",
        "section": "Overview",
        "text": "id\nService-defined ID of the beam.\nstart\nStart of the beam line segment.\nend\nEnd of the beam line segment.\nprofile\nBeam profile of the beam line segment.\nparent_component\nComponent node that the beam is under.\nis_alive\nFlag indicating whether the beam is still alive on the server.\n__repr__\nRepresent the beam as a string.\nOverview\nid\nstart\nend\nprofile\nparent_component\nis_alive\n__repr__"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/Beam",
        "href": "api/ansys/geometry/core/designer/beam/Beam.html#import-detail",
        "title": "Beam > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/Beam",
        "href": "api/ansys/geometry/core/designer/beam/Beam.html#property-detail",
        "title": "Beam > Property detail",
        "section": "Property detail",
        "text": "Service-defined ID of the beam.\nStart of the beam line segment.\nEnd of the beam line segment.\nBeam profile of the beam line segment.\nComponent node that the beam is under.\nFlag indicating whether the beam is still alive on the server.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/Beam",
        "href": "api/ansys/geometry/core/designer/beam/Beam.html#Beam.id",
        "title": "Beam > Property detail > id",
        "section": "Property detail > id",
        "text": "property Beam.id: str\n\nService-defined ID of the beam.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/Beam",
        "href": "api/ansys/geometry/core/designer/beam/Beam.html#Beam.start",
        "title": "Beam > Property detail > start",
        "section": "Property detail > start",
        "text": "property Beam.start: ansys.geometry.core.math.point.Point3D\n\nStart of the beam line segment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/Beam",
        "href": "api/ansys/geometry/core/designer/beam/Beam.html#Beam.end",
        "title": "Beam > Property detail > end",
        "section": "Property detail > end",
        "text": "property Beam.end: ansys.geometry.core.math.point.Point3D\n\nEnd of the beam line segment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/Beam",
        "href": "api/ansys/geometry/core/designer/beam/Beam.html#Beam.profile",
        "title": "Beam > Property detail > profile",
        "section": "Property detail > profile",
        "text": "property Beam.profile: BeamProfile\n\nBeam profile of the beam line segment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/Beam",
        "href": "api/ansys/geometry/core/designer/beam/Beam.html#Beam.parent_component",
        "title": "Beam > Property detail > parent_component",
        "section": "Property detail > parent_component",
        "text": "property Beam.parent_component: ansys.geometry.core.designer.component.Component\n\nComponent node that the beam is under.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/Beam",
        "href": "api/ansys/geometry/core/designer/beam/Beam.html#Beam.is_alive",
        "title": "Beam > Property detail > is_alive",
        "section": "Property detail > is_alive",
        "text": "property Beam.is_alive: bool\n\nFlag indicating whether the beam is still alive on the server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/Beam",
        "href": "api/ansys/geometry/core/designer/beam/Beam.html#method-detail",
        "title": "Beam > Method detail",
        "section": "Method detail",
        "text": "Represent the beam as a string.\nMethod detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/beam/Beam",
        "href": "api/ansys/geometry/core/designer/beam/Beam.html#Beam.__repr__",
        "title": "Beam > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Beam.__repr__() -> str\n\nRepresent the beam as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/Surface",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/Surface.html#surface",
        "title": "Surface",
        "section": "Surface",
        "text": "Bases: abc.ABC\nProvides the abstract base class for a 3D surface.\nSurface\nSurface\nabc.ABC"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/Surface",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/Surface.html#ansys.geometry.core.shapes.surfaces.surface.Surface",
        "title": "Surface > Surface > Surface",
        "section": "Surface > Surface",
        "text": "class ansys.geometry.core.shapes.surfaces.surface.Surface\n\nBases: abc.ABC\n\nProvides the abstract base class for a 3D surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/Surface",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/Surface.html#overview",
        "title": "Surface > Overview",
        "section": "Overview",
        "text": "parameterization\nParameterize the surface as a tuple (U and V respectively).\ncontains_param\nCheck a parameter is within the parametric range of the surface.\ncontains_point\nCheck a point is contained by the surface.\ntransformed_copy\nCreate a transformed copy of the surface.\n__eq__\nDetermine if two surfaces are equal.\nevaluate\nEvaluate the surface at the given parameter.\nproject_point\nProject a point to the surface.\ntrim\nTrim this surface by bounding it with a BoxUV.\nOverview\nparameterization\ncontains_param\ncontains_point\ntransformed_copy\n__eq__\nevaluate\nproject_point\ntrim"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/Surface",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/Surface.html#import-detail",
        "title": "Surface > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/Surface",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/Surface.html#method-detail",
        "title": "Surface > Method detail",
        "section": "Method detail",
        "text": "Parameterize the surface as a tuple (U and V respectively).\nCheck a parameter is within the parametric range of the surface.\nCheck a point is contained by the surface.\nThe point can either lie within the surface or on its boundary.\nCreate a transformed copy of the surface.\nDetermine if two surfaces are equal.\nEvaluate the surface at the given parameter.\nProject a point to the surface.\nThis method returns the evaluation at the closest point.\nTrim this surface by bounding it with a BoxUV.\nThe resulting bounded surface.\nMethod detail\nTrimmedSurface"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/Surface",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/Surface.html#Surface.parameterization",
        "title": "Surface > Method detail > parameterization",
        "section": "Method detail > parameterization",
        "text": "abstractmethod Surface.parameterization() -> tuple[ansys.geometry.core.shapes.parameterization.Parameterization, ansys.geometry.core.shapes.parameterization.Parameterization]\n\nParameterize the surface as a tuple (U and V respectively).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/Surface",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/Surface.html#Surface.contains_param",
        "title": "Surface > Method detail > contains_param",
        "section": "Method detail > contains_param",
        "text": "abstractmethod Surface.contains_param(param_uv: ansys.geometry.core.shapes.parameterization.ParamUV) -> bool\n\nCheck a parameter is within the parametric range of the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/Surface",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/Surface.html#Surface.contains_point",
        "title": "Surface > Method detail > contains_point",
        "section": "Method detail > contains_point",
        "text": "abstractmethod Surface.contains_point(point: ansys.geometry.core.math.point.Point3D) -> bool\n\nCheck a point is contained by the surface.\n\nThe point can either lie within the surface or on its boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/Surface",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/Surface.html#Surface.transformed_copy",
        "title": "Surface > Method detail > transformed_copy",
        "section": "Method detail > transformed_copy",
        "text": "abstractmethod Surface.transformed_copy(matrix: ansys.geometry.core.math.matrix.Matrix44) -> Surface\n\nCreate a transformed copy of the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/Surface",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/Surface.html#Surface.__eq__",
        "title": "Surface > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "abstractmethod Surface.__eq__(other: Surface) -> bool\n\nDetermine if two surfaces are equal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/Surface",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/Surface.html#Surface.evaluate",
        "title": "Surface > Method detail > evaluate",
        "section": "Method detail > evaluate",
        "text": "abstractmethod Surface.evaluate(parameter: ansys.geometry.core.shapes.parameterization.ParamUV) -> ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\n\nEvaluate the surface at the given parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/Surface",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/Surface.html#Surface.project_point",
        "title": "Surface > Method detail > project_point",
        "section": "Method detail > project_point",
        "text": "abstractmethod Surface.project_point(point: ansys.geometry.core.math.point.Point3D) -> ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\n\nProject a point to the surface.\n\nThis method returns the evaluation at the closest point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface/Surface",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface/Surface.html#Surface.trim",
        "title": "Surface > Method detail > trim",
        "section": "Method detail > trim",
        "text": "Surface.trim(box_uv: ansys.geometry.core.shapes.box_uv.BoxUV) -> ansys.geometry.core.shapes.surfaces.trimmed_surface.TrimmedSurface\n\nTrim this surface by bounding it with a BoxUV.\n\nReturns\n\nTrimmedSurface\n\nThe resulting bounded surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "PyAnsys Geometry is a Python client library for the Ansys Geometry service.\nGetting started"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "You can use pip to install PyAnsys Geometry.\nInstallation"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#available-modes",
        "title": "Getting started > Available modes",
        "section": "Available modes",
        "text": "This client library works with a Geometry service backend. There are several ways of\nrunning this backend, although the preferred and high-performance mode is using Docker\ncontainers. Select the option that suits your needs best.\nLaunch the Geometry service as a Docker container\nand connect to it from PyAnsys Geometry.\nLaunch the Geometry service locally on your machine\nand connect to it from PyAnsys Geometry.\nLaunch the Geometry service on a remote machine and\nconnect to it using PIM (Product Instance Manager).\nConnect to an existing Geometry service locally or remotely.\nAvailable modes"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#compatibility-with-ansys-releases",
        "title": "Getting started > Compatibility with Ansys releases",
        "section": "Compatibility with Ansys releases",
        "text": "PyAnsys Geometry continues to evolve as the Ansys products move forward. For\nmore information, see Ansys product version compatibility.\nCompatibility with Ansys releases"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#development-installation",
        "title": "Getting started > Development installation",
        "section": "Development installation",
        "text": "In case you want to support the development of PyAnsys Geometry, install the repository\nin development mode. For more information, see\nInstall package in development mode.\nDevelopment installation"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#frequently-asked-questions",
        "title": "Getting started > Frequently asked questions",
        "section": "Frequently asked questions",
        "text": "Any questions? Refer to Q&A before submitting an issue.\nFrequently asked questions"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#cylinderevaluation",
        "title": "CylinderEvaluation",
        "section": "CylinderEvaluation",
        "text": "Bases: ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\nProvides evaluation of a cylinder at given parameters.\nCylinder to evaluate.\nParameters (u, v) to evaluate the cylinder at.\nCylinderEvaluation\nCylinderEvaluation\nansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#ansys.geometry.core.shapes.surfaces.cylinder.CylinderEvaluation",
        "title": "CylinderEvaluation > CylinderEvaluation > CylinderEvaluation",
        "section": "CylinderEvaluation > CylinderEvaluation",
        "text": "class ansys.geometry.core.shapes.surfaces.cylinder.CylinderEvaluation(cylinder: Cylinder, parameter: ansys.geometry.core.shapes.parameterization.ParamUV)\n\nBases: ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\n\nProvides evaluation of a cylinder at given parameters.\n\nParameters\n\ncylinder: ~ansys.geometry.core.shapes.surfaces.cylinder.Cylinder\n\nCylinder to evaluate.\n\nparameter: ParamUV\n\nParameters (u, v) to evaluate the cylinder at.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#overview",
        "title": "CylinderEvaluation > Overview",
        "section": "Overview",
        "text": "cylinder\nCylinder being evaluated.\nparameter\nParameter that the evaluation is based upon.\nposition\nPosition of the evaluation.\nnormal\nNormal to the surface.\nu_derivative\nFirst derivative with respect to the U parameter.\nv_derivative\nFirst derivative with respect to the V parameter.\nuu_derivative\nSecond derivative with respect to the U parameter.\nuv_derivative\nSecond derivative with respect to the U and V parameters.\nvv_derivative\nSecond derivative with respect to the V parameter.\nmin_curvature\nMinimum curvature of the cylinder.\nmin_curvature_direction\nMinimum curvature direction.\nmax_curvature\nMaximum curvature of the cylinder.\nmax_curvature_direction\nMaximum curvature direction.\nOverview\ncylinder\nparameter\nposition\nnormal\nu_derivative\nv_derivative\nuu_derivative\nuv_derivative\nvv_derivative\nmin_curvature\nmin_curvature_direction\nmax_curvature\nmax_curvature_direction"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#import-detail",
        "title": "CylinderEvaluation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#property-detail",
        "title": "CylinderEvaluation > Property detail",
        "section": "Property detail",
        "text": "Cylinder being evaluated.\nParameter that the evaluation is based upon.\nPosition of the evaluation.\nPoint that lies on the cylinder at this evaluation.\nNormal to the surface.\nNormal unit vector to the cylinder at this evaluation.\nFirst derivative with respect to the U parameter.\nFirst derivative with respect to the U parameter.\nFirst derivative with respect to the V parameter.\nFirst derivative with respect to the V parameter.\nSecond derivative with respect to the U parameter.\nSecond derivative with respect to the U parameter.\nSecond derivative with respect to the U and V parameters.\nSecond derivative with respect to the U and v parameters.\nSecond derivative with respect to the V parameter.\nSecond derivative with respect to the V parameter.\nMinimum curvature of the cylinder.\nMinimum curvature of the cylinder.\nMinimum curvature direction.\nMminimum curvature direction.\nMaximum curvature of the cylinder.\nMaximum curvature of the cylinder.\nMaximum curvature direction.\nMaximum curvature direction.\nProperty detail\nPoint3D\nUnitVector3D\nVector3D\nVector3D\nVector3D\nVector3D\nVector3D\nReal\nUnitVector3D\nReal\nUnitVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#CylinderEvaluation.cylinder",
        "title": "CylinderEvaluation > Property detail > cylinder",
        "section": "Property detail > cylinder",
        "text": "property CylinderEvaluation.cylinder: Cylinder\n\nCylinder being evaluated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#CylinderEvaluation.parameter",
        "title": "CylinderEvaluation > Property detail > parameter",
        "section": "Property detail > parameter",
        "text": "property CylinderEvaluation.parameter: ansys.geometry.core.shapes.parameterization.ParamUV\n\nParameter that the evaluation is based upon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#CylinderEvaluation.position",
        "title": "CylinderEvaluation > Property detail > position",
        "section": "Property detail > position",
        "text": "property CylinderEvaluation.position: ansys.geometry.core.math.point.Point3D\n\nPosition of the evaluation.\n\nReturns\n\nPoint3D\n\nPoint that lies on the cylinder at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#CylinderEvaluation.normal",
        "title": "CylinderEvaluation > Property detail > normal",
        "section": "Property detail > normal",
        "text": "property CylinderEvaluation.normal: ansys.geometry.core.math.vector.UnitVector3D\n\nNormal to the surface.\n\nReturns\n\nUnitVector3D\n\nNormal unit vector to the cylinder at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#CylinderEvaluation.u_derivative",
        "title": "CylinderEvaluation > Property detail > u_derivative",
        "section": "Property detail > u_derivative",
        "text": "property CylinderEvaluation.u_derivative: ansys.geometry.core.math.vector.Vector3D\n\nFirst derivative with respect to the U parameter.\n\nReturns\n\nVector3D\n\nFirst derivative with respect to the U parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#CylinderEvaluation.v_derivative",
        "title": "CylinderEvaluation > Property detail > v_derivative",
        "section": "Property detail > v_derivative",
        "text": "property CylinderEvaluation.v_derivative: ansys.geometry.core.math.vector.Vector3D\n\nFirst derivative with respect to the V parameter.\n\nReturns\n\nVector3D\n\nFirst derivative with respect to the V parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#CylinderEvaluation.uu_derivative",
        "title": "CylinderEvaluation > Property detail > uu_derivative",
        "section": "Property detail > uu_derivative",
        "text": "property CylinderEvaluation.uu_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to the U parameter.\n\nReturns\n\nVector3D\n\nSecond derivative with respect to the U parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#CylinderEvaluation.uv_derivative",
        "title": "CylinderEvaluation > Property detail > uv_derivative",
        "section": "Property detail > uv_derivative",
        "text": "property CylinderEvaluation.uv_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to the U and V parameters.\n\nReturns\n\nVector3D\n\nSecond derivative with respect to the U and v parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#CylinderEvaluation.vv_derivative",
        "title": "CylinderEvaluation > Property detail > vv_derivative",
        "section": "Property detail > vv_derivative",
        "text": "property CylinderEvaluation.vv_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative with respect to the V parameter.\n\nReturns\n\nVector3D\n\nSecond derivative with respect to the V parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#CylinderEvaluation.min_curvature",
        "title": "CylinderEvaluation > Property detail > min_curvature",
        "section": "Property detail > min_curvature",
        "text": "property CylinderEvaluation.min_curvature: ansys.geometry.core.typing.Real\n\nMinimum curvature of the cylinder.\n\nReturns\n\nReal\n\nMinimum curvature of the cylinder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#CylinderEvaluation.min_curvature_direction",
        "title": "CylinderEvaluation > Property detail > min_curvature_direction",
        "section": "Property detail > min_curvature_direction",
        "text": "property CylinderEvaluation.min_curvature_direction: ansys.geometry.core.math.vector.UnitVector3D\n\nMinimum curvature direction.\n\nReturns\n\nUnitVector3D\n\nMminimum curvature direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#CylinderEvaluation.max_curvature",
        "title": "CylinderEvaluation > Property detail > max_curvature",
        "section": "Property detail > max_curvature",
        "text": "property CylinderEvaluation.max_curvature: ansys.geometry.core.typing.Real\n\nMaximum curvature of the cylinder.\n\nReturns\n\nReal\n\nMaximum curvature of the cylinder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/cylinder/CylinderEvaluation.html#CylinderEvaluation.max_curvature_direction",
        "title": "CylinderEvaluation > Property detail > max_curvature_direction",
        "section": "Property detail > max_curvature_direction",
        "text": "property CylinderEvaluation.max_curvature_direction: ansys.geometry.core.math.vector.UnitVector3D\n\nMaximum curvature direction.\n\nReturns\n\nUnitVector3D\n\nMaximum curvature direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/index.html#the-planepy-module",
        "title": "The plane.py module",
        "section": "The plane.py module",
        "text": "The plane.py module\nplane.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/index.html#summary",
        "title": "The plane.py module > Summary",
        "section": "Summary",
        "text": "PlaneSurface\nProvides 3D plane surface representation.\nPlaneEvaluation\nProvides evaluation of a plane at given parameters.\nSummary\nPlaneSurface\nPlaneEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/plane/index",
        "href": "api/ansys/geometry/core/shapes/surfaces/plane/index.html#description",
        "title": "The plane.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a plane.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tool_message/index",
        "href": "api/ansys/geometry/core/tools/repair_tool_message/index.html#the-repair_tool_messagepy-module",
        "title": "The repair_tool_message.py module",
        "section": "The repair_tool_message.py module",
        "text": "The repair_tool_message.py module\nrepair_tool_message.py"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tool_message/index",
        "href": "api/ansys/geometry/core/tools/repair_tool_message/index.html#summary",
        "title": "The repair_tool_message.py module > Summary",
        "section": "Summary",
        "text": "RepairToolMessage\nProvides return message for the repair tool methods.\nSummary\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/repair_tool_message/index",
        "href": "api/ansys/geometry/core/tools/repair_tool_message/index.html#description",
        "title": "The repair_tool_message.py module > Description",
        "section": "Description",
        "text": "Module for repair tool message.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/ReversedTrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/ReversedTrimmedCurve.html#reversedtrimmedcurve",
        "title": "ReversedTrimmedCurve",
        "section": "ReversedTrimmedCurve",
        "text": "Bases: TrimmedCurve\nRepresents a reversed trimmed curve.\nWhen a curve is reversed, its start and end points are swapped, and parameters for evaluations\nare handled to provide expected results conforming to the direction of the curve. For example,\nevaluating a trimmed curve proportionally at 0 evaluates at the start point of the curve,\nbut evaluating a reversed trimmed curve proportionally at 0 evaluates at what was previously\nthe end point of the curve but is now the start point.\nUnderlying mathematical representation of the curve.\nOriginal start point of the curve.\nOriginal end point of the curve.\nParametric interval that bounds the curve.\nLength of the curve.\ngRPC client that is required for advanced functions such as intersect_curve().\nReversedTrimmedCurve\nReversedTrimmedCurve\nTrimmedCurve\nCurve\nPoint3D\nPoint3D\nInterval\nQuantity\nGrpcClient\npython:None"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/ReversedTrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/ReversedTrimmedCurve.html#ansys.geometry.core.shapes.curves.trimmed_curve.ReversedTrimmedCurve",
        "title": "ReversedTrimmedCurve > ReversedTrimmedCurve > ReversedTrimmedCurve",
        "section": "ReversedTrimmedCurve > ReversedTrimmedCurve",
        "text": "class ansys.geometry.core.shapes.curves.trimmed_curve.ReversedTrimmedCurve(geometry: ansys.geometry.core.shapes.curves.curve.Curve, start: ansys.geometry.core.math.point.Point3D, end: ansys.geometry.core.math.point.Point3D, interval: ansys.geometry.core.shapes.parameterization.Interval, length: pint.Quantity, grpc_client: ansys.geometry.core.connection.client.GrpcClient = None)\n\nBases: TrimmedCurve\n\nRepresents a reversed trimmed curve.\n\nWhen a curve is reversed, its start and end points are swapped, and parameters for evaluations\nare handled to provide expected results conforming to the direction of the curve. For example,\nevaluating a trimmed curve proportionally at 0 evaluates at the start point of the curve,\nbut evaluating a reversed trimmed curve proportionally at 0 evaluates at what was previously\nthe end point of the curve but is now the start point.\n\nParameters\n\ngeometry\n\nCurve\n\nUnderlying mathematical representation of the curve.\n\nstart\n\nPoint3D\n\nOriginal start point of the curve.\n\nend\n\nPoint3D\n\nOriginal end point of the curve.\n\ninterval\n\nInterval\n\nParametric interval that bounds the curve.\n\nlength\n\nQuantity\n\nLength of the curve.\n\ngrpc_client\n\nGrpcClient, default: python:None\n\ngRPC client that is required for advanced functions such as intersect_curve().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/ReversedTrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/ReversedTrimmedCurve.html#overview",
        "title": "ReversedTrimmedCurve > Overview",
        "section": "Overview",
        "text": "evaluate_proportion\nEvaluate the curve at a proportional value.\nOverview\nevaluate_proportion"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/ReversedTrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/ReversedTrimmedCurve.html#import-detail",
        "title": "ReversedTrimmedCurve > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/ReversedTrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/ReversedTrimmedCurve.html#method-detail",
        "title": "ReversedTrimmedCurve > Method detail",
        "section": "Method detail",
        "text": "Evaluate the curve at a proportional value.\nA parameter of 0 corresponds to the start of the curve, while a parameter of 1\ncorresponds to the end of the curve.\nParameter in the proportional range [0,1].\nResulting curve evaluation.\nMethod detail\n0\n1\nReal\nCurveEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/ReversedTrimmedCurve",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/ReversedTrimmedCurve.html#ReversedTrimmedCurve.evaluate_proportion",
        "title": "ReversedTrimmedCurve > Method detail > evaluate_proportion",
        "section": "Method detail > evaluate_proportion",
        "text": "ReversedTrimmedCurve.evaluate_proportion(param: ansys.geometry.core.typing.Real) -> ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\n\nEvaluate the curve at a proportional value.\n\nA parameter of 0 corresponds to the start of the curve, while a parameter of 1\ncorresponds to the end of the curve.\n\nParameters\n\nparam\n\nReal\n\nParameter in the proportional range [0,1].\n\nReturns\n\nCurveEvaluation\n\nResulting curve evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#modeling-sweep-chain-and-sweep-sketch",
        "title": "Examples > Modeling: Sweep chain and sweep sketch",
        "section": "Modeling: Sweep chain and sweep sketch",
        "text": "This example shows how use the sweep_sketch() and sweep_chain() functions to create more complex extrusion profiles. You use the sweep_sketch() function with a closed sketch profile and the sweep_chain() function for an open profile.\nModeling: Sweep chain and sweep sketch\nsweep_sketch()\nsweep_chain()\nsweep_sketch()\nsweep_chain()"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#initialize-the-modeler",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Initialize the modeler",
        "section": "Initialize the modeler",
        "text": "Initialize the modeler"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#example-creating-a-donut",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Example: Creating a donut",
        "section": "Example: Creating a donut",
        "text": "The following code snippets show how to use the sweep_sketch() function to create a 3D donut shape in the Design object. The process involves initializing a sketch design for the donut, defining two circles for the profile and path, and then performing a sweep operation to generate the donut shape.\nExample: Creating a donut\nsweep_sketch()\nDesign"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#initialize-the-donut-sketch-design",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Initialize the donut sketch design",
        "section": "Initialize the donut sketch design",
        "text": "A new design sketch named “donut” is created.\nInitialize the donut sketch design"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#define-circle-parameters",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Define circle parameters",
        "section": "Define circle parameters",
        "text": "path_radius is set to 5 units, representing the radius of the circular path that the profile circle sweeps along. profile_radius is set to 2 units, representing the radius of the profile circle that sweeps along the path to create the donut body.\nDefine circle parameters\npath_radius\nprofile_radius"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#create-the-profile-circle",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Create the profile circle",
        "section": "Create the profile circle",
        "text": "A circle is created on the XZ-plane centered at the coordinates (5, 0, 0) with a radius defined by profile_radius. This circle serves as the profile or cross-sectional shape of the donut.\nCreate the profile circle\nprofile_radius"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#create-the-path-circle",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Create the path circle",
        "section": "Create the path circle",
        "text": "Another circle, representing the path along which the profile circle is swept, is created on the XY-plane centered at (0, 0, 0). The radius of this circle is defined by path_radius.\nCreate the path circle\npath_radius"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#perform-the-sweep-operation",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Perform the sweep operation",
        "section": "Perform the sweep operation",
        "text": "The sweep operation uses the profile circle and sweeps it along the path circle to create the 3D body of the donut. The result is stored in the variable body.\nPerform the sweep operation\nbody"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#example-creating-a-bowl",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Example: Creating a bowl",
        "section": "Example: Creating a bowl",
        "text": "This code demonstrates the process of using the sweep_chain() function to create a 3D model of a stretched bowl in the Design object. The model is generated by defining a quarter-ellipse as a profile and sweeping it along a circular path, creating a bowl shape with a stretched profile.\nExample: Creating a bowl\nsweep_chain()\nDesign"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#initialize-the-bowl-design",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Initialize the bowl design",
        "section": "Initialize the bowl design",
        "text": "A design chain named “bowl” is created to initiate the bowl design process.\nInitialize the bowl design"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#define-parameters",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Define parameters",
        "section": "Define parameters",
        "text": "radius is set to 10 units, used for both the profile and path definitions.\nDefine parameters\nradius"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#create-the-profile-shape",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Create the profile shape",
        "section": "Create the profile shape",
        "text": "A quarter-ellipse profile is created with a major radius equal to 10 units and a minor radius equal to 5 units. The ellipse is defined in a 3D space with a specific orientation and then trimmed to a quarter using an interval from 0 to pi/2 radians. This profile shapes the bowl’s side.\nCreate the profile shape"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#create-the-path",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Create the path",
        "section": "Create the path",
        "text": "A circular path is created, positioned parallel to the XY-plane but shifted upwards by 5 units (half the major radius). The circle has a radius of 10 units and is trimmed to form a complete loop with an interval from 0 to 2pi radians. This path defines the sweeping trajectory for the profile to create the bowl.\nCreate the path"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#perform-the-sweep-operation",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Perform the sweep operation",
        "section": "Perform the sweep operation",
        "text": "The bowl body is generated by sweeping the quarter-ellipse profile along the circular path. The sweep operation molds the profile shape along the path to form the stretched bowl. The result of this operation is stored in the variable body.\nPerform the sweep operation\nbody"
    },
    {
        "objectID": "examples/03_modeling/sweep_chain_profile",
        "href": "examples/03_modeling/sweep_chain_profile.html#closing-the-modeler",
        "title": "Examples > Modeling: Sweep chain and sweep sketch > Closing the modeler",
        "section": "Closing the modeler",
        "text": "Closing the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#materialpropertytype",
        "title": "MaterialPropertyType",
        "section": "MaterialPropertyType",
        "text": "Bases: enum.Enum\nEnum holding the possible values for MaterialProperty objects.\nMaterialPropertyType\nMaterialPropertyType\nenum.Enum\nMaterialProperty"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#ansys.geometry.core.materials.property.MaterialPropertyType",
        "title": "MaterialPropertyType > MaterialPropertyType > MaterialPropertyType",
        "section": "MaterialPropertyType > MaterialPropertyType",
        "text": "class ansys.geometry.core.materials.property.MaterialPropertyType(*args, **kwds)\n\nBases: enum.Enum\n\nEnum holding the possible values for MaterialProperty objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#overview",
        "title": "MaterialPropertyType > Overview",
        "section": "Overview",
        "text": "DENSITY\nELASTIC_MODULUS\nPOISSON_RATIO\nSHEAR_MODULUS\nSPECIFIC_HEAT\nTENSILE_STRENGTH\nTHERMAL_CONDUCTIVITY\nfrom_id\nReturn the MaterialPropertyType value from the service.\nOverview\nDENSITY\nELASTIC_MODULUS\nPOISSON_RATIO\nSHEAR_MODULUS\nSPECIFIC_HEAT\nTENSILE_STRENGTH\nTHERMAL_CONDUCTIVITY\nfrom_id\nMaterialPropertyType"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#import-detail",
        "title": "MaterialPropertyType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#attribute-detail",
        "title": "MaterialPropertyType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#MaterialPropertyType.DENSITY",
        "title": "MaterialPropertyType > Attribute detail > DENSITY",
        "section": "Attribute detail > DENSITY",
        "text": "MaterialPropertyType.DENSITY = 'Density'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#MaterialPropertyType.ELASTIC_MODULUS",
        "title": "MaterialPropertyType > Attribute detail > ELASTIC_MODULUS",
        "section": "Attribute detail > ELASTIC_MODULUS",
        "text": "MaterialPropertyType.ELASTIC_MODULUS = 'ElasticModulus'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#MaterialPropertyType.POISSON_RATIO",
        "title": "MaterialPropertyType > Attribute detail > POISSON_RATIO",
        "section": "Attribute detail > POISSON_RATIO",
        "text": "MaterialPropertyType.POISSON_RATIO = 'PoissonsRatio'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#MaterialPropertyType.SHEAR_MODULUS",
        "title": "MaterialPropertyType > Attribute detail > SHEAR_MODULUS",
        "section": "Attribute detail > SHEAR_MODULUS",
        "text": "MaterialPropertyType.SHEAR_MODULUS = 'ShearModulus'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#MaterialPropertyType.SPECIFIC_HEAT",
        "title": "MaterialPropertyType > Attribute detail > SPECIFIC_HEAT",
        "section": "Attribute detail > SPECIFIC_HEAT",
        "text": "MaterialPropertyType.SPECIFIC_HEAT = 'SpecificHeat'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#MaterialPropertyType.TENSILE_STRENGTH",
        "title": "MaterialPropertyType > Attribute detail > TENSILE_STRENGTH",
        "section": "Attribute detail > TENSILE_STRENGTH",
        "text": "MaterialPropertyType.TENSILE_STRENGTH = 'TensileStrength'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#MaterialPropertyType.THERMAL_CONDUCTIVITY",
        "title": "MaterialPropertyType > Attribute detail > THERMAL_CONDUCTIVITY",
        "section": "Attribute detail > THERMAL_CONDUCTIVITY",
        "text": "MaterialPropertyType.THERMAL_CONDUCTIVITY = 'ThermalConductivity'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#method-detail",
        "title": "MaterialPropertyType > Method detail",
        "section": "Method detail",
        "text": "Return the MaterialPropertyType value from the service.\nGeometry Service string representation of a property type.\nCommon name for property type.\nMethod detail\nMaterialPropertyType\npython:str\nMaterialPropertyType"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/property/MaterialPropertyType",
        "href": "api/ansys/geometry/core/materials/property/MaterialPropertyType.html#MaterialPropertyType.from_id",
        "title": "MaterialPropertyType > Method detail > from_id",
        "section": "Method detail > from_id",
        "text": "static MaterialPropertyType.from_id(id: str) -> MaterialPropertyType\n\nReturn the MaterialPropertyType value from the service.\n\nParameters\n\nid\n\npython:str\n\nGeometry Service string representation of a property type.\n\nReturns\n\nMaterialPropertyType\n\nCommon name for property type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyAnsys Geometry.\nThe following contribution information is specific to PyAnsys Geometry.\nContribute"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#clone-the-repository",
        "title": "Contribute > Clone the repository",
        "section": "Clone the repository",
        "text": "To clone and install the latest PyAnsys Geometry release in development mode, run\nthese commands:\nClone the repository"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the PyAnsys Geometry Issues\npage to submit questions, report bugs, and request new features. When possible, you\nshould use these issue templates:\nBug, problem, error: For filing a bug report\nDocumentation error: For requesting modifications to the documentation\nAdding an example: For proposing a new example\nNew feature: For requesting enhancements to the code\nIf your issue does not fit into one of these template categories, you can click\nthe link for opening a blank issue.\nTo reach the project support team, email pyansys.core@ansys.com.\nPost issues"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#view-documentation",
        "title": "Contribute > View documentation",
        "section": "View documentation",
        "text": "Documentation for the latest stable release of PyAnsys Geometry is hosted at\nPyAnsys Geometry Documentation.\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions.\nView documentation"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "PyAnsys Geometry follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys Developer’s Guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run these commands:\nYou can also install this as a pre-commit hook by running this command:\nThis way, it’s not possible for you to push code that fails the style checks:\nAdhere to code style"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#build-the-documentation",
        "title": "Contribute > Build the documentation",
        "section": "Build the documentation",
        "text": "To build the documentation, you must have the Geometry Service\ninstalled and running on your machine because it is used to generate the\nexamples in the documentation. It is also recommended that the\nservice is running as a Docker container.\nIf you do not have the Geometry Service installed, you can still build the\ndocumentation, but the examples are not generated. To build the\ndocumentation without the examples, define the following environment variable:\nTo build the documentation locally, you must run this command to install the\ndocumentation dependencies:\nThen, navigate to the docs directory and run this command:\nThe documentation is built in the docs/_build/html directory.\nYou can clean the documentation build by running this command:\nBuild the documentation\ndocs\ndocs/_build/html"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adding-examples",
        "title": "Contribute > Adding examples",
        "section": "Adding examples",
        "text": "Users can collaborate with examples to this documentation by adding new examples. A reference\ncommit of the changes that adding an example requires is shown here:\nhttps://github.com/ansys/pyansys-geometry/pull/1454/commits/7fcf02f86f05e0e5ce1c1071c3c5fcd274ec481c\nTo add a new example, follow these steps:\nCreate a new notebook in the doc/source/examples directory, under the appropriate\nfolder for your example.\nTake as reference an existing example to see how the notebook should be structured.\nAdd the new notebook to the doc/source/examples.rst file.\nStore a thumbnail image of the example in the doc/source/_static/thumbnails directory.\nLink the thumbnail image to your example file in doc/source/conf.py as shown in the reference commit.\nYou can also test the correct build process of a new example by performing the following steps:\nRun the following command to install the documentation dependencies:\nInstall myst-nb by running this command:\nRun the following command to build a single example (that is, substitute\n<PATH_TO_MY_EXAMPLE_FILE> with the path to your example file):\nCheck the output file output.html to ensure that the example is correctly built.\nRendered output does not have documentation styling but users should have the\nability to see its proper execution.\nPlots are not be rendered in the output file, but the code and markdown cells should\nbe correctly rendered. In case of failure during execution users can also see the error\nmessage in the output file.\nAdding examples\ndoc/source/examples\ndoc/source/examples.rst\ndoc/source/_static/thumbnails\ndoc/source/conf.py\nmyst-nb\n<PATH_TO_MY_EXAMPLE_FILE>\noutput.html"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#run-tests",
        "title": "Contribute > Run tests",
        "section": "Run tests",
        "text": "PyAnsys Geometry uses pytest for testing.\nRun tests"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#prerequisites",
        "title": "Contribute > Prerequisites",
        "section": "Prerequisites",
        "text": "Prior to running the tests, you must run this command to install the test dependencies:\nMake sure to define the port and host of the service using the following environment variables:\nPrerequisites"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#running-the-tests",
        "title": "Contribute > Running the tests",
        "section": "Running the tests",
        "text": "To run the tests, navigate to the root directory of the repository and run this command:\nThe tests require the Geometry Service to be installed and running on your machine.\nThe tests fail if the service is not running. It is expected for the Geometry\nService to be running as a Docker container.\nIf you do not have the Geometry Service running as a Docker container, but you have it\nrunning on your machine, you can still run the tests with the following argument:\nRunning the tests"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/index",
        "href": "api/ansys/geometry/core/shapes/box_uv/index.html#the-box_uvpy-module",
        "title": "The box_uv.py module",
        "section": "The box_uv.py module",
        "text": "The box_uv.py module\nbox_uv.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/index",
        "href": "api/ansys/geometry/core/shapes/box_uv/index.html#summary",
        "title": "The box_uv.py module > Summary",
        "section": "Summary",
        "text": "BoxUV\nProvides the implementation for BoxUV class.\nLocationUV\nProvides the enumeration for indicating locations for BoxUV.\nSummary\nBoxUV\nBoxUV\nLocationUV"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/index",
        "href": "api/ansys/geometry/core/shapes/box_uv/index.html#description",
        "title": "The box_uv.py module > Description",
        "section": "Description",
        "text": "Provides the BoxUV class.\nDescription\nBoxUV"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#accuracy",
        "title": "Accuracy",
        "section": "Accuracy",
        "text": "Decimal precision evaluations for math operations.\nAccuracy\nAccuracy"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#ansys.geometry.core.misc.accuracy.Accuracy",
        "title": "Accuracy > Accuracy > Accuracy",
        "section": "Accuracy > Accuracy",
        "text": "class ansys.geometry.core.misc.accuracy.Accuracy\n\nDecimal precision evaluations for math operations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#overview",
        "title": "Accuracy > Overview",
        "section": "Overview",
        "text": "length_accuracy\nReturn the LENGTH_ACCURACY constant.\nangle_accuracy\nReturn the ANGLE_ACCURACY constant.\ndouble_accuracy\nReturn the DOUBLE_ACCURACY constant.\nlength_is_equal\nCheck if the comparison length is equal to the reference length.\nequal_doubles\nCompare two double values.\ncompare_with_tolerance\nCompare two doubles given the relative and absolute tolerances.\nlength_is_greater_than_or_equal\nCheck if the length is greater than the reference length.\nlength_is_less_than_or_equal\nCheck if the length is less than or equal to the reference length.\nlength_is_zero\nCheck if the length is within the length accuracy of exact zero.\nlength_is_negative\nCheck if the length is below a negative length accuracy.\nlength_is_positive\nCheck if the length is above a positive length accuracy.\nangle_is_zero\nCheck if the length is within the angle accuracy of exact zero.\nangle_is_negative\nCheck if the angle is below a negative angle accuracy.\nangle_is_positive\nCheck if the angle is above a positive angle accuracy.\nis_within_tolerance\nCheck if two values are inside a relative and absolute tolerance.\nOverview\nlength_accuracy\nLENGTH_ACCURACY\nangle_accuracy\nANGLE_ACCURACY\ndouble_accuracy\nDOUBLE_ACCURACY\nlength_is_equal\nequal_doubles\ncompare_with_tolerance\nlength_is_greater_than_or_equal\nlength_is_less_than_or_equal\nlength_is_zero\nlength_is_negative\nlength_is_positive\nangle_is_zero\nangle_is_negative\nangle_is_positive\nis_within_tolerance"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#import-detail",
        "title": "Accuracy > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#method-detail",
        "title": "Accuracy > Method detail",
        "section": "Method detail",
        "text": "Return the LENGTH_ACCURACY constant.\nReturn the ANGLE_ACCURACY constant.\nReturn the DOUBLE_ACCURACY constant.\nCheck if the comparison length is equal to the reference length.\nTrue if the comparison length is equal to the reference length\nwithin the length accuracy, False otherwise.\nThe check is done up to the constant value specified for LENGTH_ACCURACY.\nCompare two double values.\nCompare two doubles given the relative and absolute tolerances.\nCheck if the length is greater than the reference length.\nTrue if the comparison length is greater than the reference length within\nthe length accuracy, False otherwise.\nThe check is done up to the constant value specified for LENGTH_ACCURACY.\nCheck if the length is less than or equal to the reference length.\nTrue if the comparison length is less than or equal to the reference length\nwithin the length accuracy, False otherwise.\nThe check is done up to the constant value specified for LENGTH_ACCURACY.\nCheck if the length is within the length accuracy of exact zero.\nTrue if the length is within the length accuracy of exact zero,\nFalse otherwise.\nCheck if the length is below a negative length accuracy.\nFalse otherwise.\nCheck if the length is above a positive length accuracy.\nFalse otherwise.\nCheck if the length is within the angle accuracy of exact zero.\nFalse otherwise.\nCheck if the angle is below a negative angle accuracy.\nFalse otherwise.\nCheck if the angle is above a positive angle accuracy.\nFalse otherwise.\nCheck if two values are inside a relative and absolute tolerance.\nFirst value.\nSecond value.\nRelative tolerance accepted.\nAbsolute tolerance accepted.\nTrue if the values are inside the accepted tolerances,\nFalse otherwise.\nMethod detail\nLENGTH_ACCURACY\nANGLE_ACCURACY\nDOUBLE_ACCURACY\nTrue\nFalse\nLENGTH_ACCURACY\nTrue\nFalse\nLENGTH_ACCURACY\nTrue\nFalse\nLENGTH_ACCURACY\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nReal\nReal\nReal\nReal\nTrue\nFalse"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.length_accuracy",
        "title": "Accuracy > Method detail > length_accuracy",
        "section": "Method detail > length_accuracy",
        "text": "static Accuracy.length_accuracy() -> ansys.geometry.core.typing.Real\n\nReturn the LENGTH_ACCURACY constant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.angle_accuracy",
        "title": "Accuracy > Method detail > angle_accuracy",
        "section": "Method detail > angle_accuracy",
        "text": "static Accuracy.angle_accuracy() -> ansys.geometry.core.typing.Real\n\nReturn the ANGLE_ACCURACY constant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.double_accuracy",
        "title": "Accuracy > Method detail > double_accuracy",
        "section": "Method detail > double_accuracy",
        "text": "static Accuracy.double_accuracy() -> ansys.geometry.core.typing.Real\n\nReturn the DOUBLE_ACCURACY constant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.length_is_equal",
        "title": "Accuracy > Method detail > length_is_equal",
        "section": "Method detail > length_is_equal",
        "text": "static Accuracy.length_is_equal(comparison_length: ansys.geometry.core.typing.Real, reference_length: ansys.geometry.core.typing.Real) -> bool\n\nCheck if the comparison length is equal to the reference length.\n\nReturns\n\nbool\n\nTrue if the comparison length is equal to the reference length\nwithin the length accuracy, False otherwise.\n\nNotes\n\nThe check is done up to the constant value specified for LENGTH_ACCURACY.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.equal_doubles",
        "title": "Accuracy > Method detail > equal_doubles",
        "section": "Method detail > equal_doubles",
        "text": "static Accuracy.equal_doubles(a: ansys.geometry.core.typing.Real, b: ansys.geometry.core.typing.Real)\n\nCompare two double values.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.compare_with_tolerance",
        "title": "Accuracy > Method detail > compare_with_tolerance",
        "section": "Method detail > compare_with_tolerance",
        "text": "static Accuracy.compare_with_tolerance(a: ansys.geometry.core.typing.Real, b: ansys.geometry.core.typing.Real, relative_tolerance: ansys.geometry.core.typing.Real, absolute_tolerance: ansys.geometry.core.typing.Real) -> ansys.geometry.core.typing.Real\n\nCompare two doubles given the relative and absolute tolerances.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.length_is_greater_than_or_equal",
        "title": "Accuracy > Method detail > length_is_greater_than_or_equal",
        "section": "Method detail > length_is_greater_than_or_equal",
        "text": "static Accuracy.length_is_greater_than_or_equal(comparison_length: ansys.geometry.core.typing.Real, reference_length: ansys.geometry.core.typing.Real) -> bool\n\nCheck if the length is greater than the reference length.\n\nReturns\n\nbool\n\nTrue if the comparison length is greater than the reference length within\nthe length accuracy, False otherwise.\n\nNotes\n\nThe check is done up to the constant value specified for LENGTH_ACCURACY.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.length_is_less_than_or_equal",
        "title": "Accuracy > Method detail > length_is_less_than_or_equal",
        "section": "Method detail > length_is_less_than_or_equal",
        "text": "static Accuracy.length_is_less_than_or_equal(comparison_length: ansys.geometry.core.typing.Real, reference_length: ansys.geometry.core.typing.Real) -> bool\n\nCheck if the length is less than or equal to the reference length.\n\nReturns\n\nbool\n\nTrue if the comparison length is less than or equal to the reference length\nwithin the length accuracy, False otherwise.\n\nNotes\n\nThe check is done up to the constant value specified for LENGTH_ACCURACY.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.length_is_zero",
        "title": "Accuracy > Method detail > length_is_zero",
        "section": "Method detail > length_is_zero",
        "text": "static Accuracy.length_is_zero(length: ansys.geometry.core.typing.Real) -> bool\n\nCheck if the length is within the length accuracy of exact zero.\n\nReturns\n\nbool\n\nTrue if the length is within the length accuracy of exact zero,\nFalse otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.length_is_negative",
        "title": "Accuracy > Method detail > length_is_negative",
        "section": "Method detail > length_is_negative",
        "text": "static Accuracy.length_is_negative(length: ansys.geometry.core.typing.Real) -> bool\n\nCheck if the length is below a negative length accuracy.\n\nReturns\n\nbool\n\nTrue if the length is below a negative length accuracy,\n\nFalse otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.length_is_positive",
        "title": "Accuracy > Method detail > length_is_positive",
        "section": "Method detail > length_is_positive",
        "text": "static Accuracy.length_is_positive(length: ansys.geometry.core.typing.Real) -> bool\n\nCheck if the length is above a positive length accuracy.\n\nReturns\n\nbool\n\nTrue if the length is above a positive length accuracy,\n\nFalse otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.angle_is_zero",
        "title": "Accuracy > Method detail > angle_is_zero",
        "section": "Method detail > angle_is_zero",
        "text": "static Accuracy.angle_is_zero(angle: ansys.geometry.core.typing.Real) -> bool\n\nCheck if the length is within the angle accuracy of exact zero.\n\nReturns\n\nbool\n\nTrue if the length is within the angle accuracy of exact zero,\n\nFalse otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.angle_is_negative",
        "title": "Accuracy > Method detail > angle_is_negative",
        "section": "Method detail > angle_is_negative",
        "text": "static Accuracy.angle_is_negative(angle: ansys.geometry.core.typing.Real) -> bool\n\nCheck if the angle is below a negative angle accuracy.\n\nReturns\n\nbool\n\nTrue if the angle is below a negative angle accuracy,\n\nFalse otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.angle_is_positive",
        "title": "Accuracy > Method detail > angle_is_positive",
        "section": "Method detail > angle_is_positive",
        "text": "static Accuracy.angle_is_positive(angle: ansys.geometry.core.typing.Real) -> bool\n\nCheck if the angle is above a positive angle accuracy.\n\nReturns\n\nbool\n\nTrue if the angle is above a positive angle accuracy,\n\nFalse otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/accuracy/Accuracy",
        "href": "api/ansys/geometry/core/misc/accuracy/Accuracy.html#Accuracy.is_within_tolerance",
        "title": "Accuracy > Method detail > is_within_tolerance",
        "section": "Method detail > is_within_tolerance",
        "text": "static Accuracy.is_within_tolerance(a: ansys.geometry.core.typing.Real, b: ansys.geometry.core.typing.Real, relative_tolerance: ansys.geometry.core.typing.Real, absolute_tolerance: ansys.geometry.core.typing.Real) -> bool\n\nCheck if two values are inside a relative and absolute tolerance.\n\nParameters\n\na\n\nReal\n\nFirst value.\n\nb\n\nReal\n\nSecond value.\n\nrelative_tolerance\n\nReal\n\nRelative tolerance accepted.\n\nabsolute_tolerance\n\nReal\n\nAbsolute tolerance accepted.\n\nReturns\n\nbool\n\nTrue if the values are inside the accepted tolerances,\nFalse otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#boxuv",
        "title": "BoxUV",
        "section": "BoxUV",
        "text": "Provides the implementation for BoxUV class.\nBoxUV\nBoxUV\nBoxUV"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#ansys.geometry.core.shapes.box_uv.BoxUV",
        "title": "BoxUV > BoxUV > BoxUV",
        "section": "BoxUV > BoxUV",
        "text": "class ansys.geometry.core.shapes.box_uv.BoxUV(range_u: ansys.geometry.core.shapes.parameterization.Interval = None, range_v: ansys.geometry.core.shapes.parameterization.Interval = None)\n\nProvides the implementation for BoxUV class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#overview",
        "title": "BoxUV > Overview",
        "section": "Overview",
        "text": "is_empty\nCheck if this BoxUV is empty.\nproportion\nEvaluate the BoxUV at the given proportions.\nget_center\nEvaluate the this BoxUV in the center.\nis_negative\nCheck whether the BoxUV is negative.\ncontains\nCheck whether the BoxUV contains a given u and v pair parameter.\ninflate\nEnlarge the BoxUV u and v intervals by deltas.\nget_corner\nGet the corner location of the BoxUV.\ninterval_u\nu interval.\ninterval_v\nv interval.\n__eq__\nCheck whether two BoxUV instances are equal.\n__ne__\nCheck whether two BoxUV instances are not equal.\nOverview\nis_empty\nproportion\nget_center\nis_negative\ncontains\ninflate\nget_corner\ninterval_u\nu\ninterval_v\nv\n__eq__\n__ne__"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#import-detail",
        "title": "BoxUV > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#property-detail",
        "title": "BoxUV > Property detail",
        "section": "Property detail",
        "text": "u interval.\nv interval.\nProperty detail\nu\nv"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#BoxUV.interval_u",
        "title": "BoxUV > Property detail > interval_u",
        "section": "Property detail > interval_u",
        "text": "property BoxUV.interval_u: ansys.geometry.core.shapes.parameterization.Interval\n\nu interval.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#BoxUV.interval_v",
        "title": "BoxUV > Property detail > interval_v",
        "section": "Property detail > interval_v",
        "text": "property BoxUV.interval_v: ansys.geometry.core.shapes.parameterization.Interval\n\nv interval.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#method-detail",
        "title": "BoxUV > Method detail",
        "section": "Method detail",
        "text": "Check whether two BoxUV instances are equal.\nCheck whether two BoxUV instances are not equal.\nCheck if this BoxUV is empty.\nEvaluate the BoxUV at the given proportions.\nEvaluate the this BoxUV in the center.\nCheck whether the BoxUV is negative.\nCheck whether the BoxUV contains a given u and v pair parameter.\nEnlarge the BoxUV u and v intervals by deltas.\nGet the corner location of the BoxUV.\nMethod detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#BoxUV.__eq__",
        "title": "BoxUV > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "BoxUV.__eq__(other: object) -> bool\n\nCheck whether two BoxUV instances are equal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#BoxUV.__ne__",
        "title": "BoxUV > Method detail > __ne__",
        "section": "Method detail > __ne__",
        "text": "BoxUV.__ne__(other: object) -> bool\n\nCheck whether two BoxUV instances are not equal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#BoxUV.is_empty",
        "title": "BoxUV > Method detail > is_empty",
        "section": "Method detail > is_empty",
        "text": "BoxUV.is_empty()\n\nCheck if this BoxUV is empty.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#BoxUV.proportion",
        "title": "BoxUV > Method detail > proportion",
        "section": "Method detail > proportion",
        "text": "BoxUV.proportion(prop_u: ansys.geometry.core.typing.Real, prop_v: ansys.geometry.core.typing.Real) -> ansys.geometry.core.shapes.parameterization.ParamUV\n\nEvaluate the BoxUV at the given proportions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#BoxUV.get_center",
        "title": "BoxUV > Method detail > get_center",
        "section": "Method detail > get_center",
        "text": "BoxUV.get_center() -> ansys.geometry.core.shapes.parameterization.ParamUV\n\nEvaluate the this BoxUV in the center.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#BoxUV.is_negative",
        "title": "BoxUV > Method detail > is_negative",
        "section": "Method detail > is_negative",
        "text": "BoxUV.is_negative(tolerance_u: ansys.geometry.core.typing.Real, tolerance_v: ansys.geometry.core.typing.Real) -> bool\n\nCheck whether the BoxUV is negative.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#BoxUV.contains",
        "title": "BoxUV > Method detail > contains",
        "section": "Method detail > contains",
        "text": "BoxUV.contains(param: ansys.geometry.core.shapes.parameterization.ParamUV) -> bool\n\nCheck whether the BoxUV contains a given u and v pair parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#BoxUV.inflate",
        "title": "BoxUV > Method detail > inflate",
        "section": "Method detail > inflate",
        "text": "BoxUV.inflate(delta_u: ansys.geometry.core.typing.Real, delta_v: ansys.geometry.core.typing.Real) -> BoxUV\n\nEnlarge the BoxUV u and v intervals by deltas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/box_uv/BoxUV",
        "href": "api/ansys/geometry/core/shapes/box_uv/BoxUV.html#BoxUV.get_corner",
        "title": "BoxUV > Method detail > get_corner",
        "section": "Method detail > get_corner",
        "text": "BoxUV.get_corner(location: LocationUV) -> ansys.geometry.core.shapes.parameterization.ParamUV\n\nGet the corner location of the BoxUV.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/index",
        "href": "api/ansys/geometry/core/math/bbox/index.html#the-bboxpy-module",
        "title": "The bbox.py module",
        "section": "The bbox.py module",
        "text": "The bbox.py module\nbbox.py"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/index",
        "href": "api/ansys/geometry/core/math/bbox/index.html#summary",
        "title": "The bbox.py module > Summary",
        "section": "Summary",
        "text": "BoundingBox2D\nMaintains the X and Y dimensions.\nSummary\nBoundingBox2D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/bbox/index",
        "href": "api/ansys/geometry/core/math/bbox/index.html#description",
        "title": "The bbox.py module > Description",
        "section": "Description",
        "text": "Provides for managing a bounding box.\nDescription"
    },
    {
        "objectID": "examples/03_modeling/design_tree",
        "href": "examples/03_modeling/design_tree.html#modeling-visualization-of-the-design-tree-on-terminal",
        "title": "Examples > Modeling: Visualization of the design tree on terminal",
        "section": "Modeling: Visualization of the design tree on terminal",
        "text": "A user can visualize its model object tree easily by using the tree_print() method available on the Design and Component objects. This method prints the tree structure of the model in the terminal.\nModeling: Visualization of the design tree on terminal\ntree_print()\nDesign\nComponent"
    },
    {
        "objectID": "examples/03_modeling/design_tree",
        "href": "examples/03_modeling/design_tree.html#perform-required-imports",
        "title": "Examples > Modeling: Visualization of the design tree on terminal > Perform required imports",
        "section": "Perform required imports",
        "text": "For the following example, you need to import these modules:\nPerform required imports"
    },
    {
        "objectID": "examples/03_modeling/design_tree",
        "href": "examples/03_modeling/design_tree.html#create-a-design",
        "title": "Examples > Modeling: Visualization of the design tree on terminal > Create a design",
        "section": "Create a design",
        "text": "The following code creates a simple design for demonstration purposes. The design consists of several cylinders extruded. The interesting part is visualizing the corresponding design tree.\nCreate a design"
    },
    {
        "objectID": "examples/03_modeling/design_tree",
        "href": "examples/03_modeling/design_tree.html#visualize-the-design-tree",
        "title": "Examples > Modeling: Visualization of the design tree on terminal > Visualize the design tree",
        "section": "Visualize the design tree",
        "text": "Now, let’s visualize the design tree using the tree_print() method. Let’s start by printing the tree structure of the design object with no extra arguments.\nVisualize the design tree\ntree_print()"
    },
    {
        "objectID": "examples/03_modeling/design_tree",
        "href": "examples/03_modeling/design_tree.html#controlling-the-depth-of-the-tree",
        "title": "Examples > Modeling: Visualization of the design tree on terminal > Controlling the depth of the tree",
        "section": "Controlling the depth of the tree",
        "text": "The tree_print() method accepts an optional argument depth to control the depth of the tree to be printed. The default value is None, which means the entire tree is printed.\nIn this case, only the first level of the tree is printed - that is, the three main components.\nControlling the depth of the tree\ntree_print()\ndepth\nNone"
    },
    {
        "objectID": "examples/03_modeling/design_tree",
        "href": "examples/03_modeling/design_tree.html#excluding-bodies-components-or-beams",
        "title": "Examples > Modeling: Visualization of the design tree on terminal > Excluding bodies, components, or beams",
        "section": "Excluding bodies, components, or beams",
        "text": "By default, the tree_print() method prints all the bodies, components, and beams in the design tree. However, you can exclude any of these by setting the corresponding argument to False.\nIn this case, the bodies and beams are not be printed in the tree structure.\nIn this case, the components are not be printed in the tree structure - leaving only the design object represented.\nExcluding bodies, components, or beams\ntree_print()\nFalse"
    },
    {
        "objectID": "examples/03_modeling/design_tree",
        "href": "examples/03_modeling/design_tree.html#sorting-the-tree",
        "title": "Examples > Modeling: Visualization of the design tree on terminal > Sorting the tree",
        "section": "Sorting the tree",
        "text": "By default, the tree structure is sorted by the way the components, bodies, and beams were created. However, you can sort the tree structure by setting the sort_keys argument to True. In that case, the tree is sorted alphabetically.\nLet’s add a new component to the design and print the tree structure by default.\nNow, let’s print the tree structure with the components sorted alphabetically.\nSorting the tree\nsort_keys\nTrue"
    },
    {
        "objectID": "examples/03_modeling/design_tree",
        "href": "examples/03_modeling/design_tree.html#indenting-the-tree",
        "title": "Examples > Modeling: Visualization of the design tree on terminal > Indenting the tree",
        "section": "Indenting the tree",
        "text": "By default, the tree structure is printed with an indentation level of 4. However, you can indent the tree structure by setting the indent argument to the desired value.\nIn this case, the tree structure is printed with an indentation level of 8.\nIndenting the tree\nindent"
    },
    {
        "objectID": "examples/03_modeling/design_tree",
        "href": "examples/03_modeling/design_tree.html#printing-the-tree-from-a-specific-component",
        "title": "Examples > Modeling: Visualization of the design tree on terminal > Printing the tree from a specific component",
        "section": "Printing the tree from a specific component",
        "text": "You can print the tree structure from a specific component by calling the tree_print() method on the component object.\nPrinting the tree from a specific component\ntree_print()"
    },
    {
        "objectID": "examples/03_modeling/design_tree",
        "href": "examples/03_modeling/design_tree.html#closing-the-modeler",
        "title": "Examples > Modeling: Visualization of the design tree on terminal > Closing the modeler",
        "section": "Closing the modeler",
        "text": "Finally, close the modeler.\nClosing the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/show_design_point/index",
        "href": "api/ansys/geometry/core/plotting/widgets/show_design_point/index.html#the-show_design_pointpy-module",
        "title": "The show_design_point.py module",
        "section": "The show_design_point.py module",
        "text": "The show_design_point.py module\nshow_design_point.py"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/show_design_point/index",
        "href": "api/ansys/geometry/core/plotting/widgets/show_design_point/index.html#summary",
        "title": "The show_design_point.py module > Summary",
        "section": "Summary",
        "text": "ShowDesignPoints\nProvides the a button to hide/show DesignPoint objects in the plotter.\nSummary\nShowDesignPoints"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/widgets/show_design_point/index",
        "href": "api/ansys/geometry/core/plotting/widgets/show_design_point/index.html#description",
        "title": "The show_design_point.py module > Description",
        "section": "Description",
        "text": "Provides the ruler widget for the PyAnsys Geometry plotter.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/index",
        "href": "api/ansys/geometry/core/designer/body/index.html#the-bodypy-module",
        "title": "The body.py module",
        "section": "The body.py module",
        "text": "The body.py module\nbody.py"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/index",
        "href": "api/ansys/geometry/core/designer/body/index.html#summary",
        "title": "The body.py module > Summary",
        "section": "Summary",
        "text": "IBody\nDefines the common methods for a body, providing the abstract body interface.\nMasterBody\nRepresents solids and surfaces organized within the design assembly.\nBody\nRepresents solids and surfaces organized within the design assembly.\nMidSurfaceOffsetType\nProvides values for mid-surface offsets supported.\nCollisionType\nProvides values for collision types between bodies.\nFillStyle\nProvides values for fill styles supported.\n__TEMPORARY_BOOL_OPS_FIX__\nSummary\nIBody\nMasterBody\nBody\nMidSurfaceOffsetType\nCollisionType\nFillStyle\n__TEMPORARY_BOOL_OPS_FIX__"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/index",
        "href": "api/ansys/geometry/core/designer/body/index.html#description",
        "title": "The body.py module > Description",
        "section": "Description",
        "text": "Provides for managing a body.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/index",
        "href": "api/ansys/geometry/core/designer/body/index.html#module-detail",
        "title": "The body.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/index",
        "href": "api/ansys/geometry/core/designer/body/index.html#body.__TEMPORARY_BOOL_OPS_FIX__",
        "title": "The body.py module > Module detail > __TEMPORARY_BOOL_OPS_FIX__",
        "section": "Module detail > __TEMPORARY_BOOL_OPS_FIX__",
        "text": "body.__TEMPORARY_BOOL_OPS_FIX__ = (99, 0, 0)\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType",
        "href": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType.html#midsurfaceoffsettype",
        "title": "MidSurfaceOffsetType",
        "section": "MidSurfaceOffsetType",
        "text": "Bases: enum.Enum\nProvides values for mid-surface offsets supported.\nMidSurfaceOffsetType\nMidSurfaceOffsetType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType",
        "href": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType.html#ansys.geometry.core.designer.body.MidSurfaceOffsetType",
        "title": "MidSurfaceOffsetType > MidSurfaceOffsetType > MidSurfaceOffsetType",
        "section": "MidSurfaceOffsetType > MidSurfaceOffsetType",
        "text": "class ansys.geometry.core.designer.body.MidSurfaceOffsetType(*args, **kwds)\n\nBases: enum.Enum\n\nProvides values for mid-surface offsets supported.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType",
        "href": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType.html#overview",
        "title": "MidSurfaceOffsetType > Overview",
        "section": "Overview",
        "text": "MIDDLE\nTOP\nBOTTOM\nVARIABLE\nCUSTOM\nOverview\nMIDDLE\nTOP\nBOTTOM\nVARIABLE\nCUSTOM"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType",
        "href": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType.html#import-detail",
        "title": "MidSurfaceOffsetType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType",
        "href": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType.html#attribute-detail",
        "title": "MidSurfaceOffsetType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType",
        "href": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType.html#MidSurfaceOffsetType.MIDDLE",
        "title": "MidSurfaceOffsetType > Attribute detail > MIDDLE",
        "section": "Attribute detail > MIDDLE",
        "text": "MidSurfaceOffsetType.MIDDLE = 0\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType",
        "href": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType.html#MidSurfaceOffsetType.TOP",
        "title": "MidSurfaceOffsetType > Attribute detail > TOP",
        "section": "Attribute detail > TOP",
        "text": "MidSurfaceOffsetType.TOP = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType",
        "href": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType.html#MidSurfaceOffsetType.BOTTOM",
        "title": "MidSurfaceOffsetType > Attribute detail > BOTTOM",
        "section": "Attribute detail > BOTTOM",
        "text": "MidSurfaceOffsetType.BOTTOM = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType",
        "href": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType.html#MidSurfaceOffsetType.VARIABLE",
        "title": "MidSurfaceOffsetType > Attribute detail > VARIABLE",
        "section": "Attribute detail > VARIABLE",
        "text": "MidSurfaceOffsetType.VARIABLE = 3\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType",
        "href": "api/ansys/geometry/core/designer/body/MidSurfaceOffsetType.html#MidSurfaceOffsetType.CUSTOM",
        "title": "MidSurfaceOffsetType > Attribute detail > CUSTOM",
        "section": "Attribute detail > CUSTOM",
        "text": "MidSurfaceOffsetType.CUSTOM = 4\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#the-loggerpy-module",
        "title": "The logger.py module",
        "section": "The logger.py module",
        "text": "The logger.py module\nlogger.py"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#summary",
        "title": "The logger.py module > Summary",
        "section": "Summary",
        "text": "PyGeometryCustomAdapter\nKeeps the reference to the Geometry service instance name dynamic.\nPyGeometryPercentStyle\nProvides a common messaging style.\nPyGeometryFormatter\nProvides a Formatter class for overwriting default format styles.\nInstanceFilter\nEnsures that the instance_name record always exists.\nLogger\nProvides the logger used for each PyAnsys Geometry session.\naddfile_handler\nAdd a file handler to the input.\nadd_stdout_handler\nAdd a standout handler to the logger.\nstring_to_loglevel\nLOG_LEVEL\nFILE_NAME\nDEBUG\nINFO\nWARN\nERROR\nCRITICAL\nSTDOUT_MSG_FORMAT\nFILE_MSG_FORMAT\nDEFAULT_STDOUT_HEADER\nDEFAULT_FILE_HEADER\nNEW_SESSION_HEADER\nLOG\nSummary\nPyGeometryCustomAdapter\nPyGeometryPercentStyle\nPyGeometryFormatter\nFormatter\nInstanceFilter\ninstance_name\nLogger\naddfile_handler\nadd_stdout_handler\nstring_to_loglevel\nLOG_LEVEL\nFILE_NAME\nDEBUG\nINFO\nWARN\nERROR\nCRITICAL\nSTDOUT_MSG_FORMAT\nFILE_MSG_FORMAT\nDEFAULT_STDOUT_HEADER\nDEFAULT_FILE_HEADER\nNEW_SESSION_HEADER\nLOG"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#description",
        "title": "The logger.py module > Description",
        "section": "Description",
        "text": "Provides a general framework for logging in PyAnsys Geometry.\nThis module is built on the Logging facility for\nPython.\nIt is not intended to replace the standard Python logging library but rather provide\na way to interact between its logging class and PyAnsys Geometry.\nThe loggers used in this module include the name of the instance, which\nis intended to be unique. This name is printed in all active\noutputs and is used to track the different Geometry service instances.\nDescription\nlogging"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger-usage",
        "title": "The logger.py module > Logger usage",
        "section": "Logger usage",
        "text": "Logger usage"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#global-logger",
        "title": "The logger.py module > Global logger",
        "section": "Global logger",
        "text": "There is a global logger named PyAnsys_Geometry_global that is created when\nansys.geometry.core.__init__ is called.  If you want to use this global\nlogger, you must call it at the top of your module:\nYou can rename this logger to avoid conflicts with other loggers (if any):\nThe default logging level of LOG is ERROR.\nYou can change this level and output lower-level messages with\nthis code:\nAlternatively, you can ensure that all the handlers are set to the input log\nlevel with this code:\nThis logger does not log to a file by default. If you want, you can\nadd a file handler with this code:\nThis also sets the logger to be redirected to this file. If you want\nto change the characteristics of this global logger from the beginning\nof the execution, you must edit the __init__ file in the directory\nansys.geometry.core.\nTo log using this logger, call the desired method as a normal logger with:\nGlobal logger\nPyAnsys_Geometry_global\nansys.geometry.core.__init__\nLOG\nERROR\n__init__\nansys.geometry.core"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#instance-logger",
        "title": "The logger.py module > Instance logger",
        "section": "Instance logger",
        "text": "Every time an instance of the Modeler\nclass is created, a logger is created and stored in LOG._instances. This field is a\ndictionary where the key is the name of the created logger.\nThese instance loggers inherit the PyAnsys_Geometry_global output handlers and\nlogging level unless otherwise specified. The way this logger works is very\nsimilar to the global logger. If you want to add a file handler, you can use\nthe log_to_file() method. If you want\nto change the log level, you can use the setLevel() method.\nHere is an example of how you can use this logger:\nInstance logger\nModeler\nLOG._instances\nPyAnsys_Geometry_global\nlog_to_file()\nsetLevel()"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#other-loggers",
        "title": "The logger.py module > Other loggers",
        "section": "Other loggers",
        "text": "You can create your own loggers using a Python logging library as\nyou would do in any other script. There would be no conflicts between\nthese loggers.\nOther loggers\nlogging"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#module-detail",
        "title": "The logger.py module > Module detail",
        "section": "Module detail",
        "text": "Add a file handler to the input.\nLogger to add the file handler to.\nName of the output file.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nWhether to write the headers to the file.\nLogger or logging.Logger object.\nAdd a standout handler to the logger.\nLogger to add the file handler to.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nWhether to write headers to the file.\nLogger or logging.Logger object.\nModule detail\nlogging.Logger\npython:str\npython:int\n10\nlogging.DEBUG\npython:False\nLogger\nLogger\nlogging.Logger\nlogging.Logger\npython:int\n10\nlogging.DEBUG\npython:False\nLogger\nLogger\nlogging.Logger"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.addfile_handler",
        "title": "The logger.py module > Module detail > addfile_handler",
        "section": "Module detail > addfile_handler",
        "text": "logger.addfile_handler(logger, filename=FILE_NAME, level=LOG_LEVEL, write_headers=False)\n\nAdd a file handler to the input.\n\nParameters\n\nlogger\n\nlogging.Logger\n\nLogger to add the file handler to.\n\nfilename\n\npython:str, default: “pyansys-geometry.log”\n\nName of the output file.\n\nlevel\n\npython:int, default: 10\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\nwrite_headers\n\nbool, default: python:False\n\nWhether to write the headers to the file.\n\nReturns\n\nLogger\n\nLogger or logging.Logger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.add_stdout_handler",
        "title": "The logger.py module > Module detail > add_stdout_handler",
        "section": "Module detail > add_stdout_handler",
        "text": "logger.add_stdout_handler(logger, level=LOG_LEVEL, write_headers=False)\n\nAdd a standout handler to the logger.\n\nParameters\n\nlogger\n\nlogging.Logger\n\nLogger to add the file handler to.\n\nlevel\n\npython:int, default: 10\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\nwrite_headers\n\nbool, default: python:False\n\nWhether to write headers to the file.\n\nReturns\n\nLogger\n\nLogger or logging.Logger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.LOG_LEVEL",
        "title": "The logger.py module > Module detail > LOG_LEVEL",
        "section": "Module detail > LOG_LEVEL",
        "text": "logger.LOG_LEVEL = 10\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.FILE_NAME",
        "title": "The logger.py module > Module detail > FILE_NAME",
        "section": "Module detail > FILE_NAME",
        "text": "logger.FILE_NAME = 'pyansys-geometry.log'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.DEBUG",
        "title": "The logger.py module > Module detail > DEBUG",
        "section": "Module detail > DEBUG",
        "text": "logger.DEBUG = 10\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.INFO",
        "title": "The logger.py module > Module detail > INFO",
        "section": "Module detail > INFO",
        "text": "logger.INFO = 20\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.WARN",
        "title": "The logger.py module > Module detail > WARN",
        "section": "Module detail > WARN",
        "text": "logger.WARN = 30\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.ERROR",
        "title": "The logger.py module > Module detail > ERROR",
        "section": "Module detail > ERROR",
        "text": "logger.ERROR = 40\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.CRITICAL",
        "title": "The logger.py module > Module detail > CRITICAL",
        "section": "Module detail > CRITICAL",
        "text": "logger.CRITICAL = 50\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.STDOUT_MSG_FORMAT",
        "title": "The logger.py module > Module detail > STDOUT_MSG_FORMAT",
        "section": "Module detail > STDOUT_MSG_FORMAT",
        "text": "logger.STDOUT_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.FILE_MSG_FORMAT",
        "title": "The logger.py module > Module detail > FILE_MSG_FORMAT",
        "section": "Module detail > FILE_MSG_FORMAT",
        "text": "logger.FILE_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.DEFAULT_STDOUT_HEADER",
        "title": "The logger.py module > Module detail > DEFAULT_STDOUT_HEADER",
        "section": "Module detail > DEFAULT_STDOUT_HEADER",
        "text": "logger.DEFAULT_STDOUT_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.DEFAULT_FILE_HEADER",
        "title": "The logger.py module > Module detail > DEFAULT_FILE_HEADER",
        "section": "Module detail > DEFAULT_FILE_HEADER",
        "text": "logger.DEFAULT_FILE_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.NEW_SESSION_HEADER",
        "title": "The logger.py module > Module detail > NEW_SESSION_HEADER",
        "section": "Module detail > NEW_SESSION_HEADER",
        "text": "logger.NEW_SESSION_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\n===============================================================================\n       NEW SESSION - Uninferable\n===============================================================================\"\"\"\n\n</details>"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.LOG",
        "title": "The logger.py module > Module detail > LOG",
        "section": "Module detail > LOG",
        "text": "logger.LOG\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/index",
        "href": "api/ansys/geometry/core/logger/index.html#logger.string_to_loglevel",
        "title": "The logger.py module > Module detail > string_to_loglevel",
        "section": "Module detail > string_to_loglevel",
        "text": "logger.string_to_loglevel\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/InstanceFilter",
        "href": "api/ansys/geometry/core/logger/InstanceFilter.html#instancefilter",
        "title": "InstanceFilter",
        "section": "InstanceFilter",
        "text": "Bases: logging.Filter\nEnsures that the instance_name record always exists.\nInstanceFilter\nInstanceFilter\nlogging.Filter\ninstance_name"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/InstanceFilter",
        "href": "api/ansys/geometry/core/logger/InstanceFilter.html#ansys.geometry.core.logger.InstanceFilter",
        "title": "InstanceFilter > InstanceFilter > InstanceFilter",
        "section": "InstanceFilter > InstanceFilter",
        "text": "class ansys.geometry.core.logger.InstanceFilter(name='')\n\nBases: logging.Filter\n\nEnsures that the instance_name record always exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/InstanceFilter",
        "href": "api/ansys/geometry/core/logger/InstanceFilter.html#overview",
        "title": "InstanceFilter > Overview",
        "section": "Overview",
        "text": "filter\nEnsure that the instance_name attribute is always present.\nOverview\nfilter\ninstance_name"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/InstanceFilter",
        "href": "api/ansys/geometry/core/logger/InstanceFilter.html#import-detail",
        "title": "InstanceFilter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/InstanceFilter",
        "href": "api/ansys/geometry/core/logger/InstanceFilter.html#method-detail",
        "title": "InstanceFilter > Method detail",
        "section": "Method detail",
        "text": "Ensure that the instance_name attribute is always present.\nMethod detail\ninstance_name"
    },
    {
        "objectID": "api/ansys/geometry/core/logger/InstanceFilter",
        "href": "api/ansys/geometry/core/logger/InstanceFilter.html#InstanceFilter.filter",
        "title": "InstanceFilter > Method detail > filter",
        "section": "Method detail > filter",
        "text": "InstanceFilter.filter(record)\n\nEnsure that the instance_name attribute is always present.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#masterbody",
        "title": "MasterBody",
        "section": "MasterBody",
        "text": "Bases: IBody\nRepresents solids and surfaces organized within the design assembly.\nSolids and surfaces synchronize to a design within a supporting Geometry service instance.\nServer-defined ID for the body.\nUser-defined label for the body.\nParent component to place the new component under within the design assembly.\nActive supporting geometry service instance for design modeling.\nWhether the master body is a surface or an 3D object (with volume). The default\nis False, in which case the master body is a surface. When True, the\nmaster body is a 3D object (with volume).\nMasterBody\nMasterBody\nIBody\npython:str\npython:str\nComponent\nGrpcClient\npython:False\nFalse\nTrue"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#ansys.geometry.core.designer.body.MasterBody",
        "title": "MasterBody > MasterBody > MasterBody",
        "section": "MasterBody > MasterBody",
        "text": "class ansys.geometry.core.designer.body.MasterBody(id: str, name: str, grpc_client: ansys.geometry.core.connection.client.GrpcClient, is_surface: bool = False)\n\nBases: IBody\n\nRepresents solids and surfaces organized within the design assembly.\n\nSolids and surfaces synchronize to a design within a supporting Geometry service instance.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the body.\n\nname\n\npython:str\n\nUser-defined label for the body.\n\nparent_component\n\nComponent\n\nParent component to place the new component under within the design assembly.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting geometry service instance for design modeling.\n\nis_surface\n\nbool, default: python:False\n\nWhether the master body is a surface or an 3D object (with volume). The default\nis False, in which case the master body is a surface. When True, the\nmaster body is a 3D object (with volume).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#overview",
        "title": "MasterBody > Overview",
        "section": "Overview",
        "text": "imprint_curves\nImprint all specified geometries onto specified faces of the body.\nproject_curves\nProject all specified geometries onto the body.\nimprint_projected_curves\nProject and imprint specified geometries onto the body.\nplot\nPlot the body.\nintersect\nIntersect two (or more) bodies.\nsubtract\nSubtract two (or more) bodies.\nunite\nUnite two (or more) bodies.\nreset_tessellation_cache\nDecorate MasterBody methods that need tessellation cache update.\nassign_material\nAssign a material against the active design.\nget_assigned_material\nGet the assigned material of the body.\nadd_midsurface_thickness\nAdd a mid-surface thickness to a surface body.\nadd_midsurface_offset\nAdd a mid-surface offset to a surface body.\ntranslate\nTranslate the body in a specified direction and distance.\nset_name\nSet the name of the body.\nset_fill_style\nSet the fill style of the body.\nset_suppressed\nSet the body suppression state.\nset_color\nSet the color of the body.\nrotate\nRotate the geometry body around the specified axis by a given angle.\nscale\nScale the geometry body by the given value.\nmap\nMap the geometry body to the new specified frame.\nmirror\nMirror the geometry body across the specified plane.\nget_collision\nGet the collision state between bodies.\ncopy\nCreate a copy of the body under the specified parent.\ntessellate\nTessellate the body and return the geometry as triangles.\nshell_body\nShell the body to the thickness specified.\nremove_faces\nShell by removing a given set of faces.\nid\nGet the ID of the body as a string.\nname\nGet the name of the body.\nfill_style\nGet the fill style of the body.\nis_suppressed\nGet the body suppression state.\ncolor\nGet the current color of the body.\nis_surface\nCheck if the body is a planar body.\nsurface_thickness\nGet the surface thickness of a surface body.\nsurface_offset\nGet the surface offset type of a surface body.\nfaces\nGet a list of all faces within the body.\nedges\nGet a list of all edges within the body.\nis_alive\nCheck if the body is still alive and has not been deleted.\nvolume\nCalculate the volume of the body.\nmaterial\nGet the assigned material of the body.\n__repr__\nRepresent the master body as a string.\nOverview\nimprint_curves\nproject_curves\nimprint_projected_curves\nplot\nintersect\nsubtract\nunite\nreset_tessellation_cache\nMasterBody\nassign_material\nget_assigned_material\nadd_midsurface_thickness\nadd_midsurface_offset\ntranslate\nset_name\nset_fill_style\nset_suppressed\nset_color\nrotate\nscale\nmap\nmirror\nget_collision\ncopy\ntessellate\nshell_body\nremove_faces\nid\nname\nfill_style\nis_suppressed\ncolor\nis_surface\nsurface_thickness\nsurface_offset\nfaces\nedges\nis_alive\nvolume\nmaterial\n__repr__"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#import-detail",
        "title": "MasterBody > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#property-detail",
        "title": "MasterBody > Property detail",
        "section": "Property detail",
        "text": "Get the ID of the body as a string.\nGet the name of the body.\nGet the fill style of the body.\nGet the body suppression state.\nGet the current color of the body.\nCheck if the body is a planar body.\nGet the surface thickness of a surface body.\nThis method is only for surface-type bodies that have been assigned a surface thickness.\nGet the surface offset type of a surface body.\nThis method is only for surface-type bodies that have been assigned a surface offset.\nGet a list of all faces within the body.\nGet a list of all edges within the body.\nCheck if the body is still alive and has not been deleted.\nCalculate the volume of the body.\nWhen dealing with a planar surface, a value of 0 is returned as a volume.\nGet the assigned material of the body.\nMaterial assigned to the body.\nProperty detail\npython:list\nFace\npython:list\nEdge\n0\nMaterial"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.id",
        "title": "MasterBody > Property detail > id",
        "section": "Property detail > id",
        "text": "property MasterBody.id: str\n\nGet the ID of the body as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.name",
        "title": "MasterBody > Property detail > name",
        "section": "Property detail > name",
        "text": "property MasterBody.name: str\n\nGet the name of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.fill_style",
        "title": "MasterBody > Property detail > fill_style",
        "section": "Property detail > fill_style",
        "text": "property MasterBody.fill_style: str\n\nGet the fill style of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.is_suppressed",
        "title": "MasterBody > Property detail > is_suppressed",
        "section": "Property detail > is_suppressed",
        "text": "property MasterBody.is_suppressed: bool\n\nGet the body suppression state.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.color",
        "title": "MasterBody > Property detail > color",
        "section": "Property detail > color",
        "text": "property MasterBody.color: str\n\nGet the current color of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.is_surface",
        "title": "MasterBody > Property detail > is_surface",
        "section": "Property detail > is_surface",
        "text": "property MasterBody.is_surface: bool\n\nCheck if the body is a planar body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.surface_thickness",
        "title": "MasterBody > Property detail > surface_thickness",
        "section": "Property detail > surface_thickness",
        "text": "property MasterBody.surface_thickness: pint.Quantity | None\n\nGet the surface thickness of a surface body.\n\nNotes\n\nThis method is only for surface-type bodies that have been assigned a surface thickness.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.surface_offset",
        "title": "MasterBody > Property detail > surface_offset",
        "section": "Property detail > surface_offset",
        "text": "property MasterBody.surface_offset: MidSurfaceOffsetType | None\n\nGet the surface offset type of a surface body.\n\nNotes\n\nThis method is only for surface-type bodies that have been assigned a surface offset.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.faces",
        "title": "MasterBody > Property detail > faces",
        "section": "Property detail > faces",
        "text": "property MasterBody.faces: list[ansys.geometry.core.designer.face.Face]\n\nGet a list of all faces within the body.\n\nReturns\n\npython:list[Face]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.edges",
        "title": "MasterBody > Property detail > edges",
        "section": "Property detail > edges",
        "text": "property MasterBody.edges: list[ansys.geometry.core.designer.edge.Edge]\n\nGet a list of all edges within the body.\n\nReturns\n\npython:list[Edge]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.is_alive",
        "title": "MasterBody > Property detail > is_alive",
        "section": "Property detail > is_alive",
        "text": "property MasterBody.is_alive: bool\n\nCheck if the body is still alive and has not been deleted.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.volume",
        "title": "MasterBody > Property detail > volume",
        "section": "Property detail > volume",
        "text": "property MasterBody.volume: pint.Quantity\n\nCalculate the volume of the body.\n\nNotes\n\nWhen dealing with a planar surface, a value of 0 is returned as a volume.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.material",
        "title": "MasterBody > Property detail > material",
        "section": "Property detail > material",
        "text": "property MasterBody.material: ansys.geometry.core.materials.material.Material\n\nGet the assigned material of the body.\n\nReturns\n\nMaterial\n\nMaterial assigned to the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#method-detail",
        "title": "MasterBody > Method detail",
        "section": "Method detail",
        "text": "Decorate MasterBody methods that need tessellation cache update.\nMethod to call.\nOutput of the method, if any.\nAssign a material against the active design.\nSource material data.\nGet the assigned material of the body.\nMaterial assigned to the body.\nAdd a mid-surface thickness to a surface body.\nThickness to assign.\nOnly surface bodies are eligible for mid-surface thickness assignment.\nAdd a mid-surface offset to a surface body.\nSurface offset to assign.\nOnly surface bodies are eligible for mid-surface offset assignment.\nImprint all specified geometries onto specified faces of the body.\nlist of faces to imprint the curves of the sketch onto.\nAll curves to imprint on the faces.\nAll impacted edges and faces from the imprint operation.\nProject all specified geometries onto the body.\nDirection of the projection.\nAll curves to project on the body.\nWhether to target the closest face with the projection.\nWhether to project only one curve of the entire sketch. When\nTrue, only one curve is projected.\nAll faces from the project curves operation.\nThe only_one_curve parameter allows you to optimize the server call because\nprojecting curves is an expensive operation. This reduces the workload on the\nserver side.\nProject and imprint specified geometries onto the body.\nThis method combines the project_curves() and imprint_curves() method into\none method. It has higher performance than calling them back-to-back when dealing\nwith many curves. Because it is a specialized function, this method only returns\nthe faces (and not the edges) from the imprint operation.\nDirection of the projection.\nAll curves to project on the body.\nWhether to target the closest face with the projection.\nWhether to project only one curve of the entire sketch. When\nTrue, only one curve is projected.\nAll imprinted faces from the operation.\nThe only_one_curve parameter allows you to optimize the server call because\nprojecting curves is an expensive operation. This reduces the workload on the\nserver side.\nTranslate the body in a specified direction and distance.\nDirection of the translation.\nDistance (magnitude) of the translation.\nSet the name of the body.\nSet the fill style of the body.\nSet the body suppression state.\nSet the color of the body.\nRotate the geometry body around the specified axis by a given angle.\nOrigin of the rotational axis.\nThe axis of rotation.\nAngle (magnitude) of the rotation.\nScale the geometry body by the given value.\nValue to scale the body by.\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\nMap the geometry body to the new specified frame.\nStructure defining the orientation of the body.\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\nMirror the geometry body across the specified plane.\nRepresents the mirror.\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\nGet the collision state between bodies.\nObject that the collision state is checked with.\nEnum that defines the collision state between bodies.\nCreate a copy of the body under the specified parent.\nParent component to place the new body under within the design assembly.\nName to give the new body.\nCopy of the body.\nTessellate the body and return the geometry as triangles.\nWhether to merge the body into a single mesh. When False (default), the\nnumber of triangles are preserved and only the topology is merged.\nWhen True, the individual faces of the tessellation are merged.\nMerged pyvista.PolyData if merge=True or a composite dataset.\nExtrude a box centered at the origin to create a rectangular body and\ntessellate it:\nMerge the body:\nShell the body to the thickness specified.\nShell thickness.\nTrue when successful, False when failed.\nShell by removing a given set of faces.\nFace or faces to be removed.\nShell thickness.\nTrue when successful, False when failed.\nPlot the body.\nWhether to merge the body into a single mesh. Performance improved when True.\nWhen True (default), the individual faces of the tessellation are merged.\nWhen False, the number of triangles are preserved and only the topology\nis merged.\nPath for saving a screenshot of the image that is being represented.\nWhether to enable the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\nWhether to use the colors assigned to the body in the service. The default\nis None, in which case the ansys.geometry.core.USE_SERVICE_COLORS\nglobal setting is used.\nKeyword arguments for plotting. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nExtrude a box centered at the origin to create rectangular body and\nplot it:\nPlot the body and color each face individually:\nIntersect two (or more) bodies.\nBody to intersect with.\nWhether to retain the intersected body or not.\nIf the bodies do not intersect.\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe intersected body is retained.\nSubtract two (or more) bodies.\nBody to subtract from the self parameter.\nWhether to retain the subtracted body or not.\nIf the subtraction results in an empty (complete) subtraction.\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe subtracted body is retained.\nUnite two (or more) bodies.\nBody to unite with the self parameter.\nWhether to retain the united body or not.\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe united body is retained.\nRepresent the master body as a string.\nMethod detail\nMasterBody\nmethod\nAny\nMaterial\nMaterial\nQuantity\nMidSurfaceOffsetType\npython:tuple\npython:list\nEdge\npython:list\nFace\nTrue\npython:list\nFace\nonly_one_curve\nproject_curves()\nimprint_curves()\nTrue\npython:list\nFace\nonly_one_curve\npython:None\npython:None\nCollisionType\nBody\npython:False\nFalse\nTrue\nPolyData\nMultiBlock\npyvista.PolyData\nmerge=True\nReal\nTrue\nFalse\nFace\nIterable\nFace\nReal\nTrue\nFalse\npython:True\nTrue\nTrue\nFalse\npython:str\npython:None\npython:None\nNone\nansys.tools.visualization_interface.USE_TRAME\npython:None\nNone\nansys.geometry.core.USE_SERVICE_COLORS\npython:dict\npython:None\nPlotter.add_mesh\nBody\npython:False\nValueError\nself\nother\nkeep_other\nTrue\nBody\nself\npython:False\nValueError\nself\nother\nkeep_other\nTrue\nBody\nself\npython:False\nself\nother\nkeep_other\nTrue"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.reset_tessellation_cache",
        "title": "MasterBody > Method detail > reset_tessellation_cache",
        "section": "Method detail > reset_tessellation_cache",
        "text": "MasterBody.reset_tessellation_cache()\n\nDecorate MasterBody methods that need tessellation cache update.\n\nParameters\n\nfunc\n\nmethod\n\nMethod to call.\n\nReturns\n\nAny\n\nOutput of the method, if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.assign_material",
        "title": "MasterBody > Method detail > assign_material",
        "section": "Method detail > assign_material",
        "text": "MasterBody.assign_material(material: ansys.geometry.core.materials.material.Material) -> None\n\nAssign a material against the active design.\n\nParameters\n\nmaterial\n\nMaterial\n\nSource material data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.get_assigned_material",
        "title": "MasterBody > Method detail > get_assigned_material",
        "section": "Method detail > get_assigned_material",
        "text": "MasterBody.get_assigned_material() -> ansys.geometry.core.materials.material.Material\n\nGet the assigned material of the body.\n\nReturns\n\nMaterial\n\nMaterial assigned to the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.add_midsurface_thickness",
        "title": "MasterBody > Method detail > add_midsurface_thickness",
        "section": "Method detail > add_midsurface_thickness",
        "text": "MasterBody.add_midsurface_thickness(thickness: pint.Quantity) -> None\n\nAdd a mid-surface thickness to a surface body.\n\nParameters\n\nthickness\n\nQuantity\n\nThickness to assign.\n\nNotes\n\nOnly surface bodies are eligible for mid-surface thickness assignment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.add_midsurface_offset",
        "title": "MasterBody > Method detail > add_midsurface_offset",
        "section": "Method detail > add_midsurface_offset",
        "text": "MasterBody.add_midsurface_offset(offset: MidSurfaceOffsetType) -> None\n\nAdd a mid-surface offset to a surface body.\n\nParameters\n\noffset_type\n\nMidSurfaceOffsetType\n\nSurface offset to assign.\n\nNotes\n\nOnly surface bodies are eligible for mid-surface offset assignment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.imprint_curves",
        "title": "MasterBody > Method detail > imprint_curves",
        "section": "Method detail > imprint_curves",
        "text": "abstractmethod MasterBody.imprint_curves(faces: list[ansys.geometry.core.designer.face.Face], sketch: ansys.geometry.core.sketch.sketch.Sketch) -> tuple[list[ansys.geometry.core.designer.edge.Edge], list[ansys.geometry.core.designer.face.Face]]\n\nImprint all specified geometries onto specified faces of the body.\n\nParameters\n\nfaces: list[Face]\n\nlist of faces to imprint the curves of the sketch onto.\n\nsketch: Sketch\n\nAll curves to imprint on the faces.\n\nReturns\n\npython:tuple[python:list[Edge], python:list[Face]]\n\nAll impacted edges and faces from the imprint operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.project_curves",
        "title": "MasterBody > Method detail > project_curves",
        "section": "Method detail > project_curves",
        "text": "abstractmethod MasterBody.project_curves(direction: ansys.geometry.core.math.vector.UnitVector3D, sketch: ansys.geometry.core.sketch.sketch.Sketch, closest_face: bool, only_one_curve: bool = False) -> list[ansys.geometry.core.designer.face.Face]\n\nProject all specified geometries onto the body.\n\nParameters\n\ndirection: UnitVector3D\n\nDirection of the projection.\n\nsketch: Sketch\n\nAll curves to project on the body.\n\nclosest_face: bool\n\nWhether to target the closest face with the projection.\n\nonly_one_curve: bool, default: False\n\nWhether to project only one curve of the entire sketch. When\nTrue, only one curve is projected.\n\nReturns\n\npython:list[Face]\n\nAll faces from the project curves operation.\n\nNotes\n\nThe only_one_curve parameter allows you to optimize the server call because\nprojecting curves is an expensive operation. This reduces the workload on the\nserver side.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.imprint_projected_curves",
        "title": "MasterBody > Method detail > imprint_projected_curves",
        "section": "Method detail > imprint_projected_curves",
        "text": "abstractmethod MasterBody.imprint_projected_curves(direction: ansys.geometry.core.math.vector.UnitVector3D, sketch: ansys.geometry.core.sketch.sketch.Sketch, closest_face: bool, only_one_curve: bool = False) -> list[ansys.geometry.core.designer.face.Face]\n\nProject and imprint specified geometries onto the body.\n\nThis method combines the project_curves() and imprint_curves() method into\none method. It has higher performance than calling them back-to-back when dealing\nwith many curves. Because it is a specialized function, this method only returns\nthe faces (and not the edges) from the imprint operation.\n\nParameters\n\ndirection: UnitVector3D\n\nDirection of the projection.\n\nsketch: Sketch\n\nAll curves to project on the body.\n\nclosest_face: bool\n\nWhether to target the closest face with the projection.\n\nonly_one_curve: bool, default: False\n\nWhether to project only one curve of the entire sketch. When\nTrue, only one curve is projected.\n\nReturns\n\npython:list[Face]\n\nAll imprinted faces from the operation.\n\nNotes\n\nThe only_one_curve parameter allows you to optimize the server call because\nprojecting curves is an expensive operation. This reduces the workload on the\nserver side.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.translate",
        "title": "MasterBody > Method detail > translate",
        "section": "Method detail > translate",
        "text": "MasterBody.translate(direction: ansys.geometry.core.math.vector.UnitVector3D, distance: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real) -> None\n\nTranslate the body in a specified direction and distance.\n\nParameters\n\ndirection: UnitVector3D\n\nDirection of the translation.\n\ndistance: ~pint.Quantity | Distance | Real\n\nDistance (magnitude) of the translation.\n\nReturns\n\npython:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.set_name",
        "title": "MasterBody > Method detail > set_name",
        "section": "Method detail > set_name",
        "text": "MasterBody.set_name(name: str) -> None\n\nSet the name of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.set_fill_style",
        "title": "MasterBody > Method detail > set_fill_style",
        "section": "Method detail > set_fill_style",
        "text": "MasterBody.set_fill_style(fill_style: FillStyle) -> None\n\nSet the fill style of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.set_suppressed",
        "title": "MasterBody > Method detail > set_suppressed",
        "section": "Method detail > set_suppressed",
        "text": "MasterBody.set_suppressed(suppressed: bool) -> None\n\nSet the body suppression state.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.set_color",
        "title": "MasterBody > Method detail > set_color",
        "section": "Method detail > set_color",
        "text": "MasterBody.set_color(color: str | tuple[float, float, float]) -> None\n\nSet the color of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.rotate",
        "title": "MasterBody > Method detail > rotate",
        "section": "Method detail > rotate",
        "text": "MasterBody.rotate(axis_origin: ansys.geometry.core.math.point.Point3D, axis_direction: ansys.geometry.core.math.vector.UnitVector3D, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real) -> None\n\nRotate the geometry body around the specified axis by a given angle.\n\nParameters\n\naxis_origin: Point3D\n\nOrigin of the rotational axis.\n\naxis_direction: UnitVector3D\n\nThe axis of rotation.\n\nangle: ~pint.Quantity | Angle | Real\n\nAngle (magnitude) of the rotation.\n\nReturns\n\npython:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.scale",
        "title": "MasterBody > Method detail > scale",
        "section": "Method detail > scale",
        "text": "MasterBody.scale(value: ansys.geometry.core.typing.Real) -> None\n\nScale the geometry body by the given value.\n\nParameters\n\nvalue: Real\n\nValue to scale the body by.\n\nNotes\n\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.map",
        "title": "MasterBody > Method detail > map",
        "section": "Method detail > map",
        "text": "MasterBody.map(frame: ansys.geometry.core.math.frame.Frame) -> None\n\nMap the geometry body to the new specified frame.\n\nParameters\n\nframe: Frame\n\nStructure defining the orientation of the body.\n\nNotes\n\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.mirror",
        "title": "MasterBody > Method detail > mirror",
        "section": "Method detail > mirror",
        "text": "MasterBody.mirror(plane: ansys.geometry.core.math.plane.Plane) -> None\n\nMirror the geometry body across the specified plane.\n\nParameters\n\nplane: Plane\n\nRepresents the mirror.\n\nNotes\n\nThe calling object is directly modified when this method is called.\nThus, it is important to make copies if needed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.get_collision",
        "title": "MasterBody > Method detail > get_collision",
        "section": "Method detail > get_collision",
        "text": "MasterBody.get_collision(body: Body) -> CollisionType\n\nGet the collision state between bodies.\n\nParameters\n\nbody: Body\n\nObject that the collision state is checked with.\n\nReturns\n\nCollisionType\n\nEnum that defines the collision state between bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.copy",
        "title": "MasterBody > Method detail > copy",
        "section": "Method detail > copy",
        "text": "MasterBody.copy(parent: ansys.geometry.core.designer.component.Component, name: str = None) -> Body\n\nCreate a copy of the body under the specified parent.\n\nParameters\n\nparent: Component\n\nParent component to place the new body under within the design assembly.\n\nname: str\n\nName to give the new body.\n\nReturns\n\nBody\n\nCopy of the body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.tessellate",
        "title": "MasterBody > Method detail > tessellate",
        "section": "Method detail > tessellate",
        "text": "MasterBody.tessellate(merge: bool = False, transform: ansys.geometry.core.math.matrix.Matrix44 = IDENTITY_MATRIX44) -> pyvista.PolyData | pyvista.MultiBlock\n\nTessellate the body and return the geometry as triangles.\n\nParameters\n\nmerge\n\nbool, default: python:False\n\nWhether to merge the body into a single mesh. When False (default), the\nnumber of triangles are preserved and only the topology is merged.\nWhen True, the individual faces of the tessellation are merged.\n\nReturns\n\nPolyData, MultiBlock\n\nMerged pyvista.PolyData if merge=True or a composite dataset.\n\nExamples\n\nExtrude a box centered at the origin to create a rectangular body and\ntessellate it:\n\n>>> from ansys.geometry.core.misc.units import UNITS as u\n>>> from ansys.geometry.core.sketch import Sketch\n>>> from ansys.geometry.core.math import Plane, Point2D, Point3D, UnitVector3D\n>>> from ansys.geometry.core import Modeler\n>>> modeler = Modeler()\n>>> origin = Point3D([0, 0, 0])\n>>> plane = Plane(origin, direction_x=[1, 0, 0], direction_y=[0, 0, 1])\n>>> sketch = Sketch(plane)\n>>> box = sketch.box(Point2D([2, 0]), 4, 4)\n>>> design = modeler.create_design(\"my-design\")\n>>> my_comp = design.add_component(\"my-comp\")\n>>> body = my_comp.extrude_sketch(\"my-sketch\", sketch, 1 * u.m)\n>>> blocks = body.tessellate()\n>>> blocks\n>>> MultiBlock(0x7F94EC757460)\n     N Blocks:  6\n     X Bounds:  0.000, 4.000\n     Y Bounds:  -1.000, 0.000\n     Z Bounds:  -0.500, 4.500\n\nMerge the body:\n\n>>> mesh = body.tessellate(merge=True)\n>>> mesh\nPolyData (0x7f94ec75f3a0)\n  N Cells:      12\n  N Points:     24\n  X Bounds:     0.000e+00, 4.000e+00\n  Y Bounds:     -1.000e+00, 0.000e+00\n  Z Bounds:     -5.000e-01, 4.500e+00\n  N Arrays:     0\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.shell_body",
        "title": "MasterBody > Method detail > shell_body",
        "section": "Method detail > shell_body",
        "text": "MasterBody.shell_body(offset: ansys.geometry.core.typing.Real) -> bool\n\nShell the body to the thickness specified.\n\nParameters\n\noffset\n\nReal\n\nShell thickness.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.remove_faces",
        "title": "MasterBody > Method detail > remove_faces",
        "section": "Method detail > remove_faces",
        "text": "MasterBody.remove_faces(selection: ansys.geometry.core.designer.face.Face | collections.abc.Iterable[ansys.geometry.core.designer.face.Face], offset: ansys.geometry.core.typing.Real) -> bool\n\nShell by removing a given set of faces.\n\nParameters\n\nselection\n\nFace | Iterable[Face]\n\nFace or faces to be removed.\n\noffset\n\nReal\n\nShell thickness.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.plot",
        "title": "MasterBody > Method detail > plot",
        "section": "Method detail > plot",
        "text": "abstractmethod MasterBody.plot(merge: bool = True, screenshot: str | None = None, use_trame: bool | None = None, use_service_colors: bool | None = None, **plotting_options: dict | None) -> None\n\nPlot the body.\n\nParameters\n\nmerge\n\nbool, default: python:True\n\nWhether to merge the body into a single mesh. Performance improved when True.\nWhen True (default), the individual faces of the tessellation are merged.\nWhen False, the number of triangles are preserved and only the topology\nis merged.\n\nscreenshot\n\npython:str, default: python:None\n\nPath for saving a screenshot of the image that is being represented.\n\nuse_trame\n\nbool, default: python:None\n\nWhether to enable the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\n\nuse_service_colors\n\nbool, default: python:None\n\nWhether to use the colors assigned to the body in the service. The default\nis None, in which case the ansys.geometry.core.USE_SERVICE_COLORS\nglobal setting is used.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments for plotting. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\nExamples\n\nExtrude a box centered at the origin to create rectangular body and\nplot it:\n\n>>> from ansys.geometry.core.misc.units import UNITS as u\n>>> from ansys.geometry.core.sketch import Sketch\n>>> from ansys.geometry.core.math import Plane, Point2D, Point3D, UnitVector3D\n>>> from ansys.geometry.core import Modeler\n>>> modeler = Modeler()\n>>> origin = Point3D([0, 0, 0])\n>>> plane = Plane(origin, direction_x=[1, 0, 0], direction_y=[0, 0, 1])\n>>> sketch = Sketch(plane)\n>>> box = sketch.box(Point2D([2, 0]), 4, 4)\n>>> design = modeler.create_design(\"my-design\")\n>>> mycomp = design.add_component(\"my-comp\")\n>>> body = mycomp.extrude_sketch(\"my-sketch\", sketch, 1 * u.m)\n>>> body.plot()\n\nPlot the body and color each face individually:\n\n>>> body.plot(multi_colors=True)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.intersect",
        "title": "MasterBody > Method detail > intersect",
        "section": "Method detail > intersect",
        "text": "abstractmethod MasterBody.intersect(other: Body | collections.abc.Iterable[Body], keep_other: bool = False) -> None\n\nIntersect two (or more) bodies.\n\nParameters\n\nother\n\nBody\n\nBody to intersect with.\n\nkeep_other\n\nbool, default: python:False\n\nWhether to retain the intersected body or not.\n\nRaises\n\nValueError\n\nIf the bodies do not intersect.\n\nNotes\n\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe intersected body is retained.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.subtract",
        "title": "MasterBody > Method detail > subtract",
        "section": "Method detail > subtract",
        "text": "abstractmethod MasterBody.subtract(other: Body | collections.abc.Iterable[Body], keep_other: bool = False) -> None\n\nSubtract two (or more) bodies.\n\nParameters\n\nother\n\nBody\n\nBody to subtract from the self parameter.\n\nkeep_other\n\nbool, default: python:False\n\nWhether to retain the subtracted body or not.\n\nRaises\n\nValueError\n\nIf the subtraction results in an empty (complete) subtraction.\n\nNotes\n\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe subtracted body is retained.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.unite",
        "title": "MasterBody > Method detail > unite",
        "section": "Method detail > unite",
        "text": "abstractmethod MasterBody.unite(other: Body | collections.abc.Iterable[Body], keep_other: bool = False) -> None\n\nUnite two (or more) bodies.\n\nParameters\n\nother\n\nBody\n\nBody to unite with the self parameter.\n\nkeep_other\n\nbool, default: python:False\n\nWhether to retain the united body or not.\n\nNotes\n\nThe self parameter is directly modified with the result, and\nthe other parameter is consumed. Thus, it is important to make\ncopies if needed. If the keep_other parameter is set to True,\nthe united body is retained.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/MasterBody",
        "href": "api/ansys/geometry/core/designer/body/MasterBody.html#MasterBody.__repr__",
        "title": "MasterBody > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "MasterBody.__repr__() -> str\n\nRepresent the master body as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse",
        "href": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse.html#sketchellipse",
        "title": "SketchEllipse",
        "section": "SketchEllipse",
        "text": "Bases: ansys.geometry.core.sketch.face.SketchFace, ansys.geometry.core.shapes.curves.ellipse.Ellipse\nProvides for modeling an ellipse.\nCenter point of the ellipse.\nMajor radius of the ellipse.\nMinor radius of the ellipse.\nPlacement angle for orientation alignment.\nPlane containing the sketched ellipse, which is the global XY plane\nby default.\nSketchEllipse\nSketchEllipse\nansys.geometry.core.sketch.face.SketchFace\nansys.geometry.core.shapes.curves.ellipse.Ellipse\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\nQuantity\nAngle\nReal\nPlane\noptional"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse",
        "href": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse.html#ansys.geometry.core.sketch.ellipse.SketchEllipse",
        "title": "SketchEllipse > SketchEllipse > SketchEllipse",
        "section": "SketchEllipse > SketchEllipse",
        "text": "class ansys.geometry.core.sketch.ellipse.SketchEllipse(center: ansys.geometry.core.math.point.Point2D, major_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, minor_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0, plane: ansys.geometry.core.math.plane.Plane = Plane())\n\nBases: ansys.geometry.core.sketch.face.SketchFace, ansys.geometry.core.shapes.curves.ellipse.Ellipse\n\nProvides for modeling an ellipse.\n\nParameters\n\ncenter: Point2D\n\nCenter point of the ellipse.\n\nmajor_radius\n\nQuantity | Distance | Real\n\nMajor radius of the ellipse.\n\nminor_radius\n\nQuantity | Distance | Real\n\nMinor radius of the ellipse.\n\nangle\n\nQuantity | Angle | Real, default: 0\n\nPlacement angle for orientation alignment.\n\nplane\n\nPlane, optional\n\nPlane containing the sketched ellipse, which is the global XY plane\nby default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse",
        "href": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse.html#overview",
        "title": "SketchEllipse > Overview",
        "section": "Overview",
        "text": "plane_change\nRedefine the plane containing SketchEllipse objects.\ncenter\nCenter point of the ellipse.\nangle\nOrientation angle of the ellipse.\nperimeter\nPerimeter of the circle.\nvisualization_polydata\nVTK polydata representation for PyVista visualization.\nOverview\nplane_change\nSketchEllipse\ncenter\nangle\nperimeter\nvisualization_polydata"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse",
        "href": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse.html#import-detail",
        "title": "SketchEllipse > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse",
        "href": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse.html#property-detail",
        "title": "SketchEllipse > Property detail",
        "section": "Property detail",
        "text": "Center point of the ellipse.\nOrientation angle of the ellipse.\nPerimeter of the circle.\nThis property resolves the dilemma between using the SkethFace.perimeter\nproperty and the Ellipse.perimeter property.\nVTK polydata representation for PyVista visualization.\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\nVTK pyvista.Polydata configuration.\nProperty detail\nSkethFace.perimeter\nEllipse.perimeter\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse",
        "href": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse.html#SketchEllipse.center",
        "title": "SketchEllipse > Property detail > center",
        "section": "Property detail > center",
        "text": "property SketchEllipse.center: ansys.geometry.core.math.point.Point2D\n\nCenter point of the ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse",
        "href": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse.html#SketchEllipse.angle",
        "title": "SketchEllipse > Property detail > angle",
        "section": "Property detail > angle",
        "text": "property SketchEllipse.angle: pint.Quantity\n\nOrientation angle of the ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse",
        "href": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse.html#SketchEllipse.perimeter",
        "title": "SketchEllipse > Property detail > perimeter",
        "section": "Property detail > perimeter",
        "text": "property SketchEllipse.perimeter: pint.Quantity\n\nPerimeter of the circle.\n\nNotes\n\nThis property resolves the dilemma between using the SkethFace.perimeter\nproperty and the Ellipse.perimeter property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse",
        "href": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse.html#SketchEllipse.visualization_polydata",
        "title": "SketchEllipse > Property detail > visualization_polydata",
        "section": "Property detail > visualization_polydata",
        "text": "property SketchEllipse.visualization_polydata: pyvista.PolyData\n\nVTK polydata representation for PyVista visualization.\n\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\n\nReturns\n\npyvista.PolyData\n\nVTK pyvista.Polydata configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse",
        "href": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse.html#method-detail",
        "title": "SketchEllipse > Method detail",
        "section": "Method detail",
        "text": "Redefine the plane containing SketchEllipse objects.\nDesired new plane that is to contain the sketched ellipse.\nThis implies that their 3D definition might suffer changes.\nMethod detail\nSketchEllipse\nPlane"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse",
        "href": "api/ansys/geometry/core/sketch/ellipse/SketchEllipse.html#SketchEllipse.plane_change",
        "title": "SketchEllipse > Method detail > plane_change",
        "section": "Method detail > plane_change",
        "text": "SketchEllipse.plane_change(plane: ansys.geometry.core.math.plane.Plane) -> None\n\nRedefine the plane containing SketchEllipse objects.\n\nParameters\n\nplane\n\nPlane\n\nDesired new plane that is to contain the sketched ellipse.\n\nNotes\n\nThis implies that their 3D definition might suffer changes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/remote/index",
        "href": "getting_started/remote/index.html#launch-a-remote-session",
        "title": "Launch a remote session",
        "section": "Launch a remote session",
        "text": "If a remote server is running Ansys 2024 R1 or later and is also running PIM (Product\nInstance Manager), you can use PIM to start a Discovery or SpaceClaim session\nthat PyAnsys Geometry can connect to.\nThis option is only available for Ansys employees.\nOnly Ansys employees with credentials to the Artifact Repository Browser\ncan download ZIP files for PIM.\nLaunch a remote session"
    },
    {
        "objectID": "getting_started/remote/index",
        "href": "getting_started/remote/index.html#set-up-the-client-machine",
        "title": "Launch a remote session > Set up the client machine",
        "section": "Set up the client machine",
        "text": "To establish a connection to the existing session from your client machine, open\nPython and run these commands:\nThe preceding commands launch a Discovery (version 24.1) session with the API server.\nYou receive a model object back from Discovery that you then use as a PyAnsys Geometry client.\nStart SpaceClaim or the Geometry service remotely using commands like these:\nPerforming all these operations remotely eliminates the need to worry about the\nstarting endpoint or managing the session.\nSet up the client machine\nmodel"
    },
    {
        "objectID": "getting_started/remote/index",
        "href": "getting_started/remote/index.html#end-the-session",
        "title": "Launch a remote session > End the session",
        "section": "End the session",
        "text": "To end the session, run the corresponding command:\nGo to Getting started\nEnd the session"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface.html#reversedtrimmedsurface",
        "title": "ReversedTrimmedSurface",
        "section": "ReversedTrimmedSurface",
        "text": "Bases: TrimmedSurface\nRepresents a reversed trimmed surface.\nWhen a surface is reversed, its normal vector is negated to provide the proper\noutward facing vector.\nFace that the trimmed surface belongs to.\nUnderlying mathematical representation of the surface.\nReversedTrimmedSurface\nReversedTrimmedSurface\nTrimmedSurface\nFace\nSurface"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface.html#ansys.geometry.core.shapes.surfaces.trimmed_surface.ReversedTrimmedSurface",
        "title": "ReversedTrimmedSurface > ReversedTrimmedSurface > ReversedTrimmedSurface",
        "section": "ReversedTrimmedSurface > ReversedTrimmedSurface",
        "text": "class ansys.geometry.core.shapes.surfaces.trimmed_surface.ReversedTrimmedSurface(geometry: ansys.geometry.core.shapes.surfaces.surface.Surface, box_uv: ansys.geometry.core.shapes.box_uv.BoxUV)\n\nBases: TrimmedSurface\n\nRepresents a reversed trimmed surface.\n\nWhen a surface is reversed, its normal vector is negated to provide the proper\noutward facing vector.\n\nParameters\n\nface\n\nFace\n\nFace that the trimmed surface belongs to.\n\ngeometry\n\nSurface\n\nUnderlying mathematical representation of the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface.html#overview",
        "title": "ReversedTrimmedSurface > Overview",
        "section": "Overview",
        "text": "normal\nProvide the normal to the surface.\nproject_point\nProject a point onto the surface and evaluate it at that location.\nOverview\nnormal\nproject_point"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface.html#import-detail",
        "title": "ReversedTrimmedSurface > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface.html#method-detail",
        "title": "ReversedTrimmedSurface > Method detail",
        "section": "Method detail",
        "text": "Provide the normal to the surface.\nFirst coordinate of the 2D representation of a surface in UV space.\nSecond coordinate of the 2D representation of a surface in UV space.\nUnit vector is normal to the surface at the given UV coordinates.\nProject a point onto the surface and evaluate it at that location.\nPoint to project onto the surface.\nResulting evaluation.\nMethod detail\nReal\nReal\nUnitVector3D\nPoint3D\nSurfaceEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface.html#ReversedTrimmedSurface.normal",
        "title": "ReversedTrimmedSurface > Method detail > normal",
        "section": "Method detail > normal",
        "text": "ReversedTrimmedSurface.normal(u: ansys.geometry.core.typing.Real, v: ansys.geometry.core.typing.Real) -> ansys.geometry.core.math.vector.UnitVector3D\n\nProvide the normal to the surface.\n\nParameters\n\nu\n\nReal\n\nFirst coordinate of the 2D representation of a surface in UV space.\n\nv\n\nReal\n\nSecond coordinate of the 2D representation of a surface in UV space.\n\nReturns\n\nUnitVector3D\n\nUnit vector is normal to the surface at the given UV coordinates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface",
        "href": "api/ansys/geometry/core/shapes/surfaces/trimmed_surface/ReversedTrimmedSurface.html#ReversedTrimmedSurface.project_point",
        "title": "ReversedTrimmedSurface > Method detail > project_point",
        "section": "Method detail > project_point",
        "text": "ReversedTrimmedSurface.project_point(point: ansys.geometry.core.math.point.Point3D) -> ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation\n\nProject a point onto the surface and evaluate it at that location.\n\nParameters\n\npoint\n\nPoint3D\n\nPoint to project onto the surface.\n\nReturns\n\nSurfaceEvaluation\n\nResulting evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/03_modeling/cut_operation_on_extrude",
        "href": "examples/03_modeling/cut_operation_on_extrude.html#modeling-extruded-plate-with-cut-operations",
        "title": "Examples > Modeling: Extruded plate with cut operations",
        "section": "Modeling: Extruded plate with cut operations",
        "text": "As seen in the Rectangular plate with multiple bodies example, you can create a complex sketch with holes and extrude it to create a body. However, you can also perform cut operations on the extruded body to achieve similar results.\nModeling: Extruded plate with cut operations"
    },
    {
        "objectID": "examples/03_modeling/cut_operation_on_extrude",
        "href": "examples/03_modeling/cut_operation_on_extrude.html#perform-required-imports",
        "title": "Examples > Modeling: Extruded plate with cut operations > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/03_modeling/cut_operation_on_extrude",
        "href": "examples/03_modeling/cut_operation_on_extrude.html#define-sketch-profile-without-holes",
        "title": "Examples > Modeling: Extruded plate with cut operations > Define sketch profile without holes",
        "section": "Define sketch profile without holes",
        "text": "Create a sketch profile for the proposed design. The sketch is the same as the Rectangular plate with multiple bodies example, but without the holes.\nThese holes are created by performing cut operations on the extruded body in the next steps.\nDefine sketch profile without holes"
    },
    {
        "objectID": "examples/03_modeling/cut_operation_on_extrude",
        "href": "examples/03_modeling/cut_operation_on_extrude.html#define-sketch-profile-for-holes",
        "title": "Examples > Modeling: Extruded plate with cut operations > Define sketch profile for holes",
        "section": "Define sketch profile for holes",
        "text": "Create a sketch profile for the holes in the proposed design. The holes are created by sketching circles at the four corners of the plate. First create a reference sketch for all the circles. This sketch is translated to the four corners of the plate.\nDefine sketch profile for holes"
    },
    {
        "objectID": "examples/03_modeling/cut_operation_on_extrude",
        "href": "examples/03_modeling/cut_operation_on_extrude.html#perform-cut-operations-on-the-extruded-body",
        "title": "Examples > Modeling: Extruded plate with cut operations > Perform cut operations on the extruded body",
        "section": "Perform cut operations on the extruded body",
        "text": "Perform cut operations on the extruded body to create holes at the four corners of the plate.\nPerform cut operations on the extruded body"
    },
    {
        "objectID": "examples/03_modeling/cut_operation_on_extrude",
        "href": "examples/03_modeling/cut_operation_on_extrude.html#close-the-modeler",
        "title": "Examples > Modeling: Extruded plate with cut operations > Close the modeler",
        "section": "Close the modeler",
        "text": "Close the modeler to free up resources and release the connection.\nClose the modeler"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/index",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/index.html#the-trimmed_curvepy-module",
        "title": "The trimmed_curve.py module",
        "section": "The trimmed_curve.py module",
        "text": "The trimmed_curve.py module\ntrimmed_curve.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/index",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/index.html#summary",
        "title": "The trimmed_curve.py module > Summary",
        "section": "Summary",
        "text": "TrimmedCurve\nRepresents a trimmed curve.\nReversedTrimmedCurve\nRepresents a reversed trimmed curve.\nSummary\nTrimmedCurve\nReversedTrimmedCurve"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/trimmed_curve/index",
        "href": "api/ansys/geometry/core/shapes/curves/trimmed_curve/index.html#description",
        "title": "The trimmed_curve.py module > Description",
        "section": "Description",
        "text": "Trimmed curve class.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas.html#inexactedgeproblemareas",
        "title": "InexactEdgeProblemAreas",
        "section": "InexactEdgeProblemAreas",
        "text": "Bases: ProblemArea\nRepresents an inexact edge problem area with unique identifier and associated edges.\nServer-defined ID for the problem area.\nActive supporting geometry service instance for design modeling.\nList of edges associated with the design.\nInexactEdgeProblemAreas\nInexactEdgeProblemAreas\nProblemArea\npython:str\nGrpcClient\npython:list\nEdge"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas.html#ansys.geometry.core.tools.problem_areas.InexactEdgeProblemAreas",
        "title": "InexactEdgeProblemAreas > InexactEdgeProblemAreas > InexactEdgeProblemAreas",
        "section": "InexactEdgeProblemAreas > InexactEdgeProblemAreas",
        "text": "class ansys.geometry.core.tools.problem_areas.InexactEdgeProblemAreas(id: str, grpc_client: ansys.geometry.core.connection.GrpcClient, edges: list[ansys.geometry.core.designer.edge.Edge])\n\nBases: ProblemArea\n\nRepresents an inexact edge problem area with unique identifier and associated edges.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the problem area.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting geometry service instance for design modeling.\n\nedges\n\npython:list[Edge]\n\nList of edges associated with the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas.html#overview",
        "title": "InexactEdgeProblemAreas > Overview",
        "section": "Overview",
        "text": "fix\nFix the problem area.\nedges\nThe list of edges connected to this problem area.\nOverview\nfix\nedges"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas.html#import-detail",
        "title": "InexactEdgeProblemAreas > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas.html#property-detail",
        "title": "InexactEdgeProblemAreas > Property detail",
        "section": "Property detail",
        "text": "The list of edges connected to this problem area.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas.html#InexactEdgeProblemAreas.edges",
        "title": "InexactEdgeProblemAreas > Property detail > edges",
        "section": "Property detail > edges",
        "text": "property InexactEdgeProblemAreas.edges: list[ansys.geometry.core.designer.edge.Edge]\n\nThe list of edges connected to this problem area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas.html#method-detail",
        "title": "InexactEdgeProblemAreas > Method detail",
        "section": "Method detail",
        "text": "Fix the problem area.\nMessage containing created and/or modified bodies.\nMethod detail\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/InexactEdgeProblemAreas.html#InexactEdgeProblemAreas.fix",
        "title": "InexactEdgeProblemAreas > Method detail > fix",
        "section": "Method detail > fix",
        "text": "InexactEdgeProblemAreas.fix() -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFix the problem area.\n\nReturns\n\nmessage: RepairToolMessage\n\nMessage containing created and/or modified bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#geometryplotter",
        "title": "GeometryPlotter",
        "section": "GeometryPlotter",
        "text": "Bases: ansys.tools.visualization_interface.Plotter\nPlotter for PyAnsys Geometry objects.\nThis class is an implementation of the PlotterInterface class.\nWhether to use trame visualizer or not, by default None.\nWhether to use service colors or not, by default None.\nWhether to allow picking or not, by default False.\nWhether to show the plane in the scene, by default True.\nGeometryPlotter\nGeometryPlotter\nansys.tools.visualization_interface.Plotter\noptional\noptional\noptional\noptional"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#ansys.geometry.core.plotting.plotter.GeometryPlotter",
        "title": "GeometryPlotter > GeometryPlotter > GeometryPlotter",
        "section": "GeometryPlotter > GeometryPlotter",
        "text": "class ansys.geometry.core.plotting.plotter.GeometryPlotter(use_trame: bool | None = None, use_service_colors: bool | None = None, allow_picking: bool = False, show_plane: bool = True)\n\nBases: ansys.tools.visualization_interface.Plotter\n\nPlotter for PyAnsys Geometry objects.\n\nThis class is an implementation of the PlotterInterface class.\n\nParameters\n\nuse_trame\n\nbool, optional\n\nWhether to use trame visualizer or not, by default None.\n\nuse_service_colors\n\nbool, optional\n\nWhether to use service colors or not, by default None.\n\nallow_picking\n\nbool, optional\n\nWhether to allow picking or not, by default False.\n\nshow_plane\n\nbool, optional\n\nWhether to show the plane in the scene, by default True.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#overview",
        "title": "GeometryPlotter > Overview",
        "section": "Overview",
        "text": "add_frame\nPlot a frame in the scene.\nadd_plane\nPlot a plane in the scene.\nadd_sketch\nPlot a sketch in the scene.\nadd_body_edges\nAdd the outer edges of a body to the plot.\nadd_body\nAdd a body to the scene.\nadd_face\nAdd a face to the scene.\nadd_component\nAdd a component to the scene.\nadd_component_by_body\nAdd a component on a per body basis.\nadd_sketch_polydata\nAdd sketches to the scene from PyVista polydata.\nadd_design_point\nAdd a DesignPoint object to the plotter.\nplot_iter\nAdd a list of any type of object to the scene.\nplot\nAdd a custom mesh to the plotter.\nshow\nShow the plotter.\nexport_glb\nExport the design to a glb file. Does not support picked objects.\nuse_service_colors\nIndicates whether to use service colors for plotting purposes.\nOverview\nadd_frame\nadd_plane\nadd_sketch\nadd_body_edges\nadd_body\nadd_face\nadd_component\nadd_component_by_body\nadd_sketch_polydata\nadd_design_point\nplot_iter\nplot\nshow\nexport_glb\nuse_service_colors"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#import-detail",
        "title": "GeometryPlotter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#property-detail",
        "title": "GeometryPlotter > Property detail",
        "section": "Property detail",
        "text": "Indicates whether to use service colors for plotting purposes.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.use_service_colors",
        "title": "GeometryPlotter > Property detail > use_service_colors",
        "section": "Property detail > use_service_colors",
        "text": "property GeometryPlotter.use_service_colors: bool\n\nIndicates whether to use service colors for plotting purposes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#method-detail",
        "title": "GeometryPlotter > Method detail",
        "section": "Method detail",
        "text": "Plot a frame in the scene.\nFrame to render in the scene.\ndictionary containing parameters accepted by the\npyvista.create_axes_marker() class for customizing\nthe frame rendering in the scene.\nPlot a plane in the scene.\nPlane to render in the scene.\ndictionary containing parameters accepted by the\npyvista.Plane function for customizing the mesh\nrepresenting the plane.\ndictionary containing parameters accepted by the\nPlotter.add_mesh method for\ncustomizing the mesh rendering of the plane.\nPlot a sketch in the scene.\nSketch to render in the scene.\nWhether to render the sketch plane in the scene.\nWhether to show the frame in the scene.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nAdd the outer edges of a body to the plot.\nThis method has the side effect of adding the edges to the GeomObject that\nyou pass through the parameters.\nBody of which to add the edges.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nAdd a body to the scene.\nBody to add.\nWhether to merge the body into a single mesh. When True, the\nindividual faces of the tessellation are merged. This\npreserves the number of triangles and only merges the topology.\nKeyword arguments. For allowable keyword arguments,\nsee the Plotter.add_mesh method.\nAdd a face to the scene.\nFace to add.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nAdd a component to the scene.\nComponent to add.\nWhether to merge the component into a single dataset. When\nTrue, all the individual bodies are effectively combined\ninto a single dataset without any hierarchy.\nWhether to merge each body into a single dataset. When True,\nall the faces of each individual body are effectively combined\ninto a single dataset without separating faces.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nAdd a component on a per body basis.\nComponent to add.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nThis will allow to make use of the service colors. At the same time, it will be\nslower than the add_component method.\nAdd sketches to the scene from PyVista polydata.\nPolydata to add.\nSketch to add.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nAdd a DesignPoint object to the plotter.\nDesignPoint to add.\nAdd a list of any type of object to the scene.\nThese types of objects are supported: Body, Component, list[pv.PolyData],\npv.MultiBlock, and Sketch.\nlist of objects you want to plot.\nRegular expression with the desired name or names you want to include in the plotter.\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\nAdd a custom mesh to the plotter.\nRegular expression with the desired name or names you want to include in the plotter.\nRegular expression with the desired name or names you want to include in the plotter.\nKeyword arguments. For allowable keyword arguments, depend of the backend implementation\nyou are using.\nShow the plotter.\nObject you can add to the plotter.\nPath to save a screenshot of the plotter.\nKeyword arguments for the plotter. Arguments depend of the backend implementation\nyou are using.\nExport the design to a glb file. Does not support picked objects.\nObject you can add to the plotter.\nPath to save a GLB file of the plotter. If None, the file will be saved as\ntemp_glb.glb.\nKeyword arguments for the plotter. Arguments depend of the backend implementation\nyou are using.\nPath to the exported glb file.\nMethod detail\nFrame\npython:dict\npython:None\npyvista.create_axes_marker()\nPlane\npython:dict\npython:None\npyvista.Plane\npython:dict\npython:None\nPlotter.add_mesh\nSketch\npython:False\npython:False\npython:dict\npython:None\nPlotter.add_mesh\nMeshObjectPlot\npython:dict\npython:None\nPlotter.add_mesh\nBody\npython:False\nTrue\npython:dict\npython:None\nPlotter.add_mesh\nFace\npython:dict\npython:None\nPlotter.add_mesh\nComponent\npython:False\nTrue\npython:False\nTrue\npython:dict\npython:None\nPlotter.add_mesh\nComponent\npython:dict\npython:None\nPlotter.add_mesh\npython:list\npyvista.PolyData\nSketch\npython:None\npython:dict\npython:None\nPlotter.add_mesh\nDesignPoint\nBody\nComponent\nlist[pv.PolyData]\npv.MultiBlock\nSketch\npython:list\nAny\npython:str\npython:None\npython:dict\npython:None\nPlotter.add_mesh\npython:str\npython:None\npython:dict\npython:None\nAny\npython:None\npython:str\npython:None\npython:dict\npython:None\nAny\npython:None\npython:str\nPath\npython:None\npython:dict\npython:None\nPath"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.add_frame",
        "title": "GeometryPlotter > Method detail > add_frame",
        "section": "Method detail > add_frame",
        "text": "GeometryPlotter.add_frame(frame: ansys.geometry.core.math.frame.Frame, plotting_options: dict | None = None) -> None\n\nPlot a frame in the scene.\n\nParameters\n\nframe\n\nFrame\n\nFrame to render in the scene.\n\nplotting_options\n\npython:dict, default: python:None\n\ndictionary containing parameters accepted by the\npyvista.create_axes_marker() class for customizing\nthe frame rendering in the scene.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.add_plane",
        "title": "GeometryPlotter > Method detail > add_plane",
        "section": "Method detail > add_plane",
        "text": "GeometryPlotter.add_plane(plane: ansys.geometry.core.math.plane.Plane, plane_options: dict | None = None, plotting_options: dict | None = None) -> None\n\nPlot a plane in the scene.\n\nParameters\n\nplane\n\nPlane\n\nPlane to render in the scene.\n\nplane_options\n\npython:dict, default: python:None\n\ndictionary containing parameters accepted by the\npyvista.Plane function for customizing the mesh\nrepresenting the plane.\n\nplotting_options\n\npython:dict, default: python:None\n\ndictionary containing parameters accepted by the\nPlotter.add_mesh method for\ncustomizing the mesh rendering of the plane.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.add_sketch",
        "title": "GeometryPlotter > Method detail > add_sketch",
        "section": "Method detail > add_sketch",
        "text": "GeometryPlotter.add_sketch(sketch: ansys.geometry.core.sketch.sketch.Sketch, show_plane: bool = False, show_frame: bool = False, **plotting_options: dict | None) -> None\n\nPlot a sketch in the scene.\n\nParameters\n\nsketch\n\nSketch\n\nSketch to render in the scene.\n\nshow_plane\n\nbool, default: python:False\n\nWhether to render the sketch plane in the scene.\n\nshow_frame\n\nbool, default: python:False\n\nWhether to show the frame in the scene.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.add_body_edges",
        "title": "GeometryPlotter > Method detail > add_body_edges",
        "section": "Method detail > add_body_edges",
        "text": "GeometryPlotter.add_body_edges(body_plot: ansys.tools.visualization_interface.MeshObjectPlot, **plotting_options: dict | None) -> None\n\nAdd the outer edges of a body to the plot.\n\nThis method has the side effect of adding the edges to the GeomObject that\nyou pass through the parameters.\n\nParameters\n\nbody_plot\n\nMeshObjectPlot\n\nBody of which to add the edges.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.add_body",
        "title": "GeometryPlotter > Method detail > add_body",
        "section": "Method detail > add_body",
        "text": "GeometryPlotter.add_body(body: ansys.geometry.core.designer.body.Body, merge: bool = False, **plotting_options: dict | None) -> None\n\nAdd a body to the scene.\n\nParameters\n\nbody\n\nBody\n\nBody to add.\n\nmerge\n\nbool, default: python:False\n\nWhether to merge the body into a single mesh. When True, the\nindividual faces of the tessellation are merged. This\npreserves the number of triangles and only merges the topology.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments,\nsee the Plotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.add_face",
        "title": "GeometryPlotter > Method detail > add_face",
        "section": "Method detail > add_face",
        "text": "GeometryPlotter.add_face(face: ansys.geometry.core.designer.face.Face, **plotting_options: dict | None) -> None\n\nAdd a face to the scene.\n\nParameters\n\nface\n\nFace\n\nFace to add.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.add_component",
        "title": "GeometryPlotter > Method detail > add_component",
        "section": "Method detail > add_component",
        "text": "GeometryPlotter.add_component(component: ansys.geometry.core.designer.component.Component, merge_component: bool = False, merge_bodies: bool = False, **plotting_options) -> None\n\nAdd a component to the scene.\n\nParameters\n\ncomponent\n\nComponent\n\nComponent to add.\n\nmerge_component\n\nbool, default: python:False\n\nWhether to merge the component into a single dataset. When\nTrue, all the individual bodies are effectively combined\ninto a single dataset without any hierarchy.\n\nmerge_bodies\n\nbool, default: python:False\n\nWhether to merge each body into a single dataset. When True,\nall the faces of each individual body are effectively combined\ninto a single dataset without separating faces.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.add_component_by_body",
        "title": "GeometryPlotter > Method detail > add_component_by_body",
        "section": "Method detail > add_component_by_body",
        "text": "GeometryPlotter.add_component_by_body(component: ansys.geometry.core.designer.component.Component, merge_bodies: bool, **plotting_options: dict | None) -> None\n\nAdd a component on a per body basis.\n\nParameters\n\ncomponent\n\nComponent\n\nComponent to add.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\nNotes\n\nThis will allow to make use of the service colors. At the same time, it will be\nslower than the add_component method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.add_sketch_polydata",
        "title": "GeometryPlotter > Method detail > add_sketch_polydata",
        "section": "Method detail > add_sketch_polydata",
        "text": "GeometryPlotter.add_sketch_polydata(polydata_entries: list[pyvista.PolyData], sketch: ansys.geometry.core.sketch.sketch.Sketch = None, **plotting_options) -> None\n\nAdd sketches to the scene from PyVista polydata.\n\nParameters\n\npolydata_entries\n\npython:list[pyvista.PolyData]\n\nPolydata to add.\n\nsketch\n\nSketch, default: python:None\n\nSketch to add.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.add_design_point",
        "title": "GeometryPlotter > Method detail > add_design_point",
        "section": "Method detail > add_design_point",
        "text": "GeometryPlotter.add_design_point(design_point: ansys.geometry.core.designer.designpoint.DesignPoint, **plotting_options) -> None\n\nAdd a DesignPoint object to the plotter.\n\nParameters\n\ndesign_point\n\nDesignPoint\n\nDesignPoint to add.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.plot_iter",
        "title": "GeometryPlotter > Method detail > plot_iter",
        "section": "Method detail > plot_iter",
        "text": "GeometryPlotter.plot_iter(plotting_list: list[Any], name_filter: str = None, **plotting_options) -> None\n\nAdd a list of any type of object to the scene.\n\nThese types of objects are supported: Body, Component, list[pv.PolyData],\npv.MultiBlock, and Sketch.\n\nParameters\n\nplotting_list\n\npython:list[Any]\n\nlist of objects you want to plot.\n\nname_filter\n\npython:str, default: python:None\n\nRegular expression with the desired name or names you want to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, see the\nPlotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.plot",
        "title": "GeometryPlotter > Method detail > plot",
        "section": "Method detail > plot",
        "text": "GeometryPlotter.plot(plottable_object: Any, name_filter: str = None, **plotting_options) -> None\n\nAdd a custom mesh to the plotter.\n\nParameters\n\nplottable_object\n\npython:str, default: python:None\n\nRegular expression with the desired name or names you want to include in the plotter.\n\nname_filter: str, default: None\n\nRegular expression with the desired name or names you want to include in the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments. For allowable keyword arguments, depend of the backend implementation\nyou are using.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.show",
        "title": "GeometryPlotter > Method detail > show",
        "section": "Method detail > show",
        "text": "GeometryPlotter.show(plotting_object: Any = None, screenshot: str | None = None, **plotting_options) -> None | list[Any]\n\nShow the plotter.\n\nParameters\n\nplotting_object\n\nAny, default: python:None\n\nObject you can add to the plotter.\n\nscreenshot\n\npython:str, default: python:None\n\nPath to save a screenshot of the plotter.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments for the plotter. Arguments depend of the backend implementation\nyou are using.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter",
        "href": "api/ansys/geometry/core/plotting/plotter/GeometryPlotter.html#GeometryPlotter.export_glb",
        "title": "GeometryPlotter > Method detail > export_glb",
        "section": "Method detail > export_glb",
        "text": "GeometryPlotter.export_glb(plotting_object: Any = None, filename: str | pathlib.Path | None = None, **plotting_options) -> pathlib.Path\n\nExport the design to a glb file. Does not support picked objects.\n\nParameters\n\nplotting_object\n\nAny, default: python:None\n\nObject you can add to the plotter.\n\nfilename\n\npython:str | Path, default: python:None\n\nPath to save a GLB file of the plotter. If None, the file will be saved as\ntemp_glb.glb.\n\n**plotting_options\n\npython:dict, default: python:None\n\nKeyword arguments for the plotter. Arguments depend of the backend implementation\nyou are using.\n\nReturns\n\nPath\n\nPath to the exported glb file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/index",
        "href": "api/ansys/geometry/core/sketch/sketch/index.html#the-sketchpy-module",
        "title": "The sketch.py module",
        "section": "The sketch.py module",
        "text": "The sketch.py module\nsketch.py"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/index",
        "href": "api/ansys/geometry/core/sketch/sketch/index.html#summary",
        "title": "The sketch.py module > Summary",
        "section": "Summary",
        "text": "Sketch\nProvides for building 2D sketch elements.\nSketchObject\nType to refer to both SketchEdge and SketchFace.\nSummary\nSketch\nSketchObject\nSketchEdge\nSketchFace"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/index",
        "href": "api/ansys/geometry/core/sketch/sketch/index.html#description",
        "title": "The sketch.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a sketch.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/index",
        "href": "api/ansys/geometry/core/sketch/sketch/index.html#module-detail",
        "title": "The sketch.py module > Module detail",
        "section": "Module detail",
        "text": "Type to refer to both SketchEdge and SketchFace.\nModule detail\nSketchEdge\nSketchFace"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/index",
        "href": "api/ansys/geometry/core/sketch/sketch/index.html#sketch.SketchObject",
        "title": "The sketch.py module > Module detail > SketchObject",
        "section": "Module detail > SketchObject",
        "text": "sketch.SketchObject\n\nType to refer to both SketchEdge and SketchFace.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas.html#duplicatefaceproblemareas",
        "title": "DuplicateFaceProblemAreas",
        "section": "DuplicateFaceProblemAreas",
        "text": "Bases: ProblemArea\nProvides duplicate face problem area definition.\nRepresents a duplicate face problem area with unique identifier and associated faces.\nServer-defined ID for the problem area.\nActive supporting geometry service instance for design modeling.\nList of faces associated with the design.\nDuplicateFaceProblemAreas\nDuplicateFaceProblemAreas\nProblemArea\npython:str\nGrpcClient\npython:list\nFace"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas.html#ansys.geometry.core.tools.problem_areas.DuplicateFaceProblemAreas",
        "title": "DuplicateFaceProblemAreas > DuplicateFaceProblemAreas > DuplicateFaceProblemAreas",
        "section": "DuplicateFaceProblemAreas > DuplicateFaceProblemAreas",
        "text": "class ansys.geometry.core.tools.problem_areas.DuplicateFaceProblemAreas(id: str, grpc_client: ansys.geometry.core.connection.GrpcClient, faces: list[ansys.geometry.core.designer.face.Face])\n\nBases: ProblemArea\n\nProvides duplicate face problem area definition.\n\nRepresents a duplicate face problem area with unique identifier and associated faces.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the problem area.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting geometry service instance for design modeling.\n\nfaces\n\npython:list[Face]\n\nList of faces associated with the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas.html#overview",
        "title": "DuplicateFaceProblemAreas > Overview",
        "section": "Overview",
        "text": "fix\nFix the problem area.\nfaces\nThe list of faces connected to this problem area.\nOverview\nfix\nfaces"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas.html#import-detail",
        "title": "DuplicateFaceProblemAreas > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas.html#property-detail",
        "title": "DuplicateFaceProblemAreas > Property detail",
        "section": "Property detail",
        "text": "The list of faces connected to this problem area.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas.html#DuplicateFaceProblemAreas.faces",
        "title": "DuplicateFaceProblemAreas > Property detail > faces",
        "section": "Property detail > faces",
        "text": "property DuplicateFaceProblemAreas.faces: list[ansys.geometry.core.designer.face.Face]\n\nThe list of faces connected to this problem area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas.html#method-detail",
        "title": "DuplicateFaceProblemAreas > Method detail",
        "section": "Method detail",
        "text": "Fix the problem area.\nMessage containing created and/or modified bodies.\nMethod detail\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/DuplicateFaceProblemAreas.html#DuplicateFaceProblemAreas.fix",
        "title": "DuplicateFaceProblemAreas > Method detail > fix",
        "section": "Method detail > fix",
        "text": "DuplicateFaceProblemAreas.fix() -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFix the problem area.\n\nReturns\n\nmessage: RepairToolMessage\n\nMessage containing created and/or modified bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/index",
        "href": "api/ansys/geometry/core/shapes/curves/index.html#the-curves-package",
        "title": "The curves package",
        "section": "The curves package",
        "text": "The curves package\ncurves"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/index",
        "href": "api/ansys/geometry/core/shapes/curves/index.html#summary",
        "title": "The curves package > Summary",
        "section": "Summary",
        "text": "circle\nProvides for creating and managing a circle.\ncurve\nProvides the Curve class.\ncurve_evaluation\nProvides for creating and managing a curve.\nellipse\nProvides for creating and managing an ellipse.\nline\nProvides for creating and managing a line.\nnurbs\nProvides for creating and managing a NURBS curve.\ntrimmed_curve\nTrimmed curve class.\nSummary\ncircle\ncurve\nCurve\ncurve_evaluation\nellipse\nline\nnurbs\ntrimmed_curve"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/index",
        "href": "api/ansys/geometry/core/shapes/curves/index.html#description",
        "title": "The curves package > Description",
        "section": "Description",
        "text": "Provides the PyAnsys Geometry curves subpackage.\nDescription\ncurves"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#geometrycommands",
        "title": "GeometryCommands",
        "section": "GeometryCommands",
        "text": "Provides geometry commands for PyAnsys Geometry.\ngRPC client to use for the geometry commands.\nGeometryCommands\nGeometryCommands\nGrpcClient"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#ansys.geometry.core.designer.geometry_commands.GeometryCommands",
        "title": "GeometryCommands > GeometryCommands > GeometryCommands",
        "section": "GeometryCommands > GeometryCommands",
        "text": "class ansys.geometry.core.designer.geometry_commands.GeometryCommands(grpc_client: ansys.geometry.core.connection.client.GrpcClient)\n\nProvides geometry commands for PyAnsys Geometry.\n\nParameters\n\ngrpc_client\n\nGrpcClient\n\ngRPC client to use for the geometry commands.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#overview",
        "title": "GeometryCommands > Overview",
        "section": "Overview",
        "text": "chamfer\nCreate a chamfer on an edge or adjust the chamfer of a face.\nfillet\nCreate a fillet on an edge or adjust the fillet of a face.\nfull_fillet\nCreate a full fillet betweens a collection of faces.\nextrude_faces\nExtrude a selection of faces.\nextrude_faces_up_to\nExtrude a selection of faces up to another object.\nextrude_edges\nExtrude a selection of edges. Provide either a face or a direction and point.\nextrude_edges_up_to\nExtrude a selection of edges up to another object.\nrename_object\nRename an object.\ncreate_linear_pattern\nCreate a linear pattern. The pattern can be one or two dimensions.\nmodify_linear_pattern\nModify a linear pattern. Leave an argument at 0 for it to remain unchanged.\ncreate_circular_pattern\nCreate a circular pattern. The pattern can be one or two dimensions.\nmodify_circular_pattern\nModify a circular pattern. Leave an argument at 0 for it to remain unchanged.\ncreate_fill_pattern\nCreate a fill pattern.\nupdate_fill_pattern\nUpdate a fill pattern.\nrevolve_faces\nRevolve face around an axis.\nrevolve_faces_up_to\nRevolve face around an axis up to a certain object.\nrevolve_faces_by_helix\nRevolve face around an axis in a helix shape.\nreplace_face\nReplace a face with another face.\nsplit_body\nSplit bodies with a plane, slicers, or faces.\nget_round_info\nGet info on the rounding of a face.\noffset_faces_set_radius\nOffset faces with a radius.\nOverview\nchamfer\nfillet\nfull_fillet\nextrude_faces\nextrude_faces_up_to\nextrude_edges\nextrude_edges_up_to\nrename_object\ncreate_linear_pattern\nmodify_linear_pattern\ncreate_circular_pattern\nmodify_circular_pattern\ncreate_fill_pattern\nupdate_fill_pattern\nrevolve_faces\nrevolve_faces_up_to\nrevolve_faces_by_helix\nreplace_face\nsplit_body\nget_round_info\noffset_faces_set_radius"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#import-detail",
        "title": "GeometryCommands > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#method-detail",
        "title": "GeometryCommands > Method detail",
        "section": "Method detail",
        "text": "Create a chamfer on an edge or adjust the chamfer of a face.\nOne or more edges or faces to act on.\nChamfer distance.\nTrue when successful, False when failed.\nCreate a fillet on an edge or adjust the fillet of a face.\nOne or more edges or faces to act on.\nFillet radius.\nTrue when successful, False when failed.\nCreate a full fillet betweens a collection of faces.\nFaces to round.\nTrue when successful, False when failed.\nExtrude a selection of faces.\nFaces to extrude.\nDistance to extrude.\nDirection of extrusion. If no direction is provided, it will be inferred.\nType of extrusion to be performed.\nMode of how to handle offset relationships.\nPull symmetrically on both sides if True.\nCopy the face and move it instead of extruding the original face if True.\nForces to do as an extrusion if True, if False allows extrusion by offset.\nBodies created by the extrusion if any.\nExtrude a selection of faces up to another object.\nFaces to extrude.\nThe object to pull the faces up to.\nOrigin to define the extrusion.\nDirection of extrusion. If no direction is provided, it will be inferred.\nType of extrusion to be performed.\nMode of how to handle offset relationships.\nPull symmetrically on both sides if True.\nCopy the face and move it instead of extruding the original face if True.\nForces to do as an extrusion if True, if False allows extrusion by offset.\nBodies created by the extrusion if any.\nExtrude a selection of edges. Provide either a face or a direction and point.\nEdges to extrude.\nDistance to extrude.\nFace to pull normal from.\nPoint to pull from. Must be used with direction.\nDirection to pull. Must be used with from_point.\nType of extrusion to be performed.\nPull symmetrically on both sides if True.\nCopy the edge and move it instead of extruding the original edge if True.\nSurfaces will extend in a natural or linear shape after exceeding its original range.\nBodies created by the extrusion if any.\nExtrude a selection of edges up to another object.\nEdges to extrude.\nThe object to pull the faces up to.\nOrigin to define the extrusion.\nDirection of extrusion.\nType of extrusion to be performed.\nBodies created by the extrusion if any.\nRename an object.\nSelection of the object to rename.\nNew name for the object.\nTrue when successful, False when failed.\nCreate a linear pattern. The pattern can be one or two dimensions.\nFaces to create the pattern out of.\nDirection of the linear pattern, determined by the direction of an edge or face normal.\nHow many times the pattern repeats in the x direction.\nThe spacing between each pattern member in the x direction.\nIf True, create a pattern in the x and y direction.\nHow many times the pattern repeats in the y direction.\nThe spacing between each pattern member in the y direction.\nTrue when successful, False when failed.\nModify a linear pattern. Leave an argument at 0 for it to remain unchanged.\nFaces that belong to the pattern.\nHow many times the pattern repeats in the x direction.\nThe spacing between each pattern member in the x direction.\nHow many times the pattern repeats in the y direction.\nThe spacing between each pattern member in the y direction.\nThe new seed index of the member.\nThe old seed index of the member.\nTrue when successful, False when failed.\nCreate a circular pattern. The pattern can be one or two dimensions.\nFaces to create the pattern out of.\nThe axis of the circular pattern, determined by the direction of an edge.\nHow many members are in the circular pattern.\nThe angular range of the pattern.\nIf True, create a two-dimensional pattern.\nHow many times the circular pattern repeats along the radial lines for a\ntwo-dimensional pattern.\nThe spacing along the radial lines for a two-dimensional pattern.\nThe direction from the center out for a two-dimensional pattern.\nTrue when successful, False when failed.\nModify a circular pattern. Leave an argument at 0 for it to remain unchanged.\nFaces that belong to the pattern.\nHow many members are in the circular pattern.\nHow many times the circular pattern repeats along the radial lines for a\ntwo-dimensional pattern.\nDefines the circular angle.\nDefines the step, along the radial lines, for a pattern dimension greater than 1.\nTrue when successful, False when failed.\nCreate a fill pattern.\nFaces to create the pattern out of.\nDirection of the linear pattern, determined by the direction of an edge.\nThe type of fill pattern.\nMargin defining the border of the fill pattern.\nSpacing between the pattern members in the x direction.\nSpacing between the pattern members in the x direction.\nOffset for the rows in the x direction. Only used with FillPattern.SKEWED.\nOffset for the rows in the y direction. Only used with FillPattern.SKEWED.\nOffset for the columns in the x direction. Only used with FillPattern.SKEWED.\nOffset for the columns in the y direction. Only used with FillPattern.SKEWED.\nTrue when successful, False when failed.\nUpdate a fill pattern.\nWhen the face that a fill pattern exists upon changes in size, the\nfill pattern can be updated to fill the new space.\nFace(s) that are part of a fill pattern.\nTrue when successful, False when failed.\nRevolve face around an axis.\nFace(s) to revolve.\nAxis of revolution.\nAngular distance to revolve.\nBodies created by the extrusion if any.\nRevolve face around an axis up to a certain object.\nFace(s) to revolve.\nObject to revolve the face up to.\nAxis of revolution.\nDirection of extrusion.\nType of extrusion to be performed.\nBodies created by the extrusion if any.\nRevolve face around an axis in a helix shape.\nFace(s) to revolve.\nAxis of revolution.\nDirection of extrusion.\nHeight of the helix.\nPitch of the helix.\nTape angle of the helix.\nRight-handed helix if True, left-handed if False.\nCreate on both sides if True, one side if False.\nBodies created by the extrusion if any.\nReplace a face with another face.\nThe face or faces to replace.\nThe face or faces to replace with.\nTrue when successful, False when failed.\nSplit bodies with a plane, slicers, or faces.\nBodies to split.\nPlane to split with\nSlicers to split with.\nFaces to split with.\nExtend faces if split with faces.\nTrue when successful, False when failed.\nGet info on the rounding of a face.\nThe design face to get round info on.\nTrue if round is aligned with face’s U-parameter direction, False otherwise.\nRadius of the round.\nOffset faces with a radius.\nFaces to offset.\nRadius of the offset.\nCopy the face and move it instead of offsetting the original face if True.\nMode of how to handle offset relationships.\nType of extrusion to be performed.\nTrue when successful, False when failed.\nMethod detail\nEdge\npython:list\nEdge\nFace\npython:list\nFace\nReal\nTrue\nFalse\nEdge\npython:list\nEdge\nFace\npython:list\nFace\nReal\nTrue\nFalse\npython:list\nFace\nTrue\nFalse\nFace\npython:list\nFace\nReal\nUnitVector3D\npython:None\nExtrudeType\nExtrudeType.ADD\nOffsetMode\nOffsetMode.MOVE_FACES_TOGETHER\npython:False\nTrue\npython:False\nTrue\npython:False\nTrue\nFalse\npython:list\nBody\nFace\npython:list\nFace\nFace\nEdge\nBody\nPoint3D\nUnitVector3D\npython:None\nExtrudeType\nExtrudeType.ADD\nOffsetMode\nOffsetMode.MOVE_FACES_TOGETHER\npython:False\nTrue\npython:False\nTrue\npython:False\nTrue\nFalse\npython:list\nBody\nEdge\npython:list\nEdge\nReal\nFace\npython:None\nPoint3D\npython:None\ndirection\nUnitVector3D\npython:None\nfrom_point\nExtrudeType\nExtrudeType.ADD\npython:False\nTrue\npython:False\nTrue\npython:False\npython:list\nBody\nEdge\npython:list\nEdge\nFace\npython:None\nPoint3D\nUnitVector3D\npython:None\nExtrudeType\nExtrudeType.ADD\npython:list\nBody\npython:list\nBody\npython:list\nComponent\npython:list\nFace\npython:list\nEdge\npython:str\nTrue\nFalse\nFace\npython:list\nFace\nEdge\nFace\npython:int\nReal\npython:False\nTrue\npython:int\npython:None\nReal\npython:None\nTrue\nFalse\nFace\npython:list\nFace\npython:int\nReal\npython:int\nReal\npython:int\npython:int\nTrue\nFalse\nFace\npython:list\nFace\nEdge\npython:int\nReal\npython:False\nTrue\npython:int\npython:None\nReal\npython:None\nUnitVector3D\npython:None\nTrue\nFalse\nFace\npython:list\nFace\npython:int\npython:int\nReal\nReal\nTrue\nFalse\nFace\npython:list\nFace\nEdge\nFillPatternType\nReal\nReal\nReal\nReal\nFillPattern.SKEWED\nReal\nFillPattern.SKEWED\nReal\nFillPattern.SKEWED\nReal\nFillPattern.SKEWED\nTrue\nFalse\nFace\npython:list\nFace\nTrue\nFalse\nFace\npython:list\nFace\nLine\nReal\npython:list\nBody\nFace\npython:list\nFace\nFace\nEdge\nBody\nLine\nUnitVector3D\nExtrudeType\nExtrudeType.ADD\npython:list\nBody\nFace\npython:list\nFace\nLine\nUnitVector3D\nTrue\nFalse\nTrue\nFalse\npython:list\nBody\nUnion\nFace\npython:list\nFace\nUnion\nFace\npython:list\nFace\nTrue\nFalse\npython:list\nBody\nPlane\nEdge\npython:list\nEdge\nFace\npython:list\nFace\npython:list\nFace\nTrue\nFalse\npython:tuple\nReal\nTrue\nFalse\nFace\npython:list\nFace\nReal\npython:False\nTrue\nOffsetMode\nOffsetMode.MOVE_FACES_TOGETHER\nExtrudeType\nExtrudeType.FORCE_INDEPENDENT\nTrue\nFalse"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.chamfer",
        "title": "GeometryCommands > Method detail > chamfer",
        "section": "Method detail > chamfer",
        "text": "GeometryCommands.chamfer(selection: ansys.geometry.core.designer.edge.Edge | list[ansys.geometry.core.designer.edge.Edge] | ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], distance: ansys.geometry.core.typing.Real) -> bool\n\nCreate a chamfer on an edge or adjust the chamfer of a face.\n\nParameters\n\nselection\n\nEdge | python:list[Edge] | Face | python:list[Face]\n\nOne or more edges or faces to act on.\n\ndistance\n\nReal\n\nChamfer distance.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.fillet",
        "title": "GeometryCommands > Method detail > fillet",
        "section": "Method detail > fillet",
        "text": "GeometryCommands.fillet(selection: ansys.geometry.core.designer.edge.Edge | list[ansys.geometry.core.designer.edge.Edge] | ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], radius: ansys.geometry.core.typing.Real) -> bool\n\nCreate a fillet on an edge or adjust the fillet of a face.\n\nParameters\n\nselection\n\nEdge | python:list[Edge] | Face | python:list[Face]\n\nOne or more edges or faces to act on.\n\nradius\n\nReal\n\nFillet radius.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.full_fillet",
        "title": "GeometryCommands > Method detail > full_fillet",
        "section": "Method detail > full_fillet",
        "text": "GeometryCommands.full_fillet(faces: list[ansys.geometry.core.designer.face.Face]) -> bool\n\nCreate a full fillet betweens a collection of faces.\n\nParameters\n\nfaces\n\npython:list[Face]\n\nFaces to round.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.extrude_faces",
        "title": "GeometryCommands > Method detail > extrude_faces",
        "section": "Method detail > extrude_faces",
        "text": "GeometryCommands.extrude_faces(faces: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], distance: ansys.geometry.core.typing.Real, direction: ansys.geometry.core.math.vector.UnitVector3D = None, extrude_type: ExtrudeType = ExtrudeType.ADD, offset_mode: OffsetMode = OffsetMode.MOVE_FACES_TOGETHER, pull_symmetric: bool = False, copy: bool = False, force_do_as_extrude: bool = False) -> list[ansys.geometry.core.designer.body.Body]\n\nExtrude a selection of faces.\n\nParameters\n\nfaces\n\nFace | python:list[Face]\n\nFaces to extrude.\n\ndistance\n\nReal\n\nDistance to extrude.\n\ndirection\n\nUnitVector3D, default: python:None\n\nDirection of extrusion. If no direction is provided, it will be inferred.\n\nextrude_type\n\nExtrudeType, default: ExtrudeType.ADD\n\nType of extrusion to be performed.\n\noffset_mode\n\nOffsetMode, default: OffsetMode.MOVE_FACES_TOGETHER\n\nMode of how to handle offset relationships.\n\npull_symmetric\n\nbool, default: python:False\n\nPull symmetrically on both sides if True.\n\ncopy\n\nbool, default: python:False\n\nCopy the face and move it instead of extruding the original face if True.\n\nforce_do_as_extrude\n\nbool, default: python:False\n\nForces to do as an extrusion if True, if False allows extrusion by offset.\n\nReturns\n\npython:list[Body]\n\nBodies created by the extrusion if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.extrude_faces_up_to",
        "title": "GeometryCommands > Method detail > extrude_faces_up_to",
        "section": "Method detail > extrude_faces_up_to",
        "text": "GeometryCommands.extrude_faces_up_to(faces: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], up_to_selection: ansys.geometry.core.designer.face.Face | ansys.geometry.core.designer.edge.Edge | ansys.geometry.core.designer.body.Body, seed_point: ansys.geometry.core.math.point.Point3D, direction: ansys.geometry.core.math.vector.UnitVector3D, extrude_type: ExtrudeType = ExtrudeType.ADD, offset_mode: OffsetMode = OffsetMode.MOVE_FACES_TOGETHER, pull_symmetric: bool = False, copy: bool = False, force_do_as_extrude: bool = False) -> list[ansys.geometry.core.designer.body.Body]\n\nExtrude a selection of faces up to another object.\n\nParameters\n\nfaces\n\nFace | python:list[Face]\n\nFaces to extrude.\n\nup_to_selection\n\nFace | Edge | Body\n\nThe object to pull the faces up to.\n\nseed_point\n\nPoint3D\n\nOrigin to define the extrusion.\n\ndirection\n\nUnitVector3D, default: python:None\n\nDirection of extrusion. If no direction is provided, it will be inferred.\n\nextrude_type\n\nExtrudeType, default: ExtrudeType.ADD\n\nType of extrusion to be performed.\n\noffset_mode\n\nOffsetMode, default: OffsetMode.MOVE_FACES_TOGETHER\n\nMode of how to handle offset relationships.\n\npull_symmetric\n\nbool, default: python:False\n\nPull symmetrically on both sides if True.\n\ncopy\n\nbool, default: python:False\n\nCopy the face and move it instead of extruding the original face if True.\n\nforce_do_as_extrude\n\nbool, default: python:False\n\nForces to do as an extrusion if True, if False allows extrusion by offset.\n\nReturns\n\npython:list[Body]\n\nBodies created by the extrusion if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.extrude_edges",
        "title": "GeometryCommands > Method detail > extrude_edges",
        "section": "Method detail > extrude_edges",
        "text": "GeometryCommands.extrude_edges(edges: ansys.geometry.core.designer.edge.Edge | list[ansys.geometry.core.designer.edge.Edge], distance: ansys.geometry.core.typing.Real, from_face: ansys.geometry.core.designer.face.Face = None, from_point: ansys.geometry.core.math.point.Point3D = None, direction: ansys.geometry.core.math.vector.UnitVector3D = None, extrude_type: ExtrudeType = ExtrudeType.ADD, pull_symmetric: bool = False, copy: bool = False, natural_extension: bool = False) -> list[ansys.geometry.core.designer.body.Body]\n\nExtrude a selection of edges. Provide either a face or a direction and point.\n\nParameters\n\nedges\n\nEdge | python:list[Edge]\n\nEdges to extrude.\n\ndistance\n\nReal\n\nDistance to extrude.\n\nfrom_face\n\nFace, default: python:None\n\nFace to pull normal from.\n\nfrom_point\n\nPoint3D, default: python:None\n\nPoint to pull from. Must be used with direction.\n\ndirection\n\nUnitVector3D, default: python:None\n\nDirection to pull. Must be used with from_point.\n\nextrude_type\n\nExtrudeType, default: ExtrudeType.ADD\n\nType of extrusion to be performed.\n\npull_symmetric\n\nbool, default: python:False\n\nPull symmetrically on both sides if True.\n\ncopy\n\nbool, default: python:False\n\nCopy the edge and move it instead of extruding the original edge if True.\n\nnatural_extension\n\nbool, default: python:False\n\nSurfaces will extend in a natural or linear shape after exceeding its original range.\n\nReturns\n\npython:list[Body]\n\nBodies created by the extrusion if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.extrude_edges_up_to",
        "title": "GeometryCommands > Method detail > extrude_edges_up_to",
        "section": "Method detail > extrude_edges_up_to",
        "text": "GeometryCommands.extrude_edges_up_to(edges: ansys.geometry.core.designer.edge.Edge | list[ansys.geometry.core.designer.edge.Edge], up_to_selection: ansys.geometry.core.designer.face.Face | ansys.geometry.core.designer.edge.Edge | ansys.geometry.core.designer.body.Body, seed_point: ansys.geometry.core.math.point.Point3D, direction: ansys.geometry.core.math.vector.UnitVector3D, extrude_type: ExtrudeType = ExtrudeType.ADD) -> list[ansys.geometry.core.designer.body.Body]\n\nExtrude a selection of edges up to another object.\n\nParameters\n\nedges\n\nEdge | python:list[Edge]\n\nEdges to extrude.\n\nup_to_selection\n\nFace, default: python:None\n\nThe object to pull the faces up to.\n\nseed_point\n\nPoint3D\n\nOrigin to define the extrusion.\n\ndirection\n\nUnitVector3D, default: python:None\n\nDirection of extrusion.\n\nextrude_type\n\nExtrudeType, default: ExtrudeType.ADD\n\nType of extrusion to be performed.\n\nReturns\n\npython:list[Body]\n\nBodies created by the extrusion if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.rename_object",
        "title": "GeometryCommands > Method detail > rename_object",
        "section": "Method detail > rename_object",
        "text": "GeometryCommands.rename_object(selection: list[ansys.geometry.core.designer.body.Body] | list[ansys.geometry.core.designer.component.Component] | list[ansys.geometry.core.designer.face.Face] | list[ansys.geometry.core.designer.edge.Edge], name: str) -> bool\n\nRename an object.\n\nParameters\n\nselection\n\npython:list[Body] | python:list[Component] | python:list[Face] | python:list[Edge]\n\nSelection of the object to rename.\n\nname\n\npython:str\n\nNew name for the object.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.create_linear_pattern",
        "title": "GeometryCommands > Method detail > create_linear_pattern",
        "section": "Method detail > create_linear_pattern",
        "text": "GeometryCommands.create_linear_pattern(selection: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], linear_direction: ansys.geometry.core.designer.edge.Edge | ansys.geometry.core.designer.face.Face, count_x: int, pitch_x: ansys.geometry.core.typing.Real, two_dimensional: bool = False, count_y: int = None, pitch_y: ansys.geometry.core.typing.Real = None) -> bool\n\nCreate a linear pattern. The pattern can be one or two dimensions.\n\nParameters\n\nselection\n\nFace | python:list[Face]\n\nFaces to create the pattern out of.\n\nlinear_direction\n\nEdge | Face\n\nDirection of the linear pattern, determined by the direction of an edge or face normal.\n\ncount_x\n\npython:int\n\nHow many times the pattern repeats in the x direction.\n\npitch_x\n\nReal\n\nThe spacing between each pattern member in the x direction.\n\ntwo_dimensional\n\nbool, default: python:False\n\nIf True, create a pattern in the x and y direction.\n\ncount_y\n\npython:int, default: python:None\n\nHow many times the pattern repeats in the y direction.\n\npitch_y\n\nReal, default: python:None\n\nThe spacing between each pattern member in the y direction.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.modify_linear_pattern",
        "title": "GeometryCommands > Method detail > modify_linear_pattern",
        "section": "Method detail > modify_linear_pattern",
        "text": "GeometryCommands.modify_linear_pattern(selection: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], count_x: int = 0, pitch_x: ansys.geometry.core.typing.Real = 0.0, count_y: int = 0, pitch_y: ansys.geometry.core.typing.Real = 0.0, new_seed_index: int = 0, old_seed_index: int = 0) -> bool\n\nModify a linear pattern. Leave an argument at 0 for it to remain unchanged.\n\nParameters\n\nselection\n\nFace | python:list[Face]\n\nFaces that belong to the pattern.\n\ncount_x\n\npython:int, default: 0\n\nHow many times the pattern repeats in the x direction.\n\npitch_x\n\nReal, default: 0.0\n\nThe spacing between each pattern member in the x direction.\n\ncount_y\n\npython:int, default: 0\n\nHow many times the pattern repeats in the y direction.\n\npitch_y\n\nReal, default: 0.0\n\nThe spacing between each pattern member in the y direction.\n\nnew_seed_index\n\npython:int, default: 0\n\nThe new seed index of the member.\n\nold_seed_index\n\npython:int, default: 0\n\nThe old seed index of the member.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.create_circular_pattern",
        "title": "GeometryCommands > Method detail > create_circular_pattern",
        "section": "Method detail > create_circular_pattern",
        "text": "GeometryCommands.create_circular_pattern(selection: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], circular_axis: ansys.geometry.core.designer.edge.Edge, circular_count: int, circular_angle: ansys.geometry.core.typing.Real, two_dimensional: bool = False, linear_count: int = None, linear_pitch: ansys.geometry.core.typing.Real = None, radial_direction: ansys.geometry.core.math.vector.UnitVector3D = None) -> bool\n\nCreate a circular pattern. The pattern can be one or two dimensions.\n\nParameters\n\nselection\n\nFace | python:list[Face]\n\nFaces to create the pattern out of.\n\ncircular_axis\n\nEdge\n\nThe axis of the circular pattern, determined by the direction of an edge.\n\ncircular_count\n\npython:int\n\nHow many members are in the circular pattern.\n\ncircular_angle\n\nReal\n\nThe angular range of the pattern.\n\ntwo_dimensional\n\nbool, default: python:False\n\nIf True, create a two-dimensional pattern.\n\nlinear_count\n\npython:int, default: python:None\n\nHow many times the circular pattern repeats along the radial lines for a\ntwo-dimensional pattern.\n\nlinear_pitch\n\nReal, default: python:None\n\nThe spacing along the radial lines for a two-dimensional pattern.\n\nradial_direction\n\nUnitVector3D, default: python:None\n\nThe direction from the center out for a two-dimensional pattern.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.modify_circular_pattern",
        "title": "GeometryCommands > Method detail > modify_circular_pattern",
        "section": "Method detail > modify_circular_pattern",
        "text": "GeometryCommands.modify_circular_pattern(selection: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], circular_count: int = 0, linear_count: int = 0, step_angle: ansys.geometry.core.typing.Real = 0.0, step_linear: ansys.geometry.core.typing.Real = 0.0) -> bool\n\nModify a circular pattern. Leave an argument at 0 for it to remain unchanged.\n\nParameters\n\nselection\n\nFace | python:list[Face]\n\nFaces that belong to the pattern.\n\ncircular_count\n\npython:int, default: 0\n\nHow many members are in the circular pattern.\n\nlinear_count\n\npython:int, default: 0\n\nHow many times the circular pattern repeats along the radial lines for a\ntwo-dimensional pattern.\n\nstep_angle\n\nReal, default: 0.0\n\nDefines the circular angle.\n\nstep_linear\n\nReal, default: 0.0\n\nDefines the step, along the radial lines, for a pattern dimension greater than 1.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.create_fill_pattern",
        "title": "GeometryCommands > Method detail > create_fill_pattern",
        "section": "Method detail > create_fill_pattern",
        "text": "GeometryCommands.create_fill_pattern(selection: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], linear_direction: ansys.geometry.core.designer.edge.Edge | ansys.geometry.core.designer.face.Face, fill_pattern_type: FillPatternType, margin: ansys.geometry.core.typing.Real, x_spacing: ansys.geometry.core.typing.Real, y_spacing: ansys.geometry.core.typing.Real, row_x_offset: ansys.geometry.core.typing.Real = 0, row_y_offset: ansys.geometry.core.typing.Real = 0, column_x_offset: ansys.geometry.core.typing.Real = 0, column_y_offset: ansys.geometry.core.typing.Real = 0) -> bool\n\nCreate a fill pattern.\n\nParameters\n\nselection\n\nFace | python:list[Face]\n\nFaces to create the pattern out of.\n\nlinear_direction\n\nEdge\n\nDirection of the linear pattern, determined by the direction of an edge.\n\nfill_pattern_type\n\nFillPatternType\n\nThe type of fill pattern.\n\nmargin\n\nReal\n\nMargin defining the border of the fill pattern.\n\nx_spacing\n\nReal\n\nSpacing between the pattern members in the x direction.\n\ny_spacing\n\nReal\n\nSpacing between the pattern members in the x direction.\n\nrow_x_offset\n\nReal, default: 0\n\nOffset for the rows in the x direction. Only used with FillPattern.SKEWED.\n\nrow_y_offset\n\nReal, default: 0\n\nOffset for the rows in the y direction. Only used with FillPattern.SKEWED.\n\ncolumn_x_offset\n\nReal, default: 0\n\nOffset for the columns in the x direction. Only used with FillPattern.SKEWED.\n\ncolumn_y_offset\n\nReal, default: 0\n\nOffset for the columns in the y direction. Only used with FillPattern.SKEWED.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.update_fill_pattern",
        "title": "GeometryCommands > Method detail > update_fill_pattern",
        "section": "Method detail > update_fill_pattern",
        "text": "GeometryCommands.update_fill_pattern(selection: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face]) -> bool\n\nUpdate a fill pattern.\n\nWhen the face that a fill pattern exists upon changes in size, the\nfill pattern can be updated to fill the new space.\n\nParameters\n\nselection\n\nFace | python:list[Face]\n\nFace(s) that are part of a fill pattern.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.revolve_faces",
        "title": "GeometryCommands > Method detail > revolve_faces",
        "section": "Method detail > revolve_faces",
        "text": "GeometryCommands.revolve_faces(selection: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], axis: ansys.geometry.core.shapes.curves.line.Line, angle: ansys.geometry.core.typing.Real) -> list[ansys.geometry.core.designer.body.Body]\n\nRevolve face around an axis.\n\nParameters\n\nselection\n\nFace | python:list[Face]\n\nFace(s) to revolve.\n\naxis\n\nLine\n\nAxis of revolution.\n\nangle\n\nReal\n\nAngular distance to revolve.\n\nReturns\n\npython:list[Body]\n\nBodies created by the extrusion if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.revolve_faces_up_to",
        "title": "GeometryCommands > Method detail > revolve_faces_up_to",
        "section": "Method detail > revolve_faces_up_to",
        "text": "GeometryCommands.revolve_faces_up_to(selection: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], up_to: ansys.geometry.core.designer.face.Face | ansys.geometry.core.designer.edge.Edge | ansys.geometry.core.designer.body.Body, axis: ansys.geometry.core.shapes.curves.line.Line, direction: ansys.geometry.core.math.vector.UnitVector3D, extrude_type: ExtrudeType = ExtrudeType.ADD) -> list[ansys.geometry.core.designer.body.Body]\n\nRevolve face around an axis up to a certain object.\n\nParameters\n\nselection\n\nFace | python:list[Face]\n\nFace(s) to revolve.\n\nup_to\n\nFace | Edge | Body\n\nObject to revolve the face up to.\n\naxis\n\nLine\n\nAxis of revolution.\n\ndirection\n\nUnitVector3D\n\nDirection of extrusion.\n\nextrude_type\n\nExtrudeType, default: ExtrudeType.ADD\n\nType of extrusion to be performed.\n\nReturns\n\npython:list[Body]\n\nBodies created by the extrusion if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.revolve_faces_by_helix",
        "title": "GeometryCommands > Method detail > revolve_faces_by_helix",
        "section": "Method detail > revolve_faces_by_helix",
        "text": "GeometryCommands.revolve_faces_by_helix(selection: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], axis: ansys.geometry.core.shapes.curves.line.Line, direction: ansys.geometry.core.math.vector.UnitVector3D, height: ansys.geometry.core.typing.Real, pitch: ansys.geometry.core.typing.Real, taper_angle: ansys.geometry.core.typing.Real, right_handed: bool, both_sides: bool) -> list[ansys.geometry.core.designer.body.Body]\n\nRevolve face around an axis in a helix shape.\n\nParameters\n\nselection\n\nFace | python:list[Face]\n\nFace(s) to revolve.\n\naxis\n\nLine\n\nAxis of revolution.\n\ndirection\n\nUnitVector3D\n\nDirection of extrusion.\n\nheight\n\nReal,\n\nHeight of the helix.\n\npitch\n\nReal,\n\nPitch of the helix.\n\ntaper_angle\n\nReal,\n\nTape angle of the helix.\n\nright_handed\n\nbool,\n\nRight-handed helix if True, left-handed if False.\n\nboth_sides\n\nbool,\n\nCreate on both sides if True, one side if False.\n\nReturns\n\npython:list[Body]\n\nBodies created by the extrusion if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.replace_face",
        "title": "GeometryCommands > Method detail > replace_face",
        "section": "Method detail > replace_face",
        "text": "GeometryCommands.replace_face(target_selection: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], replacement_selection: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face]) -> bool\n\nReplace a face with another face.\n\nParameters\n\ntarget_selection\n\nUnion[Face, python:list[Face]]\n\nThe face or faces to replace.\n\nreplacement_selection\n\nUnion[Face, python:list[Face]]\n\nThe face or faces to replace with.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.split_body",
        "title": "GeometryCommands > Method detail > split_body",
        "section": "Method detail > split_body",
        "text": "GeometryCommands.split_body(bodies: list[ansys.geometry.core.designer.body.Body], plane: ansys.geometry.core.math.plane.Plane, slicers: ansys.geometry.core.designer.edge.Edge | list[ansys.geometry.core.designer.edge.Edge] | ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], faces: list[ansys.geometry.core.designer.face.Face], extendfaces: bool) -> bool\n\nSplit bodies with a plane, slicers, or faces.\n\nParameters\n\nbodies\n\npython:list[Body]\n\nBodies to split.\n\nplane\n\nPlane\n\nPlane to split with\n\nslicers\n\nEdge | python:list[Edge] | Face | python:list[Face]\n\nSlicers to split with.\n\nfaces\n\npython:list[Face]\n\nFaces to split with.\n\nextendFaces\n\nbool\n\nExtend faces if split with faces.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.get_round_info",
        "title": "GeometryCommands > Method detail > get_round_info",
        "section": "Method detail > get_round_info",
        "text": "GeometryCommands.get_round_info(face: ansys.geometry.core.designer.face.Face) -> tuple[bool, ansys.geometry.core.typing.Real]\n\nGet info on the rounding of a face.\n\nParameters\n\nFace\n\nThe design face to get round info on.\n\nReturns\n\npython:tuple[bool, Real]\n\nTrue if round is aligned with face’s U-parameter direction, False otherwise.\nRadius of the round.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands",
        "href": "api/ansys/geometry/core/designer/geometry_commands/GeometryCommands.html#GeometryCommands.offset_faces_set_radius",
        "title": "GeometryCommands > Method detail > offset_faces_set_radius",
        "section": "Method detail > offset_faces_set_radius",
        "text": "GeometryCommands.offset_faces_set_radius(faces: ansys.geometry.core.designer.face.Face | list[ansys.geometry.core.designer.face.Face], radius: ansys.geometry.core.typing.Real, copy: bool = False, offset_mode: OffsetMode = OffsetMode.IGNORE_RELATIONSHIPS, extrude_type: ExtrudeType = ExtrudeType.FORCE_INDEPENDENT) -> bool\n\nOffset faces with a radius.\n\nParameters\n\nfaces\n\nFace | python:list[Face]\n\nFaces to offset.\n\nradius\n\nReal\n\nRadius of the offset.\n\ncopy\n\nbool, default: python:False\n\nCopy the face and move it instead of offsetting the original face if True.\n\noffset_mode\n\nOffsetMode, default: OffsetMode.MOVE_FACES_TOGETHER\n\nMode of how to handle offset relationships.\n\nextrude_type\n\nExtrudeType, default: ExtrudeType.FORCE_INDEPENDENT\n\nType of extrusion to be performed.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/index",
        "href": "api/ansys/geometry/core/plotting/index.html#the-plotting-package",
        "title": "The plotting package",
        "section": "The plotting package",
        "text": "The plotting package\nplotting"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/index",
        "href": "api/ansys/geometry/core/plotting/index.html#summary",
        "title": "The plotting package > Summary",
        "section": "Summary",
        "text": "widgets\nSubmodule providing widgets for the PyAnsys Geometry plotter.\nplotter\nProvides plotting for various PyAnsys Geometry objects.\nSummary\nwidgets\nplotter"
    },
    {
        "objectID": "api/ansys/geometry/core/plotting/index",
        "href": "api/ansys/geometry/core/plotting/index.html#description",
        "title": "The plotting package > Description",
        "section": "Description",
        "text": "Provides the PyAnsys Geometry plotting subpackage.\nDescription"
    },
    {
        "objectID": "examples/03_modeling/service_colors",
        "href": "examples/03_modeling/service_colors.html#modeling-body-color-assignment-and-usage",
        "title": "Examples > Modeling: Body color assignment and usage",
        "section": "Modeling: Body color assignment and usage",
        "text": "In PyAnsys Geometry, a body represents solids or surfaces organized within the Design assembly. As users might be already familiar with, Ansys CAD products (like SpaceClaim, Ansys Discovery and the Geometry Service), allow to assign colors to bodies. This example shows how to assign colors to a body, retrieve their value and how to use them in the client-side visualization.\nModeling: Body color assignment and usage\nDesign"
    },
    {
        "objectID": "examples/03_modeling/service_colors",
        "href": "examples/03_modeling/service_colors.html#perform-required-imports",
        "title": "Examples > Modeling: Body color assignment and usage > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/03_modeling/service_colors",
        "href": "examples/03_modeling/service_colors.html#create-a-box-sketch",
        "title": "Examples > Modeling: Body color assignment and usage > Create a box sketch",
        "section": "Create a box sketch",
        "text": "Create a Sketch instance and insert a box sketch with a width and height of 10 in the default plane.\nCreate a box sketch\nSketch"
    },
    {
        "objectID": "examples/03_modeling/service_colors",
        "href": "examples/03_modeling/service_colors.html#initiate-design-on-server",
        "title": "Examples > Modeling: Body color assignment and usage > Initiate design on server",
        "section": "Initiate design on server",
        "text": "Establish a server connection and initiate a design on the server.\nInitiate design on server"
    },
    {
        "objectID": "examples/03_modeling/service_colors",
        "href": "examples/03_modeling/service_colors.html#extrude-the-box-sketch-to-create-the-matrix-style-design",
        "title": "Examples > Modeling: Body color assignment and usage > Extrude the box sketch to create the matrix style design",
        "section": "Extrude the box sketch to create the matrix style design",
        "text": "Given the initial sketch, you can extrude it to create a matrix style design. In this example, you can create a 2x3 matrix of bodies. Each body is separated by 30 units in the X direction and 30 units in the Y direction. You have a total of 6 bodies.\nExtrude the box sketch to create the matrix style design"
    },
    {
        "objectID": "examples/03_modeling/service_colors",
        "href": "examples/03_modeling/service_colors.html#assign-colors-to-the-bodies",
        "title": "Examples > Modeling: Body color assignment and usage > Assign colors to the bodies",
        "section": "Assign colors to the bodies",
        "text": "Given the previous design, you can assign a color to each body. You could have done this assignment while creating the bodies, but for the sake of encapsulating the color assignment logic, it is done in its own code cell.\nAssign colors to the bodies"
    },
    {
        "objectID": "examples/03_modeling/service_colors",
        "href": "examples/03_modeling/service_colors.html#plotting-the-design-with-colors",
        "title": "Examples > Modeling: Body color assignment and usage > Plotting the design with colors",
        "section": "Plotting the design with colors",
        "text": "By default, the plot method does not use the colors assigned to the bodies. To plot the design with the assigned colors, you need to specifically request it.\nUsers have two options for plotting with the assigned colors:\nPass the parameter use_service_colors=True to the plot method.\nSet the global parameter USE_SERVICE_COLORS to True.\nIt is important to note that the usage of colors when plotting might slow down the plotting process, as it requires additional information to be sent from the server to the client and processed in the client side.\nIf you just request the plot without setting the global parameter, the plot will be displayed without the colors, as shown below.\nAs stated previously, if you pass the parameter use_service_colors=True to the plot method, the plot is displayed with the assigned colors.\nHowever, if you set the global parameter to True, the plot is displayed with the assigned colors without the need to pass the parameter to the plot method.\nThis last method is useful when the user wants to plot all the designs with the assigned colors without the need to pass the parameter to the plot method in every call.\nPlotting the design with colors\nuse_service_colors=True\nUSE_SERVICE_COLORS\nTrue\nuse_service_colors=True\nTrue"
    },
    {
        "objectID": "examples/03_modeling/service_colors",
        "href": "examples/03_modeling/service_colors.html#plotting-specific-bodies-or-components-with-colors",
        "title": "Examples > Modeling: Body color assignment and usage > Plotting specific bodies or components with colors",
        "section": "Plotting specific bodies or components with colors",
        "text": "If the user wants to plot specific bodies with the assigned colors, the user can follow the same approach as before. The user can pass the parameter use_service_colors=True to the plot method or set the global parameter USE_SERVICE_COLORS to True.\nIn the following examples, you are shown how to do this using the use_service_colors=True parameter.\nLet’s plot the first body of the first component with the assigned colors.\nNow, let’s plot the second component with the assigned colors.\nPlotting specific bodies or components with colors\nuse_service_colors=True\nUSE_SERVICE_COLORS\nTrue\nuse_service_colors=True"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation.html#lineevaluation",
        "title": "LineEvaluation",
        "section": "LineEvaluation",
        "text": "Bases: ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\nProvides for evaluating a line.\nLineEvaluation\nLineEvaluation\nansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation.html#ansys.geometry.core.shapes.curves.line.LineEvaluation",
        "title": "LineEvaluation > LineEvaluation > LineEvaluation",
        "section": "LineEvaluation > LineEvaluation",
        "text": "class ansys.geometry.core.shapes.curves.line.LineEvaluation(line: Line, parameter: float = None)\n\nBases: ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\n\nProvides for evaluating a line.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation.html#overview",
        "title": "LineEvaluation > Overview",
        "section": "Overview",
        "text": "line\nLine being evaluated.\nparameter\nParameter that the evaluation is based upon.\nposition\nPosition of the evaluation.\ntangent\nTangent of the evaluation.\nfirst_derivative\nFirst derivative of the evaluation.\nsecond_derivative\nSecond derivative of the evaluation.\ncurvature\nCurvature of the line, which is always 0.\nOverview\nline\nparameter\nposition\ntangent\nfirst_derivative\nsecond_derivative\ncurvature\n0"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation.html#import-detail",
        "title": "LineEvaluation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation.html#property-detail",
        "title": "LineEvaluation > Property detail",
        "section": "Property detail",
        "text": "Line being evaluated.\nParameter that the evaluation is based upon.\nPosition of the evaluation.\nPoint that lies on the line at this evaluation.\nTangent of the evaluation.\nTangent unit vector to the line at this evaluation.\nThis is always equal to the direction of the line.\nFirst derivative of the evaluation.\nThe first derivative is always equal to the direction of the line.\nFirst derivative of the evaluation.\nSecond derivative of the evaluation.\nThe second derivative is always equal to a zero vector Vector3D([0, 0, 0]).\nSecond derivative of the evaluation, which is always Vector3D([0, 0, 0]).\nCurvature of the line, which is always 0.\nCurvature of the line, which is always 0.\nProperty detail\nPoint3D\nUnitVector3D\nVector3D\nVector3D([0, 0, 0])\nVector3D\nVector3D([0, 0, 0])\n0\nReal\n0"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation.html#LineEvaluation.line",
        "title": "LineEvaluation > Property detail > line",
        "section": "Property detail > line",
        "text": "property LineEvaluation.line: Line\n\nLine being evaluated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation.html#LineEvaluation.parameter",
        "title": "LineEvaluation > Property detail > parameter",
        "section": "Property detail > parameter",
        "text": "property LineEvaluation.parameter: float\n\nParameter that the evaluation is based upon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation.html#LineEvaluation.position",
        "title": "LineEvaluation > Property detail > position",
        "section": "Property detail > position",
        "text": "property LineEvaluation.position: ansys.geometry.core.math.point.Point3D\n\nPosition of the evaluation.\n\nReturns\n\nPoint3D\n\nPoint that lies on the line at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation.html#LineEvaluation.tangent",
        "title": "LineEvaluation > Property detail > tangent",
        "section": "Property detail > tangent",
        "text": "property LineEvaluation.tangent: ansys.geometry.core.math.vector.UnitVector3D\n\nTangent of the evaluation.\n\nReturns\n\nUnitVector3D\n\nTangent unit vector to the line at this evaluation.\n\nNotes\n\nThis is always equal to the direction of the line.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation.html#LineEvaluation.first_derivative",
        "title": "LineEvaluation > Property detail > first_derivative",
        "section": "Property detail > first_derivative",
        "text": "property LineEvaluation.first_derivative: ansys.geometry.core.math.vector.Vector3D\n\nFirst derivative of the evaluation.\n\nThe first derivative is always equal to the direction of the line.\n\nReturns\n\nVector3D\n\nFirst derivative of the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation.html#LineEvaluation.second_derivative",
        "title": "LineEvaluation > Property detail > second_derivative",
        "section": "Property detail > second_derivative",
        "text": "property LineEvaluation.second_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative of the evaluation.\n\nThe second derivative is always equal to a zero vector Vector3D([0, 0, 0]).\n\nReturns\n\nVector3D\n\nSecond derivative of the evaluation, which is always Vector3D([0, 0, 0]).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/line/LineEvaluation.html#LineEvaluation.curvature",
        "title": "LineEvaluation > Property detail > curvature",
        "section": "Property detail > curvature",
        "text": "property LineEvaluation.curvature: float\n\nCurvature of the line, which is always 0.\n\nReturns\n\nReal\n\nCurvature of the line, which is always 0.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#nurbscurve",
        "title": "NURBSCurve",
        "section": "NURBSCurve",
        "text": "Bases: ansys.geometry.core.shapes.curves.curve.Curve\nRepresents a NURBS curve.\nThis class is a wrapper around the NURBS curve class from the geomdl library.\nBy leveraging the geomdl library, this class provides a high-level interface\nto create and manipulate NURBS curves. The geomdl library is a powerful\nlibrary for working with NURBS curves and surfaces. For more information, see\nhttps://pypi.org/project/geomdl/.\nNURBSCurve\nNURBSCurve\nansys.geometry.core.shapes.curves.curve.Curve"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#ansys.geometry.core.shapes.curves.nurbs.NURBSCurve",
        "title": "NURBSCurve > NURBSCurve > NURBSCurve",
        "section": "NURBSCurve > NURBSCurve",
        "text": "class ansys.geometry.core.shapes.curves.nurbs.NURBSCurve\n\nBases: ansys.geometry.core.shapes.curves.curve.Curve\n\nRepresents a NURBS curve.\n\nNotes\n\nThis class is a wrapper around the NURBS curve class from the geomdl library.\nBy leveraging the geomdl library, this class provides a high-level interface\nto create and manipulate NURBS curves. The geomdl library is a powerful\nlibrary for working with NURBS curves and surfaces. For more information, see\nhttps://pypi.org/project/geomdl/.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#overview",
        "title": "NURBSCurve > Overview",
        "section": "Overview",
        "text": "contains_param\nCheck a parameter is within the parametric range of the curve.\ncontains_point\nCheck a point is contained by the curve.\nfrom_control_points\nCreate a NURBS curve from control points.\nparameterization\nGet the parametrization of the NURBS curve.\ntransformed_copy\nCreate a transformed copy of the curve.\nevaluate\nEvaluate the curve at the given parameter.\nproject_point\nProject a point to the NURBS curve.\ngeomdl_nurbs_curve\nGet the underlying NURBS curve.\ncontrol_points\nGet the control points of the curve.\ndegree\nGet the degree of the curve.\nknots\nGet the knot vector of the curve.\nweights\nGet the weights of the control points.\n__eq__\nDetermine if two curves are equal.\nOverview\ncontains_param\ncontains_point\nfrom_control_points\nparameterization\ntransformed_copy\nevaluate\nproject_point\ngeomdl_nurbs_curve\ncontrol_points\ndegree\nknots\nweights\n__eq__"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#import-detail",
        "title": "NURBSCurve > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#property-detail",
        "title": "NURBSCurve > Property detail",
        "section": "Property detail",
        "text": "Get the underlying NURBS curve.\nThis property gives access to the full functionality of the NURBS curve\ncoming from the geomdl library. Use with caution.\nGet the control points of the curve.\nGet the degree of the curve.\nGet the knot vector of the curve.\nGet the weights of the control points.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#NURBSCurve.geomdl_nurbs_curve",
        "title": "NURBSCurve > Property detail > geomdl_nurbs_curve",
        "section": "Property detail > geomdl_nurbs_curve",
        "text": "property NURBSCurve.geomdl_nurbs_curve: geomdl.NURBS.Curve\n\nGet the underlying NURBS curve.\n\nNotes\n\nThis property gives access to the full functionality of the NURBS curve\ncoming from the geomdl library. Use with caution.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#NURBSCurve.control_points",
        "title": "NURBSCurve > Property detail > control_points",
        "section": "Property detail > control_points",
        "text": "property NURBSCurve.control_points: list[ansys.geometry.core.math.Point3D]\n\nGet the control points of the curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#NURBSCurve.degree",
        "title": "NURBSCurve > Property detail > degree",
        "section": "Property detail > degree",
        "text": "property NURBSCurve.degree: int\n\nGet the degree of the curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#NURBSCurve.knots",
        "title": "NURBSCurve > Property detail > knots",
        "section": "Property detail > knots",
        "text": "property NURBSCurve.knots: list[ansys.geometry.core.typing.Real]\n\nGet the knot vector of the curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#NURBSCurve.weights",
        "title": "NURBSCurve > Property detail > weights",
        "section": "Property detail > weights",
        "text": "property NURBSCurve.weights: list[ansys.geometry.core.typing.Real]\n\nGet the weights of the control points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#method-detail",
        "title": "NURBSCurve > Method detail",
        "section": "Method detail",
        "text": "Create a NURBS curve from control points.\nControl points of the curve.\nDegree of the curve.\nKnot vector of the curve.\nWeights of the control points.\nNURBS curve.\nDetermine if two curves are equal.\nGet the parametrization of the NURBS curve.\nThe parameter is defined in the interval [0, 1] by default. Information\nis provided about the parameter type and form.\nInformation about how the NURBS curve is parameterized.\nCreate a transformed copy of the curve.\nTransformation matrix.\nTransformed copy of the curve.\nEvaluate the curve at the given parameter.\nParameter to evaluate the curve at.\nEvaluation of the curve at the given parameter.\nCheck a parameter is within the parametric range of the curve.\nCheck a point is contained by the curve.\nThe point can either lie within the curve or on its boundary.\nProject a point to the NURBS curve.\nThis method returns the evaluation at the closest point.\nPoint to project to the curve.\nInitial guess for the optimization algorithm. If not provided, the midpoint\nof the domain is used.\nEvaluation at the closest point on the curve.\nBased on the NURBS book,\nthe projection of a point to a NURBS curve is the solution to the following optimization\nproblem: minimize the distance between the point and the curve. The distance is defined\nas the Euclidean distance squared. For more information, please refer to\nthe implementation of the distance_squared function.\nMethod detail\npython:list\nPoint3D\npython:int\npython:list\nReal\npython:list\nReal\noptional\nNURBSCurve\nParameterization\nMatrix44\nNURBSCurve\nReal\nCurveEvaluation\nPoint3D\nReal\noptional\nCurveEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#NURBSCurve.from_control_points",
        "title": "NURBSCurve > Method detail > from_control_points",
        "section": "Method detail > from_control_points",
        "text": "classmethod NURBSCurve.from_control_points(control_points: list[ansys.geometry.core.math.Point3D], degree: int, knots: list[ansys.geometry.core.typing.Real], weights: list[ansys.geometry.core.typing.Real] = None) -> NURBSCurve\n\nCreate a NURBS curve from control points.\n\nParameters\n\ncontrol_points\n\npython:list[Point3D]\n\nControl points of the curve.\n\ndegree\n\npython:int\n\nDegree of the curve.\n\nknots\n\npython:list[Real]\n\nKnot vector of the curve.\n\nweights\n\npython:list[Real], optional\n\nWeights of the control points.\n\nReturns\n\nNURBSCurve\n\nNURBS curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#NURBSCurve.__eq__",
        "title": "NURBSCurve > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "NURBSCurve.__eq__(other: NURBSCurve) -> bool\n\nDetermine if two curves are equal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#NURBSCurve.parameterization",
        "title": "NURBSCurve > Method detail > parameterization",
        "section": "Method detail > parameterization",
        "text": "NURBSCurve.parameterization() -> ansys.geometry.core.shapes.parameterization.Parameterization\n\nGet the parametrization of the NURBS curve.\n\nThe parameter is defined in the interval [0, 1] by default. Information\nis provided about the parameter type and form.\n\nReturns\n\nParameterization\n\nInformation about how the NURBS curve is parameterized.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#NURBSCurve.transformed_copy",
        "title": "NURBSCurve > Method detail > transformed_copy",
        "section": "Method detail > transformed_copy",
        "text": "NURBSCurve.transformed_copy(matrix: ansys.geometry.core.math.Matrix44) -> NURBSCurve\n\nCreate a transformed copy of the curve.\n\nParameters\n\nmatrix\n\nMatrix44\n\nTransformation matrix.\n\nReturns\n\nNURBSCurve\n\nTransformed copy of the curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#NURBSCurve.evaluate",
        "title": "NURBSCurve > Method detail > evaluate",
        "section": "Method detail > evaluate",
        "text": "NURBSCurve.evaluate(parameter: ansys.geometry.core.typing.Real) -> ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\n\nEvaluate the curve at the given parameter.\n\nParameters\n\nparameter\n\nReal\n\nParameter to evaluate the curve at.\n\nReturns\n\nCurveEvaluation\n\nEvaluation of the curve at the given parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#NURBSCurve.contains_param",
        "title": "NURBSCurve > Method detail > contains_param",
        "section": "Method detail > contains_param",
        "text": "abstractmethod NURBSCurve.contains_param(param: ansys.geometry.core.typing.Real) -> bool\n\nCheck a parameter is within the parametric range of the curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#NURBSCurve.contains_point",
        "title": "NURBSCurve > Method detail > contains_point",
        "section": "Method detail > contains_point",
        "text": "abstractmethod NURBSCurve.contains_point(point: ansys.geometry.core.math.Point3D) -> bool\n\nCheck a point is contained by the curve.\n\nThe point can either lie within the curve or on its boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve",
        "href": "api/ansys/geometry/core/shapes/curves/nurbs/NURBSCurve.html#NURBSCurve.project_point",
        "title": "NURBSCurve > Method detail > project_point",
        "section": "Method detail > project_point",
        "text": "NURBSCurve.project_point(point: ansys.geometry.core.math.Point3D, initial_guess: ansys.geometry.core.typing.Real | None = None) -> ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\n\nProject a point to the NURBS curve.\n\nThis method returns the evaluation at the closest point.\n\nParameters\n\npoint\n\nPoint3D\n\nPoint to project to the curve.\n\ninitial_guess\n\nReal, optional\n\nInitial guess for the optimization algorithm. If not provided, the midpoint\nof the domain is used.\n\nReturns\n\nCurveEvaluation\n\nEvaluation at the closest point on the curve.\n\nNotes\n\nBased on the NURBS book,\nthe projection of a point to a NURBS curve is the solution to the following optimization\nproblem: minimize the distance between the point and the curve. The distance is defined\nas the Euclidean distance squared. For more information, please refer to\nthe implementation of the distance_squared function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation.html#ellipseevaluation",
        "title": "EllipseEvaluation",
        "section": "EllipseEvaluation",
        "text": "Bases: ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\nEvaluate an ellipse at a given parameter.\nEllipse to evaluate.\nParameter to evaluate the ellipse at.\nEllipseEvaluation\nEllipseEvaluation\nansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation.html#ansys.geometry.core.shapes.curves.ellipse.EllipseEvaluation",
        "title": "EllipseEvaluation > EllipseEvaluation > EllipseEvaluation",
        "section": "EllipseEvaluation > EllipseEvaluation",
        "text": "class ansys.geometry.core.shapes.curves.ellipse.EllipseEvaluation(ellipse: Ellipse, parameter: ansys.geometry.core.typing.Real)\n\nBases: ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\n\nEvaluate an ellipse at a given parameter.\n\nParameters\n\nellipse: ~ansys.geometry.core.shapes.curves.ellipse.Ellipse\n\nEllipse to evaluate.\n\nparameter: float, int\n\nParameter to evaluate the ellipse at.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation.html#overview",
        "title": "EllipseEvaluation > Overview",
        "section": "Overview",
        "text": "ellipse\nEllipse being evaluated.\nparameter\nParameter that the evaluation is based upon.\nposition\nPosition of the evaluation.\ntangent\nTangent of the evaluation.\nnormal\nNormal of the evaluation.\nfirst_derivative\nGirst derivative of the evaluation.\nsecond_derivative\nSecond derivative of the evaluation.\ncurvature\nCurvature of the ellipse.\nOverview\nellipse\nparameter\nposition\ntangent\nnormal\nfirst_derivative\nsecond_derivative\ncurvature"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation.html#import-detail",
        "title": "EllipseEvaluation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation.html#property-detail",
        "title": "EllipseEvaluation > Property detail",
        "section": "Property detail",
        "text": "Ellipse being evaluated.\nParameter that the evaluation is based upon.\nPosition of the evaluation.\nPoint that lies on the ellipse at this evaluation.\nTangent of the evaluation.\nTangent unit vector to the ellipse at this evaluation.\nNormal of the evaluation.\nNormal unit vector to the ellipse at this evaluation.\nGirst derivative of the evaluation.\nThe first derivative is in the direction of the tangent and has a magnitude\nequal to the velocity (rate of change of position) at that point.\nFirst derivative of the evaluation.\nSecond derivative of the evaluation.\nSecond derivative of the evaluation.\nCurvature of the ellipse.\nCurvature of the ellipse.\nProperty detail\nPoint3D\nUnitVector3D\nUnitVector3D\nVector3D\nVector3D\nReal"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation.html#EllipseEvaluation.ellipse",
        "title": "EllipseEvaluation > Property detail > ellipse",
        "section": "Property detail > ellipse",
        "text": "property EllipseEvaluation.ellipse: Ellipse\n\nEllipse being evaluated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation.html#EllipseEvaluation.parameter",
        "title": "EllipseEvaluation > Property detail > parameter",
        "section": "Property detail > parameter",
        "text": "property EllipseEvaluation.parameter: ansys.geometry.core.typing.Real\n\nParameter that the evaluation is based upon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation.html#EllipseEvaluation.position",
        "title": "EllipseEvaluation > Property detail > position",
        "section": "Property detail > position",
        "text": "property EllipseEvaluation.position: ansys.geometry.core.math.point.Point3D\n\nPosition of the evaluation.\n\nReturns\n\nPoint3D\n\nPoint that lies on the ellipse at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation.html#EllipseEvaluation.tangent",
        "title": "EllipseEvaluation > Property detail > tangent",
        "section": "Property detail > tangent",
        "text": "property EllipseEvaluation.tangent: ansys.geometry.core.math.vector.UnitVector3D\n\nTangent of the evaluation.\n\nReturns\n\nUnitVector3D\n\nTangent unit vector to the ellipse at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation.html#EllipseEvaluation.normal",
        "title": "EllipseEvaluation > Property detail > normal",
        "section": "Property detail > normal",
        "text": "property EllipseEvaluation.normal: ansys.geometry.core.math.vector.UnitVector3D\n\nNormal of the evaluation.\n\nReturns\n\nUnitVector3D\n\nNormal unit vector to the ellipse at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation.html#EllipseEvaluation.first_derivative",
        "title": "EllipseEvaluation > Property detail > first_derivative",
        "section": "Property detail > first_derivative",
        "text": "property EllipseEvaluation.first_derivative: ansys.geometry.core.math.vector.Vector3D\n\nGirst derivative of the evaluation.\n\nThe first derivative is in the direction of the tangent and has a magnitude\nequal to the velocity (rate of change of position) at that point.\n\nReturns\n\nVector3D\n\nFirst derivative of the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation.html#EllipseEvaluation.second_derivative",
        "title": "EllipseEvaluation > Property detail > second_derivative",
        "section": "Property detail > second_derivative",
        "text": "property EllipseEvaluation.second_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative of the evaluation.\n\nReturns\n\nVector3D\n\nSecond derivative of the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/ellipse/EllipseEvaluation.html#EllipseEvaluation.curvature",
        "title": "EllipseEvaluation > Property detail > curvature",
        "section": "Property detail > curvature",
        "text": "property EllipseEvaluation.curvature: ansys.geometry.core.typing.Real\n\nCurvature of the ellipse.\n\nReturns\n\nReal\n\nCurvature of the ellipse.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation.html#circleevaluation",
        "title": "CircleEvaluation",
        "section": "CircleEvaluation",
        "text": "Bases: ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\nProvides evaluation of a circle at a given parameter.\nCircle to evaluate.\nParameter to evaluate the circle at.\nCircleEvaluation\nCircleEvaluation\nansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation.html#ansys.geometry.core.shapes.curves.circle.CircleEvaluation",
        "title": "CircleEvaluation > CircleEvaluation > CircleEvaluation",
        "section": "CircleEvaluation > CircleEvaluation",
        "text": "class ansys.geometry.core.shapes.curves.circle.CircleEvaluation(circle: Circle, parameter: ansys.geometry.core.typing.Real)\n\nBases: ansys.geometry.core.shapes.curves.curve_evaluation.CurveEvaluation\n\nProvides evaluation of a circle at a given parameter.\n\nParameters\n\ncircle: ~ansys.geometry.core.shapes.curves.circle.Circle\n\nCircle to evaluate.\n\nparameter: Real\n\nParameter to evaluate the circle at.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation.html#overview",
        "title": "CircleEvaluation > Overview",
        "section": "Overview",
        "text": "circle\nCircle being evaluated.\nparameter\nParameter that the evaluation is based upon.\nposition\nPosition of the evaluation.\ntangent\nTangent of the evaluation.\nnormal\nNormal to the circle.\nfirst_derivative\nFirst derivative of the evaluation.\nsecond_derivative\nSecond derivative of the evaluation.\ncurvature\nCurvature of the circle.\nOverview\ncircle\nparameter\nposition\ntangent\nnormal\nfirst_derivative\nsecond_derivative\ncurvature"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation.html#import-detail",
        "title": "CircleEvaluation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation.html#property-detail",
        "title": "CircleEvaluation > Property detail",
        "section": "Property detail",
        "text": "Circle being evaluated.\nParameter that the evaluation is based upon.\nPosition of the evaluation.\nPoint that lies on the circle at this evaluation.\nTangent of the evaluation.\nTangent unit vector to the circle at this evaluation.\nNormal to the circle.\nNormal unit vector to the circle at this evaluation.\nFirst derivative of the evaluation.\nThe first derivative is in the direction of the tangent and has a\nmagnitude equal to the velocity (rate of change of position) at that\npoint.\nFirst derivative of the evaluation.\nSecond derivative of the evaluation.\nSecond derivative of the evaluation.\nCurvature of the circle.\nCurvature of the circle.\nProperty detail\nPoint3D\nUnitVector3D\nUnitVector3D\nVector3D\nVector3D\nReal"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation.html#CircleEvaluation.circle",
        "title": "CircleEvaluation > Property detail > circle",
        "section": "Property detail > circle",
        "text": "property CircleEvaluation.circle: Circle\n\nCircle being evaluated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation.html#CircleEvaluation.parameter",
        "title": "CircleEvaluation > Property detail > parameter",
        "section": "Property detail > parameter",
        "text": "property CircleEvaluation.parameter: ansys.geometry.core.typing.Real\n\nParameter that the evaluation is based upon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation.html#CircleEvaluation.position",
        "title": "CircleEvaluation > Property detail > position",
        "section": "Property detail > position",
        "text": "property CircleEvaluation.position: ansys.geometry.core.math.point.Point3D\n\nPosition of the evaluation.\n\nReturns\n\nPoint3D\n\nPoint that lies on the circle at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation.html#CircleEvaluation.tangent",
        "title": "CircleEvaluation > Property detail > tangent",
        "section": "Property detail > tangent",
        "text": "property CircleEvaluation.tangent: ansys.geometry.core.math.vector.UnitVector3D\n\nTangent of the evaluation.\n\nReturns\n\nUnitVector3D\n\nTangent unit vector to the circle at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation.html#CircleEvaluation.normal",
        "title": "CircleEvaluation > Property detail > normal",
        "section": "Property detail > normal",
        "text": "property CircleEvaluation.normal: ansys.geometry.core.math.vector.UnitVector3D\n\nNormal to the circle.\n\nReturns\n\nUnitVector3D\n\nNormal unit vector to the circle at this evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation.html#CircleEvaluation.first_derivative",
        "title": "CircleEvaluation > Property detail > first_derivative",
        "section": "Property detail > first_derivative",
        "text": "property CircleEvaluation.first_derivative: ansys.geometry.core.math.vector.Vector3D\n\nFirst derivative of the evaluation.\n\nThe first derivative is in the direction of the tangent and has a\nmagnitude equal to the velocity (rate of change of position) at that\npoint.\n\nReturns\n\nVector3D\n\nFirst derivative of the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation.html#CircleEvaluation.second_derivative",
        "title": "CircleEvaluation > Property detail > second_derivative",
        "section": "Property detail > second_derivative",
        "text": "property CircleEvaluation.second_derivative: ansys.geometry.core.math.vector.Vector3D\n\nSecond derivative of the evaluation.\n\nReturns\n\nVector3D\n\nSecond derivative of the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation",
        "href": "api/ansys/geometry/core/shapes/curves/circle/CircleEvaluation.html#CircleEvaluation.curvature",
        "title": "CircleEvaluation > Property detail > curvature",
        "section": "Property detail > curvature",
        "text": "property CircleEvaluation.curvature: ansys.geometry.core.typing.Real\n\nCurvature of the circle.\n\nReturns\n\nReal\n\nCurvature of the circle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/index",
        "href": "api/ansys/geometry/core/materials/index.html#the-materials-package",
        "title": "The materials package",
        "section": "The materials package",
        "text": "The materials package\nmaterials"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/index",
        "href": "api/ansys/geometry/core/materials/index.html#summary",
        "title": "The materials package > Summary",
        "section": "Summary",
        "text": "material\nProvides the data structure for material and material properties.\nproperty\nProvides the MaterialProperty class.\nSummary\nmaterial\nproperty\nMaterialProperty"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/index",
        "href": "api/ansys/geometry/core/materials/index.html#description",
        "title": "The materials package > Description",
        "section": "Description",
        "text": "PyAnsys Geometry materials subpackage.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType.html#fillpatterntype",
        "title": "FillPatternType",
        "section": "FillPatternType",
        "text": "Bases: enum.Enum\nProvides values for types of fill patterns.\nFillPatternType\nFillPatternType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType.html#ansys.geometry.core.designer.geometry_commands.FillPatternType",
        "title": "FillPatternType > FillPatternType > FillPatternType",
        "section": "FillPatternType > FillPatternType",
        "text": "class ansys.geometry.core.designer.geometry_commands.FillPatternType(*args, **kwds)\n\nBases: enum.Enum\n\nProvides values for types of fill patterns.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType.html#overview",
        "title": "FillPatternType > Overview",
        "section": "Overview",
        "text": "GRID\nOFFSET\nSKEWED\nOverview\nGRID\nOFFSET\nSKEWED"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType.html#import-detail",
        "title": "FillPatternType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType.html#attribute-detail",
        "title": "FillPatternType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType.html#FillPatternType.GRID",
        "title": "FillPatternType > Attribute detail > GRID",
        "section": "Attribute detail > GRID",
        "text": "FillPatternType.GRID = 0\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType.html#FillPatternType.OFFSET",
        "title": "FillPatternType > Attribute detail > OFFSET",
        "section": "Attribute detail > OFFSET",
        "text": "FillPatternType.OFFSET = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType",
        "href": "api/ansys/geometry/core/designer/geometry_commands/FillPatternType.html#FillPatternType.SKEWED",
        "title": "FillPatternType > Attribute detail > SKEWED",
        "section": "Attribute detail > SKEWED",
        "text": "FillPatternType.SKEWED = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas.html#shortedgeproblemareas",
        "title": "ShortEdgeProblemAreas",
        "section": "ShortEdgeProblemAreas",
        "text": "Bases: ProblemArea\nRepresents a short edge problem area with a unique identifier and associated edges.\nServer-defined ID for the problem area.\nActive supporting geometry service instance for design modeling.\nList of edges associated with the design.\nShortEdgeProblemAreas\nShortEdgeProblemAreas\nProblemArea\npython:str\nGrpcClient\npython:list\nEdge"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas.html#ansys.geometry.core.tools.problem_areas.ShortEdgeProblemAreas",
        "title": "ShortEdgeProblemAreas > ShortEdgeProblemAreas > ShortEdgeProblemAreas",
        "section": "ShortEdgeProblemAreas > ShortEdgeProblemAreas",
        "text": "class ansys.geometry.core.tools.problem_areas.ShortEdgeProblemAreas(id: str, grpc_client: ansys.geometry.core.connection.GrpcClient, edges: list[ansys.geometry.core.designer.edge.Edge])\n\nBases: ProblemArea\n\nRepresents a short edge problem area with a unique identifier and associated edges.\n\nParameters\n\nid\n\npython:str\n\nServer-defined ID for the problem area.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting geometry service instance for design modeling.\n\nedges\n\npython:list[Edge]\n\nList of edges associated with the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas.html#overview",
        "title": "ShortEdgeProblemAreas > Overview",
        "section": "Overview",
        "text": "fix\nFix the problem area.\nedges\nThe list of edges connected to this problem area.\nOverview\nfix\nedges"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas.html#import-detail",
        "title": "ShortEdgeProblemAreas > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas.html#property-detail",
        "title": "ShortEdgeProblemAreas > Property detail",
        "section": "Property detail",
        "text": "The list of edges connected to this problem area.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas.html#ShortEdgeProblemAreas.edges",
        "title": "ShortEdgeProblemAreas > Property detail > edges",
        "section": "Property detail > edges",
        "text": "property ShortEdgeProblemAreas.edges: list[ansys.geometry.core.designer.edge.Edge]\n\nThe list of edges connected to this problem area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas.html#method-detail",
        "title": "ShortEdgeProblemAreas > Method detail",
        "section": "Method detail",
        "text": "Fix the problem area.\nMessage containing created and/or modified bodies.\nMethod detail\nRepairToolMessage"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas",
        "href": "api/ansys/geometry/core/tools/problem_areas/ShortEdgeProblemAreas.html#ShortEdgeProblemAreas.fix",
        "title": "ShortEdgeProblemAreas > Method detail > fix",
        "section": "Method detail > fix",
        "text": "ShortEdgeProblemAreas.fix() -> ansys.geometry.core.tools.repair_tool_message.RepairToolMessage\n\nFix the problem area.\n\nReturns\n\nmessage: RepairToolMessage\n\nMessage containing created and/or modified bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/CollisionType",
        "href": "api/ansys/geometry/core/designer/body/CollisionType.html#collisiontype",
        "title": "CollisionType",
        "section": "CollisionType",
        "text": "Bases: enum.Enum\nProvides values for collision types between bodies.\nCollisionType\nCollisionType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/CollisionType",
        "href": "api/ansys/geometry/core/designer/body/CollisionType.html#ansys.geometry.core.designer.body.CollisionType",
        "title": "CollisionType > CollisionType > CollisionType",
        "section": "CollisionType > CollisionType",
        "text": "class ansys.geometry.core.designer.body.CollisionType(*args, **kwds)\n\nBases: enum.Enum\n\nProvides values for collision types between bodies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/CollisionType",
        "href": "api/ansys/geometry/core/designer/body/CollisionType.html#overview",
        "title": "CollisionType > Overview",
        "section": "Overview",
        "text": "NONE\nTOUCH\nINTERSECT\nCONTAINED\nCONTAINEDTOUCH\nOverview\nNONE\nTOUCH\nINTERSECT\nCONTAINED\nCONTAINEDTOUCH"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/CollisionType",
        "href": "api/ansys/geometry/core/designer/body/CollisionType.html#import-detail",
        "title": "CollisionType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/CollisionType",
        "href": "api/ansys/geometry/core/designer/body/CollisionType.html#attribute-detail",
        "title": "CollisionType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/CollisionType",
        "href": "api/ansys/geometry/core/designer/body/CollisionType.html#CollisionType.NONE",
        "title": "CollisionType > Attribute detail > NONE",
        "section": "Attribute detail > NONE",
        "text": "CollisionType.NONE = 0\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/CollisionType",
        "href": "api/ansys/geometry/core/designer/body/CollisionType.html#CollisionType.TOUCH",
        "title": "CollisionType > Attribute detail > TOUCH",
        "section": "Attribute detail > TOUCH",
        "text": "CollisionType.TOUCH = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/CollisionType",
        "href": "api/ansys/geometry/core/designer/body/CollisionType.html#CollisionType.INTERSECT",
        "title": "CollisionType > Attribute detail > INTERSECT",
        "section": "Attribute detail > INTERSECT",
        "text": "CollisionType.INTERSECT = 2\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/CollisionType",
        "href": "api/ansys/geometry/core/designer/body/CollisionType.html#CollisionType.CONTAINED",
        "title": "CollisionType > Attribute detail > CONTAINED",
        "section": "Attribute detail > CONTAINED",
        "text": "CollisionType.CONTAINED = 3\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/body/CollisionType",
        "href": "api/ansys/geometry/core/designer/body/CollisionType.html#CollisionType.CONTAINEDTOUCH",
        "title": "CollisionType > Attribute detail > CONTAINEDTOUCH",
        "section": "Attribute detail > CONTAINEDTOUCH",
        "text": "CollisionType.CONTAINEDTOUCH = 4\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/circle/index",
        "href": "api/ansys/geometry/core/sketch/circle/index.html#the-circlepy-module",
        "title": "The circle.py module",
        "section": "The circle.py module",
        "text": "The circle.py module\ncircle.py"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/circle/index",
        "href": "api/ansys/geometry/core/sketch/circle/index.html#summary",
        "title": "The circle.py module > Summary",
        "section": "Summary",
        "text": "SketchCircle\nProvides for modeling a circle.\nSummary\nSketchCircle"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/circle/index",
        "href": "api/ansys/geometry/core/sketch/circle/index.html#description",
        "title": "The circle.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a circle.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#vector3d",
        "title": "Vector3D",
        "section": "Vector3D",
        "text": "Bases: numpy.ndarray\nProvides for managing and creating a 3D vector.\n3D numpy.ndarray class with shape(X,).\nVector3D\nVector3D\nnumpy.ndarray\nndarray\nRealSequence\nnumpy.ndarray"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#ansys.geometry.core.math.vector.Vector3D",
        "title": "Vector3D > Vector3D > Vector3D",
        "section": "Vector3D > Vector3D",
        "text": "class ansys.geometry.core.math.vector.Vector3D(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)\n\nBases: numpy.ndarray\n\nProvides for managing and creating a 3D vector.\n\nParameters\n\ninput\n\nndarray | RealSequence\n\n3D numpy.ndarray class with shape(X,).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#overview",
        "title": "Vector3D > Overview",
        "section": "Overview",
        "text": "from_points\nCreate a 3D vector from two distinct 3D points.\nis_perpendicular_to\nCheck if this vector and another vector are perpendicular.\nis_parallel_to\nCheck if this vector and another vector are parallel.\nis_opposite\nCheck if this vector and another vector are opposite.\nnormalize\nReturn a normalized version of the 3D vector.\ntransform\nTransform the 3D vector3D with a transformation matrix.\nget_angle_between\nGet the angle between this 3D vector and another 3D vector.\ncross\nReturn the cross product of Vector3D objects.\nx\nX coordinate of the Vector3D class.\ny\nY coordinate of the Vector3D class.\nz\nZ coordinate of the Vector3D class.\nnorm\nNorm of the vector.\nmagnitude\nNorm of the vector.\nis_zero\nCheck if all components of the 3D vector are zero.\n__eq__\nEquals operator for the Vector3D class.\n__ne__\nNot equals operator for the Vector3D class.\n__mul__\nOverload * operator with dot product.\n__mod__\nOverload % operator with cross product.\n__add__\nAddition operation overload for 3D vectors.\n__sub__\nSubtraction operation overload for 3D vectors.\nOverview\nfrom_points\nis_perpendicular_to\nis_parallel_to\nis_opposite\nnormalize\ntransform\nget_angle_between\ncross\nVector3D\nx\nVector3D\ny\nVector3D\nz\nVector3D\nnorm\nmagnitude\nis_zero\n__eq__\nVector3D\n__ne__\nVector3D\n__mul__\n__mod__\n__add__\n__sub__"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#import-detail",
        "title": "Vector3D > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#property-detail",
        "title": "Vector3D > Property detail",
        "section": "Property detail",
        "text": "X coordinate of the Vector3D class.\nY coordinate of the Vector3D class.\nZ coordinate of the Vector3D class.\nNorm of the vector.\nNorm of the vector.\nCheck if all components of the 3D vector are zero.\nProperty detail\nVector3D\nVector3D\nVector3D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.x",
        "title": "Vector3D > Property detail > x",
        "section": "Property detail > x",
        "text": "property Vector3D.x: ansys.geometry.core.typing.Real\n\nX coordinate of the Vector3D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.y",
        "title": "Vector3D > Property detail > y",
        "section": "Property detail > y",
        "text": "property Vector3D.y: ansys.geometry.core.typing.Real\n\nY coordinate of the Vector3D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.z",
        "title": "Vector3D > Property detail > z",
        "section": "Property detail > z",
        "text": "property Vector3D.z: ansys.geometry.core.typing.Real\n\nZ coordinate of the Vector3D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.norm",
        "title": "Vector3D > Property detail > norm",
        "section": "Property detail > norm",
        "text": "property Vector3D.norm: float\n\nNorm of the vector.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.magnitude",
        "title": "Vector3D > Property detail > magnitude",
        "section": "Property detail > magnitude",
        "text": "property Vector3D.magnitude: float\n\nNorm of the vector.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.is_zero",
        "title": "Vector3D > Property detail > is_zero",
        "section": "Property detail > is_zero",
        "text": "property Vector3D.is_zero: bool\n\nCheck if all components of the 3D vector are zero.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#method-detail",
        "title": "Vector3D > Method detail",
        "section": "Method detail",
        "text": "Check if this vector and another vector are perpendicular.\nCheck if this vector and another vector are parallel.\nCheck if this vector and another vector are opposite.\nReturn a normalized version of the 3D vector.\nTransform the 3D vector3D with a transformation matrix.\n4x4 transformation matrix to apply to the vector.\nA new 3D vector that is the transformed copy of the original 3D vector after applying\nthe transformation matrix.\nTransform the Vector3D object by applying the specified 4x4\ntransformation matrix and return a new Vector3D object representing the\ntransformed vector.\nGet the angle between this 3D vector and another 3D vector.\nOther 3D vector for computing the angle.\nAngle between these two 3D vectors.\nReturn the cross product of Vector3D objects.\nEquals operator for the Vector3D class.\nNot equals operator for the Vector3D class.\nOverload * operator with dot product.\nThis method also admits scalar multiplication.\nOverload % operator with cross product.\nAddition operation overload for 3D vectors.\nSubtraction operation overload for 3D vectors.\nCreate a 3D vector from two distinct 3D points.\nPoint3D\nclass representing the first point.\nPoint3D\nclass representing the second point.\n3D vector from point_a to point_b.\nThe resulting 3D vector is always expressed in Point3D\nbase units.\nMethod detail\nMatrix44\nVector3D\nVector3D\nVector3D\nVector3D\nQuantity\nVector3D\nVector3D\nVector3D\nndarray\nRealSequence\nPoint3D\nPoint3D\nndarray\nRealSequence\nPoint3D\nPoint3D\nVector3D\npoint_a\npoint_b\nPoint3D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.is_perpendicular_to",
        "title": "Vector3D > Method detail > is_perpendicular_to",
        "section": "Method detail > is_perpendicular_to",
        "text": "Vector3D.is_perpendicular_to(other_vector: Vector3D) -> bool\n\nCheck if this vector and another vector are perpendicular.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.is_parallel_to",
        "title": "Vector3D > Method detail > is_parallel_to",
        "section": "Method detail > is_parallel_to",
        "text": "Vector3D.is_parallel_to(other_vector: Vector3D) -> bool\n\nCheck if this vector and another vector are parallel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.is_opposite",
        "title": "Vector3D > Method detail > is_opposite",
        "section": "Method detail > is_opposite",
        "text": "Vector3D.is_opposite(other_vector: Vector3D) -> bool\n\nCheck if this vector and another vector are opposite.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.normalize",
        "title": "Vector3D > Method detail > normalize",
        "section": "Method detail > normalize",
        "text": "Vector3D.normalize() -> Vector3D\n\nReturn a normalized version of the 3D vector.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.transform",
        "title": "Vector3D > Method detail > transform",
        "section": "Method detail > transform",
        "text": "Vector3D.transform(matrix: ansys.geometry.core.math.matrix.Matrix44) -> Vector3D\n\nTransform the 3D vector3D with a transformation matrix.\n\nParameters\n\nmatrix\n\nMatrix44\n\n4x4 transformation matrix to apply to the vector.\n\nReturns\n\nVector3D\n\nA new 3D vector that is the transformed copy of the original 3D vector after applying\nthe transformation matrix.\n\nNotes\n\nTransform the Vector3D object by applying the specified 4x4\ntransformation matrix and return a new Vector3D object representing the\ntransformed vector.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.get_angle_between",
        "title": "Vector3D > Method detail > get_angle_between",
        "section": "Method detail > get_angle_between",
        "text": "Vector3D.get_angle_between(v: Vector3D) -> pint.Quantity\n\nGet the angle between this 3D vector and another 3D vector.\n\nParameters\n\nv\n\nVector3D\n\nOther 3D vector for computing the angle.\n\nReturns\n\nQuantity\n\nAngle between these two 3D vectors.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.cross",
        "title": "Vector3D > Method detail > cross",
        "section": "Method detail > cross",
        "text": "Vector3D.cross(v: Vector3D) -> Vector3D\n\nReturn the cross product of Vector3D objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.__eq__",
        "title": "Vector3D > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Vector3D.__eq__(other: Vector3D) -> bool\n\nEquals operator for the Vector3D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.__ne__",
        "title": "Vector3D > Method detail > __ne__",
        "section": "Method detail > __ne__",
        "text": "Vector3D.__ne__(other: Vector3D) -> bool\n\nNot equals operator for the Vector3D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.__mul__",
        "title": "Vector3D > Method detail > __mul__",
        "section": "Method detail > __mul__",
        "text": "Vector3D.__mul__(other: Vector3D | ansys.geometry.core.typing.Real) -> Vector3D | ansys.geometry.core.typing.Real\n\nOverload * operator with dot product.\n\nNotes\n\nThis method also admits scalar multiplication.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.__mod__",
        "title": "Vector3D > Method detail > __mod__",
        "section": "Method detail > __mod__",
        "text": "Vector3D.__mod__(other: Vector3D) -> Vector3D\n\nOverload % operator with cross product.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.__add__",
        "title": "Vector3D > Method detail > __add__",
        "section": "Method detail > __add__",
        "text": "Vector3D.__add__(other: Vector3D | ansys.geometry.core.math.point.Point3D) -> Vector3D | ansys.geometry.core.math.point.Point3D\n\nAddition operation overload for 3D vectors.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.__sub__",
        "title": "Vector3D > Method detail > __sub__",
        "section": "Method detail > __sub__",
        "text": "Vector3D.__sub__(other: Vector3D) -> Vector3D\n\nSubtraction operation overload for 3D vectors.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/Vector3D",
        "href": "api/ansys/geometry/core/math/vector/Vector3D.html#Vector3D.from_points",
        "title": "Vector3D > Method detail > from_points",
        "section": "Method detail > from_points",
        "text": "classmethod Vector3D.from_points(point_a: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D, point_b: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D)\n\nCreate a 3D vector from two distinct 3D points.\n\nParameters\n\npoint_a\n\nndarray | RealSequence | Point3D\n\nPoint3D\nclass representing the first point.\n\npoint_b\n\nndarray | RealSequence | Point3D\n\nPoint3D\nclass representing the second point.\n\nReturns\n\nVector3D\n\n3D vector from point_a to point_b.\n\nNotes\n\nThe resulting 3D vector is always expressed in Point3D\nbase units.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/index",
        "href": "api/ansys/geometry/core/shapes/parameterization/index.html#the-parameterizationpy-module",
        "title": "The parameterization.py module",
        "section": "The parameterization.py module",
        "text": "The parameterization.py module\nparameterization.py"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/index",
        "href": "api/ansys/geometry/core/shapes/parameterization/index.html#summary",
        "title": "The parameterization.py module > Summary",
        "section": "Summary",
        "text": "ParamUV\nParameter class containing 2 parameters: (u, v).\nInterval\nInterval class that defines a range of values.\nParameterization\nParameterization class describes the parameters of a specific geometry.\nParamForm\nParamForm enum class that defines the form of a Parameterization.\nParamType\nParamType enum class that defines the type of a Parameterization.\nSummary\nParamUV\nInterval\nParameterization\nParamForm\nParamType"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/parameterization/index",
        "href": "api/ansys/geometry/core/shapes/parameterization/index.html#description",
        "title": "The parameterization.py module > Description",
        "section": "Description",
        "text": "Provides the parametrization-related classes.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/face/SketchFace",
        "href": "api/ansys/geometry/core/sketch/face/SketchFace.html#sketchface",
        "title": "SketchFace",
        "section": "SketchFace",
        "text": "Provides for modeling a face.\nSketchFace\nSketchFace"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/face/SketchFace",
        "href": "api/ansys/geometry/core/sketch/face/SketchFace.html#ansys.geometry.core.sketch.face.SketchFace",
        "title": "SketchFace > SketchFace > SketchFace",
        "section": "SketchFace > SketchFace",
        "text": "class ansys.geometry.core.sketch.face.SketchFace\n\nProvides for modeling a face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/face/SketchFace",
        "href": "api/ansys/geometry/core/sketch/face/SketchFace.html#overview",
        "title": "SketchFace > Overview",
        "section": "Overview",
        "text": "plane_change\nRedefine the plane containing SketchFace objects.\nedges\nList of all component edges forming the face.\nperimeter\nPerimeter of the face.\nvisualization_polydata\nVTK polydata representation for PyVista visualization.\nOverview\nplane_change\nSketchFace\nedges\nperimeter\nvisualization_polydata"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/face/SketchFace",
        "href": "api/ansys/geometry/core/sketch/face/SketchFace.html#import-detail",
        "title": "SketchFace > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/face/SketchFace",
        "href": "api/ansys/geometry/core/sketch/face/SketchFace.html#property-detail",
        "title": "SketchFace > Property detail",
        "section": "Property detail",
        "text": "List of all component edges forming the face.\nPerimeter of the face.\nVTK polydata representation for PyVista visualization.\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\nVTK pyvista.Polydata configuration.\nProperty detail\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/face/SketchFace",
        "href": "api/ansys/geometry/core/sketch/face/SketchFace.html#SketchFace.edges",
        "title": "SketchFace > Property detail > edges",
        "section": "Property detail > edges",
        "text": "property SketchFace.edges: list[ansys.geometry.core.sketch.edge.SketchEdge]\n\nList of all component edges forming the face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/face/SketchFace",
        "href": "api/ansys/geometry/core/sketch/face/SketchFace.html#SketchFace.perimeter",
        "title": "SketchFace > Property detail > perimeter",
        "section": "Property detail > perimeter",
        "text": "property SketchFace.perimeter: pint.Quantity\n\nPerimeter of the face.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/face/SketchFace",
        "href": "api/ansys/geometry/core/sketch/face/SketchFace.html#SketchFace.visualization_polydata",
        "title": "SketchFace > Property detail > visualization_polydata",
        "section": "Property detail > visualization_polydata",
        "text": "property SketchFace.visualization_polydata: pyvista.PolyData\n\nVTK polydata representation for PyVista visualization.\n\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\n\nReturns\n\npyvista.PolyData\n\nVTK pyvista.Polydata configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/face/SketchFace",
        "href": "api/ansys/geometry/core/sketch/face/SketchFace.html#method-detail",
        "title": "SketchFace > Method detail",
        "section": "Method detail",
        "text": "Redefine the plane containing SketchFace objects.\nDesired new plane that is to contain the sketched face.\nThis implies that their 3D definition might suffer changes. This method does\nnothing by default. It is required to be implemented in child SketchFace classes.\nMethod detail\nSketchFace\nPlane\nSketchFace"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/face/SketchFace",
        "href": "api/ansys/geometry/core/sketch/face/SketchFace.html#SketchFace.plane_change",
        "title": "SketchFace > Method detail > plane_change",
        "section": "Method detail > plane_change",
        "text": "SketchFace.plane_change(plane: ansys.geometry.core.math.plane.Plane) -> None\n\nRedefine the plane containing SketchFace objects.\n\nParameters\n\nplane\n\nPlane\n\nDesired new plane that is to contain the sketched face.\n\nNotes\n\nThis implies that their 3D definition might suffer changes. This method does\nnothing by default. It is required to be implemented in child SketchFace classes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#point2d",
        "title": "Point2D",
        "section": "Point2D",
        "text": "Bases: numpy.ndarray, ansys.geometry.core.misc.units.PhysicalQuantity\nProvides geometry primitive representation for a 2D point.\nDirection arguments, either as a numpy.ndarray class\nor as a RealSequence.\nUnits for defining 2D point values. If not specified, the default unit is\nDEFAULT_UNITS.LENGTH.\nPoint2D\nPoint2D\nnumpy.ndarray\nansys.geometry.core.misc.units.PhysicalQuantity\nndarray\nRealSequence\nDEFAULT_POINT2D_VALUES\nnumpy.ndarray\nRealSequence\nUnit\npython:None\nDEFAULT_UNITS.LENGTH\nDEFAULT_UNITS.LENGTH"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#ansys.geometry.core.math.point.Point2D",
        "title": "Point2D > Point2D > Point2D",
        "section": "Point2D > Point2D",
        "text": "class ansys.geometry.core.math.point.Point2D(input: numpy.ndarray | ansys.geometry.core.typing.RealSequence = DEFAULT_POINT2D_VALUES, unit: pint.Unit | None = None)\n\nBases: numpy.ndarray, ansys.geometry.core.misc.units.PhysicalQuantity\n\nProvides geometry primitive representation for a 2D point.\n\nParameters\n\ninput\n\nndarray | RealSequence, default: DEFAULT_POINT2D_VALUES\n\nDirection arguments, either as a numpy.ndarray class\nor as a RealSequence.\n\nunit\n\nUnit | python:None, default: DEFAULT_UNITS.LENGTH\n\nUnits for defining 2D point values. If not specified, the default unit is\nDEFAULT_UNITS.LENGTH.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#overview",
        "title": "Point2D > Overview",
        "section": "Overview",
        "text": "unit\nGet the unit of the object.\nbase_unit\nGet the base unit of the object.\nx\nX plane component value.\ny\nY plane component value.\nflat\n__eq__\nEquals operator for the Point2D class.\n__ne__\nNot equals operator for the Point2D class.\n__add__\nAdd operation for the Point2D class.\n__sub__\nSubtraction operation for the Point2D class.\nOverview\nunit\nbase_unit\nx\ny\nflat\n__eq__\nPoint2D\n__ne__\nPoint2D\n__add__\nPoint2D\n__sub__\nPoint2D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#import-detail",
        "title": "Point2D > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#property-detail",
        "title": "Point2D > Property detail",
        "section": "Property detail",
        "text": "X plane component value.\nY plane component value.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#Point2D.x",
        "title": "Point2D > Property detail > x",
        "section": "Property detail > x",
        "text": "property Point2D.x: pint.Quantity\n\nX plane component value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#Point2D.y",
        "title": "Point2D > Property detail > y",
        "section": "Property detail > y",
        "text": "property Point2D.y: pint.Quantity\n\nY plane component value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#attribute-detail",
        "title": "Point2D > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#Point2D.flat",
        "title": "Point2D > Attribute detail > flat",
        "section": "Attribute detail > flat",
        "text": "Point2D.flat\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#method-detail",
        "title": "Point2D > Method detail",
        "section": "Method detail",
        "text": "Equals operator for the Point2D class.\nNot equals operator for the Point2D class.\nAdd operation for the Point2D class.\nSubtraction operation for the Point2D class.\nGet the unit of the object.\nGet the base unit of the object.\nMethod detail\nPoint2D\nPoint2D\nPoint2D\nPoint2D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#Point2D.__eq__",
        "title": "Point2D > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Point2D.__eq__(other: Point2D) -> bool\n\nEquals operator for the Point2D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#Point2D.__ne__",
        "title": "Point2D > Method detail > __ne__",
        "section": "Method detail > __ne__",
        "text": "Point2D.__ne__(other: Point2D) -> bool\n\nNot equals operator for the Point2D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#Point2D.__add__",
        "title": "Point2D > Method detail > __add__",
        "section": "Method detail > __add__",
        "text": "Point2D.__add__(other: Point2D | ansys.geometry.core.math.vector.Vector2D) -> Point2D\n\nAdd operation for the Point2D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#Point2D.__sub__",
        "title": "Point2D > Method detail > __sub__",
        "section": "Method detail > __sub__",
        "text": "Point2D.__sub__(other: Point2D) -> Point2D\n\nSubtraction operation for the Point2D class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#Point2D.unit",
        "title": "Point2D > Method detail > unit",
        "section": "Method detail > unit",
        "text": "Point2D.unit() -> pint.Unit\n\nGet the unit of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/point/Point2D",
        "href": "api/ansys/geometry/core/math/point/Point2D.html#Point2D.base_unit",
        "title": "Point2D > Method detail > base_unit",
        "section": "Method detail > base_unit",
        "text": "Point2D.base_unit() -> pint.Unit\n\nGet the base unit of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/index",
        "href": "api/ansys/geometry/core/sketch/segment/index.html#the-segmentpy-module",
        "title": "The segment.py module",
        "section": "The segment.py module",
        "text": "The segment.py module\nsegment.py"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/index",
        "href": "api/ansys/geometry/core/sketch/segment/index.html#summary",
        "title": "The segment.py module > Summary",
        "section": "Summary",
        "text": "SketchSegment\nProvides segment representation of a line.\nSummary\nSketchSegment"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/segment/index",
        "href": "api/ansys/geometry/core/sketch/segment/index.html#description",
        "title": "The segment.py module > Description",
        "section": "Description",
        "text": "Provides for creating and managing a segment.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/index",
        "href": "api/ansys/geometry/core/tools/check_geometry/index.html#the-check_geometrypy-module",
        "title": "The check_geometry.py module",
        "section": "The check_geometry.py module",
        "text": "The check_geometry.py module\ncheck_geometry.py"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/index",
        "href": "api/ansys/geometry/core/tools/check_geometry/index.html#summary",
        "title": "The check_geometry.py module > Summary",
        "section": "Summary",
        "text": "GeometryIssue\nProvides return message for the repair tool methods.\nInspectResult\nProvides the result of the inspect geometry operation.\nSummary\nGeometryIssue\nInspectResult"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/index",
        "href": "api/ansys/geometry/core/tools/check_geometry/index.html#description",
        "title": "The check_geometry.py module > Description",
        "section": "Description",
        "text": "Module for repair tool message.\nDescription"
    },
    {
        "objectID": "examples/01_getting_started/03_sketching",
        "href": "examples/01_getting_started/03_sketching.html#pyansys-geometry-101-sketching",
        "title": "Examples > PyAnsys Geometry 101: Sketching",
        "section": "PyAnsys Geometry 101: Sketching",
        "text": "With PyAnsys Geometry, you can build powerful dynamic sketches without communicating with the Geometry service. This example shows how to build some simple sketches.\nPyAnsys Geometry 101: Sketching"
    },
    {
        "objectID": "examples/01_getting_started/03_sketching",
        "href": "examples/01_getting_started/03_sketching.html#perform-required-imports",
        "title": "Examples > PyAnsys Geometry 101: Sketching > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform the required imports.\nPerform required imports"
    },
    {
        "objectID": "examples/01_getting_started/03_sketching",
        "href": "examples/01_getting_started/03_sketching.html#add-a-box-to-sketch",
        "title": "Examples > PyAnsys Geometry 101: Sketching > Add a box to sketch",
        "section": "Add a box to sketch",
        "text": "The Sketch object is the starting point. Once it is created, you can dynamically add various curves to the sketch. Here are some of the curves that are available:\narc\nbox\ncircle\nellipse\ngear\npolygon\nsegment\nslot\ntrapezoid\ntriangle\nAdd a box to the sketch.\nA functional-style sketching API is also implemented. It allows you to append curves to the sketch with the idea of never picking up your pen.\nUse the functional-style sketching API to add a box.\nA Sketch object uses the XY plane by default. You can define your own custom plane using three parameters: origin, direction_x, and direction_y.\nAdd a box on a custom plane.\nAdd a box to sketch\nSketch\narc\nbox\ncircle\nellipse\ngear\npolygon\nsegment\nslot\ntrapezoid\ntriangle\nSketch\norigin\ndirection_x\ndirection_y"
    },
    {
        "objectID": "examples/01_getting_started/03_sketching",
        "href": "examples/01_getting_started/03_sketching.html#combine-concepts-to-create-powerful-sketches",
        "title": "Examples > PyAnsys Geometry 101: Sketching > Combine concepts to create powerful sketches",
        "section": "Combine concepts to create powerful sketches",
        "text": "Combine these simple concepts to create powerful sketches.\nCombine concepts to create powerful sketches"
    },
    {
        "objectID": "api/ansys/geometry/core/errors/index",
        "href": "api/ansys/geometry/core/errors/index.html#the-errorspy-module",
        "title": "The errors.py module",
        "section": "The errors.py module",
        "text": "The errors.py module\nerrors.py"
    },
    {
        "objectID": "api/ansys/geometry/core/errors/index",
        "href": "api/ansys/geometry/core/errors/index.html#summary",
        "title": "The errors.py module > Summary",
        "section": "Summary",
        "text": "GeometryRuntimeError\nProvides error message when Geometry service passes a runtime error.\nGeometryExitedError\nProvides error message to raise when Geometry service has exited.\nhandler\nPass signal to the custom interrupt handler.\nprotect_grpc\nCapture gRPC exceptions and raise a more succinct error message.\nSIGINT_TRACKER\nSummary\nGeometryRuntimeError\nGeometryExitedError\nhandler\nprotect_grpc\nSIGINT_TRACKER"
    },
    {
        "objectID": "api/ansys/geometry/core/errors/index",
        "href": "api/ansys/geometry/core/errors/index.html#description",
        "title": "The errors.py module > Description",
        "section": "Description",
        "text": "Provides PyAnsys Geometry-specific errors.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/errors/index",
        "href": "api/ansys/geometry/core/errors/index.html#module-detail",
        "title": "The errors.py module > Module detail",
        "section": "Module detail",
        "text": "Pass signal to the custom interrupt handler.\nCapture gRPC exceptions and raise a more succinct error message.\nThis method captures the KeyboardInterrupt exception to avoid\nsegfaulting the Geometry service.\nWhile this works some of the time, it does not work all of the time. For some\nreason, gRPC still captures SIGINT.\nModule detail\nKeyboardInterrupt"
    },
    {
        "objectID": "api/ansys/geometry/core/errors/index",
        "href": "api/ansys/geometry/core/errors/index.html#errors.handler",
        "title": "The errors.py module > Module detail > handler",
        "section": "Module detail > handler",
        "text": "errors.handler(sig, frame)\n\nPass signal to the custom interrupt handler.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/errors/index",
        "href": "api/ansys/geometry/core/errors/index.html#errors.protect_grpc",
        "title": "The errors.py module > Module detail > protect_grpc",
        "section": "Module detail > protect_grpc",
        "text": "errors.protect_grpc(func)\n\nCapture gRPC exceptions and raise a more succinct error message.\n\nThis method captures the KeyboardInterrupt exception to avoid\nsegfaulting the Geometry service.\n\nWhile this works some of the time, it does not work all of the time. For some\nreason, gRPC still captures SIGINT.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/errors/index",
        "href": "api/ansys/geometry/core/errors/index.html#errors.SIGINT_TRACKER",
        "title": "The errors.py module > Module detail > SIGINT_TRACKER",
        "section": "Module detail > SIGINT_TRACKER",
        "text": "errors.SIGINT_TRACKER = []\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#sketch",
        "title": "Sketch",
        "section": "Sketch",
        "text": "Provides for building 2D sketch elements.\nSketch\nSketch"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#ansys.geometry.core.sketch.sketch.Sketch",
        "title": "Sketch > Sketch > Sketch",
        "section": "Sketch > Sketch",
        "text": "class ansys.geometry.core.sketch.sketch.Sketch(plane: ansys.geometry.core.math.plane.Plane = Plane())\n\nProvides for building 2D sketch elements.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#overview",
        "title": "Sketch > Overview",
        "section": "Overview",
        "text": "translate_sketch_plane\nTranslate the origin location of the active sketch plane.\ntranslate_sketch_plane_by_offset\nTranslate the origin location of the active sketch plane by offsets.\ntranslate_sketch_plane_by_distance\nTranslate the origin location active sketch plane by distance.\nget\nGet a list of shapes with a given tag.\nface\nAdd a sketch face to the sketch.\nedge\nAdd a sketch edge to the sketch.\nselect\nAdd all objects that match provided tags to the current context.\nsegment\nAdd a segment sketch object to the sketch plane.\nsegment_to_point\nAdd a segment to the sketch plane starting from the previous end point.\nsegment_from_point_and_vector\nAdd a segment to the sketch starting from a given starting point.\nsegment_from_vector\nAdd a segment to the sketch starting from the previous end point.\narc\nAdd an arc to the sketch plane.\narc_to_point\nAdd an arc to the sketch starting from the previous end point.\narc_from_three_points\nAdd an arc to the sketch plane from three given points.\narc_from_start_end_and_radius\nAdd an arc from the start, end points and a radius.\narc_from_start_center_and_angle\nAdd an arc from the start, center point, and angle.\ntriangle\nAdd a triangle to the sketch using given vertex points.\ntrapezoid\nAdd a trapezoid to the sketch using given vertex points.\ncircle\nAdd a circle to the plane at a given center.\nbox\nCreate a box on the sketch.\nslot\nCreate a slot on the sketch.\nellipse\nCreate an ellipse on the sketch.\npolygon\nCreate a polygon on the sketch.\ndummy_gear\nCreate a dummy gear on the sketch.\nspur_gear\nCreate a spur gear on the sketch.\ntag\nAdd a tag to the active selection of sketch objects.\nplot\nPlot all objects of the sketch to the scene.\nplot_selection\nPlot the current selection to the scene.\nsketch_polydata\nGet polydata configuration for all objects of the sketch.\nsketch_polydata_faces\nGet polydata configuration for all faces of the sketch to the scene.\nsketch_polydata_edges\nGet polydata configuration for all edges of the sketch to the scene.\nplane\nSketch plane configuration.\nedges\nList of all independently sketched edges.\nfaces\nList of all independently sketched faces.\nOverview\ntranslate_sketch_plane\ntranslate_sketch_plane_by_offset\ntranslate_sketch_plane_by_distance\nget\nface\nedge\nselect\nsegment\nsegment_to_point\nsegment_from_point_and_vector\nsegment_from_vector\narc\narc_to_point\narc_from_three_points\narc_from_start_end_and_radius\narc_from_start_center_and_angle\ntriangle\ntrapezoid\ncircle\nbox\nslot\nellipse\npolygon\ndummy_gear\nspur_gear\ntag\nplot\nplot_selection\nsketch_polydata\nsketch_polydata_faces\nsketch_polydata_edges\nplane\nedges\nfaces"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#import-detail",
        "title": "Sketch > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#property-detail",
        "title": "Sketch > Property detail",
        "section": "Property detail",
        "text": "Sketch plane configuration.\nList of all independently sketched edges.\nIndependently sketched edges are not assigned to a face. Face edges\nare not included in this list.\nList of all independently sketched faces.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.plane",
        "title": "Sketch > Property detail > plane",
        "section": "Property detail > plane",
        "text": "property Sketch.plane: ansys.geometry.core.math.plane.Plane\n\nSketch plane configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.edges",
        "title": "Sketch > Property detail > edges",
        "section": "Property detail > edges",
        "text": "property Sketch.edges: list[ansys.geometry.core.sketch.edge.SketchEdge]\n\nList of all independently sketched edges.\n\nNotes\n\nIndependently sketched edges are not assigned to a face. Face edges\nare not included in this list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.faces",
        "title": "Sketch > Property detail > faces",
        "section": "Property detail > faces",
        "text": "property Sketch.faces: list[ansys.geometry.core.sketch.face.SketchFace]\n\nList of all independently sketched faces.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#method-detail",
        "title": "Sketch > Method detail",
        "section": "Method detail",
        "text": "Translate the origin location of the active sketch plane.\nVector defining the translation. Meters is the expected unit.\nRevised sketch state ready for further sketch actions.\nTranslate the origin location of the active sketch plane by offsets.\nAmount to translate the origin of the x-direction.\nAmount to translate the origin of the y-direction.\nAmount to translate the origin of the z-direction.\nRevised sketch state ready for further sketch actions.\nTranslate the origin location active sketch plane by distance.\nDirection to translate the origin.\nDistance to translate the origin.\nRevised sketch state ready for further sketch actions.\nGet a list of shapes with a given tag.\nTag to query against.\nAdd a sketch face to the sketch.\nFace to add.\nUser-defined label for identifying the face.\nRevised sketch state ready for further sketch actions.\nAdd a sketch edge to the sketch.\nEdge to add.\nUser-defined label for identifying the edge.\nRevised sketch state ready for further sketch actions.\nAdd all objects that match provided tags to the current context.\nAdd a segment sketch object to the sketch plane.\nStarting point of the line segment.\nEnding point of the line segment.\nUser-defined label for identifying the edge.\nRevised sketch state ready for further sketch actions.\nAdd a segment to the sketch plane starting from the previous end point.\nEnding point of the line segment.\nUser-defined label for identifying the edge.\nRevised sketch state ready for further sketch actions.\nThe starting point of the created edge is based upon the current context\nof the sketch, such as the end point of a previously added edge.\nAdd a segment to the sketch starting from a given starting point.\nStarting point of the line segment.\nVector defining the line segment. Vector magnitude determines\nthe segment endpoint. Vector magnitude is assumed to be in the\nsame unit as the starting point.\nUser-defined label for identifying the edge.\nRevised sketch state ready for further sketch actions.\nVector magnitude determines the segment endpoint.\nVector magnitude is assumed to use the same unit as the starting point.\nAdd a segment to the sketch starting from the previous end point.\nVector defining the line segment.\nUser-defined label for identifying the edge.\nRevised sketch state ready for further sketch actions.\nThe starting point of the created edge is based upon the current context\nof the sketch, such as the end point of a previously added edge.\nVector magnitude determines the segment endpoint.\nVector magnitude is assumed to use the same unit as the starting point\nin the previous context.\nAdd an arc to the sketch plane.\nStarting point of the arc.\nEnding point of the arc.\nCenter point of the arc.\nWhether the arc spans the angle clockwise between the start\nand end points. When False `` (default), the arc spans the angle\ncounter-clockwise. When ``True, the arc spans the angle\nclockwise.\nUser-defined label for identifying the edge.\nRevised sketch state ready for further sketch actions.\nAdd an arc to the sketch starting from the previous end point.\nEnding point of the arc.\nCenter point of the arc.\nWhether the arc spans the angle clockwise between the start\nand end points. When False (default), the arc spans the angle\ncounter-clockwise. When True, the arc spans the angle\nclockwise.\nUser-defined label for identifying the edge.\nRevised sketch state ready for further sketch actions.\nThe starting point of the created edge is based upon the current context\nof the sketch, such as the end point of a previously added edge.\nAdd an arc to the sketch plane from three given points.\nStarting point of the arc.\nIntermediate point (location) of the arc.\nEnd point of the arc.\nUser-defined label for identifying the edge.\nRevised sketch state ready for further sketch actions.\nAdd an arc from the start, end points and a radius.\nStarting point of the arc.\nEnding point of the arc.\nRadius of the arc.\nWhether the arc is convex. The default is False.\nWhen False , the arc spans the concave version of the arc.\nWhen True, the arc spans the convex version of the arc.\nWhether the arc spans the angle clockwise between the start\nand end points. When False, the arc spans the angle\ncounter-clockwise. When True, the arc spans the angle\nclockwise.\nUser-defined label for identifying the edge.\nRevised sketch state ready for further sketch actions.\nAdd an arc from the start, center point, and angle.\nStarting point of the arc.\nCenter point of the arc.\nAngle of the arc.\nWhether the arc spans the angle clockwise. The default is False.\nWhen False , the arc spans the angle counter-clockwise.\nWhen True, the arc spans the angle clockwise.\nRevised sketch state ready for further sketch actions.\nAdd a triangle to the sketch using given vertex points.\nPoint that represents a vertex of the triangle.\nPoint that represents a vertex of the triangle.\nPoint that represents a vertex of the triangle.\nUser-defined label for identifying the face.\nRevised sketch state ready for further sketch actions.\nAdd a trapezoid to the sketch using given vertex points.\nWidth of the lower base of the trapezoid.\nHeight of the slot.\nAngle for trapezoid generation. Represents the angle\non the base of the trapezoid.\nAsymmetrical angles on each side of the trapezoid.\nThe default is None, in which case the trapezoid is symmetrical. If\nprovided, the trapezoid is asymmetrical and the right corner angle\nat the base of the trapezoid is set to the provided value.\nCenter point of the trapezoid.\nPlacement angle for orientation alignment.\nUser-defined label for identifying the face.\nRevised sketch state ready for further sketch actions.\nIf an asymmetric base angle is defined, the base angle is\napplied to the left-most angle, and the asymmetric base angle\nis applied to the right-most angle.\nAdd a circle to the plane at a given center.\nCenter point of the circle.\nRadius of the circle.\nUser-defined label for identifying the face.\nRevised sketch state ready for further sketch actions.\nCreate a box on the sketch.\nCenter point of the box.\nWidth of the box.\nHeight of the box.\nPlacement angle for orientation alignment.\nUser-defined label for identifying the face.\nRevised sketch state ready for further sketch actions.\nCreate a slot on the sketch.\nCenter point of the slot.\nWidth of the slot.\nHeight of the slot.\nPlacement angle for orientation alignment.\nUser-defined label for identifying the face.\nRevised sketch state ready for further sketch actions.\nCreate an ellipse on the sketch.\nCenter point of the ellipse.\nSemi-major axis of the ellipse.\nSemi-minor axis of the ellipse.\nPlacement angle for orientation alignment.\nUser-defined label for identifying the face.\nRevised sketch state ready for further sketch actions.\nCreate a polygon on the sketch.\nCenter point of the polygon.\nInner radius (apothem) of the polygon.\nNumber of sides of the polygon.\nPlacement angle for orientation alignment.\nUser-defined label for identifying the face.\nRevised sketch state ready for further sketch actions.\nCreate a dummy gear on the sketch.\nOrigin of the gear.\nOuter radius of the gear.\nInner radius of the gear.\nNumber of teeth of the gear.\nUser-defined label for identifying the face.\nRevised sketch state ready for further sketch actions.\nCreate a spur gear on the sketch.\nOrigin of the spur gear.\nModule of the spur gear. This is also the ratio between the pitch circle\ndiameter in millimeters and the number of teeth.\nPressure angle of the spur gear.\nNumber of teeth of the spur gear.\nUser-defined label for identifying the face.\nRevised sketch state ready for further sketch actions.\nAdd a tag to the active selection of sketch objects.\nTag to assign to the sketch objects.\nPlot all objects of the sketch to the scene.\nWhether to represent the plot in a 2D format.\nPath for saving a screenshot of the image that is being represented.\nWhether to enables the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\nKeyword arguments for plotting. For allowable keyword arguments,\nsee the Plotter.add_mesh method.\nPlot the current selection to the scene.\nWhether to represent the plot in a 2D format.\nPath for saving a screenshot of the image that is being represented.\nWhether to enables the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\nKeyword arguments for plotting. For allowable keyword arguments,\nsee the Plotter.add_mesh method.\nGet polydata configuration for all objects of the sketch.\nList of the polydata configuration for all edges and faces in the sketch.\nGet polydata configuration for all faces of the sketch to the scene.\nList of the polydata configuration for faces in the sketch.\nGet polydata configuration for all edges of the sketch to the scene.\nList of the polydata configuration for edges in the sketch.\nMethod detail\nVector3D\nSketch\nQuantity\nDistance\nQuantity\nDEFAULT_UNITS.LENGTH\nQuantity\nDistance\nQuantity\nDEFAULT_UNITS.LENGTH\nQuantity\nDistance\nQuantity\nDEFAULT_UNITS.LENGTH\nSketch\nUnitVector3D\nQuantity\nDistance\nSketch\npython:str\nSketchFace\npython:str\npython:None\nSketch\nSketchEdge\npython:str\npython:None\nSketch\nPoint2D\nPoint2D\npython:str\npython:None\nSketch\nPoint2D\npython:str\npython:None\nSketch\nPoint2D\nVector2D\npython:str\npython:None\nSketch\nVector2D\npython:str\npython:None\nSketch\nPoint2D\nPoint2D\nPoint2D\npython:False\nFalse `` (default), the arc spans the angle\ncounter-clockwise. When ``True\npython:str\npython:None\nSketch\nPoint2D\nPoint2D\npython:False\nFalse\nTrue\npython:str\npython:None\nSketch\nPoint2D\nPoint2D\nPoint2D\npython:str\npython:None\nSketch\nPoint2D\nPoint2D\nQuantity\nDistance\nReal\npython:False\nFalse\nFalse\nTrue\npython:False\nFalse\nTrue\npython:str\npython:None\nSketch\nPoint2D\nPoint2D\nQuantity\nAngle\nReal\npython:False\nFalse\nFalse\nTrue\nSketch\nPoint2D\nPoint2D\nPoint2D\npython:str\npython:None\nSketch\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\nQuantity\nAngle\nReal\npython:None\npython:None\nNone\nQuantity\nAngle\nReal\npython:str\npython:None\nSketch\nQuantity\nDistance\nReal\npython:str\npython:None\nSketch\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\nQuantity\nAngle\nReal\npython:str\npython:None\nSketch\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\nQuantity\nAngle\nReal\npython:str\npython:None\nSketch\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\nQuantity\nAngle\nReal\npython:str\npython:None\nSketch\nQuantity\nDistance\nReal\npython:int\nQuantity\nAngle\nReal\npython:str\npython:None\nSketch\nPoint2D\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\npython:int\npython:str\npython:None\nSketch\nPoint2D\nReal\nQuantity\nAngle\nReal\npython:int\npython:str\npython:None\nSketch\npython:str\npython:False\npython:str\noptional\npython:None\nNone\nansys.tools.visualization_interface.USE_TRAME\npython:dict\noptional\nPlotter.add_mesh\npython:False\npython:str\noptional\npython:None\nNone\nansys.tools.visualization_interface.USE_TRAME\npython:dict\noptional\nPlotter.add_mesh\npython:list\nPolyData\npython:list\nPolyData\npython:list\nPolyData"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.translate_sketch_plane",
        "title": "Sketch > Method detail > translate_sketch_plane",
        "section": "Method detail > translate_sketch_plane",
        "text": "Sketch.translate_sketch_plane(translation: ansys.geometry.core.math.vector.Vector3D) -> Sketch\n\nTranslate the origin location of the active sketch plane.\n\nParameters\n\ntranslation\n\nVector3D\n\nVector defining the translation. Meters is the expected unit.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.translate_sketch_plane_by_offset",
        "title": "Sketch > Method detail > translate_sketch_plane_by_offset",
        "section": "Method detail > translate_sketch_plane_by_offset",
        "text": "Sketch.translate_sketch_plane_by_offset(x: pint.Quantity | ansys.geometry.core.misc.measurements.Distance = Quantity(0, DEFAULT_UNITS.LENGTH), y: pint.Quantity | ansys.geometry.core.misc.measurements.Distance = Quantity(0, DEFAULT_UNITS.LENGTH), z: pint.Quantity | ansys.geometry.core.misc.measurements.Distance = Quantity(0, DEFAULT_UNITS.LENGTH)) -> Sketch\n\nTranslate the origin location of the active sketch plane by offsets.\n\nParameters\n\nx\n\nQuantity | Distance, default: Quantity(0, DEFAULT_UNITS.LENGTH)\n\nAmount to translate the origin of the x-direction.\n\ny\n\nQuantity | Distance, default: Quantity(0, DEFAULT_UNITS.LENGTH)\n\nAmount to translate the origin of the y-direction.\n\nz\n\nQuantity | Distance, default: Quantity(0, DEFAULT_UNITS.LENGTH)\n\nAmount to translate the origin of the z-direction.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.translate_sketch_plane_by_distance",
        "title": "Sketch > Method detail > translate_sketch_plane_by_distance",
        "section": "Method detail > translate_sketch_plane_by_distance",
        "text": "Sketch.translate_sketch_plane_by_distance(direction: ansys.geometry.core.math.vector.UnitVector3D, distance: pint.Quantity | ansys.geometry.core.misc.measurements.Distance) -> Sketch\n\nTranslate the origin location active sketch plane by distance.\n\nParameters\n\ndirection\n\nUnitVector3D\n\nDirection to translate the origin.\n\ndistance\n\nQuantity | Distance\n\nDistance to translate the origin.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.get",
        "title": "Sketch > Method detail > get",
        "section": "Method detail > get",
        "text": "Sketch.get(tag: str) -> list[SketchObject]\n\nGet a list of shapes with a given tag.\n\nParameters\n\ntag\n\npython:str\n\nTag to query against.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.face",
        "title": "Sketch > Method detail > face",
        "section": "Method detail > face",
        "text": "Sketch.face(face: ansys.geometry.core.sketch.face.SketchFace, tag: str | None = None) -> Sketch\n\nAdd a sketch face to the sketch.\n\nParameters\n\nface\n\nSketchFace\n\nFace to add.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the face.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.edge",
        "title": "Sketch > Method detail > edge",
        "section": "Method detail > edge",
        "text": "Sketch.edge(edge: ansys.geometry.core.sketch.edge.SketchEdge, tag: str | None = None) -> Sketch\n\nAdd a sketch edge to the sketch.\n\nParameters\n\nedge\n\nSketchEdge\n\nEdge to add.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the edge.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.select",
        "title": "Sketch > Method detail > select",
        "section": "Method detail > select",
        "text": "Sketch.select(*tags: str) -> Sketch\n\nAdd all objects that match provided tags to the current context.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.segment",
        "title": "Sketch > Method detail > segment",
        "section": "Method detail > segment",
        "text": "Sketch.segment(start: ansys.geometry.core.math.point.Point2D, end: ansys.geometry.core.math.point.Point2D, tag: str | None = None) -> Sketch\n\nAdd a segment sketch object to the sketch plane.\n\nParameters\n\nstart\n\nPoint2D\n\nStarting point of the line segment.\n\nend\n\nPoint2D\n\nEnding point of the line segment.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the edge.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.segment_to_point",
        "title": "Sketch > Method detail > segment_to_point",
        "section": "Method detail > segment_to_point",
        "text": "Sketch.segment_to_point(end: ansys.geometry.core.math.point.Point2D, tag: str | None = None) -> Sketch\n\nAdd a segment to the sketch plane starting from the previous end point.\n\nParameters\n\nend\n\nPoint2D\n\nEnding point of the line segment.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the edge.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\nNotes\n\nThe starting point of the created edge is based upon the current context\nof the sketch, such as the end point of a previously added edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.segment_from_point_and_vector",
        "title": "Sketch > Method detail > segment_from_point_and_vector",
        "section": "Method detail > segment_from_point_and_vector",
        "text": "Sketch.segment_from_point_and_vector(start: ansys.geometry.core.math.point.Point2D, vector: ansys.geometry.core.math.vector.Vector2D, tag: str | None = None)\n\nAdd a segment to the sketch starting from a given starting point.\n\nParameters\n\nstart\n\nPoint2D\n\nStarting point of the line segment.\n\nvector\n\nVector2D\n\nVector defining the line segment. Vector magnitude determines\nthe segment endpoint. Vector magnitude is assumed to be in the\nsame unit as the starting point.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the edge.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\nNotes\n\nVector magnitude determines the segment endpoint.\nVector magnitude is assumed to use the same unit as the starting point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.segment_from_vector",
        "title": "Sketch > Method detail > segment_from_vector",
        "section": "Method detail > segment_from_vector",
        "text": "Sketch.segment_from_vector(vector: ansys.geometry.core.math.vector.Vector2D, tag: str | None = None)\n\nAdd a segment to the sketch starting from the previous end point.\n\nParameters\n\nvector\n\nVector2D\n\nVector defining the line segment.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the edge.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\nNotes\n\nThe starting point of the created edge is based upon the current context\nof the sketch, such as the end point of a previously added edge.\n\nVector magnitude determines the segment endpoint.\nVector magnitude is assumed to use the same unit as the starting point\nin the previous context.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.arc",
        "title": "Sketch > Method detail > arc",
        "section": "Method detail > arc",
        "text": "Sketch.arc(start: ansys.geometry.core.math.point.Point2D, end: ansys.geometry.core.math.point.Point2D, center: ansys.geometry.core.math.point.Point2D, clockwise: bool = False, tag: str | None = None) -> Sketch\n\nAdd an arc to the sketch plane.\n\nParameters\n\nstart\n\nPoint2D\n\nStarting point of the arc.\n\nend\n\nPoint2D\n\nEnding point of the arc.\n\ncenter\n\nPoint2D\n\nCenter point of the arc.\n\nclockwise\n\nbool, default: python:False\n\nWhether the arc spans the angle clockwise between the start\nand end points. When False `` (default), the arc spans the angle\ncounter-clockwise. When ``True, the arc spans the angle\nclockwise.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the edge.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.arc_to_point",
        "title": "Sketch > Method detail > arc_to_point",
        "section": "Method detail > arc_to_point",
        "text": "Sketch.arc_to_point(end: ansys.geometry.core.math.point.Point2D, center: ansys.geometry.core.math.point.Point2D, clockwise: bool = False, tag: str | None = None) -> Sketch\n\nAdd an arc to the sketch starting from the previous end point.\n\nParameters\n\nend\n\nPoint2D\n\nEnding point of the arc.\n\ncenter\n\nPoint2D\n\nCenter point of the arc.\n\nclockwise\n\nbool, default: python:False\n\nWhether the arc spans the angle clockwise between the start\nand end points. When False (default), the arc spans the angle\ncounter-clockwise. When True, the arc spans the angle\nclockwise.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the edge.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\nNotes\n\nThe starting point of the created edge is based upon the current context\nof the sketch, such as the end point of a previously added edge.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.arc_from_three_points",
        "title": "Sketch > Method detail > arc_from_three_points",
        "section": "Method detail > arc_from_three_points",
        "text": "Sketch.arc_from_three_points(start: ansys.geometry.core.math.point.Point2D, inter: ansys.geometry.core.math.point.Point2D, end: ansys.geometry.core.math.point.Point2D, tag: str | None = None) -> Sketch\n\nAdd an arc to the sketch plane from three given points.\n\nParameters\n\nstart\n\nPoint2D\n\nStarting point of the arc.\n\ninter\n\nPoint2D\n\nIntermediate point (location) of the arc.\n\nend\n\nPoint2D\n\nEnd point of the arc.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the edge.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.arc_from_start_end_and_radius",
        "title": "Sketch > Method detail > arc_from_start_end_and_radius",
        "section": "Method detail > arc_from_start_end_and_radius",
        "text": "Sketch.arc_from_start_end_and_radius(start: ansys.geometry.core.math.point.Point2D, end: ansys.geometry.core.math.point.Point2D, radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, convex_arc: bool = False, clockwise: bool = False, tag: str | None = None) -> Sketch\n\nAdd an arc from the start, end points and a radius.\n\nParameters\n\nstart\n\nPoint2D\n\nStarting point of the arc.\n\nend\n\nPoint2D\n\nEnding point of the arc.\n\nradius\n\nQuantity | Distance | Real\n\nRadius of the arc.\n\nconvex_arc\n\nbool, default: python:False\n\nWhether the arc is convex. The default is False.\nWhen False , the arc spans the concave version of the arc.\nWhen True, the arc spans the convex version of the arc.\n\nclockwise\n\nbool, default: python:False\n\nWhether the arc spans the angle clockwise between the start\nand end points. When False, the arc spans the angle\ncounter-clockwise. When True, the arc spans the angle\nclockwise.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the edge.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.arc_from_start_center_and_angle",
        "title": "Sketch > Method detail > arc_from_start_center_and_angle",
        "section": "Method detail > arc_from_start_center_and_angle",
        "text": "Sketch.arc_from_start_center_and_angle(start: ansys.geometry.core.math.point.Point2D, center: ansys.geometry.core.math.point.Point2D, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real, clockwise: bool = False, tag: str | None = None) -> Sketch\n\nAdd an arc from the start, center point, and angle.\n\nParameters\n\nstart\n\nPoint2D\n\nStarting point of the arc.\n\ncenter\n\nPoint2D\n\nCenter point of the arc.\n\nangle\n\nQuantity | Angle | Real\n\nAngle of the arc.\n\nclockwise\n\nbool, default: python:False\n\nWhether the arc spans the angle clockwise. The default is False.\nWhen False , the arc spans the angle counter-clockwise.\nWhen True, the arc spans the angle clockwise.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.triangle",
        "title": "Sketch > Method detail > triangle",
        "section": "Method detail > triangle",
        "text": "Sketch.triangle(point1: ansys.geometry.core.math.point.Point2D, point2: ansys.geometry.core.math.point.Point2D, point3: ansys.geometry.core.math.point.Point2D, tag: str | None = None) -> Sketch\n\nAdd a triangle to the sketch using given vertex points.\n\nParameters\n\npoint1\n\nPoint2D\n\nPoint that represents a vertex of the triangle.\n\npoint2\n\nPoint2D\n\nPoint that represents a vertex of the triangle.\n\npoint3\n\nPoint2D\n\nPoint that represents a vertex of the triangle.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the face.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.trapezoid",
        "title": "Sketch > Method detail > trapezoid",
        "section": "Method detail > trapezoid",
        "text": "Sketch.trapezoid(base_width: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, height: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, base_angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real, base_asymmetric_angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real | None = None, center: ansys.geometry.core.math.point.Point2D = ZERO_POINT2D, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0, tag: str | None = None) -> Sketch\n\nAdd a trapezoid to the sketch using given vertex points.\n\nParameters\n\nbase_width\n\nQuantity | Distance | Real\n\nWidth of the lower base of the trapezoid.\n\nheight\n\nQuantity | Distance | Real\n\nHeight of the slot.\n\nbase_angle\n\nQuantity | Distance | Real\n\nAngle for trapezoid generation. Represents the angle\non the base of the trapezoid.\n\nbase_asymmetric_angle\n\nQuantity | Angle | Real | python:None, default: python:None\n\nAsymmetrical angles on each side of the trapezoid.\nThe default is None, in which case the trapezoid is symmetrical. If\nprovided, the trapezoid is asymmetrical and the right corner angle\nat the base of the trapezoid is set to the provided value.\n\ncenter: Point2D, default: ZERO_POINT2D\n\nCenter point of the trapezoid.\n\nangle\n\nQuantity | Angle | Real, default: 0\n\nPlacement angle for orientation alignment.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the face.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\nNotes\n\nIf an asymmetric base angle is defined, the base angle is\napplied to the left-most angle, and the asymmetric base angle\nis applied to the right-most angle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.circle",
        "title": "Sketch > Method detail > circle",
        "section": "Method detail > circle",
        "text": "Sketch.circle(center: ansys.geometry.core.math.point.Point2D, radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, tag: str | None = None) -> Sketch\n\nAdd a circle to the plane at a given center.\n\nParameters\n\ncenter: Point2D\n\nCenter point of the circle.\n\nradius\n\nQuantity | Distance | Real\n\nRadius of the circle.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the face.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.box",
        "title": "Sketch > Method detail > box",
        "section": "Method detail > box",
        "text": "Sketch.box(center: ansys.geometry.core.math.point.Point2D, width: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, height: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0, tag: str | None = None) -> Sketch\n\nCreate a box on the sketch.\n\nParameters\n\ncenter: Point2D\n\nCenter point of the box.\n\nwidth\n\nQuantity | Distance | Real\n\nWidth of the box.\n\nheight\n\nQuantity | Distance | Real\n\nHeight of the box.\n\nangle\n\nQuantity | Angle | Real, default: 0\n\nPlacement angle for orientation alignment.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the face.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.slot",
        "title": "Sketch > Method detail > slot",
        "section": "Method detail > slot",
        "text": "Sketch.slot(center: ansys.geometry.core.math.point.Point2D, width: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, height: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0, tag: str | None = None) -> Sketch\n\nCreate a slot on the sketch.\n\nParameters\n\ncenter: Point2D\n\nCenter point of the slot.\n\nwidth\n\nQuantity | Distance | Real\n\nWidth of the slot.\n\nheight\n\nQuantity | Distance | Real\n\nHeight of the slot.\n\nangle\n\nQuantity | Angle | Real, default: 0\n\nPlacement angle for orientation alignment.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the face.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.ellipse",
        "title": "Sketch > Method detail > ellipse",
        "section": "Method detail > ellipse",
        "text": "Sketch.ellipse(center: ansys.geometry.core.math.point.Point2D, major_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, minor_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0, tag: str | None = None) -> Sketch\n\nCreate an ellipse on the sketch.\n\nParameters\n\ncenter: Point2D\n\nCenter point of the ellipse.\n\nmajor_radius\n\nQuantity | Distance | Real\n\nSemi-major axis of the ellipse.\n\nminor_radius\n\nQuantity | Distance | Real\n\nSemi-minor axis of the ellipse.\n\nangle\n\nQuantity | Angle | Real, default: 0\n\nPlacement angle for orientation alignment.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the face.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.polygon",
        "title": "Sketch > Method detail > polygon",
        "section": "Method detail > polygon",
        "text": "Sketch.polygon(center: ansys.geometry.core.math.point.Point2D, inner_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, sides: int, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0, tag: str | None = None) -> Sketch\n\nCreate a polygon on the sketch.\n\nParameters\n\ncenter: Point2D\n\nCenter point of the polygon.\n\ninner_radius\n\nQuantity | Distance | Real\n\nInner radius (apothem) of the polygon.\n\nsides\n\npython:int\n\nNumber of sides of the polygon.\n\nangle\n\nQuantity | Angle | Real, default: 0\n\nPlacement angle for orientation alignment.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the face.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.dummy_gear",
        "title": "Sketch > Method detail > dummy_gear",
        "section": "Method detail > dummy_gear",
        "text": "Sketch.dummy_gear(origin: ansys.geometry.core.math.point.Point2D, outer_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, inner_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, n_teeth: int, tag: str | None = None) -> Sketch\n\nCreate a dummy gear on the sketch.\n\nParameters\n\norigin\n\nPoint2D\n\nOrigin of the gear.\n\nouter_radius\n\nQuantity | Distance | Real\n\nOuter radius of the gear.\n\ninner_radius\n\nQuantity | Distance | Real\n\nInner radius of the gear.\n\nn_teeth\n\npython:int\n\nNumber of teeth of the gear.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the face.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.spur_gear",
        "title": "Sketch > Method detail > spur_gear",
        "section": "Method detail > spur_gear",
        "text": "Sketch.spur_gear(origin: ansys.geometry.core.math.point.Point2D, module: ansys.geometry.core.typing.Real, pressure_angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real, n_teeth: int, tag: str | None = None) -> Sketch\n\nCreate a spur gear on the sketch.\n\nParameters\n\norigin\n\nPoint2D\n\nOrigin of the spur gear.\n\nmodule\n\nReal\n\nModule of the spur gear. This is also the ratio between the pitch circle\ndiameter in millimeters and the number of teeth.\n\npressure_angle\n\nQuantity | Angle | Real\n\nPressure angle of the spur gear.\n\nn_teeth\n\npython:int\n\nNumber of teeth of the spur gear.\n\ntag\n\npython:str, default: python:None\n\nUser-defined label for identifying the face.\n\nReturns\n\nSketch\n\nRevised sketch state ready for further sketch actions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.tag",
        "title": "Sketch > Method detail > tag",
        "section": "Method detail > tag",
        "text": "Sketch.tag(tag: str) -> None\n\nAdd a tag to the active selection of sketch objects.\n\nParameters\n\ntag\n\npython:str\n\nTag to assign to the sketch objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.plot",
        "title": "Sketch > Method detail > plot",
        "section": "Method detail > plot",
        "text": "Sketch.plot(view_2d: bool = False, screenshot: str | None = None, use_trame: bool | None = None, selected_pd_objects: list[pyvista.PolyData] = None, **plotting_options: dict | None)\n\nPlot all objects of the sketch to the scene.\n\nParameters\n\nview_2d\n\nbool, default: python:False\n\nWhether to represent the plot in a 2D format.\n\nscreenshot\n\npython:str, optional\n\nPath for saving a screenshot of the image that is being represented.\n\nuse_trame\n\nbool, default: python:None\n\nWhether to enables the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\n\n**plotting_options\n\npython:dict, optional\n\nKeyword arguments for plotting. For allowable keyword arguments,\nsee the Plotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.plot_selection",
        "title": "Sketch > Method detail > plot_selection",
        "section": "Method detail > plot_selection",
        "text": "Sketch.plot_selection(view_2d: bool = False, screenshot: str | None = None, use_trame: bool | None = None, **plotting_options: dict | None)\n\nPlot the current selection to the scene.\n\nParameters\n\nview_2d\n\nbool, default: python:False\n\nWhether to represent the plot in a 2D format.\n\nscreenshot\n\npython:str, optional\n\nPath for saving a screenshot of the image that is being represented.\n\nuse_trame\n\nbool, default: python:None\n\nWhether to enables the use of trame.\nThe default is None, in which case the\nansys.tools.visualization_interface.USE_TRAME global setting is used.\n\n**plotting_options\n\npython:dict, optional\n\nKeyword arguments for plotting. For allowable keyword arguments,\nsee the Plotter.add_mesh method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.sketch_polydata",
        "title": "Sketch > Method detail > sketch_polydata",
        "section": "Method detail > sketch_polydata",
        "text": "Sketch.sketch_polydata() -> list[pyvista.PolyData]\n\nGet polydata configuration for all objects of the sketch.\n\nReturns\n\npython:list[PolyData]\n\nList of the polydata configuration for all edges and faces in the sketch.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.sketch_polydata_faces",
        "title": "Sketch > Method detail > sketch_polydata_faces",
        "section": "Method detail > sketch_polydata_faces",
        "text": "Sketch.sketch_polydata_faces() -> list[pyvista.PolyData]\n\nGet polydata configuration for all faces of the sketch to the scene.\n\nReturns\n\npython:list[PolyData]\n\nList of the polydata configuration for faces in the sketch.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/sketch/Sketch",
        "href": "api/ansys/geometry/core/sketch/sketch/Sketch.html#Sketch.sketch_polydata_edges",
        "title": "Sketch > Method detail > sketch_polydata_edges",
        "section": "Method detail > sketch_polydata_edges",
        "text": "Sketch.sketch_polydata_edges() -> list[pyvista.PolyData]\n\nGet polydata configuration for all edges of the sketch to the scene.\n\nReturns\n\npython:list[PolyData]\n\nList of the polydata configuration for edges in the sketch.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/Slot",
        "href": "api/ansys/geometry/core/sketch/slot/Slot.html#slot",
        "title": "Slot",
        "section": "Slot",
        "text": "Bases: ansys.geometry.core.sketch.face.SketchFace\nProvides for modeling a 2D slot.\nCenter point of the slot.\nWidth of the slot main body.\nHeight of the slot.\nPlacement angle for orientation alignment.\nSlot\nSlot\nansys.geometry.core.sketch.face.SketchFace\nQuantity\nDistance\nReal\nQuantity\nDistance\nReal\nQuantity\nAngle\nReal"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/Slot",
        "href": "api/ansys/geometry/core/sketch/slot/Slot.html#ansys.geometry.core.sketch.slot.Slot",
        "title": "Slot > Slot > Slot",
        "section": "Slot > Slot",
        "text": "class ansys.geometry.core.sketch.slot.Slot(center: ansys.geometry.core.math.point.Point2D, width: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, height: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0)\n\nBases: ansys.geometry.core.sketch.face.SketchFace\n\nProvides for modeling a 2D slot.\n\nParameters\n\ncenter: :class:`Point2D <ansys.geometry.core.math.point.Point2D>`\n\nCenter point of the slot.\n\nwidth\n\nQuantity | Distance | Real\n\nWidth of the slot main body.\n\nheight\n\nQuantity | Distance | Real\n\nHeight of the slot.\n\nangle\n\nQuantity | Angle | Real, default: 0\n\nPlacement angle for orientation alignment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/Slot",
        "href": "api/ansys/geometry/core/sketch/slot/Slot.html#overview",
        "title": "Slot > Overview",
        "section": "Overview",
        "text": "center\nCenter of the slot.\nwidth\nWidth of the slot.\nheight\nHeight of the slot.\nperimeter\nPerimeter of the slot.\narea\nArea of the slot.\nvisualization_polydata\nVTK polydata representation for PyVista visualization.\nOverview\ncenter\nwidth\nheight\nperimeter\narea\nvisualization_polydata"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/Slot",
        "href": "api/ansys/geometry/core/sketch/slot/Slot.html#import-detail",
        "title": "Slot > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/Slot",
        "href": "api/ansys/geometry/core/sketch/slot/Slot.html#property-detail",
        "title": "Slot > Property detail",
        "section": "Property detail",
        "text": "Center of the slot.\nWidth of the slot.\nHeight of the slot.\nPerimeter of the slot.\nArea of the slot.\nVTK polydata representation for PyVista visualization.\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\nVTK pyvista.Polydata configuration.\nProperty detail\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/Slot",
        "href": "api/ansys/geometry/core/sketch/slot/Slot.html#Slot.center",
        "title": "Slot > Property detail > center",
        "section": "Property detail > center",
        "text": "property Slot.center: ansys.geometry.core.math.point.Point2D\n\nCenter of the slot.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/Slot",
        "href": "api/ansys/geometry/core/sketch/slot/Slot.html#Slot.width",
        "title": "Slot > Property detail > width",
        "section": "Property detail > width",
        "text": "property Slot.width: pint.Quantity\n\nWidth of the slot.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/Slot",
        "href": "api/ansys/geometry/core/sketch/slot/Slot.html#Slot.height",
        "title": "Slot > Property detail > height",
        "section": "Property detail > height",
        "text": "property Slot.height: pint.Quantity\n\nHeight of the slot.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/Slot",
        "href": "api/ansys/geometry/core/sketch/slot/Slot.html#Slot.perimeter",
        "title": "Slot > Property detail > perimeter",
        "section": "Property detail > perimeter",
        "text": "property Slot.perimeter: pint.Quantity\n\nPerimeter of the slot.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/Slot",
        "href": "api/ansys/geometry/core/sketch/slot/Slot.html#Slot.area",
        "title": "Slot > Property detail > area",
        "section": "Property detail > area",
        "text": "property Slot.area: pint.Quantity\n\nArea of the slot.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/slot/Slot",
        "href": "api/ansys/geometry/core/sketch/slot/Slot.html#Slot.visualization_polydata",
        "title": "Slot > Property detail > visualization_polydata",
        "section": "Property detail > visualization_polydata",
        "text": "property Slot.visualization_polydata: pyvista.PolyData\n\nVTK polydata representation for PyVista visualization.\n\nThe representation lies in the X/Y plane within\nthe standard global Cartesian coordinate system.\n\nReturns\n\npyvista.PolyData\n\nVTK pyvista.Polydata configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/Parameter",
        "href": "api/ansys/geometry/core/parameters/parameter/Parameter.html#parameter",
        "title": "Parameter",
        "section": "Parameter",
        "text": "Represents a parameter.\nUnique ID for the parameter.\nName of the parameter.\nType of the parameter.\nValue of the parameter.\nParameter\nParameter\npython:int\npython:str\nParameterType\npython:float"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/Parameter",
        "href": "api/ansys/geometry/core/parameters/parameter/Parameter.html#ansys.geometry.core.parameters.parameter.Parameter",
        "title": "Parameter > Parameter > Parameter",
        "section": "Parameter > Parameter",
        "text": "class ansys.geometry.core.parameters.parameter.Parameter(id: int, name: str, dimension_type: ParameterType, dimension_value: ansys.geometry.core.typing.Real)\n\nRepresents a parameter.\n\nParameters\n\nid\n\npython:int\n\nUnique ID for the parameter.\n\nname\n\npython:str\n\nName of the parameter.\n\ndimension_type\n\nParameterType\n\nType of the parameter.\n\ndimension_value\n\npython:float\n\nValue of the parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/Parameter",
        "href": "api/ansys/geometry/core/parameters/parameter/Parameter.html#overview",
        "title": "Parameter > Overview",
        "section": "Overview",
        "text": "name\nGet the name of the parameter.\ndimension_value\nGet the value of the parameter.\ndimension_type\nGet the type of the parameter.\nid\nOverview\nname\ndimension_value\ndimension_type\nid"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/Parameter",
        "href": "api/ansys/geometry/core/parameters/parameter/Parameter.html#import-detail",
        "title": "Parameter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/Parameter",
        "href": "api/ansys/geometry/core/parameters/parameter/Parameter.html#property-detail",
        "title": "Parameter > Property detail",
        "section": "Property detail",
        "text": "Get the name of the parameter.\nGet the value of the parameter.\nGet the type of the parameter.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/Parameter",
        "href": "api/ansys/geometry/core/parameters/parameter/Parameter.html#Parameter.name",
        "title": "Parameter > Property detail > name",
        "section": "Property detail > name",
        "text": "property Parameter.name: str\n\nGet the name of the parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/Parameter",
        "href": "api/ansys/geometry/core/parameters/parameter/Parameter.html#Parameter.dimension_value",
        "title": "Parameter > Property detail > dimension_value",
        "section": "Property detail > dimension_value",
        "text": "property Parameter.dimension_value: ansys.geometry.core.typing.Real\n\nGet the value of the parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/Parameter",
        "href": "api/ansys/geometry/core/parameters/parameter/Parameter.html#Parameter.dimension_type",
        "title": "Parameter > Property detail > dimension_type",
        "section": "Property detail > dimension_type",
        "text": "property Parameter.dimension_type: ParameterType\n\nGet the type of the parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/Parameter",
        "href": "api/ansys/geometry/core/parameters/parameter/Parameter.html#attribute-detail",
        "title": "Parameter > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/parameters/parameter/Parameter",
        "href": "api/ansys/geometry/core/parameters/parameter/Parameter.html#Parameter.id",
        "title": "Parameter > Attribute detail > id",
        "section": "Attribute detail > id",
        "text": "Parameter.id\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/index",
        "href": "api/ansys/geometry/core/connection/client/index.html#the-clientpy-module",
        "title": "The client.py module",
        "section": "The client.py module",
        "text": "The client.py module\nclient.py"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/index",
        "href": "api/ansys/geometry/core/connection/client/index.html#summary",
        "title": "The client.py module > Summary",
        "section": "Summary",
        "text": "GrpcClient\nWraps the gRPC connection for the Geometry service.\nwait_until_healthy\nWait until a channel is healthy before returning.\nSummary\nGrpcClient\nwait_until_healthy"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/index",
        "href": "api/ansys/geometry/core/connection/client/index.html#description",
        "title": "The client.py module > Description",
        "section": "Description",
        "text": "Module providing a wrapped abstraction of the gRPC stubs.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/index",
        "href": "api/ansys/geometry/core/connection/client/index.html#module-detail",
        "title": "The client.py module > Module detail",
        "section": "Module detail",
        "text": "Wait until a channel is healthy before returning.\nChannel that must be established and healthy.\nTimeout in seconds. Attempts are made with the following backoff strategy:\nStarts with 0.1 seconds.\nIf the attempt fails, double the timeout.\nThis is repeated until the next timeoff exceeds the\nvalue for the remaining time. In that case, a final attempt\nis made with the remaining time.\nIf the total elapsed time exceeds the value for the timeout parameter,\na TimeoutError is raised.\nRaised when the total elapsed time exceeds the value for the timeout parameter.\nModule detail\nChannel\npython:float\ntimeout\nTimeoutError\nTimeoutError\ntimeout"
    },
    {
        "objectID": "api/ansys/geometry/core/connection/client/index",
        "href": "api/ansys/geometry/core/connection/client/index.html#client.wait_until_healthy",
        "title": "The client.py module > Module detail > wait_until_healthy",
        "section": "Module detail > wait_until_healthy",
        "text": "client.wait_until_healthy(channel: grpc.Channel, timeout: float)\n\nWait until a channel is healthy before returning.\n\nParameters\n\nchannel\n\nChannel\n\nChannel that must be established and healthy.\n\ntimeout\n\npython:float\n\nTimeout in seconds. Attempts are made with the following backoff strategy:\n\nStarts with 0.1 seconds.\n\nIf the attempt fails, double the timeout.\n\nThis is repeated until the next timeoff exceeds the\nvalue for the remaining time. In that case, a final attempt\nis made with the remaining time.\n\nIf the total elapsed time exceeds the value for the timeout parameter,\na TimeoutError is raised.\n\nRaises\n\nTimeoutError\n\nRaised when the total elapsed time exceeds the value for the timeout parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/01_getting_started/04_modeling",
        "href": "examples/01_getting_started/04_modeling.html#pyansys-geometry-101-modeling",
        "title": "Examples > PyAnsys Geometry 101: Modeling",
        "section": "PyAnsys Geometry 101: Modeling",
        "text": "Once you understand PyAnsys Geometry’s mathematical constructs, units, and sketching capabilities, you can dive into its modeling capabilities.\nPyAnsys Geometry is a Python client that connects to a modeling service. Here are the modeling services that are available for connection:\nDMS: Windows-based modeling service that has been containerized to ease distribution, execution, and remotability operations.\nGeometry service: Linux-based approach of DMS that is currently under development.\nAnsys Discovery and SpaceClaim: PyAnsys Geometry is capable of connecting to a running session of Ansys Discovery or SpaceClaim. Although this is not the main use case for PyAnsys Geometry, a connection to one of these Ansys products is possible. Because these products have graphical user interfaces, performance is not as high with this option as with the previous options. However, connecting to a running instance of Discovery or SpaceClaim might be useful for some users.\nPyAnsys Geometry 101: Modeling"
    },
    {
        "objectID": "examples/01_getting_started/04_modeling",
        "href": "examples/01_getting_started/04_modeling.html#launch-a-modeling-service",
        "title": "Examples > PyAnsys Geometry 101: Modeling > Launch a modeling service",
        "section": "Launch a modeling service",
        "text": "While the PyAnsys Geometry operations in earlier examples did not require communication with a modeling service, this example requires that a modeling service is available. All subsequent examples also require that a modeling service is available.\nLaunch a modeling service session.\nYou can also launch your own services and connect to them. For information on connecting to an existing service, see the Modeler API documentation.\nHere is how the class architecture is implemented:\nModeler: Handler object for the active service session. This object allows you to connect to an existing service by passing in a host and a port. It also allows you to create Design objects, which is where the modeling takes place. For more information, see the Modeler API documentation.\nDesign: Root object of your assembly (tree). While a Design object is also a Component object, it has enhanced capabilities, including creating named selections, adding materials, and handling beam profiles. For more information, see the Design API documentation.\nComponent: One of the main objects for modeling purposes. Component objects allow you to create bodies, subcomponents, beams, design points, planar surfaces, and more. For more information, see the Component API documentation.\nThe following code examples show how you use these objects. More capabilities of these objects are shown in the specific example sections for sketching and modeling.\nLaunch a modeling service\nModeler\nDesign\nDesign\nDesign\nComponent\nComponent\nComponent"
    },
    {
        "objectID": "examples/01_getting_started/04_modeling",
        "href": "examples/01_getting_started/04_modeling.html#create-and-plot-a-sketch",
        "title": "Examples > PyAnsys Geometry 101: Modeling > Create and plot a sketch",
        "section": "Create and plot a sketch",
        "text": "Create a Sketch object and plot it.\nCreate and plot a sketch\nSketch"
    },
    {
        "objectID": "examples/01_getting_started/04_modeling",
        "href": "examples/01_getting_started/04_modeling.html#perform-some-modeling-operations",
        "title": "Examples > PyAnsys Geometry 101: Modeling > Perform some modeling operations",
        "section": "Perform some modeling operations",
        "text": "Now that the sketch is ready to be extruded, perform some modeling operations, including creating the design, creating the body directly on the design, and plotting the body.\nPerform some modeling operations"
    },
    {
        "objectID": "examples/01_getting_started/04_modeling",
        "href": "examples/01_getting_started/04_modeling.html#perform-some-operations-on-the-body",
        "title": "Examples > PyAnsys Geometry 101: Modeling > Perform some operations on the body",
        "section": "Perform some operations on the body",
        "text": "Perform some operations on the body.\nOther operations that can be performed include adding a midsurface offset and thickness (only for planar bodies), imprinting curves, assigning materials, copying, and translating.\nCopy the body on a new subcomponent and translate it.\nCreate and assign materials to the bodies that were created.\nCurrently materials do not have any impact on the visualization when plotting is requested, although this could be a future feature. If the final assembly is open in Discovery or SpaceClaim, you can observe the changes.\nPerform some operations on the body"
    },
    {
        "objectID": "examples/01_getting_started/04_modeling",
        "href": "examples/01_getting_started/04_modeling.html#create-a-named-selection",
        "title": "Examples > PyAnsys Geometry 101: Modeling > Create a named selection",
        "section": "Create a named selection",
        "text": "PyAnsys Geometry supports the creation of a named selection via the Design object.\nCreate a named selection with some of the faces of the previous body and the body itself.\nCreate a named selection\nDesign"
    },
    {
        "objectID": "examples/01_getting_started/04_modeling",
        "href": "examples/01_getting_started/04_modeling.html#perform-deletions",
        "title": "Examples > PyAnsys Geometry 101: Modeling > Perform deletions",
        "section": "Perform deletions",
        "text": "Deletion operations for bodies, named selections, and components are possible, always from the scope expected. For example, if you attempted to delete the original body from a component that has no ownership over it (such as your comp object), the deletion would fail. If you attempted to perform this deletion from the design object, the deletion would succeed.\nThe next two code examples show how deletion works.\nPerform deletions\ncomp\ndesign"
    },
    {
        "objectID": "examples/01_getting_started/04_modeling",
        "href": "examples/01_getting_started/04_modeling.html#export-files",
        "title": "Examples > PyAnsys Geometry 101: Modeling > Export files",
        "section": "Export files",
        "text": "Once modeling operations are finalized, you can export files in different formats. For the formats supported by DMS, see the DesignFileFormat class in the Design module documentation.\nExport files in SCDOCX and FMD formats.\nExport files\nDesign"
    },
    {
        "objectID": "examples/01_getting_started/04_modeling",
        "href": "examples/01_getting_started/04_modeling.html#close-session",
        "title": "Examples > PyAnsys Geometry 101: Modeling > Close session",
        "section": "Close session",
        "text": "When you finish interacting with your modeling service, you should close the active server session. This frees resources wherever the service is running.\nClose the server session.\nIf the server session already existed (that is, it was not launched by the current client session), you cannot use this method to close the server session. You must manually close the server serssion instead. This is a safeguard for user-spawned services.\nClose session"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/index",
        "href": "api/ansys/geometry/core/sketch/index.html#the-sketch-package",
        "title": "The sketch package",
        "section": "The sketch package",
        "text": "The sketch package\nsketch"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/index",
        "href": "api/ansys/geometry/core/sketch/index.html#summary",
        "title": "The sketch package > Summary",
        "section": "Summary",
        "text": "arc\nProvides for creating and managing an arc.\nbox\nProvides for creating and managing a box (quadrilateral).\ncircle\nProvides for creating and managing a circle.\nedge\nProvides for creating and managing an edge.\nellipse\nProvides for creating and managing an ellipse.\nface\nProvides for creating and managing a face (closed 2D sketch).\ngears\nModule for creating and managing gears.\npolygon\nProvides for creating and managing a polygon.\nsegment\nProvides for creating and managing a segment.\nsketch\nProvides for creating and managing a sketch.\nslot\nProvides for creating and managing a slot.\ntrapezoid\nProvides for creating and managing a trapezoid.\ntriangle\nProvides for creating and managing a triangle.\nSummary\narc\nbox\ncircle\nedge\nellipse\nface\ngears\npolygon\nsegment\nsketch\nslot\ntrapezoid\ntriangle"
    },
    {
        "objectID": "api/ansys/geometry/core/sketch/index",
        "href": "api/ansys/geometry/core/sketch/index.html#description",
        "title": "The sketch package > Description",
        "section": "Description",
        "text": "PyAnsys Geometry sketch subpackage.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/PersistentIdType",
        "href": "api/ansys/geometry/core/tools/unsupported/PersistentIdType.html#persistentidtype",
        "title": "PersistentIdType",
        "section": "PersistentIdType",
        "text": "Bases: enum.Enum\nType of persistent id.\nPersistentIdType\nPersistentIdType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/PersistentIdType",
        "href": "api/ansys/geometry/core/tools/unsupported/PersistentIdType.html#ansys.geometry.core.tools.unsupported.PersistentIdType",
        "title": "PersistentIdType > PersistentIdType > PersistentIdType",
        "section": "PersistentIdType > PersistentIdType",
        "text": "class ansys.geometry.core.tools.unsupported.PersistentIdType(*args, **kwds)\n\nBases: enum.Enum\n\nType of persistent id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/PersistentIdType",
        "href": "api/ansys/geometry/core/tools/unsupported/PersistentIdType.html#overview",
        "title": "PersistentIdType > Overview",
        "section": "Overview",
        "text": "PNAME\nPRIME_ID\nOverview\nPNAME\nPRIME_ID"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/PersistentIdType",
        "href": "api/ansys/geometry/core/tools/unsupported/PersistentIdType.html#import-detail",
        "title": "PersistentIdType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/PersistentIdType",
        "href": "api/ansys/geometry/core/tools/unsupported/PersistentIdType.html#attribute-detail",
        "title": "PersistentIdType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/PersistentIdType",
        "href": "api/ansys/geometry/core/tools/unsupported/PersistentIdType.html#PersistentIdType.PNAME",
        "title": "PersistentIdType > Attribute detail > PNAME",
        "section": "Attribute detail > PNAME",
        "text": "PersistentIdType.PNAME = 1\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/unsupported/PersistentIdType",
        "href": "api/ansys/geometry/core/tools/unsupported/PersistentIdType.html#PersistentIdType.PRIME_ID",
        "title": "PersistentIdType > Attribute detail > PRIME_ID",
        "section": "Attribute detail > PRIME_ID",
        "text": "PersistentIdType.PRIME_ID = 700\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#design",
        "title": "Design",
        "section": "Design",
        "text": "Bases: ansys.geometry.core.designer.component.Component\nProvides for organizing geometry assemblies.\nThis class synchronizes to a supporting Geometry service instance.\nUser-defined label for the design.\nActive supporting Geometry service instance for design modeling.\nWhether an existing design on the service should be read. This parameter is\nonly valid when connecting to an existing service session. Otherwise, avoid\nusing this optional parameter.\nDesign\nDesign\nansys.geometry.core.designer.component.Component\npython:str\nGrpcClient\npython:False"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#ansys.geometry.core.designer.design.Design",
        "title": "Design > Design > Design",
        "section": "Design > Design",
        "text": "class ansys.geometry.core.designer.design.Design(name: str, modeler: ansys.geometry.core.modeler.Modeler, read_existing_design: bool = False)\n\nBases: ansys.geometry.core.designer.component.Component\n\nProvides for organizing geometry assemblies.\n\nThis class synchronizes to a supporting Geometry service instance.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the design.\n\ngrpc_client\n\nGrpcClient\n\nActive supporting Geometry service instance for design modeling.\n\nread_existing_design\n\nbool, default: python:False\n\nWhether an existing design on the service should be read. This parameter is\nonly valid when connecting to an existing service session. Otherwise, avoid\nusing this optional parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#overview",
        "title": "Design > Overview",
        "section": "Overview",
        "text": "close\nClose the design.\nadd_material\nAdd a material to the design.\nsave\nSave a design to disk on the active Geometry server instance.\ndownload\nExport and download the design from the server.\nexport_to_scdocx\nExport the design to an scdocx file.\nexport_to_disco\nExport the design to an dsco file.\nexport_to_stride\nExport the design to an stride file.\nexport_to_parasolid_text\nExport the design to a Parasolid text file.\nexport_to_parasolid_bin\nExport the design to a Parasolid binary file.\nexport_to_fmd\nExport the design to an FMD file.\nexport_to_step\nExport the design to a STEP file.\nexport_to_iges\nExport the design to an IGES file.\nexport_to_pmdb\nExport the design to a PMDB file.\ncreate_named_selection\nCreate a named selection on the active Geometry server instance.\ndelete_named_selection\nDelete a named selection on the active Geometry server instance.\ndelete_component\nDelete a component (itself or its children).\nset_shared_topology\nSet the shared topology to apply to the component.\nadd_beam_circular_profile\nAdd a new beam circular profile under the design for creating beams.\nget_all_parameters\nGet parameters for the design.\nset_parameter\nSet or update a parameter of the design.\nadd_midsurface_thickness\nAdd a mid-surface thickness to a list of bodies.\nadd_midsurface_offset\nAdd a mid-surface offset type to a list of bodies.\ndelete_beam_profile\nRemove a beam profile on the active geometry server instance.\ninsert_file\nInsert a file into the design.\ndesign_id\nThe design’s object unique id.\nmaterials\nList of materials available for the design.\nnamed_selections\nList of named selections available for the design.\nbeam_profiles\nList of beam profile available for the design.\nparameters\nList of parameters available for the design.\nis_active\nWhether the design is currently active.\nis_closed\nWhether the design is closed (i.e. not active).\n__repr__\nRepresent the Design as a string.\nOverview\nclose\nadd_material\nsave\ndownload\nexport_to_scdocx\nexport_to_disco\nexport_to_stride\nexport_to_parasolid_text\nexport_to_parasolid_bin\nexport_to_fmd\nexport_to_step\nexport_to_iges\nexport_to_pmdb\ncreate_named_selection\ndelete_named_selection\ndelete_component\nset_shared_topology\nadd_beam_circular_profile\nget_all_parameters\nset_parameter\nadd_midsurface_thickness\nadd_midsurface_offset\ndelete_beam_profile\ninsert_file\ndesign_id\nmaterials\nnamed_selections\nbeam_profiles\nparameters\nis_active\nis_closed\n__repr__\nDesign"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#import-detail",
        "title": "Design > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#property-detail",
        "title": "Design > Property detail",
        "section": "Property detail",
        "text": "The design’s object unique id.\nList of materials available for the design.\nList of named selections available for the design.\nList of beam profile available for the design.\nList of parameters available for the design.\nWhether the design is currently active.\nWhether the design is closed (i.e. not active).\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.design_id",
        "title": "Design > Property detail > design_id",
        "section": "Property detail > design_id",
        "text": "property Design.design_id: str\n\nThe design’s object unique id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.materials",
        "title": "Design > Property detail > materials",
        "section": "Property detail > materials",
        "text": "property Design.materials: list[ansys.geometry.core.materials.material.Material]\n\nList of materials available for the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.named_selections",
        "title": "Design > Property detail > named_selections",
        "section": "Property detail > named_selections",
        "text": "property Design.named_selections: list[ansys.geometry.core.designer.selection.NamedSelection]\n\nList of named selections available for the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.beam_profiles",
        "title": "Design > Property detail > beam_profiles",
        "section": "Property detail > beam_profiles",
        "text": "property Design.beam_profiles: list[ansys.geometry.core.designer.beam.BeamProfile]\n\nList of beam profile available for the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.parameters",
        "title": "Design > Property detail > parameters",
        "section": "Property detail > parameters",
        "text": "property Design.parameters: list[ansys.geometry.core.parameters.parameter.Parameter]\n\nList of parameters available for the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.is_active",
        "title": "Design > Property detail > is_active",
        "section": "Property detail > is_active",
        "text": "property Design.is_active: bool\n\nWhether the design is currently active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.is_closed",
        "title": "Design > Property detail > is_closed",
        "section": "Property detail > is_closed",
        "text": "property Design.is_closed: bool\n\nWhether the design is closed (i.e. not active).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#method-detail",
        "title": "Design > Method detail",
        "section": "Method detail",
        "text": "Close the design.\nAdd a material to the design.\nMaterial to add.\nSave a design to disk on the active Geometry server instance.\nLocation on disk to save the file to.\nExport and download the design from the server.\nLocation on disk to save the file to.\nFormat for the file to save to.\nExport the design to an scdocx file.\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\nThe path to the saved file.\nExport the design to an dsco file.\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\nThe path to the saved file.\nExport the design to an stride file.\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\nThe path to the saved file.\nExport the design to a Parasolid text file.\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\nThe path to the saved file.\nExport the design to a Parasolid binary file.\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\nThe path to the saved file.\nExport the design to an FMD file.\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\nThe path to the saved file.\nExport the design to a STEP file.\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\nThe path to the saved file.\nExport the design to an IGES file.\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\nThe path to the saved file.\nExport the design to a PMDB file.\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\nThe path to the saved file.\nCreate a named selection on the active Geometry server instance.\nUser-defined name for the named selection.\nAll bodies to include in the named selection.\nAll faces to include in the named selection.\nAll edges to include in the named selection.\nAll beams to include in the named selection.\nAll design points to include in the named selection.\nNewly created named selection that maintains references to all target entities.\nDelete a named selection on the active Geometry server instance.\nName of the named selection or instance.\nDelete a component (itself or its children).\nName of the component or instance to delete.\nThe design itself cannot be deleted.\nIf the component is not this component (or its children), it\nis not deleted.\nSet the shared topology to apply to the component.\nShared topology type to assign.\nShared topology does not apply to a design.\nAdd a new beam circular profile under the design for creating beams.\nUser-defined label for the new beam circular profile.\nRadius of the beam circular profile.\nCenter of the beam circular profile.\nX-plane direction.\nY-plane direction.\nGet parameters for the design.\nList of parameters for the design.\nSet or update a parameter of the design.\nParameter to set.\nStatus of the update operation.\nAdd a mid-surface thickness to a list of bodies.\nThickness to be assigned.\nAll bodies to include in the mid-surface thickness assignment.\nOnly surface bodies will be eligible for mid-surface thickness assignment.\nAdd a mid-surface offset type to a list of bodies.\nSurface offset to be assigned.\nAll bodies to include in the mid-surface offset assignment.\nOnly surface bodies will be eligible for mid-surface offset assignment.\nRemove a beam profile on the active geometry server instance.\nA beam profile name or instance that should be deleted.\nInsert a file into the design.\nLocation on disk where the file is located.\nThe options to pass into upload file\nThe newly inserted component.\nRepresent the Design as a string.\nMethod detail\nMaterial\nPath\npython:str\nPath\npython:str\nDesignFileFormat\nDesignFileFormat.SCDOCX\nPath\npython:str\noptional\nPath\nPath\npython:str\noptional\nPath\nPath\npython:str\noptional\nPath\nPath\npython:str\noptional\nPath\nPath\npython:str\noptional\nPath\nPath\npython:str\noptional\nPath\nPath\npython:str\noptional\nPath\nPath\npython:str\noptional\nPath\nPath\npython:str\noptional\nPath\npython:str\npython:list\nBody\npython:None\npython:list\nFace\npython:None\npython:list\nEdge\npython:None\npython:list\nBeam\npython:None\npython:list\nDesignPoint\npython:None\nNamedSelection\nNamedSelection\npython:str\nUnion\nComponent\npython:str\nValueError\nSharedTopologyType\nValueError\npython:str\nQuantity\nDistance\nndarray\nRealSequence\nPoint3D\nndarray\nRealSequence\nUnitVector3D\nVector3D\nndarray\nRealSequence\nUnitVector3D\nVector3D\npython:list\nParameter\nParameter\nParameterUpdateStatus\nQuantity\npython:list\nBody\nMidSurfaceOffsetType\npython:list\nBody\nBeamProfile\npython:str\nPath\npython:str\nImportOptions\nComponent\nDesign"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.close",
        "title": "Design > Method detail > close",
        "section": "Method detail > close",
        "text": "Design.close() -> None\n\nClose the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.add_material",
        "title": "Design > Method detail > add_material",
        "section": "Method detail > add_material",
        "text": "Design.add_material(material: ansys.geometry.core.materials.material.Material) -> None\n\nAdd a material to the design.\n\nParameters\n\nmaterial\n\nMaterial\n\nMaterial to add.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.save",
        "title": "Design > Method detail > save",
        "section": "Method detail > save",
        "text": "Design.save(file_location: pathlib.Path | str) -> None\n\nSave a design to disk on the active Geometry server instance.\n\nParameters\n\nfile_location\n\nPath | python:str\n\nLocation on disk to save the file to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.download",
        "title": "Design > Method detail > download",
        "section": "Method detail > download",
        "text": "Design.download(file_location: pathlib.Path | str, format: DesignFileFormat = DesignFileFormat.SCDOCX) -> None\n\nExport and download the design from the server.\n\nParameters\n\nfile_location\n\nPath | python:str\n\nLocation on disk to save the file to.\n\nformat\n\nDesignFileFormat, default: DesignFileFormat.SCDOCX\n\nFormat for the file to save to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.export_to_scdocx",
        "title": "Design > Method detail > export_to_scdocx",
        "section": "Method detail > export_to_scdocx",
        "text": "Design.export_to_scdocx(location: pathlib.Path | str | None = None) -> pathlib.Path\n\nExport the design to an scdocx file.\n\nParameters\n\nlocation\n\nPath | python:str, optional\n\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\n\nReturns\n\nPath\n\nThe path to the saved file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.export_to_disco",
        "title": "Design > Method detail > export_to_disco",
        "section": "Method detail > export_to_disco",
        "text": "Design.export_to_disco(location: pathlib.Path | str | None = None) -> pathlib.Path\n\nExport the design to an dsco file.\n\nParameters\n\nlocation\n\nPath | python:str, optional\n\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\n\nReturns\n\nPath\n\nThe path to the saved file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.export_to_stride",
        "title": "Design > Method detail > export_to_stride",
        "section": "Method detail > export_to_stride",
        "text": "Design.export_to_stride(location: pathlib.Path | str | None = None) -> pathlib.Path\n\nExport the design to an stride file.\n\nParameters\n\nlocation\n\nPath | python:str, optional\n\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\n\nReturns\n\nPath\n\nThe path to the saved file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.export_to_parasolid_text",
        "title": "Design > Method detail > export_to_parasolid_text",
        "section": "Method detail > export_to_parasolid_text",
        "text": "Design.export_to_parasolid_text(location: pathlib.Path | str | None = None) -> pathlib.Path\n\nExport the design to a Parasolid text file.\n\nParameters\n\nlocation\n\nPath | python:str, optional\n\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\n\nReturns\n\nPath\n\nThe path to the saved file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.export_to_parasolid_bin",
        "title": "Design > Method detail > export_to_parasolid_bin",
        "section": "Method detail > export_to_parasolid_bin",
        "text": "Design.export_to_parasolid_bin(location: pathlib.Path | str | None = None) -> pathlib.Path\n\nExport the design to a Parasolid binary file.\n\nParameters\n\nlocation\n\nPath | python:str, optional\n\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\n\nReturns\n\nPath\n\nThe path to the saved file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.export_to_fmd",
        "title": "Design > Method detail > export_to_fmd",
        "section": "Method detail > export_to_fmd",
        "text": "Design.export_to_fmd(location: pathlib.Path | str | None = None) -> pathlib.Path\n\nExport the design to an FMD file.\n\nParameters\n\nlocation\n\nPath | python:str, optional\n\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\n\nReturns\n\nPath\n\nThe path to the saved file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.export_to_step",
        "title": "Design > Method detail > export_to_step",
        "section": "Method detail > export_to_step",
        "text": "Design.export_to_step(location: pathlib.Path | str | None = None) -> pathlib.Path\n\nExport the design to a STEP file.\n\nParameters\n\nlocation\n\nPath | python:str, optional\n\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\n\nReturns\n\nPath\n\nThe path to the saved file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.export_to_iges",
        "title": "Design > Method detail > export_to_iges",
        "section": "Method detail > export_to_iges",
        "text": "Design.export_to_iges(location: pathlib.Path | str = None) -> pathlib.Path\n\nExport the design to an IGES file.\n\nParameters\n\nlocation\n\nPath | python:str, optional\n\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\n\nReturns\n\nPath\n\nThe path to the saved file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.export_to_pmdb",
        "title": "Design > Method detail > export_to_pmdb",
        "section": "Method detail > export_to_pmdb",
        "text": "Design.export_to_pmdb(location: pathlib.Path | str | None = None) -> pathlib.Path\n\nExport the design to a PMDB file.\n\nParameters\n\nlocation\n\nPath | python:str, optional\n\nLocation on disk to save the file to. If None, the file will be saved\nin the current working directory.\n\nReturns\n\nPath\n\nThe path to the saved file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.create_named_selection",
        "title": "Design > Method detail > create_named_selection",
        "section": "Method detail > create_named_selection",
        "text": "Design.create_named_selection(name: str, bodies: list[ansys.geometry.core.designer.body.Body] | None = None, faces: list[ansys.geometry.core.designer.face.Face] | None = None, edges: list[ansys.geometry.core.designer.edge.Edge] | None = None, beams: list[ansys.geometry.core.designer.beam.Beam] | None = None, design_points: list[ansys.geometry.core.designer.designpoint.DesignPoint] | None = None) -> ansys.geometry.core.designer.selection.NamedSelection\n\nCreate a named selection on the active Geometry server instance.\n\nParameters\n\nname\n\npython:str\n\nUser-defined name for the named selection.\n\nbodies\n\npython:list[Body], default: python:None\n\nAll bodies to include in the named selection.\n\nfaces\n\npython:list[Face], default: python:None\n\nAll faces to include in the named selection.\n\nedges\n\npython:list[Edge], default: python:None\n\nAll edges to include in the named selection.\n\nbeams\n\npython:list[Beam], default: python:None\n\nAll beams to include in the named selection.\n\ndesign_points\n\npython:list[DesignPoint], default: python:None\n\nAll design points to include in the named selection.\n\nReturns\n\nNamedSelection\n\nNewly created named selection that maintains references to all target entities.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.delete_named_selection",
        "title": "Design > Method detail > delete_named_selection",
        "section": "Method detail > delete_named_selection",
        "text": "Design.delete_named_selection(named_selection: ansys.geometry.core.designer.selection.NamedSelection | str) -> None\n\nDelete a named selection on the active Geometry server instance.\n\nParameters\n\nnamed_selection\n\nNamedSelection | python:str\n\nName of the named selection or instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.delete_component",
        "title": "Design > Method detail > delete_component",
        "section": "Method detail > delete_component",
        "text": "Design.delete_component(component: ansys.geometry.core.designer.component.Component | str) -> None\n\nDelete a component (itself or its children).\n\nParameters\n\nid\n\nUnion[Component, python:str]\n\nName of the component or instance to delete.\n\nRaises\n\nValueError\n\nThe design itself cannot be deleted.\n\nNotes\n\nIf the component is not this component (or its children), it\nis not deleted.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.set_shared_topology",
        "title": "Design > Method detail > set_shared_topology",
        "section": "Method detail > set_shared_topology",
        "text": "Design.set_shared_topology(share_type: ansys.geometry.core.designer.component.SharedTopologyType) -> None\n\nSet the shared topology to apply to the component.\n\nParameters\n\nshare_type\n\nSharedTopologyType\n\nShared topology type to assign.\n\nRaises\n\nValueError\n\nShared topology does not apply to a design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.add_beam_circular_profile",
        "title": "Design > Method detail > add_beam_circular_profile",
        "section": "Method detail > add_beam_circular_profile",
        "text": "Design.add_beam_circular_profile(name: str, radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance, center: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D = ZERO_POINT3D, direction_x: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_X, direction_y: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_Y) -> ansys.geometry.core.designer.beam.BeamCircularProfile\n\nAdd a new beam circular profile under the design for creating beams.\n\nParameters\n\nname\n\npython:str\n\nUser-defined label for the new beam circular profile.\n\nradius\n\nQuantity | Distance\n\nRadius of the beam circular profile.\n\ncenter\n\nndarray | RealSequence | Point3D\n\nCenter of the beam circular profile.\n\ndirection_x\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nX-plane direction.\n\ndirection_y\n\nndarray | RealSequence | UnitVector3D | Vector3D\n\nY-plane direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.get_all_parameters",
        "title": "Design > Method detail > get_all_parameters",
        "section": "Method detail > get_all_parameters",
        "text": "Design.get_all_parameters() -> list[ansys.geometry.core.parameters.parameter.Parameter]\n\nGet parameters for the design.\n\nReturns\n\npython:list[Parameter]\n\nList of parameters for the design.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.set_parameter",
        "title": "Design > Method detail > set_parameter",
        "section": "Method detail > set_parameter",
        "text": "Design.set_parameter(dimension: ansys.geometry.core.parameters.parameter.Parameter) -> ansys.geometry.core.parameters.parameter.ParameterUpdateStatus\n\nSet or update a parameter of the design.\n\nParameters\n\ndimension\n\nParameter\n\nParameter to set.\n\nReturns\n\nParameterUpdateStatus\n\nStatus of the update operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.add_midsurface_thickness",
        "title": "Design > Method detail > add_midsurface_thickness",
        "section": "Method detail > add_midsurface_thickness",
        "text": "Design.add_midsurface_thickness(thickness: pint.Quantity, bodies: list[ansys.geometry.core.designer.body.Body]) -> None\n\nAdd a mid-surface thickness to a list of bodies.\n\nParameters\n\nthickness\n\nQuantity\n\nThickness to be assigned.\n\nbodies\n\npython:list[Body]\n\nAll bodies to include in the mid-surface thickness assignment.\n\nNotes\n\nOnly surface bodies will be eligible for mid-surface thickness assignment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.add_midsurface_offset",
        "title": "Design > Method detail > add_midsurface_offset",
        "section": "Method detail > add_midsurface_offset",
        "text": "Design.add_midsurface_offset(offset_type: ansys.geometry.core.designer.body.MidSurfaceOffsetType, bodies: list[ansys.geometry.core.designer.body.Body]) -> None\n\nAdd a mid-surface offset type to a list of bodies.\n\nParameters\n\noffset_type\n\nMidSurfaceOffsetType\n\nSurface offset to be assigned.\n\nbodies\n\npython:list[Body]\n\nAll bodies to include in the mid-surface offset assignment.\n\nNotes\n\nOnly surface bodies will be eligible for mid-surface offset assignment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.delete_beam_profile",
        "title": "Design > Method detail > delete_beam_profile",
        "section": "Method detail > delete_beam_profile",
        "text": "Design.delete_beam_profile(beam_profile: ansys.geometry.core.designer.beam.BeamProfile | str) -> None\n\nRemove a beam profile on the active geometry server instance.\n\nParameters\n\nbeam_profile\n\nBeamProfile | python:str\n\nA beam profile name or instance that should be deleted.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.insert_file",
        "title": "Design > Method detail > insert_file",
        "section": "Method detail > insert_file",
        "text": "Design.insert_file(file_location: pathlib.Path | str, import_options: ansys.geometry.core.misc.options.ImportOptions = ImportOptions()) -> ansys.geometry.core.designer.component.Component\n\nInsert a file into the design.\n\nParameters\n\nfile_location\n\nPath | python:str\n\nLocation on disk where the file is located.\n\nimport_options\n\nImportOptions\n\nThe options to pass into upload file\n\nReturns\n\nComponent\n\nThe newly inserted component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/design/Design",
        "href": "api/ansys/geometry/core/designer/design/Design.html#Design.__repr__",
        "title": "Design > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Design.__repr__() -> str\n\nRepresent the Design as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#the-constantspy-module",
        "title": "The constants.py module",
        "section": "The constants.py module",
        "text": "The constants.py module\nconstants.py"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#summary",
        "title": "The constants.py module > Summary",
        "section": "Summary",
        "text": "DEFAULT_POINT3D\nDefault value for a 3D point.\nDEFAULT_POINT2D\nDefault value for a 2D point.\nIDENTITY_MATRIX33\nIdentity for a Matrix33 object.\nIDENTITY_MATRIX44\nIdentity for a Matrix44 object.\nUNITVECTOR3D_X\nDefault 3D unit vector in the Cartesian traditional X direction.\nUNITVECTOR3D_Y\nDefault 3D unit vector in the Cartesian traditional Y direction.\nUNITVECTOR3D_Z\nDefault 3D unit vector in the Cartesian traditional Z direction.\nUNITVECTOR2D_X\nDefault 2D unit vector in the Cartesian traditional X direction.\nUNITVECTOR2D_Y\nDefault 2D unit vector  in the Cartesian traditional Y direction.\nZERO_VECTOR3D\nZero-valued Vector3D object.\nZERO_VECTOR2D\nZero-valued Vector2D object.\nZERO_POINT3D\nZero-valued Point3D object.\nZERO_POINT2D\nZero-valued Point2D object.\nSummary\nDEFAULT_POINT3D\nDEFAULT_POINT2D\nIDENTITY_MATRIX33\nMatrix33\nIDENTITY_MATRIX44\nMatrix44\nUNITVECTOR3D_X\nUNITVECTOR3D_Y\nUNITVECTOR3D_Z\nUNITVECTOR2D_X\nUNITVECTOR2D_Y\nZERO_VECTOR3D\nVector3D\nZERO_VECTOR2D\nVector2D\nZERO_POINT3D\nPoint3D\nZERO_POINT2D\nPoint2D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#description",
        "title": "The constants.py module > Description",
        "section": "Description",
        "text": "Provides mathematical constants.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#module-detail",
        "title": "The constants.py module > Module detail",
        "section": "Module detail",
        "text": "Default value for a 3D point.\nDefault value for a 2D point.\nIdentity for a Matrix33 object.\nIdentity for a Matrix44 object.\nDefault 3D unit vector in the Cartesian traditional X direction.\nDefault 3D unit vector in the Cartesian traditional Y direction.\nDefault 3D unit vector in the Cartesian traditional Z direction.\nDefault 2D unit vector in the Cartesian traditional X direction.\nDefault 2D unit vector  in the Cartesian traditional Y direction.\nZero-valued Vector3D object.\nZero-valued Vector2D object.\nZero-valued Point3D object.\nZero-valued Point2D object.\nModule detail\nMatrix33\nMatrix44\nVector3D\nVector2D\nPoint3D\nPoint2D"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#constants.DEFAULT_POINT3D",
        "title": "The constants.py module > Module detail > DEFAULT_POINT3D",
        "section": "Module detail > DEFAULT_POINT3D",
        "text": "constants.DEFAULT_POINT3D\n\nDefault value for a 3D point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#constants.DEFAULT_POINT2D",
        "title": "The constants.py module > Module detail > DEFAULT_POINT2D",
        "section": "Module detail > DEFAULT_POINT2D",
        "text": "constants.DEFAULT_POINT2D\n\nDefault value for a 2D point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#constants.IDENTITY_MATRIX33",
        "title": "The constants.py module > Module detail > IDENTITY_MATRIX33",
        "section": "Module detail > IDENTITY_MATRIX33",
        "text": "constants.IDENTITY_MATRIX33\n\nIdentity for a Matrix33 object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#constants.IDENTITY_MATRIX44",
        "title": "The constants.py module > Module detail > IDENTITY_MATRIX44",
        "section": "Module detail > IDENTITY_MATRIX44",
        "text": "constants.IDENTITY_MATRIX44\n\nIdentity for a Matrix44 object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#constants.UNITVECTOR3D_X",
        "title": "The constants.py module > Module detail > UNITVECTOR3D_X",
        "section": "Module detail > UNITVECTOR3D_X",
        "text": "constants.UNITVECTOR3D_X\n\nDefault 3D unit vector in the Cartesian traditional X direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#constants.UNITVECTOR3D_Y",
        "title": "The constants.py module > Module detail > UNITVECTOR3D_Y",
        "section": "Module detail > UNITVECTOR3D_Y",
        "text": "constants.UNITVECTOR3D_Y\n\nDefault 3D unit vector in the Cartesian traditional Y direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#constants.UNITVECTOR3D_Z",
        "title": "The constants.py module > Module detail > UNITVECTOR3D_Z",
        "section": "Module detail > UNITVECTOR3D_Z",
        "text": "constants.UNITVECTOR3D_Z\n\nDefault 3D unit vector in the Cartesian traditional Z direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#constants.UNITVECTOR2D_X",
        "title": "The constants.py module > Module detail > UNITVECTOR2D_X",
        "section": "Module detail > UNITVECTOR2D_X",
        "text": "constants.UNITVECTOR2D_X\n\nDefault 2D unit vector in the Cartesian traditional X direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#constants.UNITVECTOR2D_Y",
        "title": "The constants.py module > Module detail > UNITVECTOR2D_Y",
        "section": "Module detail > UNITVECTOR2D_Y",
        "text": "constants.UNITVECTOR2D_Y\n\nDefault 2D unit vector  in the Cartesian traditional Y direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#constants.ZERO_VECTOR3D",
        "title": "The constants.py module > Module detail > ZERO_VECTOR3D",
        "section": "Module detail > ZERO_VECTOR3D",
        "text": "constants.ZERO_VECTOR3D\n\nZero-valued Vector3D object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#constants.ZERO_VECTOR2D",
        "title": "The constants.py module > Module detail > ZERO_VECTOR2D",
        "section": "Module detail > ZERO_VECTOR2D",
        "text": "constants.ZERO_VECTOR2D\n\nZero-valued Vector2D object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#constants.ZERO_POINT3D",
        "title": "The constants.py module > Module detail > ZERO_POINT3D",
        "section": "Module detail > ZERO_POINT3D",
        "text": "constants.ZERO_POINT3D\n\nZero-valued Point3D object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/constants/index",
        "href": "api/ansys/geometry/core/math/constants/index.html#constants.ZERO_POINT2D",
        "title": "The constants.py module > Module detail > ZERO_POINT2D",
        "section": "Module detail > ZERO_POINT2D",
        "text": "constants.ZERO_POINT2D\n\nZero-valued Point2D object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/misc/index",
        "href": "api/ansys/geometry/core/math/misc/index.html#the-miscpy-module",
        "title": "The misc.py module",
        "section": "The misc.py module",
        "text": "The misc.py module\nmisc.py"
    },
    {
        "objectID": "api/ansys/geometry/core/math/misc/index",
        "href": "api/ansys/geometry/core/math/misc/index.html#summary",
        "title": "The misc.py module > Summary",
        "section": "Summary",
        "text": "get_two_circle_intersections\nGet the intersection points of two circles.\nintersect_interval\nFind the intersection of two intervals.\nSummary\nget_two_circle_intersections\nintersect_interval"
    },
    {
        "objectID": "api/ansys/geometry/core/math/misc/index",
        "href": "api/ansys/geometry/core/math/misc/index.html#description",
        "title": "The misc.py module > Description",
        "section": "Description",
        "text": "Provides auxiliary math functions for PyAnsys Geometry.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/math/misc/index",
        "href": "api/ansys/geometry/core/math/misc/index.html#module-detail",
        "title": "The misc.py module > Module detail",
        "section": "Module detail",
        "text": "Get the intersection points of two circles.\nx coordinate of the first circle.\ny coordinate of the first circle.\nRadius of the first circle.\nx coordinate of the second circle.\ny coordinate of the second circle.\nRadius of the second circle.\nIntersection points of the two circles if they intersect.\nThe points are returned as ((x3, y3), (x4, y4)), where (x3, y3) and (x4, y4)\nare the intersection points of the two circles. If the circles do not\nintersect, then None is returned.\nThis function is based on the following StackOverflow post:\nhttps://stackoverflow.com/questions/55816902/finding-the-intersection-of-two-circles\nThat post is based on the following implementation:\nhttps://paulbourke.net/geometry/circlesphere/\nFind the intersection of two intervals.\nThe minimum value of the first interval.\nThe minimum value of the second interval.\nThe maximum value of the first interval.\nThe maximum value of the second interval.\nTuple with a boolean to indicate whether the intervals intersect,\nthe minimum value of the intersection interval,\nand the maximum value of the intersection interval.\nIf they do not intersect, then the boolean is False and the other values are 0.\nModule detail\nReal\nReal\nReal\nReal\nReal\nReal\npython:tuple\npython:tuple\nReal\nReal\npython:tuple\nReal\nReal\npython:None\n((x3, y3), (x4, y4))\n(x3, y3)\n(x4, y4)\nNone\nReal\nReal\nReal\nReal\npython:tuple\nReal\nReal"
    },
    {
        "objectID": "api/ansys/geometry/core/math/misc/index",
        "href": "api/ansys/geometry/core/math/misc/index.html#misc.get_two_circle_intersections",
        "title": "The misc.py module > Module detail > get_two_circle_intersections",
        "section": "Module detail > get_two_circle_intersections",
        "text": "misc.get_two_circle_intersections(x0: ansys.geometry.core.typing.Real, y0: ansys.geometry.core.typing.Real, r0: ansys.geometry.core.typing.Real, x1: ansys.geometry.core.typing.Real, y1: ansys.geometry.core.typing.Real, r1: ansys.geometry.core.typing.Real) -> tuple[tuple[ansys.geometry.core.typing.Real, ansys.geometry.core.typing.Real], tuple[ansys.geometry.core.typing.Real, ansys.geometry.core.typing.Real]] | None\n\nGet the intersection points of two circles.\n\nParameters\n\nx0\n\nReal\n\nx coordinate of the first circle.\n\ny0\n\nReal\n\ny coordinate of the first circle.\n\nr0\n\nReal\n\nRadius of the first circle.\n\nx1\n\nReal\n\nx coordinate of the second circle.\n\ny1\n\nReal\n\ny coordinate of the second circle.\n\nr1\n\nReal\n\nRadius of the second circle.\n\nReturns\n\npython:tuple[python:tuple[Real, Real], python:tuple[Real, Real]] | python:None\n\nIntersection points of the two circles if they intersect.\nThe points are returned as ((x3, y3), (x4, y4)), where (x3, y3) and (x4, y4)\nare the intersection points of the two circles. If the circles do not\nintersect, then None is returned.\n\nNotes\n\nThis function is based on the following StackOverflow post:\nhttps://stackoverflow.com/questions/55816902/finding-the-intersection-of-two-circles\n\nThat post is based on the following implementation:\nhttps://paulbourke.net/geometry/circlesphere/\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/misc/index",
        "href": "api/ansys/geometry/core/math/misc/index.html#misc.intersect_interval",
        "title": "The misc.py module > Module detail > intersect_interval",
        "section": "Module detail > intersect_interval",
        "text": "misc.intersect_interval(first_min, second_min, first_max, second_max) -> tuple[bool, ansys.geometry.core.typing.Real, ansys.geometry.core.typing.Real]\n\nFind the intersection of two intervals.\n\nParameters\n\nfirst_min\n\nReal\n\nThe minimum value of the first interval.\n\nsecond_min\n\nReal\n\nThe minimum value of the second interval.\n\nfirst_max\n\nReal\n\nThe maximum value of the first interval.\n\nsecond_max\n\nReal\n\nThe maximum value of the second interval.\n\nReturns\n\npython:tuple[bool, Real, Real]\n\nTuple with a boolean to indicate whether the intervals intersect,\nthe minimum value of the intersection interval,\nand the maximum value of the intersection interval.\nIf they do not intersect, then the boolean is False and the other values are 0.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoopType",
        "href": "api/ansys/geometry/core/designer/face/FaceLoopType.html#facelooptype",
        "title": "FaceLoopType",
        "section": "FaceLoopType",
        "text": "Bases: enum.Enum\nProvides values for the face loop types supported.\nFaceLoopType\nFaceLoopType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoopType",
        "href": "api/ansys/geometry/core/designer/face/FaceLoopType.html#ansys.geometry.core.designer.face.FaceLoopType",
        "title": "FaceLoopType > FaceLoopType > FaceLoopType",
        "section": "FaceLoopType > FaceLoopType",
        "text": "class ansys.geometry.core.designer.face.FaceLoopType(*args, **kwds)\n\nBases: enum.Enum\n\nProvides values for the face loop types supported.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoopType",
        "href": "api/ansys/geometry/core/designer/face/FaceLoopType.html#overview",
        "title": "FaceLoopType > Overview",
        "section": "Overview",
        "text": "INNER_LOOP\nOUTER_LOOP\nOverview\nINNER_LOOP\nOUTER_LOOP"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoopType",
        "href": "api/ansys/geometry/core/designer/face/FaceLoopType.html#import-detail",
        "title": "FaceLoopType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoopType",
        "href": "api/ansys/geometry/core/designer/face/FaceLoopType.html#attribute-detail",
        "title": "FaceLoopType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoopType",
        "href": "api/ansys/geometry/core/designer/face/FaceLoopType.html#FaceLoopType.INNER_LOOP",
        "title": "FaceLoopType > Attribute detail > INNER_LOOP",
        "section": "Attribute detail > INNER_LOOP",
        "text": "FaceLoopType.INNER_LOOP = 'INNER'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/designer/face/FaceLoopType",
        "href": "api/ansys/geometry/core/designer/face/FaceLoopType.html#FaceLoopType.OUTER_LOOP",
        "title": "FaceLoopType > Attribute detail > OUTER_LOOP",
        "section": "Attribute detail > OUTER_LOOP",
        "text": "FaceLoopType.OUTER_LOOP = 'OUTER'\n\n"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/UnitVector2D",
        "href": "api/ansys/geometry/core/math/vector/UnitVector2D.html#unitvector2d",
        "title": "UnitVector2D",
        "section": "UnitVector2D",
        "text": "Bases: Vector2D\nProvides for creating and managing a 3D unit vector.\n1D numpy.ndarray class with shape(X,)\nVector2D\nUnitVector2D\nUnitVector2D\nVector2D\nndarray\nRealSequence\nVector2D\nnumpy.ndarray"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/UnitVector2D",
        "href": "api/ansys/geometry/core/math/vector/UnitVector2D.html#ansys.geometry.core.math.vector.UnitVector2D",
        "title": "UnitVector2D > UnitVector2D > UnitVector2D",
        "section": "UnitVector2D > UnitVector2D",
        "text": "class ansys.geometry.core.math.vector.UnitVector2D(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)\n\nBases: Vector2D\n\nProvides for creating and managing a 3D unit vector.\n\nParameters\n\ninput\n\nndarray | RealSequence | Vector2D\n\n1D numpy.ndarray class with shape(X,)\n\nVector2D\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/UnitVector2D",
        "href": "api/ansys/geometry/core/math/vector/UnitVector2D.html#overview",
        "title": "UnitVector2D > Overview",
        "section": "Overview",
        "text": "from_points\nCreate a 2D unit vector from two distinct 2D points.\nOverview\nfrom_points"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/UnitVector2D",
        "href": "api/ansys/geometry/core/math/vector/UnitVector2D.html#import-detail",
        "title": "UnitVector2D > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/UnitVector2D",
        "href": "api/ansys/geometry/core/math/vector/UnitVector2D.html#method-detail",
        "title": "UnitVector2D > Method detail",
        "section": "Method detail",
        "text": "Create a 2D unit vector from two distinct 2D points.\nPoint2D\nclass representing the first point.\nPoint2D\nclass representing the second point.\n2D unit vector from point_a to point_b.\nMethod detail\nndarray\nRealSequence\nPoint2D\nPoint2D\nndarray\nRealSequence\nPoint2D\nPoint2D\nUnitVector2D\npoint_a\npoint_b"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/UnitVector2D",
        "href": "api/ansys/geometry/core/math/vector/UnitVector2D.html#UnitVector2D.from_points",
        "title": "UnitVector2D > Method detail > from_points",
        "section": "Method detail > from_points",
        "text": "classmethod UnitVector2D.from_points(point_a: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point2D, point_b: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point2D)\n\nCreate a 2D unit vector from two distinct 2D points.\n\nParameters\n\npoint_a\n\nndarray | RealSequence | Point2D\n\nPoint2D\nclass representing the first point.\n\npoint_b\n\nndarray | RealSequence | Point2D\n\nPoint2D\nclass representing the second point.\n\nReturns\n\nUnitVector2D\n\n2D unit vector from point_a to point_b.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#frame",
        "title": "Frame",
        "section": "Frame",
        "text": "Representation of a frame.\nCentered origin of the`frame. The default is ZERO_POINT3D, which is the\nCartesian origin.\nX-axis direction.\nY-axis direction.\nFrame\nFrame\nndarray\nRealSequence\nPoint3D\nZERO_POINT3D\nZERO_POINT3D\nndarray\nRealSequence\nUnitVector3D\nVector3D\nUNITVECTOR3D_X\nndarray\nRealSequence\nUnitVector3D\nVector3D\nUNITVECTOR3D_Y"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#ansys.geometry.core.math.frame.Frame",
        "title": "Frame > Frame > Frame",
        "section": "Frame > Frame",
        "text": "class ansys.geometry.core.math.frame.Frame(origin: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D = ZERO_POINT3D, direction_x: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_X, direction_y: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.vector.UnitVector3D | ansys.geometry.core.math.vector.Vector3D = UNITVECTOR3D_Y)\n\nRepresentation of a frame.\n\nParameters\n\norigin\n\nndarray | RealSequence | Point3D, default: ZERO_POINT3D\n\nCentered origin of the`frame. The default is ZERO_POINT3D, which is the\nCartesian origin.\n\ndirection_x\n\nndarray | RealSequence | UnitVector3D | Vector3D, default: UNITVECTOR3D_X\n\nX-axis direction.\n\ndirection_y\n\nndarray | RealSequence | UnitVector3D | Vector3D, default: UNITVECTOR3D_Y\n\nY-axis direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#overview",
        "title": "Frame > Overview",
        "section": "Overview",
        "text": "transform_point2d_local_to_global\nTransform a 2D point to a global 3D point.\norigin\nOrigin of the frame.\ndirection_x\nX-axis direction of the frame.\ndirection_y\nY-axis direction of the frame.\ndirection_z\nZ-axis direction of the frame.\nglobal_to_local_rotation\nGlobal to local space transformation matrix.\nlocal_to_global_rotation\nLocal to global space transformation matrix.\ntransformation_matrix\nFull 4x4 transformation matrix.\n__eq__\nEquals operator for the Frame class.\n__ne__\nNot equals operator for the Frame class.\nOverview\ntransform_point2d_local_to_global\norigin\ndirection_x\ndirection_y\ndirection_z\nglobal_to_local_rotation\nlocal_to_global_rotation\ntransformation_matrix\n__eq__\nFrame\n__ne__\nFrame"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#import-detail",
        "title": "Frame > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#property-detail",
        "title": "Frame > Property detail",
        "section": "Property detail",
        "text": "Origin of the frame.\nX-axis direction of the frame.\nY-axis direction of the frame.\nZ-axis direction of the frame.\nGlobal to local space transformation matrix.\n3x3 matrix representing the transformation from global to local\ncoordinate space, excluding origin translation.\nLocal to global space transformation matrix.\n3x3 matrix representing the transformation from local to global\ncoordinate space.\nFull 4x4 transformation matrix.\n4x4 matrix representing the transformation from global to local\ncoordinate space.\nProperty detail\nMatrix33\nMatrix33\nMatrix44"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#Frame.origin",
        "title": "Frame > Property detail > origin",
        "section": "Property detail > origin",
        "text": "property Frame.origin: ansys.geometry.core.math.point.Point3D\n\nOrigin of the frame.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#Frame.direction_x",
        "title": "Frame > Property detail > direction_x",
        "section": "Property detail > direction_x",
        "text": "property Frame.direction_x: ansys.geometry.core.math.vector.UnitVector3D\n\nX-axis direction of the frame.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#Frame.direction_y",
        "title": "Frame > Property detail > direction_y",
        "section": "Property detail > direction_y",
        "text": "property Frame.direction_y: ansys.geometry.core.math.vector.UnitVector3D\n\nY-axis direction of the frame.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#Frame.direction_z",
        "title": "Frame > Property detail > direction_z",
        "section": "Property detail > direction_z",
        "text": "property Frame.direction_z: ansys.geometry.core.math.vector.UnitVector3D\n\nZ-axis direction of the frame.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#Frame.global_to_local_rotation",
        "title": "Frame > Property detail > global_to_local_rotation",
        "section": "Property detail > global_to_local_rotation",
        "text": "property Frame.global_to_local_rotation: ansys.geometry.core.math.matrix.Matrix33\n\nGlobal to local space transformation matrix.\n\nReturns\n\nMatrix33\n\n3x3 matrix representing the transformation from global to local\ncoordinate space, excluding origin translation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#Frame.local_to_global_rotation",
        "title": "Frame > Property detail > local_to_global_rotation",
        "section": "Property detail > local_to_global_rotation",
        "text": "property Frame.local_to_global_rotation: ansys.geometry.core.math.matrix.Matrix33\n\nLocal to global space transformation matrix.\n\nReturns\n\nMatrix33\n\n3x3 matrix representing the transformation from local to global\ncoordinate space.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#Frame.transformation_matrix",
        "title": "Frame > Property detail > transformation_matrix",
        "section": "Property detail > transformation_matrix",
        "text": "property Frame.transformation_matrix: ansys.geometry.core.math.matrix.Matrix44\n\nFull 4x4 transformation matrix.\n\nReturns\n\nMatrix44\n\n4x4 matrix representing the transformation from global to local\ncoordinate space.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#method-detail",
        "title": "Frame > Method detail",
        "section": "Method detail",
        "text": "Transform a 2D point to a global 3D point.\nThis method transforms a local, plane-contained Point2D object in the global\ncoordinate system, thus representing it as a Point3D object.\nPoint2D local object to express in global coordinates.\nGlobal coordinates for the 3D point.\nEquals operator for the Frame class.\nNot equals operator for the Frame class.\nMethod detail\nPoint2D\nPoint3D\nPoint2D\nPoint2D\nPoint3D\nFrame\nFrame"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#Frame.transform_point2d_local_to_global",
        "title": "Frame > Method detail > transform_point2d_local_to_global",
        "section": "Method detail > transform_point2d_local_to_global",
        "text": "Frame.transform_point2d_local_to_global(point: ansys.geometry.core.math.point.Point2D) -> ansys.geometry.core.math.point.Point3D\n\nTransform a 2D point to a global 3D point.\n\nThis method transforms a local, plane-contained Point2D object in the global\ncoordinate system, thus representing it as a Point3D object.\n\nParameters\n\npoint\n\nPoint2D\n\nPoint2D local object to express in global coordinates.\n\nReturns\n\nPoint3D\n\nGlobal coordinates for the 3D point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#Frame.__eq__",
        "title": "Frame > Method detail > __eq__",
        "section": "Method detail > __eq__",
        "text": "Frame.__eq__(other: Frame) -> bool\n\nEquals operator for the Frame class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/frame/Frame",
        "href": "api/ansys/geometry/core/math/frame/Frame.html#Frame.__ne__",
        "title": "Frame > Method detail > __ne__",
        "section": "Method detail > __ne__",
        "text": "Frame.__ne__(other: Frame) -> bool\n\nNot equals operator for the Frame class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/units/PhysicalQuantity",
        "href": "api/ansys/geometry/core/misc/units/PhysicalQuantity.html#physicalquantity",
        "title": "PhysicalQuantity",
        "section": "PhysicalQuantity",
        "text": "Provides the base class for handling units throughout PyAnsys Geometry.\nUnits for the class.\nUnits for the dimensionality of the physical quantity.\nPhysicalQuantity\nPhysicalQuantity\nUnit\nUnit\npython:None"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/units/PhysicalQuantity",
        "href": "api/ansys/geometry/core/misc/units/PhysicalQuantity.html#ansys.geometry.core.misc.units.PhysicalQuantity",
        "title": "PhysicalQuantity > PhysicalQuantity > PhysicalQuantity",
        "section": "PhysicalQuantity > PhysicalQuantity",
        "text": "class ansys.geometry.core.misc.units.PhysicalQuantity(unit: pint.Unit, expected_dimensions: pint.Unit | None = None)\n\nProvides the base class for handling units throughout PyAnsys Geometry.\n\nParameters\n\nunit\n\nUnit\n\nUnits for the class.\n\nexpected_dimensions\n\nUnit, default: python:None\n\nUnits for the dimensionality of the physical quantity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/units/PhysicalQuantity",
        "href": "api/ansys/geometry/core/misc/units/PhysicalQuantity.html#overview",
        "title": "PhysicalQuantity > Overview",
        "section": "Overview",
        "text": "unit\nUnit of the object.\nbase_unit\nBase unit of the object.\nOverview\nunit\nbase_unit"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/units/PhysicalQuantity",
        "href": "api/ansys/geometry/core/misc/units/PhysicalQuantity.html#import-detail",
        "title": "PhysicalQuantity > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/units/PhysicalQuantity",
        "href": "api/ansys/geometry/core/misc/units/PhysicalQuantity.html#property-detail",
        "title": "PhysicalQuantity > Property detail",
        "section": "Property detail",
        "text": "Unit of the object.\nBase unit of the object.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/units/PhysicalQuantity",
        "href": "api/ansys/geometry/core/misc/units/PhysicalQuantity.html#PhysicalQuantity.unit",
        "title": "PhysicalQuantity > Property detail > unit",
        "section": "Property detail > unit",
        "text": "property PhysicalQuantity.unit: pint.Unit\n\nUnit of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/misc/units/PhysicalQuantity",
        "href": "api/ansys/geometry/core/misc/units/PhysicalQuantity.html#PhysicalQuantity.base_unit",
        "title": "PhysicalQuantity > Property detail > base_unit",
        "section": "Property detail > base_unit",
        "text": "property PhysicalQuantity.base_unit: pint.Unit\n\nBase unit of the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/material/index",
        "href": "api/ansys/geometry/core/materials/material/index.html#the-materialpy-module",
        "title": "The material.py module",
        "section": "The material.py module",
        "text": "The material.py module\nmaterial.py"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/material/index",
        "href": "api/ansys/geometry/core/materials/material/index.html#summary",
        "title": "The material.py module > Summary",
        "section": "Summary",
        "text": "Material\nProvides the data structure for a material.\nSummary\nMaterial"
    },
    {
        "objectID": "api/ansys/geometry/core/materials/material/index",
        "href": "api/ansys/geometry/core/materials/material/index.html#description",
        "title": "The material.py module > Description",
        "section": "Description",
        "text": "Provides the data structure for material and material properties.\nDescription"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue",
        "href": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue.html#geometryissue",
        "title": "GeometryIssue",
        "section": "GeometryIssue",
        "text": "Provides return message for the repair tool methods.\nGeometryIssue\nGeometryIssue"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue",
        "href": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue.html#ansys.geometry.core.tools.check_geometry.GeometryIssue",
        "title": "GeometryIssue > GeometryIssue > GeometryIssue",
        "section": "GeometryIssue > GeometryIssue",
        "text": "class ansys.geometry.core.tools.check_geometry.GeometryIssue(message_type: str, message_id: str, message: str, edges: list[str], faces: list[str])\n\nProvides return message for the repair tool methods.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue",
        "href": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue.html#overview",
        "title": "GeometryIssue > Overview",
        "section": "Overview",
        "text": "message_type\nThe type of the message (warning, error, info).\nmessage_id\nThe identifier for the message.\nmessage\nThe content of the message.\nedges\nThe List of edges (if any) that are part of the issue.\nfaces\nThe List of faces (if any) that are part of the issue.\nOverview\nmessage_type\nmessage_id\nmessage\nedges\nfaces"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue",
        "href": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue.html#import-detail",
        "title": "GeometryIssue > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue",
        "href": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue.html#property-detail",
        "title": "GeometryIssue > Property detail",
        "section": "Property detail",
        "text": "The type of the message (warning, error, info).\nThe identifier for the message.\nThe content of the message.\nThe List of edges (if any) that are part of the issue.\nThe List of faces (if any) that are part of the issue.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue",
        "href": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue.html#GeometryIssue.message_type",
        "title": "GeometryIssue > Property detail > message_type",
        "section": "Property detail > message_type",
        "text": "property GeometryIssue.message_type: str\n\nThe type of the message (warning, error, info).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue",
        "href": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue.html#GeometryIssue.message_id",
        "title": "GeometryIssue > Property detail > message_id",
        "section": "Property detail > message_id",
        "text": "property GeometryIssue.message_id: str\n\nThe identifier for the message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue",
        "href": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue.html#GeometryIssue.message",
        "title": "GeometryIssue > Property detail > message",
        "section": "Property detail > message",
        "text": "property GeometryIssue.message: str\n\nThe content of the message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue",
        "href": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue.html#GeometryIssue.edges",
        "title": "GeometryIssue > Property detail > edges",
        "section": "Property detail > edges",
        "text": "property GeometryIssue.edges: list[str]\n\nThe List of edges (if any) that are part of the issue.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue",
        "href": "api/ansys/geometry/core/tools/check_geometry/GeometryIssue.html#GeometryIssue.faces",
        "title": "GeometryIssue > Property detail > faces",
        "section": "Property detail > faces",
        "text": "property GeometryIssue.faces: list[str]\n\nThe List of faces (if any) that are part of the issue.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/UnitVector3D",
        "href": "api/ansys/geometry/core/math/vector/UnitVector3D.html#unitvector3d",
        "title": "UnitVector3D",
        "section": "UnitVector3D",
        "text": "Bases: Vector3D\nProvides for creating and managing a 3D unit vector.\n1D numpy.ndarray class with shape(X,)\nVector3D\nUnitVector3D\nUnitVector3D\nVector3D\nndarray\nRealSequence\nVector3D\nnumpy.ndarray"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/UnitVector3D",
        "href": "api/ansys/geometry/core/math/vector/UnitVector3D.html#ansys.geometry.core.math.vector.UnitVector3D",
        "title": "UnitVector3D > UnitVector3D > UnitVector3D",
        "section": "UnitVector3D > UnitVector3D",
        "text": "class ansys.geometry.core.math.vector.UnitVector3D(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)\n\nBases: Vector3D\n\nProvides for creating and managing a 3D unit vector.\n\nParameters\n\ninput\n\nndarray | RealSequence | Vector3D\n\n1D numpy.ndarray class with shape(X,)\n\nVector3D\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/UnitVector3D",
        "href": "api/ansys/geometry/core/math/vector/UnitVector3D.html#overview",
        "title": "UnitVector3D > Overview",
        "section": "Overview",
        "text": "from_points\nCreate a 3D unit vector from two distinct 3D points.\nOverview\nfrom_points"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/UnitVector3D",
        "href": "api/ansys/geometry/core/math/vector/UnitVector3D.html#import-detail",
        "title": "UnitVector3D > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/UnitVector3D",
        "href": "api/ansys/geometry/core/math/vector/UnitVector3D.html#method-detail",
        "title": "UnitVector3D > Method detail",
        "section": "Method detail",
        "text": "Create a 3D unit vector from two distinct 3D points.\nPoint3D\nclass representing the first point.\nPoint3D\nclass representing the second point.\n3D unit vector from point_a to point_b.\nMethod detail\nndarray\nRealSequence\nPoint3D\nPoint3D\nndarray\nRealSequence\nPoint3D\nPoint3D\nUnitVector3D\npoint_a\npoint_b"
    },
    {
        "objectID": "api/ansys/geometry/core/math/vector/UnitVector3D",
        "href": "api/ansys/geometry/core/math/vector/UnitVector3D.html#UnitVector3D.from_points",
        "title": "UnitVector3D > Method detail > from_points",
        "section": "Method detail > from_points",
        "text": "classmethod UnitVector3D.from_points(point_a: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D, point_b: numpy.ndarray | ansys.geometry.core.typing.RealSequence | ansys.geometry.core.math.point.Point3D)\n\nCreate a 3D unit vector from two distinct 3D points.\n\nParameters\n\npoint_a\n\nndarray | RealSequence | Point3D\n\nPoint3D\nclass representing the first point.\n\npoint_b\n\nndarray | RealSequence | Point3D\n\nPoint3D\nclass representing the second point.\n\nReturns\n\nUnitVector3D\n\n3D unit vector from point_a to point_b.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#surfaceevaluation",
        "title": "SurfaceEvaluation",
        "section": "SurfaceEvaluation",
        "text": "Provides for evaluating a surface.\nSurfaceEvaluation\nSurfaceEvaluation"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation",
        "title": "SurfaceEvaluation > SurfaceEvaluation > SurfaceEvaluation",
        "section": "SurfaceEvaluation > SurfaceEvaluation",
        "text": "class ansys.geometry.core.shapes.surfaces.surface_evaluation.SurfaceEvaluation(parameter: ansys.geometry.core.shapes.parameterization.ParamUV)\n\nProvides for evaluating a surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#overview",
        "title": "SurfaceEvaluation > Overview",
        "section": "Overview",
        "text": "parameter\nParameter that the evaluation is based upon.\nposition\nPoint on the surface, based on the evaluation.\nnormal\nNormal to the surface.\nu_derivative\nFirst derivative with respect to the U parameter.\nv_derivative\nFirst derivative with respect to the V parameter.\nuu_derivative\nSecond derivative with respect to the U parameter.\nuv_derivative\nThe second derivative with respect to the U and V parameters.\nvv_derivative\nThe second derivative with respect to v.\nmin_curvature\nMinimum curvature.\nmin_curvature_direction\nMinimum curvature direction.\nmax_curvature\nMaximum curvature.\nmax_curvature_direction\nMaximum curvature direction.\nOverview\nparameter\nposition\nnormal\nu_derivative\nv_derivative\nuu_derivative\nuv_derivative\nvv_derivative\nmin_curvature\nmin_curvature_direction\nmax_curvature\nmax_curvature_direction"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#import-detail",
        "title": "SurfaceEvaluation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#property-detail",
        "title": "SurfaceEvaluation > Property detail",
        "section": "Property detail",
        "text": "Parameter that the evaluation is based upon.\nPoint on the surface, based on the evaluation.\nNormal to the surface.\nFirst derivative with respect to the U parameter.\nFirst derivative with respect to the V parameter.\nSecond derivative with respect to the U parameter.\nThe second derivative with respect to the U and V parameters.\nThe second derivative with respect to v.\nMinimum curvature.\nMinimum curvature direction.\nMaximum curvature.\nMaximum curvature direction.\nProperty detail"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#SurfaceEvaluation.parameter",
        "title": "SurfaceEvaluation > Property detail > parameter",
        "section": "Property detail > parameter",
        "text": "property SurfaceEvaluation.parameter: ansys.geometry.core.shapes.parameterization.ParamUV\n\nAbstractmethod\n\n\n\nParameter that the evaluation is based upon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#SurfaceEvaluation.position",
        "title": "SurfaceEvaluation > Property detail > position",
        "section": "Property detail > position",
        "text": "property SurfaceEvaluation.position: ansys.geometry.core.math.point.Point3D\n\nAbstractmethod\n\n\n\nPoint on the surface, based on the evaluation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#SurfaceEvaluation.normal",
        "title": "SurfaceEvaluation > Property detail > normal",
        "section": "Property detail > normal",
        "text": "property SurfaceEvaluation.normal: ansys.geometry.core.math.vector.UnitVector3D\n\nAbstractmethod\n\n\n\nNormal to the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#SurfaceEvaluation.u_derivative",
        "title": "SurfaceEvaluation > Property detail > u_derivative",
        "section": "Property detail > u_derivative",
        "text": "property SurfaceEvaluation.u_derivative: ansys.geometry.core.math.vector.Vector3D\n\nAbstractmethod\n\n\n\nFirst derivative with respect to the U parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#SurfaceEvaluation.v_derivative",
        "title": "SurfaceEvaluation > Property detail > v_derivative",
        "section": "Property detail > v_derivative",
        "text": "property SurfaceEvaluation.v_derivative: ansys.geometry.core.math.vector.Vector3D\n\nAbstractmethod\n\n\n\nFirst derivative with respect to the V parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#SurfaceEvaluation.uu_derivative",
        "title": "SurfaceEvaluation > Property detail > uu_derivative",
        "section": "Property detail > uu_derivative",
        "text": "property SurfaceEvaluation.uu_derivative: ansys.geometry.core.math.vector.Vector3D\n\nAbstractmethod\n\n\n\nSecond derivative with respect to the U parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#SurfaceEvaluation.uv_derivative",
        "title": "SurfaceEvaluation > Property detail > uv_derivative",
        "section": "Property detail > uv_derivative",
        "text": "property SurfaceEvaluation.uv_derivative: ansys.geometry.core.math.vector.Vector3D\n\nAbstractmethod\n\n\n\nThe second derivative with respect to the U and V parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#SurfaceEvaluation.vv_derivative",
        "title": "SurfaceEvaluation > Property detail > vv_derivative",
        "section": "Property detail > vv_derivative",
        "text": "property SurfaceEvaluation.vv_derivative: ansys.geometry.core.math.vector.Vector3D\n\nAbstractmethod\n\n\n\nThe second derivative with respect to v.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#SurfaceEvaluation.min_curvature",
        "title": "SurfaceEvaluation > Property detail > min_curvature",
        "section": "Property detail > min_curvature",
        "text": "property SurfaceEvaluation.min_curvature: ansys.geometry.core.typing.Real\n\nAbstractmethod\n\n\n\nMinimum curvature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#SurfaceEvaluation.min_curvature_direction",
        "title": "SurfaceEvaluation > Property detail > min_curvature_direction",
        "section": "Property detail > min_curvature_direction",
        "text": "property SurfaceEvaluation.min_curvature_direction: ansys.geometry.core.math.vector.UnitVector3D\n\nAbstractmethod\n\n\n\nMinimum curvature direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#SurfaceEvaluation.max_curvature",
        "title": "SurfaceEvaluation > Property detail > max_curvature",
        "section": "Property detail > max_curvature",
        "text": "property SurfaceEvaluation.max_curvature: ansys.geometry.core.typing.Real\n\nAbstractmethod\n\n\n\nMaximum curvature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation",
        "href": "api/ansys/geometry/core/shapes/surfaces/surface_evaluation/SurfaceEvaluation.html#SurfaceEvaluation.max_curvature_direction",
        "title": "SurfaceEvaluation > Property detail > max_curvature_direction",
        "section": "Property detail > max_curvature_direction",
        "text": "property SurfaceEvaluation.max_curvature_direction: ansys.geometry.core.math.vector.UnitVector3D\n\nAbstractmethod\n\n\n\nMaximum curvature direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/index",
        "href": "api/ansys/geometry/core/tools/problem_areas/index.html#the-problem_areaspy-module",
        "title": "The problem_areas.py module",
        "section": "The problem_areas.py module",
        "text": "The problem_areas.py module\nproblem_areas.py"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/index",
        "href": "api/ansys/geometry/core/tools/problem_areas/index.html#summary",
        "title": "The problem_areas.py module > Summary",
        "section": "Summary",
        "text": "ProblemArea\nRepresents problem areas.\nDuplicateFaceProblemAreas\nProvides duplicate face problem area definition.\nMissingFaceProblemAreas\nProvides missing face problem area definition.\nInexactEdgeProblemAreas\nRepresents an inexact edge problem area with unique identifier and associated edges.\nExtraEdgeProblemAreas\nRepresents a extra edge problem area with unique identifier and associated edges.\nShortEdgeProblemAreas\nRepresents a short edge problem area with a unique identifier and associated edges.\nSmallFaceProblemAreas\nRepresents a small face problem area with a unique identifier and associated faces.\nSplitEdgeProblemAreas\nRepresents a split edge problem area with unique identifier and associated edges.\nStitchFaceProblemAreas\nRepresents a stitch face problem area with unique identifier and associated faces.\nUnsimplifiedFaceProblemAreas\nRepresents a unsimplified face problem area with unique identifier and associated faces.\nInterferenceProblemAreas\nRepresents an interference problem area with a unique identifier and associated bodies.\nSummary\nProblemArea\nDuplicateFaceProblemAreas\nMissingFaceProblemAreas\nInexactEdgeProblemAreas\nExtraEdgeProblemAreas\nShortEdgeProblemAreas\nSmallFaceProblemAreas\nSplitEdgeProblemAreas\nStitchFaceProblemAreas\nUnsimplifiedFaceProblemAreas\nInterferenceProblemAreas"
    },
    {
        "objectID": "api/ansys/geometry/core/tools/problem_areas/index",
        "href": "api/ansys/geometry/core/tools/problem_areas/index.html#description",
        "title": "The problem_areas.py module > Description",
        "section": "Description",
        "text": "The problem area definition.\nDescription"
    }
]