

:class:`Vector2D`
=================

.. py:class:: ansys.geometry.core.math.vector.Vector2D(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)

   Bases: :py:obj:`numpy.ndarray`


   
   Provides for creating and managing a 2D vector.


   :Parameters:

       **input** : :obj:`Union`\[:obj:`~numpy.ndarray`, :obj:`RealSequence`]
           2D :class:`numpy.ndarray <numpy.ndarray>` class with shape(X,).














   ..
       !! processed by numpydoc !!









.. py:currentmodule:: Vector2D

Overview
--------

.. tab-set::


   .. tab-item:: Constructors

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~from_points`
            - Create a 2D vector from two distinct 2D points.


   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~cross`
            - Return the cross product of ``Vector2D`` objects.
          * - :py:attr:`~is_perpendicular_to`
            - Check if this 2D vector and another 2D vector are perpendicular.
          * - :py:attr:`~is_parallel_to`
            - Check if this vector and another vector are parallel.
          * - :py:attr:`~is_opposite`
            - Check if this vector and another vector are opposite.
          * - :py:attr:`~normalize`
            - Return a normalized version of the 2D vector.
          * - :py:attr:`~get_angle_between`
            - Get the angle between this 2D vector and another 2D vector.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~x`
            - X coordinate of the 2D vector.
          * - :py:attr:`~y`
            - Y coordinate of the 2D vector.
          * - :py:attr:`~norm`
            - Norm of the 2D vector.
          * - :py:attr:`~magnitude`
            - Norm of the 2D vector.
          * - :py:attr:`~is_zero`
            - Check if values for all components of the 2D vector are zero.




   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__eq__`
            - Equals operator for the ``Vector2D`` class.
          * - :py:attr:`~__ne__`
            - Not equals operator for the ``Vector2D`` class.
          * - :py:attr:`~__mul__`
            - Overload * operator with dot product.
          * - :py:attr:`~__add__`
            - Addition operation overload for 2D vectors.
          * - :py:attr:`~__sub__`
            - Subtraction operation overload for 2D vectors.
          * - :py:attr:`~__mod__`
            - Overload % operator with cross product.




Import detail
-------------

.. code-block:: python

    from ansys.geometry.core.math.vector import Vector2D

Property detail
---------------
.. py:property:: x
   :type: ansys.geometry.core.typing.Real

   
   X coordinate of the 2D vector.
















   ..
       !! processed by numpydoc !!

.. py:property:: y
   :type: ansys.geometry.core.typing.Real

   
   Y coordinate of the 2D vector.
















   ..
       !! processed by numpydoc !!

.. py:property:: norm
   :type: float

   
   Norm of the 2D vector.
















   ..
       !! processed by numpydoc !!

.. py:property:: magnitude
   :type: float

   
   Norm of the 2D vector.
















   ..
       !! processed by numpydoc !!

.. py:property:: is_zero
   :type: bool

   
   Check if values for all components of the 2D vector are zero.
















   ..
       !! processed by numpydoc !!



    

Method detail
-------------
.. py:method:: cross(v: Vector2D)

   
   Return the cross product of ``Vector2D`` objects.
















   ..
       !! processed by numpydoc !!

.. py:method:: is_perpendicular_to(other_vector: Vector2D) -> bool

   
   Check if this 2D vector and another 2D vector are perpendicular.
















   ..
       !! processed by numpydoc !!

.. py:method:: is_parallel_to(other_vector: Vector2D) -> bool

   
   Check if this vector and another vector are parallel.
















   ..
       !! processed by numpydoc !!

.. py:method:: is_opposite(other_vector: Vector2D) -> bool

   
   Check if this vector and another vector are opposite.
















   ..
       !! processed by numpydoc !!

.. py:method:: normalize() -> Vector2D

   
   Return a normalized version of the 2D vector.
















   ..
       !! processed by numpydoc !!

.. py:method:: get_angle_between(v: Vector2D) -> pint.Quantity

   
   Get the angle between this 2D vector and another 2D vector.


   :Parameters:

       **v** : :obj:`Vector2D`
           Other 2D vector to compute the angle with.

   :Returns:

       :obj:`~pint.Quantity`
           Angle between these two 2D vectors.













   ..
       !! processed by numpydoc !!

.. py:method:: __eq__(other: Vector2D) -> bool

   
   Equals operator for the ``Vector2D`` class.
















   ..
       !! processed by numpydoc !!

.. py:method:: __ne__(other: Vector2D) -> bool

   
   Not equals operator for the ``Vector2D`` class.
















   ..
       !! processed by numpydoc !!

.. py:method:: __mul__(other: beartype.typing.Union[Vector2D, ansys.geometry.core.typing.Real]) -> beartype.typing.Union[Vector2D, ansys.geometry.core.typing.Real]

   
   Overload * operator with dot product.











   .. rubric:: Notes

   This method also admits scalar multiplication.





   ..
       !! processed by numpydoc !!

.. py:method:: __add__(other: beartype.typing.Union[Vector2D, ansys.geometry.core.math.point.Point2D]) -> beartype.typing.Union[Vector2D, ansys.geometry.core.math.point.Point2D]

   
   Addition operation overload for 2D vectors.
















   ..
       !! processed by numpydoc !!

.. py:method:: __sub__(other: Vector2D) -> Vector2D

   
   Subtraction operation overload for 2D vectors.
















   ..
       !! processed by numpydoc !!

.. py:method:: __mod__(other: Vector2D) -> Vector2D

   
   Overload % operator with cross product.
















   ..
       !! processed by numpydoc !!

.. py:method:: from_points(point_a: beartype.typing.Union[numpy.ndarray, ansys.geometry.core.typing.RealSequence, ansys.geometry.core.math.point.Point2D], point_b: beartype.typing.Union[numpy.ndarray, ansys.geometry.core.typing.RealSequence, ansys.geometry.core.math.point.Point2D])
   :classmethod:


   
   Create a 2D vector from two distinct 2D points.


   :Parameters:

       **point_a** : :obj:`Point2D`
           :class:`Point2D <ansys.geometry.core.math.point.Point2D>`
           class representing the first point.

       **point_b** : :obj:`Point2D`
           :class:`Point2D <ansys.geometry.core.math.point.Point2D>`
           class representing the second point.

   :Returns:

       :obj:`Vector2D`
           2D vector from ``point_a`` to ``point_b``.








   .. rubric:: Notes

   The resulting 2D vector is always expressed in ``Point2D``
   base units.





   ..
       !! processed by numpydoc !!


