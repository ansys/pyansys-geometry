



GrpcClient
==========

.. py:class:: GrpcClient(host: beartype.typing.Optional[str] = DEFAULT_HOST, port: beartype.typing.Union[str, int] = DEFAULT_PORT, channel: beartype.typing.Optional[grpc.Channel] = None, remote_instance: beartype.typing.Optional[ansys.platform.instancemanagement.Instance] = None, local_instance: beartype.typing.Optional[ansys.geometry.core.connection.local_instance.LocalDockerInstance] = None, product_instance: beartype.typing.Optional[ansys.geometry.core.connection.product_instance.ProductInstance] = None, timeout: beartype.typing.Optional[ansys.geometry.core.typing.Real] = 120, logging_level: beartype.typing.Optional[int] = logging.INFO, logging_file: beartype.typing.Optional[beartype.typing.Union[pathlib.Path, str]] = None, backend_type: beartype.typing.Optional[ansys.geometry.core.connection.backend.BackendType] = None)
   :canonical: ansys.geometry.core.connection.client.GrpcClient




Wraps the gRPC connection for the Geometry service.
















Overview
--------
.. py:currentmodule:: GrpcClient
.. tab-set::



    .. tab-item:: Methods

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~close`
            - Close the channel.
          * - :py:attr:`~target`
            - Get the target of the channel.
          * - :py:attr:`~get_name`
            - Get the target name of the connection.


    .. tab-item:: Properties

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~backend_type`
            - Backend type.
          * - :py:attr:`~channel`
            - Client gRPC channel.
          * - :py:attr:`~log`
            - Specific instance logger.
          * - :py:attr:`~is_closed`
            - Flag indicating whether the client connection is closed.
          * - :py:attr:`~healthy`
            - Flag indicating whether the client channel is healthy.




    .. tab-item:: Special methods

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__repr__`
            - Represent the client as a string.



Import detail
-------------

.. code-block:: python

    from ansys.geometry.core.connection.client import GrpcClient


Property detail
---------------
.. py:property:: backend_type
   :canonical: ansys.geometry.core.connection.client.GrpcClient.backend_type
   :type: BackendType


   
   Backend type.

   Options are ``Windows Service``, ``Linux Service``, ``Discovery``,
   and ``SpaceClaim``.










   .. rubric:: Notes

   This method might return ``None`` because determining the backend type is
   not straightforward.





   ..
       !! processed by numpydoc !!

.. py:property:: channel
   :canonical: ansys.geometry.core.connection.client.GrpcClient.channel
   :type: grpc.Channel


   
   Client gRPC channel.
















   ..
       !! processed by numpydoc !!

.. py:property:: log
   :canonical: ansys.geometry.core.connection.client.GrpcClient.log
   :type: PyGeometryCustomAdapter


   
   Specific instance logger.
















   ..
       !! processed by numpydoc !!

.. py:property:: is_closed
   :canonical: ansys.geometry.core.connection.client.GrpcClient.is_closed
   :type: bool


   
   Flag indicating whether the client connection is closed.
















   ..
       !! processed by numpydoc !!

.. py:property:: healthy
   :canonical: ansys.geometry.core.connection.client.GrpcClient.healthy
   :type: bool


   
   Flag indicating whether the client channel is healthy.
















   ..
       !! processed by numpydoc !!




Method detail
-------------


.. py:method:: __repr__() -> str

   
   Represent the client as a string.
















   ..
       !! processed by numpydoc !!



.. py:method:: close()

   
   Close the channel.











   .. rubric:: Notes

   If an instance of the Geometry service was started using
   `PyPIM <https://github.com/ansys/pypim>`_, this instance is
   deleted. Furthermore, if a local instance
   of the Geometry service was started, it is stopped.





   ..
       !! processed by numpydoc !!



.. py:method:: target() -> str

   
   Get the target of the channel.
















   ..
       !! processed by numpydoc !!



.. py:method:: get_name() -> str

   
   Get the target name of the connection.
















   ..
       !! processed by numpydoc !!


