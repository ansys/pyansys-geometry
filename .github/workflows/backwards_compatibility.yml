name: Backwards compatibility tests
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.13'
  ANSRV_GEO_IMAGE: 'ghcr.io/ansys/geometry'
  ANSRV_GEO_PORT: 700
  ANSRV_GEO_LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
  GEO_CONT_NAME: ans_geo
  IS_WORKFLOW_RUNNING: True

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read

jobs:

  # =================================================================================================
  # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv    RUNNING ON SELF-HOSTED RUNNER    vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
  # =================================================================================================

  testing-backwards-compatibility-windows:
    name: Windows ${{ matrix.backend-version }}
    runs-on: [self-hosted, Windows, pygeometry]
    strategy:
      fail-fast: false
      matrix:
        include:
          - image-tag: "windows-24.1"
            backend-version: "24.1"
          - image-tag: "windows-24.2"
            backend-version: "24.2"
          - image-tag: "windows-25.1"
            backend-version: "25.1"
          - image-tag: "core-windows-25.2"
            backend-version: "25.2"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Set up headless display
        uses: pyvista/setup-headless-display-action@7d84ae825e6d9297a8e99bdbbae20d1b919a0b19 # v4.2

      - name: Create Python venv
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1

      - name: Install packages for testing
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install --upgrade build wheel
          pip install .[tests]

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Geometry service container (if needed)
        env:
          IMAGE_TAG: ${{ matrix.image-tag }}
        run: |
          $image = "$env:ANSRV_GEO_IMAGE:$env:IMAGE_TAG"
          Write-Host "Pulling Docker image: $image"
          docker pull $image

      - name: Check location of self-hosted runner and define license server accordingly
        if: runner.name == 'pygeometry-ci-2'
        env:
          LICENSE_SERVER_INTERNAL: ${{ secrets.LICENSE_SERVER_INTERNAL }}
        run:
          echo "ANSRV_GEO_LICENSE_SERVER=$env:LICENSE_SERVER_INTERNAL" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Stop any running containers
        run: |
          $dockerContainers = docker ps -a -q
          if (-not [string]::IsNullOrEmpty($dockerContainers)) {
              docker stop $dockerContainers
              docker rm $dockerContainers
          }

      - name: Define SERVER_ENDPOINT variable if needed
        if: matrix.backend-version == '24.1' || matrix.backend-version == '24.2' || matrix.backend-version == '25.1'
        run: |
          $env:SERVER_ENDPOINT = "-e SERVER_ENDPOINT=50051@0.0.0.0"
          echo "SERVER_ENDPOINT variable set to: $env:SERVER_ENDPOINT"
          echo "SERVER_ENDPOINT=$env:SERVER_ENDPOINT" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Start Geometry service and verify start
        env:
          IMAGE_TAG: ${{ matrix.image-tag }}
        run: |
          .\.venv\Scripts\Activate.ps1
          $image = "$env:ANSRV_GEO_IMAGE:$env:IMAGE_TAG"
          Write-Host "Running Docker image: $image"
          docker run --detach --name $env:GEO_CONT_NAME -e LICENSE_SERVER=$env:ANSRV_GEO_LICENSE_SERVER $env:SERVER_ENDPOINT -p $env:ANSRV_GEO_PORT:50051 $image $env:TRANSPORT_MODE_SELECTION
          Start-Sleep -Seconds 10
          python -c "from ansys.geometry.core.connection.validate import validate; validate()"

      - name: Testing
        timeout-minutes: 20  # On Windows self-hosted runners, sometimes hangs...
        env:
          BACKEND_VERSION: ${{ matrix.backend-version }}
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest -v --backwards-compatibility=yes --backend-version=$env:BACKEND_VERSION -rf

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: .cov/xml

      - name: Stop the Geometry service
        if: always()
        run: |
          docker stop $env:GEO_CONT_NAME
          docker logs $env:GEO_CONT_NAME
          docker rm $env:GEO_CONT_NAME

      - name: Stop any remaining containers
        if: always()
        run: |
          $dockerContainers = docker ps -a -q
          if (-not [string]::IsNullOrEmpty($dockerContainers)) {
              docker stop $dockerContainers
              docker rm $dockerContainers
          }

# =================================================================================================
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    RUNNING ON SELF-HOSTED RUNNER    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# =================================================================================================
