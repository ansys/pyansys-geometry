---
jupytext:
  text_representation:
    extension: .mystnb
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.14.1
kernelspec:
  display_name: Python 3 (ipykernel)
  language: python
  name: python3
---

# PyGeometry 101: Plotter

After reviewing the basics of how the sketching and modeling, you can overview the plotter capabilities
of PyGeometry.

+++

The plotter has the following capabilities that you can take advantage for development:
- **Plot multiple objects**: you can plot a list of elements, allowing objects from PyGeometry
  and PyVista.
- **Picking objects in the scene**: you can select interactively the PyGeometry objects in the scene
  to manipulate them later in the script.

  We will show an example on how to use these features in the following sections.

## Setting the example

First we will import the necessary libraries to run the example. In this case, we will be using
the docker image to communicate with the modeling service, but you can choose any method described
in the previous example.

```{code-cell} ipython3
from pint import Quantity
import pyvista as pv

from ansys.geometry.core import Modeler
from ansys.geometry.core.connection.defaults import GEOMETRY_SERVICE_DOCKER_IMAGE
from ansys.geometry.core.connection.local_instance import LocalDockerInstance
from ansys.geometry.core.math import Point2D
from ansys.geometry.core.misc import UNITS
from ansys.geometry.core.plotting import PlotterHelper
from ansys.geometry.core.sketch import Sketch
```

Now we can load the Modeler as it follows.

```{code-cell} ipython3

list_images = []
list_containers = []
available_images = LocalDockerInstance.docker_client().images.list(
    name=GEOMETRY_SERVICE_DOCKER_IMAGE
)
is_image_available_cont = None
for image in available_images:
    for geom_image, geom_cont in zip(list_images, list_containers):
        if geom_image in image.tags:
            is_image_available = True
            is_image_available_cont = geom_cont
            break

local_instance = LocalDockerInstance(
    connect_to_existing_service=True,
    restart_if_existing_service=True,
    image=is_image_available_cont,
)

modeler = Modeler(local_instance=local_instance)
```

Now we can continue by building the object examples.

+++

## Building the example objects

First, we will instantiate a new design were we will be working. We will also
initialize a list where we will be saving the objects we want to plot.

```{code-cell} ipython3

# init modeler
design = modeler.create_design("Multiplot")

plot_list = []
```

Now we will create some objects that will serve as a showcase to the capabilities of the plotter.

+++

A PyGeometry cylinder Body object.

```{code-cell} ipython3

# Create a Body cylinder
cylinder = Sketch()
cylinder.circle(Point2D([10, 10], UNITS.m), 1.0)
cylinder_body = design.extrude_sketch("JustACyl", cylinder, Quantity(10, UNITS.m))
plot_list.append(cylinder_body)
```

A PyGeometry arc Sketch.
```{code-cell} ipython3

# Sketch definition
sketch = Sketch()
sketch.arc(
    Point2D([20, 20], UNITS.m),
    Point2D([20, -20], UNITS.m),
    Point2D([10, 0], UNITS.m),
    tag="Arc",
)
plot_list.append(sketch)
```

A PyVista cylinder.

```{code-cell} ipython3

cyl = pv.Cylinder(radius=5, height=20, center=(-20, 10, 10))
plot_list.append(cyl)
```

A PyVista MultiBlock with a sphere and a cube.
```{code-cell} ipython3

blocks = pv.MultiBlock(
    [pv.Sphere(center=(20, 10, -10), radius=10), pv.Cube(x_length=10, y_length=10, z_length=10)]
)
plot_list.append(blocks)
```


And finally, a cube PyGeometry Body object.
```{code-cell} ipython3

# Create a Body box
box2 = Sketch()
box2.box(Point2D([-10, 20], UNITS.m), Quantity(10, UNITS.m), Quantity(10, UNITS.m))
box_body2 = design.extrude_sketch("JustABox", box2, Quantity(10, UNITS.m))
plot_list.append(box_body2)
```

## Plotting the objects

To plot the created objects, we have several options.

First, we can simply plot one of the created elements.

```{code-cell} ipython3

plotter = PlotterHelper()
plotter.plot(box_body2)
```

We can also plot the whole list of elements if desired.

```{code-cell} ipython3

plotter = PlotterHelper()
plotter.plot(plot_list)
```

By default, we use the Python visualizer, but we can also use the Trame visualizer.
```{code-cell} ipython3

plotter = PlotterHelper(use_trame=True)
plotter.plot(plot_list)
```

## Pick objects from the scene

You can also select objects from the scene to use them later in your script
```{code-cell} ipython3

plotter = PlotterHelper(allow_picking=True)

# plotter returns picked bodies
picked_list = plotter.plot(plot_list)
print(picked_list)
```

Finally, we close the server session.
```{code-cell} ipython3
modeler.close()
```