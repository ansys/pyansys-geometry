.. _ref_user_guide:

==========
User guide
==========

This section provides an overview of the PyGeometry library,
explaining key method concepts and approaches for primitives,
sketches (2D basic shape elements), and model designs.

.. toctree::
   :maxdepth: 1
   :hidden:

   primitives
   shapes
   designer

PyGeometry overview
===================

PyGeometry is a Python wrapper for the Ansys Geometry service.
The key features of PyGeometry are:

* Ability to use the library alongside other Python libraries
* A 'fluent functional-style' API for a clean and easy coding experience
* Built-in examples

Simple interactive example
==========================

Start a Geometry server instance
---------------------------------

The :class:`Modeler() <ansys.geometry.core.modeler()>` class
within the ``ansys-geometry-core`` library creates an instance of
the Geometry service. By default ``Modeler`` connects to ``127.0.0.1``
(``'localhost'``) on port ``50051``. You can change this by modifying
the ``host`` and ``port`` parameters of ``Modeler``, but note that you
have to also modify this in your ``docker run`` command by changing ``<HOST-PORT>-50051``.

You start the Geometry service with:

.. code:: pycon

    >>> from ansys.geometry.core import Modeler
    >>> modeler = Modeler()

Create geometry model
---------------------

Once the Geometry service is active , you can start creating the geometry model
by initializing the :ref:`Sketch <ref_sketch>` class and using the
:ref:`Primitives <ref_primitives>` math subpackage for PyGeometry.

.. code:: python

    from ansys.geometry.core.math import Plane, Point3D, Point2D
    from ansys.geometry.core.misc import UNITS
    from ansys.geometry.core.sketch import Sketch

    # Define our sketch
    origin = Point3D([0, 0, 10])
    plane = Plane(origin, direction_x=[1, 0, 0], direction_y=[0, 1, 0])

    # Create the sketch
    sketch = Sketch(plane)
    sketch.circle(Point2D([1, 1]), 30 * UNITS.m)
    sketch.plot()

.. jupyter-execute::
    :hide-code:

    from ansys.geometry.core.math import Plane, Point3D, Point2D
    from ansys.geometry.core.misc import UNITS
    from ansys.geometry.core.sketch import Sketch

    origin = Point3D([0, 0, 10])
    plane = Plane(origin, direction_x=[1, 0, 0], direction_y=[0, 1, 0])
    sketch = Sketch(plane)
    sketch.circle(Point2D([1, 1]), 30 * UNITS.m)
    sketch.plot()
