name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.10'
  PACKAGE_NAME: 'ansys-geometry-core'
  PACKAGE_NAMESPACE: 'ansys.geometry.core'
  DOCUMENTATION_CNAME: 'geometry.docs.pyansys.com'
  ANSRV_GEO_IMAGE_WINDOWS_TAG: ghcr.io/pyansys/geometry:windows-latest
  ANSRV_GEO_IMAGE_LINUX_TAG: ghcr.io/pyansys/geometry:linux-latest
  ANSRV_GEO_PORT: 700
  ANSRV_GEO_LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
  GEO_CONT_NAME: ans_geo
  RESET_IMAGE_CACHE: 0
  IS_WORKFLOW_RUNNING: True

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: pyansys/actions/code-style@v3
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: pyansys/actions/doc-style@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: Build and Smoke tests
    runs-on: ${{ matrix.os }}
    needs: [style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Build wheelhouse and perform smoke test
        uses: pyansys/actions/build-wheelhouse@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          library-namespace: ${{ env.PACKAGE_NAMESPACE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  macos-build:
    name: Build and Smoke tests (macOS)
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: macos-latest
    needs: [style]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    steps:
      - name: Build wheelhouse and perform smoke test
        uses: pyansys/actions/build-wheelhouse@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          library-namespace: ${{ env.PACKAGE_NAMESPACE }}
          operating-system: ${{ runner.os }}
          python-version: ${{ matrix.python-version }}

# =================================================================================================
# vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv    RUNNING ON SELF-HOSTED RUNNER    vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
# =================================================================================================

  testing-windows:
    name: Testing and coverage (Windows)
    needs: [smoke-tests]
    runs-on: [self-hosted, pygeometry]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # use python3.9, self-hosted has an issue with 3.10

      - name: Set up headless display
        uses: pyvista/setup-headless-display-action@v1

      - name: Create Python venv
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1

      - name: Install packages for testing
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install --upgrade build wheel
          pip install .[tests]

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Geometry service container (if needed)
        run: docker pull $env:ANSRV_GEO_IMAGE_WINDOWS_TAG

      - name: Start Geometry service and verify start
        run: |
          .\.venv\Scripts\Activate.ps1
          $env:ANSRV_GEO_PORT_MAP = $env:ANSRV_GEO_PORT + ":50051"
          docker run --detach --name $env:GEO_CONT_NAME -e LICENSE_SERVER=$env:ANSRV_GEO_LICENSE_SERVER -p $env:ANSRV_GEO_PORT_MAP $env:ANSRV_GEO_IMAGE_WINDOWS_TAG
          python -c "from ansys.geometry.core.connection.validate import validate; validate()"
      
      - name: Restore images cache
        uses: actions/cache@v3
        with:
          path: .\tests\integration\image_cache
          key: pyvista-image-cache-${{ runner.os }}-v-${{ env.RESET_IMAGE_CACHE }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: pyvista-image-cache-${{ runner.os }}-v-${{ env.RESET_IMAGE_CACHE }}

      - name: Testing
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest -v

      - name: Upload integration test logs
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs-${{ runner.os }}
          path: tests/integration/logs
          retention-days: 7

      - name: Upload PyVista generated images (cache and results)
        uses: actions/upload-artifact@v3
        with:
          name: pytest-pyvista-images-${{ runner.os }}
          path: tests/integration/image_cache
          retention-days: 7

      - name: Upload Coverage Results
        uses: actions/upload-artifact@v3
        with:
          name: coverage-html
          path: .cov/html
          retention-days: 7

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3

      - name: Stop the Geometry service
        if: always()
        run: |
          docker stop $env:GEO_CONT_NAME
          docker logs $env:GEO_CONT_NAME
          docker rm $env:GEO_CONT_NAME

  docs:
    name: Documentation
    needs: [docs-style]
    runs-on: [self-hosted, pygeometry]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # use python3.9, self-hosted has an issue with 3.10

      - name: Set up headless display
        uses: pyvista/setup-headless-display-action@v1

      - name: Create Python venv
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1

      - name: Install packages for documentation build
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install --upgrade build wheel
          pip install .[doc]

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Geometry service container (if needed)
        run: docker pull $env:ANSRV_GEO_IMAGE_WINDOWS_TAG

      - name: Start Geometry service and verify start
        run: |
          .\.venv\Scripts\Activate.ps1
          $env:ANSRV_GEO_PORT_MAP = $env:ANSRV_GEO_PORT + ":50051"
          docker run --detach --name $env:GEO_CONT_NAME -e LICENSE_SERVER=$env:ANSRV_GEO_LICENSE_SERVER -p $env:ANSRV_GEO_PORT_MAP $env:ANSRV_GEO_IMAGE_WINDOWS_TAG
          python -c "from ansys.geometry.core.connection.validate import validate; validate()"

      - name: Build the documentation (HTML)
        run: |
          .\.venv\Scripts\Activate.ps1
          cd doc
          .\make.bat html

      - name: Build the documentation (PDF)
        run: |
          .\.venv\Scripts\Activate.ps1
          cd doc
          .\make.bat pdf

      - name: Upload HTML documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation-html
          path: doc/_build/html
          retention-days: 7

      - name: Upload PDF documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation-pdf
          path: doc/_build/latex/ansys-geometry-core*.pdf
          retention-days: 7

      - name: Stop the Geometry service
        if: always()
        run: |
          docker stop $env:GEO_CONT_NAME
          docker logs $env:GEO_CONT_NAME
          docker rm $env:GEO_CONT_NAME

# =================================================================================================
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    RUNNING ON SELF-HOSTED RUNNER    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# =================================================================================================

  testing-linux:
    name: Testing and coverage (Linux)
    needs: [smoke-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Login in Github Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and launch geometry service
        run: |
          docker pull ${{ env.ANSRV_GEO_IMAGE_LINUX_TAG }}
          docker run --detach --name ${{ env.GEO_CONT_NAME }} -e LICENSE_SERVER=${{ env.ANSRV_GEO_LICENSE_SERVER }} -p ${{ env.ANSRV_GEO_PORT }}:50051 ${{ env.ANSRV_GEO_IMAGE_LINUX_TAG }}

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Restore images cache
        uses: actions/cache@v3
        with:
          path: tests/integration/image_cache
          key: pyvista-image-cache-${{ runner.os }}-v-${{ env.RESET_IMAGE_CACHE }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: pyvista-image-cache-${{ runner.os }}-v-${{ env.RESET_IMAGE_CACHE }}

      - name: Run pytest
        uses: pyansys/actions/tests-pytest@v3
        env:
          ALLOW_PLOTTING: true
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          pytest-extra-args: "--service-os=linux"
          checkout: false
          requires-xvfb: true

      - name: Upload integration test logs
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs-${{ runner.os }}
          path: tests/integration/logs
          retention-days: 7

      - name: Upload PyVista generated images (cache and results)
        uses: actions/upload-artifact@v3
        with:
          name: pytest-pyvista-images-${{ runner.os }}
          path: tests/integration/image_cache
          retention-days: 7

      - name: Stop the Geometry service
        if: always()
        run: |
          docker stop ${{ env.GEO_CONT_NAME }}
          docker logs ${{ env.GEO_CONT_NAME }}
          docker rm ${{ env.GEO_CONT_NAME }}

  package:
    name: Package library
    needs: [testing-windows, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Build library source and wheel artifacts
        uses: pyansys/actions/build-library@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: Release project
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [package, macos-build]
    runs-on: ubuntu-latest
    steps:
      - name: Release to the private PyPI repository
        uses: pyansys/actions/release-pypi-private@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

      - name: Release to GitHub
        uses: pyansys/actions/release-github@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}

  upload_dev_docs:
    name: Upload dev documentation
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [package]
    steps:
      - name: Deploy the latest documentation
        uses: pyansys/actions/doc-deploy-dev@v3
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_docs_release:
    name: Upload release documentation
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Deploy the stable documentation
        uses: pyansys/actions/doc-deploy-stable@v3
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
