





:class:`Sketch`
===============


.. py:class:: ansys.geometry.core.sketch.sketch.Sketch(plane: ansys.geometry.core.math.plane.Plane = Plane())

   
   Provides for building 2D sketch elements.
















   ..
       !! processed by numpydoc !!


.. py:currentmodule:: Sketch

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~translate_sketch_plane`
            - Translate the origin location of the active sketch plane.
          * - :py:attr:`~translate_sketch_plane_by_offset`
            - Translate the origin location of the active sketch plane by offsets.
          * - :py:attr:`~translate_sketch_plane_by_distance`
            - Translate the origin location active sketch plane by distance.
          * - :py:attr:`~get`
            - Get a list of shapes with a given tag.
          * - :py:attr:`~face`
            - Add a sketch face to the sketch.
          * - :py:attr:`~edge`
            - Add a sketch edge to the sketch.
          * - :py:attr:`~select`
            - Add all objects that match provided tags to the current context.
          * - :py:attr:`~segment`
            - Add a segment sketch object to the sketch plane.
          * - :py:attr:`~segment_to_point`
            - Add a segment to the sketch plane starting from the previous end point.
          * - :py:attr:`~segment_from_point_and_vector`
            - Add a segment to the sketch starting from a given starting point.
          * - :py:attr:`~segment_from_vector`
            - Add a segment to the sketch starting from the previous end point.
          * - :py:attr:`~arc`
            - Add an arc to the sketch plane.
          * - :py:attr:`~arc_to_point`
            - Add an arc to the sketch starting from the previous end point.
          * - :py:attr:`~arc_from_three_points`
            - Add an arc to the sketch plane from three given points.
          * - :py:attr:`~arc_from_start_end_and_radius`
            - Add an arc from the start, end points and a radius.
          * - :py:attr:`~arc_from_start_center_and_angle`
            - Add an arc from the start, center point, and angle.
          * - :py:attr:`~triangle`
            - Add a triangle to the sketch using given vertex points.
          * - :py:attr:`~trapezoid`
            - Add a trapezoid to the sketch using given vertex points.
          * - :py:attr:`~circle`
            - Add a circle to the plane at a given center.
          * - :py:attr:`~box`
            - Create a box on the sketch.
          * - :py:attr:`~slot`
            - Create a slot on the sketch.
          * - :py:attr:`~ellipse`
            - Create an ellipse on the sketch.
          * - :py:attr:`~polygon`
            - Create a polygon on the sketch.
          * - :py:attr:`~dummy_gear`
            - Create a dummy gear on the sketch.
          * - :py:attr:`~spur_gear`
            - Create a spur gear on the sketch.
          * - :py:attr:`~tag`
            - Add a tag to the active selection of sketch objects.
          * - :py:attr:`~plot`
            - Plot all objects of the sketch to the scene.
          * - :py:attr:`~plot_selection`
            - Plot the current selection to the scene.
          * - :py:attr:`~sketch_polydata`
            - Get polydata configuration for all objects of the sketch.
          * - :py:attr:`~sketch_polydata_faces`
            - Get polydata configuration for all faces of the sketch to the scene.
          * - :py:attr:`~sketch_polydata_edges`
            - Get polydata configuration for all edges of the sketch to the scene.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~plane`
            - Sketch plane configuration.
          * - :py:attr:`~edges`
            - List of all independently sketched edges.
          * - :py:attr:`~faces`
            - List of all independently sketched faces.







Import detail
-------------

.. code-block:: python

    from ansys.geometry.core.sketch.sketch import Sketch

Property detail
---------------

.. py:property:: plane
   :type: ansys.geometry.core.math.plane.Plane


   
   Sketch plane configuration.
















   ..
       !! processed by numpydoc !!

.. py:property:: edges
   :type: list[ansys.geometry.core.sketch.edge.SketchEdge]


   
   List of all independently sketched edges.













   .. rubric:: Notes

   Independently sketched edges are not assigned to a face. Face edges
   are not included in this list.



   ..
       !! processed by numpydoc !!

.. py:property:: faces
   :type: list[ansys.geometry.core.sketch.face.SketchFace]


   
   List of all independently sketched faces.
















   ..
       !! processed by numpydoc !!




Method detail
-------------

.. py:method:: translate_sketch_plane(translation: ansys.geometry.core.math.vector.Vector3D) -> Sketch

   
   Translate the origin location of the active sketch plane.


   :Parameters:

       **translation** : :obj:`Vector3D`
           Vector defining the translation. Default units are the expected
           units, otherwise it will be inconsistent.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: translate_sketch_plane_by_offset(x: pint.Quantity | ansys.geometry.core.misc.measurements.Distance = Quantity(0, DEFAULT_UNITS.LENGTH), y: pint.Quantity | ansys.geometry.core.misc.measurements.Distance = Quantity(0, DEFAULT_UNITS.LENGTH), z: pint.Quantity | ansys.geometry.core.misc.measurements.Distance = Quantity(0, DEFAULT_UNITS.LENGTH)) -> Sketch

   
   Translate the origin location of the active sketch plane by offsets.


   :Parameters:

       **x** : :obj:`~pint.Quantity` | :obj:`Distance`, default: :obj:`~pint.Quantity`\(0, ``DEFAULT_UNITS.LENGTH``)
           Amount to translate the origin of the x-direction.

       **y** : :obj:`~pint.Quantity` | :obj:`Distance`, default: :obj:`~pint.Quantity`\(0, ``DEFAULT_UNITS.LENGTH``)
           Amount to translate the origin of the y-direction.

       **z** : :obj:`~pint.Quantity` | :obj:`Distance`, default: :obj:`~pint.Quantity`\(0, ``DEFAULT_UNITS.LENGTH``)
           Amount to translate the origin of the z-direction.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: translate_sketch_plane_by_distance(direction: ansys.geometry.core.math.vector.UnitVector3D, distance: pint.Quantity | ansys.geometry.core.misc.measurements.Distance) -> Sketch

   
   Translate the origin location active sketch plane by distance.


   :Parameters:

       **direction** : :obj:`UnitVector3D`
           Direction to translate the origin.

       **distance** : :obj:`~pint.Quantity` | :obj:`Distance`
           Distance to translate the origin.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: get(tag: str) -> list[SketchObject]

   
   Get a list of shapes with a given tag.


   :Parameters:

       **tag** : :class:`python:str`
           Tag to query against.














   ..
       !! processed by numpydoc !!

.. py:method:: face(face: ansys.geometry.core.sketch.face.SketchFace, tag: str | None = None) -> Sketch

   
   Add a sketch face to the sketch.


   :Parameters:

       **face** : :obj:`SketchFace`
           Face to add.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the face.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: edge(edge: ansys.geometry.core.sketch.edge.SketchEdge, tag: str | None = None) -> Sketch

   
   Add a sketch edge to the sketch.


   :Parameters:

       **edge** : :obj:`SketchEdge`
           Edge to add.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the edge.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: select(*tags: str) -> Sketch

   
   Add all objects that match provided tags to the current context.
















   ..
       !! processed by numpydoc !!

.. py:method:: segment(start: ansys.geometry.core.math.point.Point2D, end: ansys.geometry.core.math.point.Point2D, tag: str | None = None) -> Sketch

   
   Add a segment sketch object to the sketch plane.


   :Parameters:

       **start** : :obj:`Point2D`
           Starting point of the line segment.

       **end** : :obj:`Point2D`
           Ending point of the line segment.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the edge.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: segment_to_point(end: ansys.geometry.core.math.point.Point2D, tag: str | None = None) -> Sketch

   
   Add a segment to the sketch plane starting from the previous end point.


   :Parameters:

       **end** : :obj:`Point2D`
           Ending point of the line segment.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the edge.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.








   .. rubric:: Notes

   The starting point of the created edge is based upon the current context
   of the sketch, such as the end point of a previously added edge.



   ..
       !! processed by numpydoc !!

.. py:method:: segment_from_point_and_vector(start: ansys.geometry.core.math.point.Point2D, vector: ansys.geometry.core.math.vector.Vector2D, tag: str | None = None)

   
   Add a segment to the sketch starting from a given starting point.


   :Parameters:

       **start** : :obj:`Point2D`
           Starting point of the line segment.

       **vector** : :obj:`Vector2D`
           Vector defining the line segment. Vector magnitude determines
           the segment endpoint. Vector magnitude is assumed to be in the
           same unit as the starting point.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the edge.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.








   .. rubric:: Notes

   Vector magnitude determines the segment endpoint.
   Vector magnitude is assumed to use the same unit as the starting point.



   ..
       !! processed by numpydoc !!

.. py:method:: segment_from_vector(vector: ansys.geometry.core.math.vector.Vector2D, tag: str | None = None)

   
   Add a segment to the sketch starting from the previous end point.


   :Parameters:

       **vector** : :obj:`Vector2D`
           Vector defining the line segment.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the edge.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.








   .. rubric:: Notes

   The starting point of the created edge is based upon the current context
   of the sketch, such as the end point of a previously added edge.

   Vector magnitude determines the segment endpoint.
   Vector magnitude is assumed to use the same unit as the starting point
   in the previous context.



   ..
       !! processed by numpydoc !!

.. py:method:: arc(start: ansys.geometry.core.math.point.Point2D, end: ansys.geometry.core.math.point.Point2D, center: ansys.geometry.core.math.point.Point2D, clockwise: bool = False, tag: str | None = None) -> Sketch

   
   Add an arc to the sketch plane.


   :Parameters:

       **start** : :obj:`Point2D`
           Starting point of the arc.

       **end** : :obj:`Point2D`
           Ending point of the arc.

       **center** : :obj:`Point2D`
           Center point of the arc.

       **clockwise** : :ref:`bool <python:bltin-boolean-values>`, default: :data:`python:False`
           Whether the arc spans the angle clockwise between the start
           and end points. When ``False `` (default), the arc spans the angle
           counter-clockwise. When ``True``, the arc spans the angle
           clockwise.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the edge.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: arc_to_point(end: ansys.geometry.core.math.point.Point2D, center: ansys.geometry.core.math.point.Point2D, clockwise: bool = False, tag: str | None = None) -> Sketch

   
   Add an arc to the sketch starting from the previous end point.


   :Parameters:

       **end** : :obj:`Point2D`
           Ending point of the arc.

       **center** : :obj:`Point2D`
           Center point of the arc.

       **clockwise** : :ref:`bool <python:bltin-boolean-values>`, default: :data:`python:False`
           Whether the arc spans the angle clockwise between the start
           and end points. When ``False`` (default), the arc spans the angle
           counter-clockwise. When ``True``, the arc spans the angle
           clockwise.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the edge.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.








   .. rubric:: Notes

   The starting point of the created edge is based upon the current context
   of the sketch, such as the end point of a previously added edge.



   ..
       !! processed by numpydoc !!

.. py:method:: arc_from_three_points(start: ansys.geometry.core.math.point.Point2D, inter: ansys.geometry.core.math.point.Point2D, end: ansys.geometry.core.math.point.Point2D, tag: str | None = None) -> Sketch

   
   Add an arc to the sketch plane from three given points.


   :Parameters:

       **start** : :obj:`Point2D`
           Starting point of the arc.

       **inter** : :obj:`Point2D`
           Intermediate point (location) of the arc.

       **end** : :obj:`Point2D`
           End point of the arc.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the edge.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: arc_from_start_end_and_radius(start: ansys.geometry.core.math.point.Point2D, end: ansys.geometry.core.math.point.Point2D, radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, convex_arc: bool = False, clockwise: bool = False, tag: str | None = None) -> Sketch

   
   Add an arc from the start, end points and a radius.


   :Parameters:

       **start** : :obj:`Point2D`
           Starting point of the arc.

       **end** : :obj:`Point2D`
           Ending point of the arc.

       **radius** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Radius of the arc.

       **convex_arc** : :ref:`bool <python:bltin-boolean-values>`, default: :data:`python:False`
           Whether the arc is convex. The default is ``False``.
           When ``False`` , the arc spans the concave version of the arc.
           When ``True``, the arc spans the convex version of the arc.

       **clockwise** : :ref:`bool <python:bltin-boolean-values>`, default: :data:`python:False`
           Whether the arc spans the angle clockwise between the start
           and end points. When ``False``, the arc spans the angle
           counter-clockwise. When ``True``, the arc spans the angle
           clockwise.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the edge.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: arc_from_start_center_and_angle(start: ansys.geometry.core.math.point.Point2D, center: ansys.geometry.core.math.point.Point2D, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real, clockwise: bool = False, tag: str | None = None) -> Sketch

   
   Add an arc from the start, center point, and angle.


   :Parameters:

       **start** : :obj:`Point2D`
           Starting point of the arc.

       **center** : :obj:`Point2D`
           Center point of the arc.

       **angle** : :obj:`~pint.Quantity` | :obj:`Angle` | :obj:`Real`
           Angle of the arc.

       **clockwise** : :ref:`bool <python:bltin-boolean-values>`, default: :data:`python:False`
           Whether the arc spans the angle clockwise. The default is ``False``.
           When ``False`` , the arc spans the angle counter-clockwise.
           When ``True``, the arc spans the angle clockwise.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: triangle(point1: ansys.geometry.core.math.point.Point2D, point2: ansys.geometry.core.math.point.Point2D, point3: ansys.geometry.core.math.point.Point2D, tag: str | None = None) -> Sketch

   
   Add a triangle to the sketch using given vertex points.


   :Parameters:

       **point1** : :obj:`Point2D`
           Point that represents a vertex of the triangle.

       **point2** : :obj:`Point2D`
           Point that represents a vertex of the triangle.

       **point3** : :obj:`Point2D`
           Point that represents a vertex of the triangle.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the face.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: trapezoid(base_width: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, height: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, base_angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real, base_asymmetric_angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real | None = None, center: ansys.geometry.core.math.point.Point2D = ZERO_POINT2D, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0, tag: str | None = None) -> Sketch

   
   Add a trapezoid to the sketch using given vertex points.


   :Parameters:

       **base_width** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Width of the lower base of the trapezoid.

       **height** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Height of the slot.

       **base_angle** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Angle for trapezoid generation. Represents the angle
           on the base of the trapezoid.

       **base_asymmetric_angle** : :obj:`~pint.Quantity` | :obj:`Angle` | :obj:`Real` | :data:`python:None`, default: :data:`python:None`
           Asymmetrical angles on each side of the trapezoid.
           The default is ``None``, in which case the trapezoid is symmetrical. If
           provided, the trapezoid is asymmetrical and the right corner angle
           at the base of the trapezoid is set to the provided value.

       **center: Point2D, default: ZERO_POINT2D**
           Center point of the trapezoid.

       **angle** : :obj:`~pint.Quantity` | :obj:`Angle` | :obj:`Real`, default: 0
           Placement angle for orientation alignment.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the face.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.








   .. rubric:: Notes

   If an asymmetric base angle is defined, the base angle is
   applied to the left-most angle, and the asymmetric base angle
   is applied to the right-most angle.



   ..
       !! processed by numpydoc !!

.. py:method:: circle(center: ansys.geometry.core.math.point.Point2D, radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, tag: str | None = None) -> Sketch

   
   Add a circle to the plane at a given center.


   :Parameters:

       **center: Point2D**
           Center point of the circle.

       **radius** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Radius of the circle.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the face.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: box(center: ansys.geometry.core.math.point.Point2D, width: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, height: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0, tag: str | None = None) -> Sketch

   
   Create a box on the sketch.


   :Parameters:

       **center: Point2D**
           Center point of the box.

       **width** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Width of the box.

       **height** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Height of the box.

       **angle** : :obj:`~pint.Quantity` | :obj:`Angle` | :obj:`Real`, default: 0
           Placement angle for orientation alignment.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the face.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: slot(center: ansys.geometry.core.math.point.Point2D, width: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, height: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0, tag: str | None = None) -> Sketch

   
   Create a slot on the sketch.


   :Parameters:

       **center: Point2D**
           Center point of the slot.

       **width** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Width of the slot.

       **height** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Height of the slot.

       **angle** : :obj:`~pint.Quantity` | :obj:`Angle` | :obj:`Real`, default: 0
           Placement angle for orientation alignment.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the face.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: ellipse(center: ansys.geometry.core.math.point.Point2D, major_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, minor_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0, tag: str | None = None) -> Sketch

   
   Create an ellipse on the sketch.


   :Parameters:

       **center: Point2D**
           Center point of the ellipse.

       **major_radius** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Semi-major axis of the ellipse.

       **minor_radius** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Semi-minor axis of the ellipse.

       **angle** : :obj:`~pint.Quantity` | :obj:`Angle` | :obj:`Real`, default: 0
           Placement angle for orientation alignment.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the face.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: polygon(center: ansys.geometry.core.math.point.Point2D, inner_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, sides: int, angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real = 0, tag: str | None = None) -> Sketch

   
   Create a polygon on the sketch.


   :Parameters:

       **center: Point2D**
           Center point of the polygon.

       **inner_radius** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Inner radius (apothem) of the polygon.

       **sides** : :class:`python:int`
           Number of sides of the polygon.

       **angle** : :obj:`~pint.Quantity` | :obj:`Angle` | :obj:`Real`, default: 0
           Placement angle for orientation alignment.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the face.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: dummy_gear(origin: ansys.geometry.core.math.point.Point2D, outer_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, inner_radius: pint.Quantity | ansys.geometry.core.misc.measurements.Distance | ansys.geometry.core.typing.Real, n_teeth: int, tag: str | None = None) -> Sketch

   
   Create a dummy gear on the sketch.


   :Parameters:

       **origin** : :obj:`Point2D`
           Origin of the gear.

       **outer_radius** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Outer radius of the gear.

       **inner_radius** : :obj:`~pint.Quantity` | :obj:`Distance` | :obj:`Real`
           Inner radius of the gear.

       **n_teeth** : :class:`python:int`
           Number of teeth of the gear.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the face.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: spur_gear(origin: ansys.geometry.core.math.point.Point2D, module: ansys.geometry.core.typing.Real, pressure_angle: pint.Quantity | ansys.geometry.core.misc.measurements.Angle | ansys.geometry.core.typing.Real, n_teeth: int, tag: str | None = None) -> Sketch

   
   Create a spur gear on the sketch.


   :Parameters:

       **origin** : :obj:`Point2D`
           Origin of the spur gear.

       **module** : :obj:`Real`
           Module of the spur gear. This is also the ratio between the pitch circle
           diameter in millimeters and the number of teeth.

       **pressure_angle** : :obj:`~pint.Quantity` | :obj:`Angle` | :obj:`Real`
           Pressure angle of the spur gear.

       **n_teeth** : :class:`python:int`
           Number of teeth of the spur gear.

       **tag** : :class:`python:str`, default: :data:`python:None`
           User-defined label for identifying the face.



   :Returns:

       :obj:`Sketch`
           Revised sketch state ready for further sketch actions.











   ..
       !! processed by numpydoc !!

.. py:method:: tag(tag: str) -> None

   
   Add a tag to the active selection of sketch objects.


   :Parameters:

       **tag** : :class:`python:str`
           Tag to assign to the sketch objects.














   ..
       !! processed by numpydoc !!

.. py:method:: plot(view_2d: bool = False, screenshot: str | None = None, use_trame: bool | None = None, selected_pd_objects: list[pyvista.PolyData] = None, **plotting_options: dict | None)

   
   Plot all objects of the sketch to the scene.


   :Parameters:

       **view_2d** : :ref:`bool <python:bltin-boolean-values>`, default: :data:`python:False`
           Whether to represent the plot in a 2D format.

       **screenshot** : :class:`python:str`, :obj:`optional`
           Path for saving a screenshot of the image that is being represented.

       **use_trame** : :ref:`bool <python:bltin-boolean-values>`, default: :data:`python:None`
           Whether to enables the use of `trame <https://kitware.github.io/trame/index.html>`_.
           The default is ``None``, in which case the
           ``ansys.tools.visualization_interface.USE_TRAME`` global setting is used.

       **\*\*plotting_options** : :class:`python:dict`, :obj:`optional`
           Keyword arguments for plotting. For allowable keyword arguments,
           see the :meth:`Plotter.add_mesh <pyvista.Plotter.add_mesh>` method.














   ..
       !! processed by numpydoc !!

.. py:method:: plot_selection(view_2d: bool = False, screenshot: str | None = None, use_trame: bool | None = None, **plotting_options: dict | None)

   
   Plot the current selection to the scene.


   :Parameters:

       **view_2d** : :ref:`bool <python:bltin-boolean-values>`, default: :data:`python:False`
           Whether to represent the plot in a 2D format.

       **screenshot** : :class:`python:str`, :obj:`optional`
           Path for saving a screenshot of the image that is being represented.

       **use_trame** : :ref:`bool <python:bltin-boolean-values>`, default: :data:`python:None`
           Whether to enables the use of `trame <https://kitware.github.io/trame/index.html>`_.
           The default is ``None``, in which case the
           ``ansys.tools.visualization_interface.USE_TRAME`` global setting is used.

       **\*\*plotting_options** : :class:`python:dict`, :obj:`optional`
           Keyword arguments for plotting. For allowable keyword arguments,
           see the :meth:`Plotter.add_mesh <pyvista.Plotter.add_mesh>` method.














   ..
       !! processed by numpydoc !!

.. py:method:: sketch_polydata() -> list[pyvista.PolyData]

   
   Get polydata configuration for all objects of the sketch.





   :Returns:

       :class:`python:list`\[:obj:`~pyvista.PolyData`]
           List of the polydata configuration for all edges and faces in the sketch.











   ..
       !! processed by numpydoc !!

.. py:method:: sketch_polydata_faces() -> list[pyvista.PolyData]

   
   Get polydata configuration for all faces of the sketch to the scene.





   :Returns:

       :class:`python:list`\[:obj:`~pyvista.PolyData`]
           List of the polydata configuration for faces in the sketch.











   ..
       !! processed by numpydoc !!

.. py:method:: sketch_polydata_edges() -> list[pyvista.PolyData]

   
   Get polydata configuration for all edges of the sketch to the scene.





   :Returns:

       :class:`python:list`\[:obj:`~pyvista.PolyData`]
           List of the polydata configuration for edges in the sketch.











   ..
       !! processed by numpydoc !!




