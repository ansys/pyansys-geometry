---
jupytext:
  text_representation:
    extension: .mystnb
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.14.1
kernelspec:
  display_name: Python 3 (ipykernel)
  language: python
  name: python3
---

# Basic usage

The following guide provides a quick insight on the capabilities of ``PyGeometry`` and how to use those.

+++

Start by importing the fundamental objects:

```{code-cell} ipython3
from ansys.geometry.core.misc.units import UNITS as u
from ansys.geometry.core.sketch import Sketch
from ansys.geometry.core.plotting.plotter import Plotter
```

## Creating a new sketch

``Sketches`` are the fundamental objects for drawing basic shapes like lines, segments, circles, ellipses, arcs, and polygons.

A ``Sketch`` instance is created by defining a drawing plane. This plane is declared by a point and two fundamental orthogonal directions:

```{code-cell} ipython3
from ansys.geometry.core.math import Plane, Point2D, Point3D
```

In the following lines, a plane is defined and used to create a new sketch:

```{code-cell} ipython3
# Define the origin point of the plane
origin = Point3D([1, 1, 1])

# Create a plane located in previous point with desired fundamental directions
plane = Plane(
    origin, direction_x=[1, 0, 0], direction_y=[0, -1, 1]
)

# Instantiate a new sketch object from previous plane
sketch = Sketch(plane)
```

## Drawing shapes in the sketch

Different shapes can be drawn in the sketch using the corresponding ``draw`` methods.

+++

### Drawing a circle

Circles can be drawn in a sketch by specifying the center and radius.

```{code-cell} ipython3
sketch.circle(Point2D([2, 1]), radius=30 * u.cm, tag="Circle")
sketch.select("Circle")
sketch.plot_selection()
```

### Drawing an ellipse

Ellipses can be drawn in a sketch by specifying the center, semi-major axis and semi-minor axis.

```{code-cell} ipython3
sketch.ellipse(
    Point2D([1, 1]), semi_major_axis=2*u.m, semi_minor_axis=1*u.m, tag="Ellipse"
)
sketch.select("Ellipse")
sketch.plot_selection()
```

### Drawing a polygon

Regular polygons can be drawn by passing the center, radius and the desired number of sides.

```{code-cell} ipython3
sketch.polygon(
    Point2D([1, 1]), inner_radius=3*u.m, sides=5, tag="Polygon"
)
sketch.select("Polygon")
sketch.plot_selection()
```

### Drawing an arc

For drawing arcs of circumference, a center, starting and ending points are required.

```{code-cell} ipython3
start_point, end_point = Point2D([2, 1], unit=u.m), Point2D([0, 1], unit=u.meter)
sketch.arc(start_point, end_point, Point2D([1,1]), tag="Arc")
sketch.select("Arc")
sketch.plot_selection()
```

### Drawing a slot

For drawing slots with a center, width, and height.

```{code-cell} ipython3
sketch.slot(Point2D([2, 0]), 4, 3, tag="Slot")
sketch.select("Slot")
sketch.plot_selection()
```

### Drawing a box

For drawing boxes with a center, width, and height.

```{code-cell} ipython3
sketch.box(Point2D([2, 0]), 4, 5, tag="Box")
sketch.select("Box")
sketch.plot_selection()
```

### Drawing a segment

Segments can be drawn in a sketch by specifying its starting and ending points:

```{code-cell} ipython3
start_point, end_point = Point2D([2, 1], unit=u.m), Point2D([0, 1], unit=u.meter)
sketch.segment(start_point, end_point, "Segment")
sketch.select("Segment")
sketch.plot_selection()
```

## Plotting the sketch

Plotting capabilities are provided through the ``Plotter`` class. This class allows to plot different ``PyGeometry`` objects. The visualization backend used by ``PyGeometry`` is based on ``PyVista``.

For plotting the sketch, the ``plot_sketch`` method is used. It accepts a ``Sketch`` instance and some extra arguments to further customize the visualization of the sketch. These arguments include showing the plane of the sketch and its frame.

```{code-cell} ipython3
# Plot the sketch in the whole scene
pl = Plotter()
pl.plot_sketch(sketch, show_plane=True, show_frame=True)
pl.scene.show(jupyter_backend="panel")
```
