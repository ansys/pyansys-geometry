





:class:`GRPCDesignsService`
===========================


.. py:class:: ansys.geometry.core._grpc._services.base.designs.GRPCDesignsService(channel: grpc.Channel)

   Bases: :py:obj:`abc.ABC`


   
   Designs service for gRPC communication with the Geometry server.


   :Parameters:

       **channel** : :obj:`grpc.Channel`
           The gRPC channel to the server.














   ..
       !! processed by numpydoc !!
















.. py:currentmodule:: GRPCDesignsService

Overview
--------

.. tab-set::

   .. tab-item:: Abstract methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~open`
            - Open a design on the service.
          * - :py:attr:`~new`
            - Create a new design.
          * - :py:attr:`~get_assembly`
            - Create a new design.
          * - :py:attr:`~close`
            - Close the currently open design.
          * - :py:attr:`~put_active`
            - Activate an already opened design on the service.
          * - :py:attr:`~save_as`
            - Create a new design.
          * - :py:attr:`~download_export`
            - Download and export a design into a certain format.
          * - :py:attr:`~stream_download_export`
            - Download and export a design into a certain format.
          * - :py:attr:`~insert`
            - Insert a part/component/design into an existing design.
          * - :py:attr:`~get_active`
            - Get the active design on the service.
          * - :py:attr:`~upload_file`
            - Upload a file to the server.
          * - :py:attr:`~upload_file_stream`
            - Upload a file to the server using streaming.
          * - :py:attr:`~stream_design_tessellation`
            - Stream the tessellation of a design.
          * - :py:attr:`~download_file`
            - Download the design from the server.










Import detail
-------------

.. code-block:: python

    from ansys.geometry.core._grpc._services.base.designs import GRPCDesignsService



Method detail
-------------

.. py:method:: open(**kwargs) -> dict
   :abstractmethod:


   
   Open a design on the service.
















   ..
       !! processed by numpydoc !!

.. py:method:: new(**kwargs) -> dict
   :abstractmethod:


   
   Create a new design.
















   ..
       !! processed by numpydoc !!

.. py:method:: get_assembly(**kwargs) -> dict
   :abstractmethod:


   
   Create a new design.
















   ..
       !! processed by numpydoc !!

.. py:method:: close(**kwargs) -> dict
   :abstractmethod:


   
   Close the currently open design.
















   ..
       !! processed by numpydoc !!

.. py:method:: put_active(**kwargs) -> dict
   :abstractmethod:


   
   Activate an already opened design on the service.
















   ..
       !! processed by numpydoc !!

.. py:method:: save_as(**kwargs) -> dict
   :abstractmethod:


   
   Create a new design.
















   ..
       !! processed by numpydoc !!

.. py:method:: download_export(**kwargs) -> dict
   :abstractmethod:


   
   Download and export a design into a certain format.
















   ..
       !! processed by numpydoc !!

.. py:method:: stream_download_export(**kwargs) -> dict
   :abstractmethod:


   
   Download and export a design into a certain format.
















   ..
       !! processed by numpydoc !!

.. py:method:: insert(**kwargs) -> dict
   :abstractmethod:


   
   Insert a part/component/design into an existing design.
















   ..
       !! processed by numpydoc !!

.. py:method:: get_active(**kwargs) -> dict
   :abstractmethod:


   
   Get the active design on the service.
















   ..
       !! processed by numpydoc !!

.. py:method:: upload_file(**kwargs) -> dict
   :abstractmethod:


   
   Upload a file to the server.
















   ..
       !! processed by numpydoc !!

.. py:method:: upload_file_stream(**kwargs) -> dict
   :abstractmethod:


   
   Upload a file to the server using streaming.
















   ..
       !! processed by numpydoc !!

.. py:method:: stream_design_tessellation(**kwargs) -> dict
   :abstractmethod:


   
   Stream the tessellation of a design.
















   ..
       !! processed by numpydoc !!

.. py:method:: download_file(**kwargs) -> dict
   :abstractmethod:


   
   Download the design from the server.
















   ..
       !! processed by numpydoc !!




