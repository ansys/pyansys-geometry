.. _ref_primitives:

Primitives
**********

The PyGeometry ``Primitives`` math subpackage consists of primitive representations
of basic geometric objects, such as ``Point``, ``Vector``, and ``Matrix``, along with
units by making use of `Pint <https://github.com/hgrecco/pint>`_ to operate and
manipulate physical quantities.

This table shows PyGeometry base values:

+----------------------------+---------+
| Name                       | value   |
+============================+=========+
| LENGTH_ACCURACY            | 1e-8    |
+----------------------------+---------+
| ANGLE_ACCURACY             | 1e-6    |
+----------------------------+---------+
| DEFAULT_UNITS.LENGTH       | meter   |
+----------------------------+---------+
| DEFAULT_UNITS.ANGLE        | radian  |
+----------------------------+---------+

You use these PyGeometry classes to define accuracy and measurements:

* :class:`Accuracy() <ansys.geometry.core.misc.accuracy>`
* :class:`Measurements() <ansys.geometry.core.misc.measurements>`

Plane concept
-------------

The :class:`Plane() <ansys.geometry.core.math.plane>` class provides primitive representation of a 2D plane in 3D space.
It has an origin and a coordinate system.
Sketched shapes are always defined relative to a plane.
The default working plane is XY with ``(0,0)`` as the origin.

If you create 2D objects in the plane, PyGeometry converts it to the global coordinate system so that
the 2D feature executes as expected.

.. code:: python

    origin = Point3D([42, 99, 13])
    plane = Plane(origin, UnitVector3D([1, 0, 0]), UnitVector3D([0, 1, 0]))
