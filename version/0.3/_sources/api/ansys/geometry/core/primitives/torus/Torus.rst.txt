



Torus
=====

.. py:class:: Torus(origin: beartype.typing.Union[numpy.ndarray, ansys.geometry.core.typing.RealSequence, ansys.geometry.core.math.point.Point3D], major_radius: beartype.typing.Union[pint.Quantity, ansys.geometry.core.misc.measurements.Distance, ansys.geometry.core.typing.Real], minor_radius: beartype.typing.Union[pint.Quantity, ansys.geometry.core.misc.measurements.Distance, ansys.geometry.core.typing.Real], reference: beartype.typing.Union[numpy.ndarray, ansys.geometry.core.typing.RealSequence, ansys.geometry.core.math.vector.UnitVector3D, ansys.geometry.core.math.vector.Vector3D] = UNITVECTOR3D_X, axis: beartype.typing.Union[numpy.ndarray, ansys.geometry.core.typing.RealSequence, ansys.geometry.core.math.vector.UnitVector3D, ansys.geometry.core.math.vector.Vector3D] = UNITVECTOR3D_Z)
   :canonical: ansys.geometry.core.primitives.torus.Torus




Provides 3D torus representation.



















Overview
--------
.. py:currentmodule:: Torus
.. tab-set::



    .. tab-item:: Methods

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~transformed_copy`
            - Create a transformed copy of the torus based on a transformation matrix.
          * - :py:attr:`~mirrored_copy`
            - Create a mirrored copy of the torus along the y-axis.
          * - :py:attr:`~evaluate`
            - Evaluate the torus at the given parameters.
          * - :py:attr:`~get_u_parameterization`
            - Get the parametrization conditions for the U parameter.
          * - :py:attr:`~get_v_parameterization`
            - Get the parametrization conditions of the V parameter.
          * - :py:attr:`~project_point`
            - Project a point onto the torus and evaluate the torus.


    .. tab-item:: Properties

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~origin`
            - Origin of the torus.
          * - :py:attr:`~major_radius`
            - Semi-major radius of the torus.
          * - :py:attr:`~minor_radius`
            - Semi-minor radius of the torus.
          * - :py:attr:`~dir_x`
            - X-direction of the torus.
          * - :py:attr:`~dir_y`
            - Y-direction of the torus.
          * - :py:attr:`~dir_z`
            - Z-direction of the torus.
          * - :py:attr:`~volume`
            - Volume of the torus.
          * - :py:attr:`~surface_area`
            - Surface_area of the torus.




    .. tab-item:: Special methods

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__eq__`
            - Equals operator for the ``Torus`` class.



Import detail
-------------

.. code-block:: python

    from ansys.geometry.core.primitives.torus import Torus


Property detail
---------------
.. py:property:: origin
   :canonical: ansys.geometry.core.primitives.torus.Torus.origin
   :type: Point3D


   
   Origin of the torus.
















   ..
       !! processed by numpydoc !!

.. py:property:: major_radius
   :canonical: ansys.geometry.core.primitives.torus.Torus.major_radius
   :type: pint.Quantity


   
   Semi-major radius of the torus.
















   ..
       !! processed by numpydoc !!

.. py:property:: minor_radius
   :canonical: ansys.geometry.core.primitives.torus.Torus.minor_radius
   :type: pint.Quantity


   
   Semi-minor radius of the torus.
















   ..
       !! processed by numpydoc !!

.. py:property:: dir_x
   :canonical: ansys.geometry.core.primitives.torus.Torus.dir_x
   :type: UnitVector3D


   
   X-direction of the torus.
















   ..
       !! processed by numpydoc !!

.. py:property:: dir_y
   :canonical: ansys.geometry.core.primitives.torus.Torus.dir_y
   :type: UnitVector3D


   
   Y-direction of the torus.
















   ..
       !! processed by numpydoc !!

.. py:property:: dir_z
   :canonical: ansys.geometry.core.primitives.torus.Torus.dir_z
   :type: UnitVector3D


   
   Z-direction of the torus.
















   ..
       !! processed by numpydoc !!

.. py:property:: volume
   :canonical: ansys.geometry.core.primitives.torus.Torus.volume
   :type: pint.Quantity


   
   Volume of the torus.
















   ..
       !! processed by numpydoc !!

.. py:property:: surface_area
   :canonical: ansys.geometry.core.primitives.torus.Torus.surface_area
   :type: pint.Quantity


   
   Surface_area of the torus.
















   ..
       !! processed by numpydoc !!




Method detail
-------------


.. py:method:: __eq__(other: Torus) -> bool

   
   Equals operator for the ``Torus`` class.
















   ..
       !! processed by numpydoc !!



.. py:method:: transformed_copy(matrix: ansys.geometry.core.math.matrix.Matrix44) -> Torus

   
   Create a transformed copy of the torus based on a transformation matrix.


   :Parameters:

       **matrix** : :obj:`Matrix44`
           4x4 transformation matrix to apply to the torus.

   :Returns:

       :obj:`Torus`
           New torus that is the transformed copy of the original torus.













   ..
       !! processed by numpydoc !!



.. py:method:: mirrored_copy() -> Torus

   
   Create a mirrored copy of the torus along the y-axis.



   :Returns:

       :obj:`Torus`
           New torus that is a mirrored copy of the original torus.













   ..
       !! processed by numpydoc !!



.. py:method:: evaluate(parameter: ansys.geometry.core.primitives.parameterization.ParamUV) -> TorusEvaluation

   
   Evaluate the torus at the given parameters.


   :Parameters:

       **parameter** : :obj:`ParamUV`
           Parameters (u,v) to evaluate the torus at.

   :Returns:

       :obj:`TorusEvaluation`
           Resulting evaluation.













   ..
       !! processed by numpydoc !!



.. py:method:: get_u_parameterization()

   
   Get the parametrization conditions for the U parameter.

   The U parameter specifies the longitude angle, increasing clockwise (east) about
   the axis (right-hand corkscrew law). It has a zero parameter at
   ``Geometry.Frame.DirX`` and a period of ``2*pi``.


   :Returns:

       :obj:`Parameterization`
           Information about how a sphere's U parameter is parameterized.













   ..
       !! processed by numpydoc !!



.. py:method:: get_v_parameterization() -> ansys.geometry.core.primitives.parameterization.Parameterization

   
   Get the parametrization conditions of the V parameter.

   The V parameter specifies the latitude, increasing north, with a zero parameter
   at the equator. For the donut, where the ``Geometry.Torus.MajorRadius`` is greater
   than the ``Geometry.Torus.MinorRadius``, the range is ``[-pi, pi]`` and the
   parameterization is periodic. For a degenerate torus, the range is restricted
   accordingly and the parameterization is non-periodic.


   :Returns:

       :obj:`Parameterization`
           Information about how a torus's V parameter is parameterized.













   ..
       !! processed by numpydoc !!



.. py:method:: project_point(point: ansys.geometry.core.math.point.Point3D) -> TorusEvaluation

   
   Project a point onto the torus and evaluate the torus.


   :Parameters:

       **point** : :obj:`Point3D`
           Point to project onto the torus.

   :Returns:

       :obj:`TorusEvaluation`
           Resulting evaluation.













   ..
       !! processed by numpydoc !!


