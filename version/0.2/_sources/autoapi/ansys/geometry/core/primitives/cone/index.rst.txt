:py:mod:`ansys.geometry.core.primitives.cone`
=============================================

.. py:module:: ansys.geometry.core.primitives.cone

.. autoapi-nested-parse::

   Provides the ``Cone`` class.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ansys.geometry.core.primitives.cone.Cone
   ansys.geometry.core.primitives.cone.ConeEvaluation




.. py:class:: Cone(origin: beartype.typing.Union[numpy.ndarray, ansys.geometry.core.typing.RealSequence, ansys.geometry.core.math.Point3D], radius: beartype.typing.Union[pint.Quantity, ansys.geometry.core.misc.Distance, ansys.geometry.core.typing.Real], half_angle: beartype.typing.Union[pint.Quantity, ansys.geometry.core.misc.Angle, ansys.geometry.core.typing.Real], reference: beartype.typing.Union[numpy.ndarray, ansys.geometry.core.typing.RealSequence, ansys.geometry.core.math.UnitVector3D, ansys.geometry.core.math.Vector3D] = UNITVECTOR3D_X, axis: beartype.typing.Union[numpy.ndarray, ansys.geometry.core.typing.RealSequence, ansys.geometry.core.math.UnitVector3D, ansys.geometry.core.math.Vector3D] = UNITVECTOR3D_Z)


   
   Provides 3D ``Cone`` representation.


   :Parameters:

       **origin** : :obj:`Union`\[:obj:`~numpy.ndarray`, :obj:`RealSequence`, :obj:`Point3D`]
           Origin of the cone.

       **radius** : :obj:`Union`\[:obj:`Quantity`, :obj:`Distance`, :obj:`Real`]
           Radius of the cone.

       **half_angle** : :obj:`Union`\[:obj:`Quantity`, :obj:`Angle`, :obj:`Real`]
           Half angle of the apex, determining the upward angle.

       **reference** : :obj:`Union`\[:obj:`~numpy.ndarray`, :obj:`RealSequence`, :obj:`UnitVector3D`, :obj:`Vector3D`]
           X-axis direction.

       **axis** : :obj:`Union`\[:obj:`~numpy.ndarray`, :obj:`RealSequence`, :obj:`UnitVector3D`, :obj:`Vector3D`]
           Z-axis direction.














   ..
       !! processed by numpydoc !!
   .. py:property:: origin
      :type: ansys.geometry.core.math.Point3D

      
      Origin of the cone.
















      ..
          !! processed by numpydoc !!

   .. py:property:: radius
      :type: pint.Quantity

      
      Radius of the cone.
















      ..
          !! processed by numpydoc !!

   .. py:property:: half_angle
      :type: pint.Quantity

      
      Half angle of the apex.
















      ..
          !! processed by numpydoc !!

   .. py:property:: dir_x
      :type: ansys.geometry.core.math.UnitVector3D

      
      X-direction of the cone.
















      ..
          !! processed by numpydoc !!

   .. py:property:: dir_y
      :type: ansys.geometry.core.math.UnitVector3D

      
      Y-direction of the cone.
















      ..
          !! processed by numpydoc !!

   .. py:property:: dir_z
      :type: ansys.geometry.core.math.UnitVector3D

      
      Z-direction of the cone.
















      ..
          !! processed by numpydoc !!

   .. py:property:: height
      :type: pint.Quantity

      
      Height of the cone.
















      ..
          !! processed by numpydoc !!

   .. py:property:: surface_area
      :type: pint.Quantity

      
      Surface area of the cone.
















      ..
          !! processed by numpydoc !!

   .. py:property:: volume
      :type: pint.Quantity

      
      Volume of the cone.
















      ..
          !! processed by numpydoc !!

   .. py:property:: apex
      :type: ansys.geometry.core.math.Point3D

      
      Apex point of the cone.
















      ..
          !! processed by numpydoc !!

   .. py:property:: apex_param
      :type: ansys.geometry.core.typing.Real

      
      Apex parameter of the cone.
















      ..
          !! processed by numpydoc !!

   .. py:method:: transformed_copy(matrix: ansys.geometry.core.math.Matrix44) -> Cone

      
      Create a transformed copy of the cone based on a transformation matrix.


      :Parameters:

          **matrix** : :obj:`Matrix44`
              The transformation matrix to apply to the cone.

      :Returns:

          :obj:`Cone`
              A new cone that is the transformed copy of the original cone.













      ..
          !! processed by numpydoc !!

   .. py:method:: mirrored_copy() -> Cone

      
      Create a mirrored copy of the cone along the y-axis.



      :Returns:

          :obj:`Cone`
              A new cone that is a mirrored copy of the original cone.













      ..
          !! processed by numpydoc !!

   .. py:method:: __eq__(other: Cone) -> bool

      
      Equals operator for the ``Cone`` class.
















      ..
          !! processed by numpydoc !!

   .. py:method:: evaluate(parameter: ansys.geometry.core.primitives.parameterization.ParamUV) -> ConeEvaluation

      
      Evaluate the cone at the given parameters.


      :Parameters:

          **parameter** : :obj:`ParamUV`
              The parameters (u,v) at which to evaluate the cone.

      :Returns:

          :obj:`ConeEvaluation`
              The resulting evaluation.













      ..
          !! processed by numpydoc !!

   .. py:method:: project_point(point: ansys.geometry.core.math.Point3D) -> ConeEvaluation

      
      Project a point onto the cone and return its ``ConeEvaluation``.


      :Parameters:

          **point** : :obj:`Point3D`
              The point to project onto the cone.

      :Returns:

          :obj:`ConeEvaluation`
              The resulting evaluation.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_u_parameterization() -> ansys.geometry.core.primitives.parameterization.Parameterization

      
      Retrieve the U parameter parametrization conditions.

      The U parameter specifies the clockwise angle around the axis (right hand
      corkscrew law), with a zero parameter at `dir_x`, and a period of 2*pi.


      :Returns:

          :obj:`Parameterization`
              Information about how a cone's u parameter is parameterized.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_v_parameterization() -> ansys.geometry.core.primitives.parameterization.Parameterization

      
      Retrieve the V parameter parametrization conditions.

      The V parameter specifies the distance along the axis, with a zero parameter at
      the XY plane of the Cone.


      :Returns:

          :obj:`Parameterization`
              Information about how a cone's v parameter is parameterized.













      ..
          !! processed by numpydoc !!


.. py:class:: ConeEvaluation(cone: Cone, parameter: ansys.geometry.core.primitives.parameterization.ParamUV)


   Bases: :py:obj:`ansys.geometry.core.primitives.surface_evaluation.SurfaceEvaluation`

   
   Provides ``Cone`` evaluation at certain parameters.


   :Parameters:

       **cone: ~ansys.geometry.core.primitives.cone.Cone**
           The ``Cone`` object to be evaluated.

       **parameter: ParamUV**
           The parameters (u, v) at which the ``Cone`` evaluation is requested.














   ..
       !! processed by numpydoc !!
   .. py:property:: cone
      :type: Cone

      
      The cone being evaluated.
















      ..
          !! processed by numpydoc !!

   .. py:property:: parameter
      :type: ansys.geometry.core.primitives.parameterization.ParamUV

      
      The parameter that the evaluation is based upon.
















      ..
          !! processed by numpydoc !!

   .. py:method:: position() -> ansys.geometry.core.math.Point3D

      
      The position of the evaluation.



      :Returns:

          :obj:`Point3D`
              The point that lies on the cone at this evaluation.













      ..
          !! processed by numpydoc !!

   .. py:method:: normal() -> ansys.geometry.core.math.UnitVector3D

      
      The normal to the surface.



      :Returns:

          :obj:`UnitVector3D`
              The normal unit vector to the cone at this evaluation.













      ..
          !! processed by numpydoc !!

   .. py:method:: u_derivative() -> ansys.geometry.core.math.Vector3D

      
      The first derivative with respect to u.



      :Returns:

          :obj:`Vector3D`
              The first derivative with respect to u.













      ..
          !! processed by numpydoc !!

   .. py:method:: v_derivative() -> ansys.geometry.core.math.Vector3D

      
      The first derivative with respect to v.



      :Returns:

          :obj:`Vector3D`
              The first derivative with respect to v.













      ..
          !! processed by numpydoc !!

   .. py:method:: uu_derivative() -> ansys.geometry.core.math.Vector3D

      
      The second derivative with respect to u.



      :Returns:

          :obj:`Vector3D`
              The second derivative with respect to u.













      ..
          !! processed by numpydoc !!

   .. py:method:: uv_derivative() -> ansys.geometry.core.math.Vector3D

      
      The second derivative with respect to u and v.



      :Returns:

          :obj:`Vector3D`
              The second derivative with respect to u and v.













      ..
          !! processed by numpydoc !!

   .. py:method:: vv_derivative() -> ansys.geometry.core.math.Vector3D

      
      The second derivative with respect to v.



      :Returns:

          :obj:`Vector3D`
              The second derivative with respect to v.













      ..
          !! processed by numpydoc !!

   .. py:method:: min_curvature() -> ansys.geometry.core.typing.Real

      
      The minimum curvature of the cone.



      :Returns:

          :obj:`Real`
              The minimum curvature of the cone.













      ..
          !! processed by numpydoc !!

   .. py:method:: min_curvature_direction() -> ansys.geometry.core.math.UnitVector3D

      
      The minimum curvature direction.



      :Returns:

          :obj:`UnitVector3D`
              The minimum curvature direction.













      ..
          !! processed by numpydoc !!

   .. py:method:: max_curvature() -> ansys.geometry.core.typing.Real

      
      The maximum curvature of the cone.



      :Returns:

          :obj:`Real`
              The maximum curvature of the cone.













      ..
          !! processed by numpydoc !!

   .. py:method:: max_curvature_direction() -> ansys.geometry.core.math.UnitVector3D

      
      The maximum curvature direction.



      :Returns:

          :obj:`UnitVector3D`
              The maximum curvature direction.













      ..
          !! processed by numpydoc !!


