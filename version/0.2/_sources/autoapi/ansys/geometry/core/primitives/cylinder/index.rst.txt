:py:mod:`ansys.geometry.core.primitives.cylinder`
=================================================

.. py:module:: ansys.geometry.core.primitives.cylinder

.. autoapi-nested-parse::

   Provides the ``Cylinder`` class.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ansys.geometry.core.primitives.cylinder.Cylinder
   ansys.geometry.core.primitives.cylinder.CylinderEvaluation




.. py:class:: Cylinder(origin: beartype.typing.Union[numpy.ndarray, ansys.geometry.core.typing.RealSequence, ansys.geometry.core.math.Point3D], radius: beartype.typing.Union[pint.Quantity, ansys.geometry.core.misc.Distance, ansys.geometry.core.typing.Real], reference: beartype.typing.Union[numpy.ndarray, ansys.geometry.core.typing.RealSequence, ansys.geometry.core.math.UnitVector3D, ansys.geometry.core.math.Vector3D] = UNITVECTOR3D_X, axis: beartype.typing.Union[numpy.ndarray, ansys.geometry.core.typing.RealSequence, ansys.geometry.core.math.UnitVector3D, ansys.geometry.core.math.Vector3D] = UNITVECTOR3D_Z)


   
   Provides 3D ``Cylinder`` representation.


   :Parameters:

       **origin** : :obj:`Union`\[:obj:`~numpy.ndarray`, :obj:`RealSequence`, :obj:`Point3D`]
           Origin of the cylinder.

       **radius** : :obj:`Union`\[:obj:`Quantity`, :obj:`Distance`, :obj:`Real`]
           Radius of the cylinder.

       **reference** : :obj:`Union`\[:obj:`~numpy.ndarray`, :obj:`RealSequence`, :obj:`UnitVector3D`, :obj:`Vector3D`]
           X-axis direction.

       **axis** : :obj:`Union`\[:obj:`~numpy.ndarray`, :obj:`RealSequence`, :obj:`UnitVector3D`, :obj:`Vector3D`]
           Z-axis direction.














   ..
       !! processed by numpydoc !!
   .. py:property:: origin
      :type: ansys.geometry.core.math.Point3D

      
      Origin of the cylinder.
















      ..
          !! processed by numpydoc !!

   .. py:property:: radius
      :type: pint.Quantity

      
      Radius of the cylinder.
















      ..
          !! processed by numpydoc !!

   .. py:property:: dir_x
      :type: ansys.geometry.core.math.UnitVector3D

      
      X-direction of the cylinder.
















      ..
          !! processed by numpydoc !!

   .. py:property:: dir_y
      :type: ansys.geometry.core.math.UnitVector3D

      
      Y-direction of the cylinder.
















      ..
          !! processed by numpydoc !!

   .. py:property:: dir_z
      :type: ansys.geometry.core.math.UnitVector3D

      
      Z-direction of the cylinder.
















      ..
          !! processed by numpydoc !!

   .. py:method:: surface_area(height: beartype.typing.Union[pint.Quantity, ansys.geometry.core.misc.Distance, ansys.geometry.core.typing.Real]) -> pint.Quantity

      
      Surface area of the cylinder.


      :Parameters:

          **height** : :obj:`Union`\[:obj:`Quantity`, :obj:`Distance`, :obj:`Real`]
              By nature, a cylinder is infinite. If you want to get the surface area,
              you must bound it by a height. Normally a cylinder surface is not closed
              (does not have "caps" on the ends). This method will assume it is closed
              for the purpose of getting the surface area.

      :Returns:

          :obj:`Quantity`
              The surface area of the temporarily bounded cylinder.













      ..
          !! processed by numpydoc !!

   .. py:method:: volume(height: beartype.typing.Union[pint.Quantity, ansys.geometry.core.misc.Distance, ansys.geometry.core.typing.Real]) -> pint.Quantity

      
      Volume of the cylinder.


      :Parameters:

          **height** : :obj:`Union`\[:obj:`Quantity`, :obj:`Distance`, :obj:`Real`]
              By nature, a cylinder is infinite. If you want to get the volume,
              you must bound it by a height. Normally a cylinder surface is not closed
              (does not have "caps" on the ends). This method will assume it is closed
              for the purpose of getting the volume.

      :Returns:

          :obj:`Quantity`
              The volume of the temporarily bounded cylinder.













      ..
          !! processed by numpydoc !!

   .. py:method:: transformed_copy(matrix: ansys.geometry.core.math.Matrix44) -> Cylinder

      
      Create a transformed copy of the cylinder based on a transformation matrix.


      :Parameters:

          **matrix** : :obj:`Matrix44`
              The transformation matrix to apply to the cylinder.

      :Returns:

          :obj:`Cylinder`
              A new cylinder that is the transformed copy of the original cylinder.













      ..
          !! processed by numpydoc !!

   .. py:method:: mirrored_copy() -> Cylinder

      
      Create a mirrored copy of the cylinder along the y-axis.



      :Returns:

          :obj:`Cylinder`
              A new cylinder that is a mirrored copy of the original cylinder.













      ..
          !! processed by numpydoc !!

   .. py:method:: __eq__(other: Cylinder) -> bool

      
      Equals operator for the ``Cylinder`` class.
















      ..
          !! processed by numpydoc !!

   .. py:method:: evaluate(parameter: ansys.geometry.core.primitives.surface_evaluation.ParamUV) -> CylinderEvaluation

      
      Evaluate the cylinder at the given parameters.


      :Parameters:

          **parameter** : :obj:`ParamUV`
              The parameters (u,v) at which to evaluate the cylinder.

      :Returns:

          :obj:`CylinderEvaluation`
              The resulting evaluation.













      ..
          !! processed by numpydoc !!

   .. py:method:: project_point(point: ansys.geometry.core.math.Point3D) -> CylinderEvaluation

      
      Project a point onto the cylinder and return its ``CylinderEvaluation``.


      :Parameters:

          **point** : :obj:`Point3D`
              The point to project onto the cylinder.

      :Returns:

          :obj:`CylinderEvaluation`
              The resulting evaluation.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_u_parameterization() -> ansys.geometry.core.primitives.parameterization.Parameterization

      
      Retrieve the U parameter parametrization conditions.

      The U parameter specifies the clockwise angle around the axis (right hand
      corkscrew law), with a zero parameter at `dir_x`, and a period of 2*pi.


      :Returns:

          :obj:`Parameterization`
              Information about how a cylinder's u parameter is parameterized.













      ..
          !! processed by numpydoc !!

   .. py:method:: get_v_parameterization() -> ansys.geometry.core.primitives.parameterization.Parameterization

      
      Retrieve the V parameter parametrization conditions.

      The V parameter specifies the distance along the axis, with a zero parameter at
      the XY plane of the Cylinder.


      :Returns:

          :obj:`Parameterization`
              Information about how a cylinders's v parameter is parameterized.













      ..
          !! processed by numpydoc !!


.. py:class:: CylinderEvaluation(cylinder: Cylinder, parameter: ansys.geometry.core.primitives.surface_evaluation.ParamUV)


   Bases: :py:obj:`ansys.geometry.core.primitives.surface_evaluation.SurfaceEvaluation`

   
   Provides ``Cylinder`` evaluation at certain parameters.


   :Parameters:

       **cylinder: ~ansys.geometry.core.primitives.cylinder.Cylinder**
           The ``Cylinder`` object to be evaluated.

       **parameter: ParamUV**
           The parameters (u, v) at which the ``Cylinder`` evaluation is requested.














   ..
       !! processed by numpydoc !!
   .. py:property:: cylinder
      :type: Cylinder

      
      The cylinder being evaluated.
















      ..
          !! processed by numpydoc !!

   .. py:property:: parameter
      :type: ansys.geometry.core.primitives.surface_evaluation.ParamUV

      
      The parameter that the evaluation is based upon.
















      ..
          !! processed by numpydoc !!

   .. py:method:: position() -> ansys.geometry.core.math.Point3D

      
      The position of the evaluation.



      :Returns:

          :obj:`Point3D`
              The point that lies on the cylinder at this evaluation.













      ..
          !! processed by numpydoc !!

   .. py:method:: normal() -> ansys.geometry.core.math.UnitVector3D

      
      The normal to the surface.



      :Returns:

          :obj:`UnitVector3D`
              The normal unit vector to the cylinder at this evaluation.













      ..
          !! processed by numpydoc !!

   .. py:method:: u_derivative() -> ansys.geometry.core.math.Vector3D

      
      The first derivative with respect to u.



      :Returns:

          :obj:`Vector3D`
              The first derivative with respect to u.













      ..
          !! processed by numpydoc !!

   .. py:method:: v_derivative() -> ansys.geometry.core.math.Vector3D

      
      The first derivative with respect to v.



      :Returns:

          :obj:`Vector3D`
              The first derivative with respect to v.













      ..
          !! processed by numpydoc !!

   .. py:method:: uu_derivative() -> ansys.geometry.core.math.Vector3D

      
      The second derivative with respect to u.



      :Returns:

          :obj:`Vector3D`
              The second derivative with respect to u.













      ..
          !! processed by numpydoc !!

   .. py:method:: uv_derivative() -> ansys.geometry.core.math.Vector3D

      
      The second derivative with respect to u and v.



      :Returns:

          :obj:`Vector3D`
              The second derivative with respect to u and v.













      ..
          !! processed by numpydoc !!

   .. py:method:: vv_derivative() -> ansys.geometry.core.math.Vector3D

      
      The second derivative with respect to v.



      :Returns:

          :obj:`Vector3D`
              The second derivative with respect to v.













      ..
          !! processed by numpydoc !!

   .. py:method:: min_curvature() -> ansys.geometry.core.typing.Real

      
      The minimum curvature of the cylinder.



      :Returns:

          :obj:`Real`
              The minimum curvature of the cylinder.













      ..
          !! processed by numpydoc !!

   .. py:method:: min_curvature_direction() -> ansys.geometry.core.math.UnitVector3D

      
      The minimum curvature direction.



      :Returns:

          :obj:`UnitVector3D`
              The minimum curvature direction.













      ..
          !! processed by numpydoc !!

   .. py:method:: max_curvature() -> ansys.geometry.core.typing.Real

      
      The maximum curvature of the cylinder.



      :Returns:

          :obj:`Real`
              The maximum curvature of the cylinder.













      ..
          !! processed by numpydoc !!

   .. py:method:: max_curvature_direction() -> ansys.geometry.core.math.UnitVector3D

      
      The maximum curvature direction.



      :Returns:

          :obj:`UnitVector3D`
              The maximum curvature direction.













      ..
          !! processed by numpydoc !!


