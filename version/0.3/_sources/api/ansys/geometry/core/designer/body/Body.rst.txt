



Body
====

.. py:class:: Body(id, name, parent: ansys.geometry.core.designer.component.Component, template: MasterBody)
   :canonical: ansys.geometry.core.designer.body.Body



Bases: :py:obj:`IBody`

Represents solids and surfaces organized within the design assembly.



























Overview
--------
.. py:currentmodule:: Body
.. tab-set::



    .. tab-item:: Methods

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~reset_tessellation_cache`
            - Decorate ``Body`` methods that require a tessellation cache update.
          * - :py:attr:`~assign_material`
            - Assign a material against the design in the active Geometry service instance.
          * - :py:attr:`~add_midsurface_thickness`
            - Add a mid-surface thickness to a surface body.
          * - :py:attr:`~add_midsurface_offset`
            - Add a mid-surface offset to a surface body.
          * - :py:attr:`~imprint_curves`
            - Imprint all specified geometries onto specified faces of the body.
          * - :py:attr:`~project_curves`
            - Project all specified geometries onto the body.
          * - :py:attr:`~imprint_projected_curves`
            - Project and imprint specified geometries onto the body.
          * - :py:attr:`~translate`
            - Translate the geometry body in the specified direction by a given distance.
          * - :py:attr:`~copy`
            - Create a copy of the body and place it under the specified parent component.
          * - :py:attr:`~tessellate`
            - Tessellate the body and return the geometry as triangles.
          * - :py:attr:`~plot`
            - Plot the body.
          * - :py:attr:`~intersect`
            - Intersect two bodies.
          * - :py:attr:`~subtract`
            - Subtract two bodies.
          * - :py:attr:`~unite`
            - Unite two bodies.


    .. tab-item:: Properties

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~id`
            - Get the ID of the body as a string.
          * - :py:attr:`~name`
            - Get the name of the body.
          * - :py:attr:`~parent`
            - 
          * - :py:attr:`~faces`
            - Get a list of all faces within the body.
          * - :py:attr:`~edges`
            - Get a list of all edges within the body.
          * - :py:attr:`~is_alive`
            - Check if the body is still alive and has not been deleted.
          * - :py:attr:`~is_surface`
            - Check if the body is a planar body.
          * - :py:attr:`~surface_thickness`
            - Get the surface thickness of a surface body.
          * - :py:attr:`~surface_offset`
            - Get the surface offset type of a surface body.
          * - :py:attr:`~volume`
            - Calculate the volume of the body.




    .. tab-item:: Special methods

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__repr__`
            - Represent the ``Body`` as a string.



Import detail
-------------

.. code-block:: python

    from ansys.geometry.core.designer.body import Body


Property detail
---------------
.. py:property:: id
   :canonical: ansys.geometry.core.designer.body.Body.id
   :type: str


   
   Get the ID of the body as a string.
















   ..
       !! processed by numpydoc !!

.. py:property:: name
   :canonical: ansys.geometry.core.designer.body.Body.name
   :type: str


   
   Get the name of the body.
















   ..
       !! processed by numpydoc !!

.. py:property:: parent
   :canonical: ansys.geometry.core.designer.body.Body.parent
   :type: Component



.. py:property:: faces
   :canonical: ansys.geometry.core.designer.body.Body.faces
   :type: beartype.typing.List[ansys.geometry.core.designer.face.Face]


   
   Get a list of all faces within the body.



   :Returns:

       :obj:`List`\[:obj:`Face`]
           ..













   ..
       !! processed by numpydoc !!

.. py:property:: edges
   :canonical: ansys.geometry.core.designer.body.Body.edges
   :type: beartype.typing.List[ansys.geometry.core.designer.edge.Edge]


   
   Get a list of all edges within the body.



   :Returns:

       :obj:`List`\[:obj:`Edge`]
           ..













   ..
       !! processed by numpydoc !!

.. py:property:: is_alive
   :canonical: ansys.geometry.core.designer.body.Body.is_alive
   :type: bool


   
   Check if the body is still alive and has not been deleted.
















   ..
       !! processed by numpydoc !!

.. py:property:: is_surface
   :canonical: ansys.geometry.core.designer.body.Body.is_surface
   :type: bool


   
   Check if the body is a planar body.
















   ..
       !! processed by numpydoc !!

.. py:property:: surface_thickness
   :canonical: ansys.geometry.core.designer.body.Body.surface_thickness
   :type: beartype.typing.Union[pint.Quantity, None]


   
   Get the surface thickness of a surface body.











   .. rubric:: Notes

   This method is only for surface-type bodies that have been assigned a surface thickness.





   ..
       !! processed by numpydoc !!

.. py:property:: surface_offset
   :canonical: ansys.geometry.core.designer.body.Body.surface_offset
   :type: beartype.typing.Union[MidSurfaceOffsetType, None]


   
   Get the surface offset type of a surface body.











   .. rubric:: Notes

   This method is only for surface-type bodies that have been assigned a surface offset.





   ..
       !! processed by numpydoc !!

.. py:property:: volume
   :canonical: ansys.geometry.core.designer.body.Body.volume
   :type: pint.Quantity


   
   Calculate the volume of the body.











   .. rubric:: Notes

   When dealing with a planar surface, a value of ``0`` is returned as a volume.





   ..
       !! processed by numpydoc !!




Method detail
-------------


.. py:method:: reset_tessellation_cache()

   
   Decorate ``Body`` methods that require a tessellation cache update.


   :Parameters:

       **func** : :obj:`method`
           Method to call.

   :Returns:

       :obj:`Any`
           Output of the method, if any.













   ..
       !! processed by numpydoc !!



.. py:method:: assign_material(material: ansys.geometry.core.materials.material.Material) -> None

   
   Assign a material against the design in the active Geometry service instance.


   :Parameters:

       **material** : :obj:`Material`
           Source material data.














   ..
       !! processed by numpydoc !!



.. py:method:: add_midsurface_thickness(thickness: pint.Quantity) -> None

   
   Add a mid-surface thickness to a surface body.


   :Parameters:

       **thickness** : :obj:`~pint.Quantity`
           Thickness to assign.









   .. rubric:: Notes

   Only surface bodies are eligible for mid-surface thickness assignment.





   ..
       !! processed by numpydoc !!



.. py:method:: add_midsurface_offset(offset: MidSurfaceOffsetType) -> None

   
   Add a mid-surface offset to a surface body.


   :Parameters:

       **offset_type** : :obj:`MidSurfaceOffsetType`
           Surface offset to assign.









   .. rubric:: Notes

   Only surface bodies are eligible for mid-surface offset assignment.





   ..
       !! processed by numpydoc !!



.. py:method:: imprint_curves(faces: beartype.typing.List[ansys.geometry.core.designer.face.Face], sketch: ansys.geometry.core.sketch.sketch.Sketch) -> beartype.typing.Tuple[beartype.typing.List[ansys.geometry.core.designer.edge.Edge], beartype.typing.List[ansys.geometry.core.designer.face.Face]]

   
   Imprint all specified geometries onto specified faces of the body.


   :Parameters:

       **faces: List[Face]**
           List of faces to imprint the curves of the sketch onto.

       **sketch: Sketch**
           All curves to imprint on the faces.

   :Returns:

       :obj:`Tuple`\[:obj:`List`\[:obj:`Edge`], :obj:`List`\[:obj:`Face`]]
           All impacted edges and faces from the imprint operation.













   ..
       !! processed by numpydoc !!



.. py:method:: project_curves(direction: ansys.geometry.core.math.vector.UnitVector3D, sketch: ansys.geometry.core.sketch.sketch.Sketch, closest_face: bool, only_one_curve: beartype.typing.Optional[bool] = False) -> beartype.typing.List[ansys.geometry.core.designer.face.Face]

   
   Project all specified geometries onto the body.


   :Parameters:

       **direction: UnitVector3D**
           Direction of the projection.

       **sketch: Sketch**
           All curves to project on the body.

       **closest_face: bool**
           Whether to target the closest face with the projection.

       **only_one_curve: bool, default: False**
           Whether to project only one curve of the entire sketch. When
           ``True``, only one curve is projected.

   :Returns:

       :obj:`List`\[:obj:`Face`]
           All faces from the project curves operation.








   .. rubric:: Notes

   The ``only_one_curve`` parameter allows you to optimize the server call because
   projecting curves is an expensive operation. This reduces the workload on the
   server side.





   ..
       !! processed by numpydoc !!



.. py:method:: imprint_projected_curves(direction: ansys.geometry.core.math.vector.UnitVector3D, sketch: ansys.geometry.core.sketch.sketch.Sketch, closest_face: bool, only_one_curve: beartype.typing.Optional[bool] = False) -> beartype.typing.List[ansys.geometry.core.designer.face.Face]

   
   Project and imprint specified geometries onto the body.

   This method combines the ``project_curves()`` and ``imprint_curves()`` method into
   one method. It has higher performance than calling them back-to-back when dealing
   with many curves. Because it is a specialized function, this method only returns
   the faces (and not the edges) from the imprint operation.

   :Parameters:

       **direction: UnitVector3D**
           Direction of the projection.

       **sketch: Sketch**
           All curves to project on the body.

       **closest_face: bool**
           Whether to target the closest face with the projection.

       **only_one_curve: bool, default: False**
           Whether to project only one curve of the entire sketch. When
           ``True``, only one curve is projected.

   :Returns:

       :obj:`List`\[:obj:`Face`]
           All imprinted faces from the operation.








   .. rubric:: Notes

   The ``only_one_curve`` parameter allows you to optimize the server call because
   projecting curves is an expensive operation. This reduces the workload on the
   server side.





   ..
       !! processed by numpydoc !!



.. py:method:: translate(direction: ansys.geometry.core.math.vector.UnitVector3D, distance: beartype.typing.Union[pint.Quantity, ansys.geometry.core.misc.measurements.Distance, ansys.geometry.core.typing.Real]) -> None

   
   Translate the geometry body in the specified direction by a given distance.


   :Parameters:

       **direction: UnitVector3D**
           Direction of the translation.

       **distance: Union[~pint.Quantity, Distance, Real]**
           Distance (magnitude) of the translation.

   :Returns:

       :data:`python:None`
           ..













   ..
       !! processed by numpydoc !!



.. py:method:: copy(parent: ansys.geometry.core.designer.component.Component, name: str = None) -> Body

   
   Create a copy of the body and place it under the specified parent component.


   :Parameters:

       **parent: Component**
           Parent component to place the new body under within the design assembly.

       **name: str**
           Name to give the new body.

   :Returns:

       :obj:`Body`
           Copy of the body.













   ..
       !! processed by numpydoc !!



.. py:method:: tessellate(merge: beartype.typing.Optional[bool] = False) -> beartype.typing.Union[pyvista.PolyData, pyvista.MultiBlock]

   
   Tessellate the body and return the geometry as triangles.


   :Parameters:

       **merge** : :ref:`bool <python:bltin-boolean-values>`, default: :data:`python:False`
           Whether to merge the body into a single mesh. When ``False`` (default), the
           number of triangles are preserved and only the topology is merged.
           When ``True``, the individual faces of the tessellation are merged.

   :Returns:

       :obj:`~pyvista.PolyData`, :obj:`~pyvista.MultiBlock`
           Merged :class:`pyvista.PolyData` if ``merge=True`` or a composite dataset.










   .. rubric:: Examples

   Extrude a box centered at the origin to create a rectangular body and
   tessellate it:

   >>> from ansys.geometry.core.misc.units import UNITS as u
   >>> from ansys.geometry.core.sketch import Sketch
   >>> from ansys.geometry.core.math import Plane, Point2D, Point3D, UnitVector3D
   >>> from ansys.geometry.core import Modeler
   >>> modeler = Modeler()
   >>> origin = Point3D([0, 0, 0])
   >>> plane = Plane(origin, direction_x=[1, 0, 0], direction_y=[0, 0, 1])
   >>> sketch = Sketch(plane)
   >>> box = sketch.box(Point2D([2, 0]), 4, 4)
   >>> design = modeler.create_design("my-design")
   >>> my_comp = design.add_component("my-comp")
   >>> body = my_comp.extrude_sketch("my-sketch", sketch, 1 * u.m)
   >>> blocks = body.tessellate()
   >>> blocks
   >>> MultiBlock (0x7f94ec757460)
        N Blocks:  6
        X Bounds:  0.000, 4.000
        Y Bounds:  -1.000, 0.000
        Z Bounds:  -0.500, 4.500

   Merge the body:

   >>> mesh = body.tessellate(merge=True)
   >>> mesh
   PolyData (0x7f94ec75f3a0)
     N Cells:      12
     N Points:     24
     X Bounds:     0.000e+00, 4.000e+00
     Y Bounds:     -1.000e+00, 0.000e+00
     Z Bounds:     -5.000e-01, 4.500e+00
     N Arrays:     0



   ..
       !! processed by numpydoc !!



.. py:method:: plot(merge: bool = False, screenshot: beartype.typing.Optional[str] = None, use_trame: beartype.typing.Optional[bool] = None, **plotting_options: beartype.typing.Optional[dict]) -> None

   
   Plot the body.


   :Parameters:

       **merge** : :ref:`bool <python:bltin-boolean-values>`, default: :data:`python:False`
           Whether to merge the body into a single mesh. When ``False`` (default),
           the number of triangles are preserved and only the topology is merged.
           When ``True``, the individual faces of the tessellation are merged.

       **screenshot** : :class:`python:str`, default: :data:`python:None`
           Path for saving a screenshot of the image that is being represented.

       **use_trame** : :ref:`bool <python:bltin-boolean-values>`, default: :data:`python:None`
           Whether to enable the use of `trame <https://kitware.github.io/trame/index.html>`_.
           The default is ``None``, in which case the ``USE_TRAME`` global setting
           is used.

       **\*\*plotting_options** : :class:`python:dict`, default: :data:`python:None`
           Keyword arguments for plotting. For allowable keyword arguments, see the
           :meth:`Plotter.add_mesh <pyvista.Plotter.add_mesh>` method.











   .. rubric:: Examples

   Extrude a box centered at the origin to create rectangular body and
   plot it:

   >>> from ansys.geometry.core.misc.units import UNITS as u
   >>> from ansys.geometry.core.sketch import Sketch
   >>> from ansys.geometry.core.math import Plane, Point2D, Point3D, UnitVector3D
   >>> from ansys.geometry.core import Modeler
   >>> modeler = Modeler()
   >>> origin = Point3D([0, 0, 0])
   >>> plane = Plane(origin, direction_x=[1, 0, 0], direction_y=[0, 0, 1])
   >>> sketch = Sketch(plane)
   >>> box = sketch.box(Point2D([2, 0]), 4, 4)
   >>> design = modeler.create_design("my-design")
   >>> mycomp = design.add_component("my-comp")
   >>> body = mycomp.extrude_sketch("my-sketch", sketch, 1 * u.m)
   >>> body.plot()

   Plot the body and color each face individually:

   >>> body.plot(multi_colors=True)



   ..
       !! processed by numpydoc !!



.. py:method:: intersect(other: Body) -> None

   
   Intersect two bodies.


   :Parameters:

       **other** : :obj:`Body`
           Body to intersect with.





   :Raises:

       :obj:`ValueError`
           If the bodies do not intersect.




   .. rubric:: Notes

   The ``self`` parameter is directly modified with the result, and
   the ``other`` parameter is consumed. Thus, it is important to make
   copies if needed.





   ..
       !! processed by numpydoc !!



.. py:method:: subtract(other: Body) -> None

   
   Subtract two bodies.


   :Parameters:

       **other** : :obj:`Body`
           Body to subtract from the ``self`` parameter.





   :Raises:

       :obj:`ValueError`
           If the subtraction results in an empty (complete) subtraction.




   .. rubric:: Notes

   The ``self`` parameter is directly modified with the result, and
   the ``other`` parameter is consumed. Thus, it is important to make
   copies if needed.





   ..
       !! processed by numpydoc !!



.. py:method:: unite(other: Body) -> None

   
   Unite two bodies.


   :Parameters:

       **other** : :obj:`Body`
           Body to unite with the ``self`` parameter.









   .. rubric:: Notes

   The ``self`` parameter is directly modified with the result, and
   the ``other`` parameter is consumed. Thus, it is important to make
   copies if needed.





   ..
       !! processed by numpydoc !!



.. py:method:: __repr__() -> str

   
   Represent the ``Body`` as a string.
















   ..
       !! processed by numpydoc !!


